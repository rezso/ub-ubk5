diff -Naur a/data/test.schema.json b/data/test.schema.json
--- a/data/test.schema.json	2023-08-07 22:40:24.000000000 +0200
+++ b/data/test.schema.json	2023-09-22 23:22:26.570546086 +0200
@@ -26,6 +26,7 @@
               "exe",
               "shared_lib",
               "python_lib",
+              "python_bytecode",
               "pdb",
               "implib",
               "py_implib",
diff -Naur a/mesonbuild/backend/ninjabackend.py b/mesonbuild/backend/ninjabackend.py
--- a/mesonbuild/backend/ninjabackend.py	2023-08-07 22:40:24.000000000 +0200
+++ b/mesonbuild/backend/ninjabackend.py	2023-09-22 23:33:07.184890376 +0200
@@ -1687,8 +1687,6 @@
             # Without this, it will write it inside c_out_dir
             args += ['--vapi', os.path.join('..', target.vala_vapi)]
             valac_outputs.append(vapiname)
-            target.outputs += [target.vala_header, target.vala_vapi]
-            target.install_tag += ['devel', 'devel']
             # Install header and vapi to default locations if user requests this
             if len(target.install_dir) > 1 and target.install_dir[1] is True:
                 target.install_dir[1] = self.environment.get_includedir()
@@ -1699,8 +1697,6 @@
                 girname = os.path.join(self.get_target_dir(target), target.vala_gir)
                 args += ['--gir', os.path.join('..', target.vala_gir)]
                 valac_outputs.append(girname)
-                target.outputs.append(target.vala_gir)
-                target.install_tag.append('devel')
                 # Install GIR to default location if requested by user
                 if len(target.install_dir) > 3 and target.install_dir[3] is True:
                     target.install_dir[3] = os.path.join(self.environment.get_datadir(), 'gir-1.0')
diff -Naur a/mesonbuild/build.py b/mesonbuild/build.py
--- a/mesonbuild/build.py	2023-08-07 22:40:24.000000000 +0200
+++ b/mesonbuild/build.py	2023-09-22 23:33:07.188890391 +0200
@@ -788,6 +788,12 @@
             # relocation-model=pic is rustc's default and Meson does not
             # currently have a way to disable PIC.
             self.pic = True
+        if 'vala' in self.compilers and self.is_linkable_target():
+            self.outputs += [self.vala_header, self.vala_vapi]
+            self.install_tag += ['devel', 'devel']
+            if self.vala_gir:
+                self.outputs.append(self.vala_gir)
+                self.install_tag.append('devel')
 
     def __repr__(self):
         repr_str = "<{0} {1}: {2}>"
@@ -1962,7 +1968,7 @@
         self.filename = self.name
         if self.suffix:
             self.filename += '.' + self.suffix
-        self.outputs = [self.filename]
+        self.outputs[0] = self.filename
 
         # The import library this target will generate
         self.import_filename = None
@@ -2111,7 +2117,7 @@
             else:
                 self.suffix = 'a'
         self.filename = self.prefix + self.name + '.' + self.suffix
-        self.outputs = [self.filename]
+        self.outputs[0] = self.filename
 
     def get_link_deps_mapping(self, prefix: str) -> T.Mapping[str, str]:
         return {}
diff -Naur a/run_project_tests.py b/run_project_tests.py
--- a/run_project_tests.py	2023-08-07 22:40:24.000000000 +0200
+++ b/run_project_tests.py	2023-09-22 23:27:53.435754158 +0200
@@ -40,6 +40,7 @@
 import typing as T
 import xml.etree.ElementTree as ET
 import collections
+import importlib.util
 
 from mesonbuild import build
 from mesonbuild import environment
@@ -167,7 +168,7 @@
             return None
 
         # Handle the different types
-        if self.typ in {'py_implib', 'python_lib', 'python_file'}:
+        if self.typ in {'py_implib', 'python_lib', 'python_file', 'python_bytecode'}:
             val = p.as_posix()
             val = val.replace('@PYTHON_PLATLIB@', python.platlib)
             val = val.replace('@PYTHON_PURELIB@', python.purelib)
@@ -184,6 +185,8 @@
                     return p.with_suffix('.dll.a')
                 else:
                     return None
+            if self.typ == 'python_bytecode':
+                return p.parent / importlib.util.cache_from_source(p.name)
         elif self.typ in {'file', 'dir'}:
             return p
         elif self.typ == 'shared_lib':
diff -Naur "a/test cases/vala/7 shared library/lib/meson.build" "b/test cases/vala/7 shared library/lib/meson.build"
--- "a/test cases/vala/7 shared library/lib/meson.build"	2023-08-07 22:40:24.000000000 +0200
+++ "b/test cases/vala/7 shared library/lib/meson.build"	2023-09-22 23:29:33.276115951 +0200
@@ -33,3 +33,8 @@
   dependencies : valadeps,
   install : true,
   install_dir : [false, false, join_paths(get_option('datadir'), 'vala', 'vapi')])
+
+# Regression test: Vala libraries were broken when also installing python modules.
+# https://gitlab.gnome.org/GNOME/gitg/-/issues/412
+python = import('python').find_installation()
+python.install_sources('source.py')
diff -Naur "a/test cases/vala/7 shared library/test.json" "b/test cases/vala/7 shared library/test.json"
--- "a/test cases/vala/7 shared library/test.json"	2023-08-07 22:40:24.000000000 +0200
+++ "b/test cases/vala/7 shared library/test.json"	2023-09-22 23:31:53.292622967 +0200
@@ -9,6 +9,8 @@
     {"type": "file", "file": "usr/include/installed_vala_onlyh.h"},
     {"type": "file", "file": "usr/share/vala/vapi/installed_vala_all.vapi"},
     {"type": "file", "file": "usr/share/vala-1.0/vapi/installed_vala_all_nolib.vapi"},
-    {"type": "file", "file": "usr/share/vala/vapi/installed_vala_onlyvapi.vapi"}
+    {"type": "file", "file": "usr/share/vala/vapi/installed_vala_onlyvapi.vapi"},
+    {"type": "python_file", "file": "usr/@PYTHON_PURELIB@/source.py"},
+    {"type": "python_bytecode", "file": "usr/@PYTHON_PURELIB@/source.py"}
   ]
 }
