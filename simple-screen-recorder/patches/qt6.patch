https://github.com/MaartenBaert/ssr/pull/1052
diff -Naur a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	2021-05-24 20:56:32.000000000 +0200
+++ b/CMakeLists.txt	2025-01-07 00:50:48.779038960 +0100
@@ -24,7 +24,6 @@
 option(WITH_ALSA "Build with ALSA support." TRUE)
 option(WITH_PULSEAUDIO "Build with PulseAudio support." TRUE)
 option(WITH_JACK "Build with JACK support." TRUE)
-option(WITH_QT5 "Build with Qt5 (instead of Qt4)." FALSE)
 option(WITH_SIMPLESCREENRECORDER "Build the 'simplescreenrecorder' executable." TRUE)
 option(WITH_GLINJECT "Build the 'libssr-glinject' library. Required for OpenGL recording." TRUE)
 
diff -Naur a/.gitignore b/.gitignore
--- a/.gitignore	2021-05-24 20:56:32.000000000 +0200
+++ b/.gitignore	2025-01-07 00:50:48.779038960 +0100
@@ -25,3 +25,6 @@
 src/simplescreenrecorder
 
 private-*
+
+build
+.vscode
diff -Naur a/src/CMakeLists.txt b/src/CMakeLists.txt
--- a/src/CMakeLists.txt	2021-05-24 20:56:32.000000000 +0200
+++ b/src/CMakeLists.txt	2025-01-07 00:54:06.207765588 +0100
@@ -8,6 +8,7 @@
 find_package(AVUtil REQUIRED)
 find_package(SWScale REQUIRED)
 find_package(X11 REQUIRED)
+find_package(Qt6 6.2 COMPONENTS Core Gui Widgets REQUIRED)
 
 if(WITH_V4L2)
 	find_package(V4L2 REQUIRED)
@@ -22,12 +23,6 @@
 	find_package(Jack REQUIRED)
 endif()
 
-if(WITH_QT5)
-	find_package(Qt5 5.7 COMPONENTS Core Gui Widgets X11Extras REQUIRED)
-else()
-	find_package(Qt4 4.8 COMPONENTS QtGui REQUIRED)
-endif()
-
 set(sources
 	AV/Input/ALSAInput.cpp
 	AV/Input/ALSAInput.h
@@ -96,8 +91,6 @@
 	common/NVidia.cpp
 	common/NVidia.h
 	common/QueueBuffer.h
-	common/ScreenScaling.cpp
-	common/ScreenScaling.h
 	common/TempBuffer.h
 	GUI/AudioPreviewer.cpp
 	GUI/AudioPreviewer.h
@@ -162,20 +155,12 @@
 	../data/resources/resources.qrc
 )
 
-if(WITH_QT5)
-	qt5_add_resources(res_output ${res_input})
-	set(QT_LIBS
-		Qt5::Core
-		Qt5::Gui
-		Qt5::Widgets
-		Qt5::X11Extras
-	)
-else()
-	qt4_add_resources(res_output ${res_input})
-	set(QT_LIBS
-		Qt4::QtGui
-	)
-endif()
+qt6_add_resources(res_output ${res_input})
+set(QT_LIBS
+	Qt6::Core
+	Qt6::Gui
+	Qt6::Widgets
+)
 
 set_property(SOURCE ${res_output} PROPERTY SKIP_AUTOMOC ON)
 
diff -Naur a/src/common/ScreenScaling.cpp b/src/common/ScreenScaling.cpp
--- a/src/common/ScreenScaling.cpp	2021-05-24 20:56:32.000000000 +0200
+++ b/src/common/ScreenScaling.cpp	1970-01-01 01:00:00.000000000 +0100
@@ -1,122 +0,0 @@
-/*
-Copyright (c) 2012-2020 Maarten Baert <maarten-baert@hotmail.com>
-
-This file is part of SimpleScreenRecorder.
-
-SimpleScreenRecorder is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-SimpleScreenRecorder is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with SimpleScreenRecorder.  If not, see <http://www.gnu.org/licenses/>.
-*/
-
-#include "ScreenScaling.h"
-
-#include "Logger.h"
-
-bool g_disable_screen_scaling = false;
-
-#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
-
-static const char legacyDevicePixelEnvVar[] = "QT_DEVICE_PIXEL_RATIO";
-static const char scaleFactorEnvVar[] = "QT_SCALE_FACTOR";
-static const char screenFactorsEnvVar[] = "QT_SCREEN_SCALE_FACTORS";
-
-static inline double GetGlobalScaleFactor() {
-	// This code was mostly copied from QHighDpiScaling.
-	if(qEnvironmentVariableIsSet(scaleFactorEnvVar)) {
-		bool ok;
-		double f = qgetenv(scaleFactorEnvVar).toDouble(&ok);
-		if(ok && f > 0) {
-			return f;
-		}
-	} else {
-		if(qEnvironmentVariableIsSet(legacyDevicePixelEnvVar)) {
-			int dpr = qEnvironmentVariableIntValue(legacyDevicePixelEnvVar);
-			if(dpr > 0)
-				return (double) dpr;
-		}
-	}
-	return 1.0;
-}
-
-std::vector<double> GetScreenScaleFactors() {
-	std::vector<double> factors;
-	// This code was mostly copied from QHighDpiScaling.
-	if(qEnvironmentVariableIsSet(screenFactorsEnvVar)) {
-		int i = 0;
-		const auto specs = qgetenv(screenFactorsEnvVar).split(';');
-		for(const QByteArray &spec : specs) {
-			int equalsPos = spec.lastIndexOf('=');
-			double factor = 0;
-			bool ok;
-			if(equalsPos > 0) {
-				QByteArray f = spec.mid(equalsPos + 1);
-				factor = f.toDouble(&ok);
-			} else {
-				factor = spec.toDouble(&ok);
-			}
-			if(ok)
-				factors.push_back(factor);
-			++i;
-		}
-	}
-	return factors;
-}
-
-#endif
-
-void ScreenScalingFix() {
-
-	// Workarounds for broken screen scaling. SSR tries to support screen scaling, but the Qt implementation is
-	// somewhat broken, especially for non-integer scale factors. So when we detect that a fractional screen scale
-	// factor is being used, we forcibly disable it. The Qt code that determines the scale factors is located in the
-	// (undocumented) QHighDpiScaling class, we replicate the same logic here to detect potential problems.
-
-#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
-
-	// Check whether the global scale factor is fractional.
-	double global_factor = GetGlobalScaleFactor();
-	if(!qFuzzyCompare(global_factor, round(global_factor)))
-		g_disable_screen_scaling = true;
-
-	// Check whether any of the screen scale factors are fractional.
-	std::vector<double> screen_factors = GetScreenScaleFactors();
-	for(double factor : screen_factors) {
-		if(!qFuzzyCompare(factor, round(factor)))
-			g_disable_screen_scaling = true;
-	}
-
-	// Disable screen scaling if any fractional factor was detected.
-	if(g_disable_screen_scaling) {
-		qunsetenv(legacyDevicePixelEnvVar);
-		qunsetenv(scaleFactorEnvVar);
-		qunsetenv(screenFactorsEnvVar);
-		QCoreApplication::setAttribute(Qt::AA_DisableHighDpiScaling);
-	}
-
-	// Qt 5.14 introduces an additional automatic scaling mechanism based on system settings or the DPI of the monitor,
-	// but luckily this mechanism has an option to round the detected scale factor to the nearest integer.
-#if QT_VERSION >= QT_VERSION_CHECK(5, 14, 0)
-	QGuiApplication::setHighDpiScaleFactorRoundingPolicy(Qt::HighDpiScaleFactorRoundingPolicy::RoundPreferFloor);
-#endif
-
-	// We want high-DPI pixmaps in all cases.
-	QCoreApplication::setAttribute(Qt::AA_UseHighDpiPixmaps);
-
-#endif
-}
-
-void ScreenScalingMessage() {
-
-	if(g_disable_screen_scaling)
-		Logger::LogInfo("[ScreenScaling] " + Logger::tr("Detected fractional screen scale factor, scaling was disabled."));
-
-}
diff -Naur a/src/common/ScreenScaling.h b/src/common/ScreenScaling.h
--- a/src/common/ScreenScaling.h	2021-05-24 20:56:32.000000000 +0200
+++ b/src/common/ScreenScaling.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,24 +0,0 @@
-/*
-Copyright (c) 2012-2020 Maarten Baert <maarten-baert@hotmail.com>
-
-This file is part of SimpleScreenRecorder.
-
-SimpleScreenRecorder is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-SimpleScreenRecorder is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with SimpleScreenRecorder.  If not, see <http://www.gnu.org/licenses/>.
-*/
-
-#pragma once
-#include "Global.h"
-
-void ScreenScalingFix();
-void ScreenScalingMessage();
diff -Naur a/src/Global.h b/src/Global.h
--- a/src/Global.h	2025-01-06 23:48:30.319234915 +0100
+++ b/src/Global.h	2025-01-07 00:54:47.111913711 +0100
@@ -22,15 +22,14 @@
 
 #include <QtGui>
 
-#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
-
 #include <QProcess>
 #include <QTimer>
 
+#include <QGuiApplication>
+
 #include <QAction>
 #include <QApplication>
 #include <QDesktopServices>
-#include <QDesktopWidget>
 #include <QDialogButtonBox>
 #include <QFileDialog>
 #include <QInputDialog>
@@ -60,8 +59,6 @@
 #include <QStackedLayout>
 #include <QVBoxLayout>
 
-#endif
-
 #include <cassert>
 #include <cstdio>
 #include <cstdlib>
@@ -92,7 +89,6 @@
 #include <thread>
 #include <vector>
 
-#include <QX11Info>
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
 #include <X11/extensions/Xfixes.h>
@@ -102,47 +98,22 @@
 #include <X11/keysym.h>
 #include <X11/keysymdef.h>
 
-// replacement for Qt::WindowTransparentForInput.
-#if QT_VERSION < QT_VERSION_CHECK(5, 0, 0)
-#include <X11/extensions/shape.h>
-#endif
-
-// replacement for QX11Info::isPlatformX11()
 inline bool IsPlatformX11() {
-#if QT_VERSION >= QT_VERSION_CHECK(5, 2, 0)
-	if(!QX11Info::isPlatformX11())
-		return false;
-#endif
-	char *v = getenv("XDG_SESSION_TYPE");
-	if(v != NULL) {
-		if(strcasecmp(v, "x11") == 0)
-			return true;
-		if(strcasecmp(v, "wayland") == 0 || strcasecmp(v, "mir") == 0)
-			return false;
+	if (auto *x11Application = qGuiApp->nativeInterface<QNativeInterface::QX11Application>()) {
+		return true;
 	}
-	char *d = getenv("DISPLAY");
-	return (d != NULL);
+    return false;
 }
 
-// replacement for QFontMetrics::width()
 inline int GetTextWidth(const QFontMetrics& font, const QString& str) {
-#if QT_VERSION >= QT_VERSION_CHECK(5, 11, 0)
 	return font.horizontalAdvance(str);
-#else
-	return QFontMetrics(font).width(str);
-#endif
 }
 inline int GetTextWidth(const QFont& font, const QString& str) {
 	return GetTextWidth(QFontMetrics(font), str);
 }
 
-// replacement for QString::split() with QString::SkipEmptyParts
 inline QStringList SplitSkipEmptyParts(const QString& str, QChar sep) {
-#if QT_VERSION >= QT_VERSION_CHECK(5, 14, 0)
 	return str.split(sep, Qt::SkipEmptyParts);
-#else
-	return str.split(sep, QString::SkipEmptyParts);
-#endif
 }
 
 // undefine problematic Xlib macros
diff -Naur a/src/GUI/DialogRecordSchedule.cpp b/src/GUI/DialogRecordSchedule.cpp
--- a/src/GUI/DialogRecordSchedule.cpp	2021-05-24 20:56:32.000000000 +0200
+++ b/src/GUI/DialogRecordSchedule.cpp	2025-01-07 00:50:48.779038960 +0100
@@ -55,7 +55,7 @@
 	}
 
 	QHBoxLayout *layout = new QHBoxLayout(this);
-	layout->setMargin(5);
+	layout->setContentsMargins(5, 5, 5, 5);
 	layout->addWidget(label_time);
 	layout->addWidget(m_datetimeedit_time);
 	layout->addSpacing(10);
diff -Naur a/src/GUI/MainWindow.cpp b/src/GUI/MainWindow.cpp
--- a/src/GUI/MainWindow.cpp	2021-05-24 20:56:32.000000000 +0200
+++ b/src/GUI/MainWindow.cpp	2025-01-07 00:57:26.716542759 +0100
@@ -111,15 +111,11 @@
 
 	// change minimum size based on screen resolution
 	QSize preferred_size = minimumSizeHint() + QSize(style()->pixelMetric(QStyle::PM_ScrollBarExtent), 0);
-#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
 	QSize available_size(0, 0);
 	for(QScreen *screen : QApplication::screens()) {
 		QSize size = screen->availableGeometry().size() - QSize(80, 80);
 		available_size = (available_size.isNull())? size : available_size.boundedTo(size);
 	}
-#else
-	QSize available_size = QApplication::desktop()->availableGeometry().size() - QSize(80, 80);
-#endif
 	//qDebug() << preferred_size << available_size;
 	if(!available_size.isNull())
 		setMinimumSize(preferred_size.boundedTo(available_size));
diff -Naur a/src/GUI/PageInput.cpp b/src/GUI/PageInput.cpp
--- a/src/GUI/PageInput.cpp	2021-05-24 20:56:32.000000000 +0200
+++ b/src/GUI/PageInput.cpp	2025-01-07 00:58:14.844860509 +0100
@@ -52,17 +52,11 @@
 
 static std::vector<QRect> GetScreenGeometries() {
 	std::vector<QRect> screen_geometries;
-#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
 	for(QScreen *screen :  QApplication::screens()) {
 		QRect geometry = screen->geometry();
 		qreal ratio = screen->devicePixelRatio();
 		screen_geometries.emplace_back(geometry.x(), geometry.y(), lrint((qreal) geometry.width() * ratio), lrint((qreal) geometry.height() * ratio));
 	}
-#else
-	for(int i = 0; i < QApplication::desktop()->screenCount(); ++i) {
-		screen_geometries.push_back(QApplication::desktop()->screenGeometry(i));
-	}
-#endif
 	return screen_geometries;
 }
 
@@ -75,20 +69,26 @@
 }
 
 static QPoint GetMousePhysicalCoordinates() {
-	if(IsPlatformX11()) {
-		Window root, child;
-		int root_x, root_y;
-		int win_x, win_y;
-		unsigned int mask_return;
-		XQueryPointer(QX11Info::display(), QX11Info::appRootWindow(), &root, &child, &root_x, &root_y, &win_x, &win_y, &mask_return);
-		return QPoint(root_x, root_y);
-	} else {
-		return QPoint(0, 0); // TODO: implement for wayland
-	}
+    if (IsPlatformX11()) {
+        auto *x11App = qGuiApp->nativeInterface<QNativeInterface::QX11Application>();
+        if (x11App) {
+			Display *display = x11App->display();
+			Window root = DefaultRootWindow(display);
+
+            Window child;
+            int root_x, root_y;
+            int win_x, win_y;
+            unsigned int mask_return;
+
+            if (XQueryPointer(display, root, &root, &child, &root_x, &root_y, &win_x, &win_y, &mask_return)) {
+                return QPoint(root_x, root_y);
+            }
+        }
+    }
+    return QPoint(0, 0); // TODO: Implement for Wayland
 }
 
 static QRect MapToLogicalCoordinates(const QRect& rect) {
-#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
 	for(QScreen *screen :  QApplication::screens()) {
 		QRect geometry = screen->geometry();
 		qreal ratio = screen->devicePixelRatio();
@@ -101,7 +101,6 @@
 						lrint((qreal) rect.height() / ratio - 0.4999));
 		}
 	}
-#endif
 	return rect;
 };
 
@@ -139,35 +138,12 @@
 	QSpinBox::focusOutEvent(event);
 }
 
-#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
-
 #define TRANSPARENT_WINDOW_FLAGS (Qt::Window | Qt::BypassWindowManagerHint | Qt::FramelessWindowHint | \
 		Qt::WindowStaysOnTopHint | Qt::WindowTransparentForInput | Qt::WindowDoesNotAcceptFocus)
 
 #define TRANSPARENT_WINDOW_ATTRIBUTES() {\
 }
 
-#else
-
-#define TRANSPARENT_WINDOW_FLAGS (Qt::Window | Qt::X11BypassWindowManagerHint | Qt::FramelessWindowHint | \
-		Qt::WindowStaysOnTopHint)
-
-// Replacement for Qt::WindowTransparentForInput based on X11 'shape' extension as described here:
-// http://shallowsky.com/blog/programming/translucent-window-click-thru.html
-#define TRANSPARENT_WINDOW_ATTRIBUTES() {\
-	setAttribute(Qt::WA_X11DoNotAcceptFocus); \
-	int shape_event_base, shape_error_base; \
-	if(IsPlatformX11()) { \
-		if(XShapeQueryExtension(QX11Info::display(), &shape_event_base, &shape_error_base)) { \
-			Region region = XCreateRegion(); \
-			XShapeCombineRegion(QX11Info::display(), winId(), ShapeInput, 0, 0, region, ShapeSet); \
-			XDestroyRegion(region); \
-		} \
-	} \
-}
-
-#endif
-
 ScreenLabelWindow::ScreenLabelWindow(QWidget* parent, const QString &text)
 	: QWidget(parent, TRANSPARENT_WINDOW_FLAGS) {
 	TRANSPARENT_WINDOW_ATTRIBUTES();
@@ -218,16 +194,21 @@
 }
 
 void RecordingFrameWindow::UpdateMask() {
-	if(m_outside) {
-		setMask(QRegion(0, 0, width(), height()).subtracted(QRegion(BORDER_WIDTH, BORDER_WIDTH, width() - 2 * BORDER_WIDTH, height() - 2 * BORDER_WIDTH)));
-		setWindowOpacity(0.5);
-	} else {
-		if(QX11Info::isCompositingManagerRunning()) {
-			clearMask();
-			setWindowOpacity(0.25);
-		} else {
+	auto *x11App = qGuiApp->nativeInterface<QNativeInterface::QX11Application>();
+	int event_base, error_base;
+	if (x11App) {
+		Display *display = x11App->display();
+		if(m_outside) {
 			setMask(QRegion(0, 0, width(), height()).subtracted(QRegion(BORDER_WIDTH, BORDER_WIDTH, width() - 2 * BORDER_WIDTH, height() - 2 * BORDER_WIDTH)));
-			setWindowOpacity(1.0);
+			setWindowOpacity(0.5);
+		} else {
+			if(XQueryExtension(display, "Composite", &event_base, &error_base, &error_base)) {
+				clearMask();
+				setWindowOpacity(0.25);
+			} else {
+				setMask(QRegion(0, 0, width(), height()).subtracted(QRegion(BORDER_WIDTH, BORDER_WIDTH, width() - 2 * BORDER_WIDTH, height() - 2 * BORDER_WIDTH)));
+				setWindowOpacity(1.0);
+			}
 		}
 	}
 }
@@ -240,9 +221,7 @@
 void RecordingFrameWindow::paintEvent(QPaintEvent* event) {
 	Q_UNUSED(event);
 	QPainter painter(this);
-#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
 	m_texture.setDevicePixelRatio(devicePixelRatioF());
-#endif
 	painter.setPen(QColor(0, 0, 0, 128));
 	painter.setBrush(Qt::NoBrush);
 	painter.drawTiledPixmap(0, 0, width(), height(), m_texture);
@@ -547,13 +526,8 @@
 	layout->addSpacing(style()->pixelMetric(QStyle::PM_LayoutBottomMargin));
 
 	connect(qApp, SIGNAL(focusChanged(QWidget*, QWidget*)), this, SLOT(OnFocusChange(QWidget*, QWidget*)));
-#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
 	connect(qApp, SIGNAL(screenAdded(QScreen*)), this, SLOT(OnScreenAdded(QScreen*)));
 	connect(qApp, SIGNAL(screenRemoved(QScreen*)), this, SLOT(OnUpdateScreenConfiguration()));
-#else
-	connect(QApplication::desktop(), SIGNAL(screenCountChanged(int)), this, SLOT(OnUpdateScreenConfiguration()));
-	connect(QApplication::desktop(), SIGNAL(resized(int)), this, SLOT(OnUpdateScreenConfiguration()));
-#endif
 
 	LoadScreenConfigurations();
 #if SSR_USE_ALSA
@@ -791,77 +765,80 @@
 }
 
 void PageInput::mousePressEvent(QMouseEvent* event) {
-	if(m_grabbing) {
-		if(event->button() == Qt::LeftButton) {
-			if(IsPlatformX11()) {
-				QPoint mouse_physical = GetMousePhysicalCoordinates();
-				if(m_selecting_window) {
-					// As expected, Qt does not provide any functions to find the window at a specific position, so I have to use Xlib directly.
+    if (m_grabbing) {
+        if (event->button() == Qt::LeftButton) {
+            if (IsPlatformX11()) {
+                QPoint mouse_physical = GetMousePhysicalCoordinates();
+                if (m_selecting_window) {
+                    // As expected, Qt does not provide any functions to find the window at a specific position, so I have to use Xlib directly.
 					// I'm not completely sure whether this is the best way to do this, but it appears to work. XQueryPointer returns the window
 					// currently below the mouse along with the mouse position, but apparently this may not work correctly when the mouse pointer
 					// is also grabbed (even though it works fine in my test), so I use XTranslateCoordinates instead. Originally I wanted to
 					// show the rubber band when the mouse hovers over a window (instead of having to click it), but this doesn't work correctly
 					// since X will simply return a handle the rubber band itself (even though it should be transparent to mouse events).
-					Window selected_window;
-					int x, y;
-					if(XTranslateCoordinates(QX11Info::display(), QX11Info::appRootWindow(), QX11Info::appRootWindow(), mouse_physical.x(), mouse_physical.y(), &x, &y, &selected_window)) {
-						XWindowAttributes attributes;
-						if(selected_window != None && XGetWindowAttributes(QX11Info::display(), selected_window, &attributes)) {
-
-							// naive outer/inner rectangle, this won't work for window decorations
-							m_select_window_outer_rect = QRect(attributes.x, attributes.y, attributes.width + 2 * attributes.border_width, attributes.height + 2 * attributes.border_width);
-							m_select_window_inner_rect = QRect(attributes.x + attributes.border_width, attributes.y + attributes.border_width, attributes.width, attributes.height);
-
-							// try to find the real window (rather than the decorations added by the window manager)
-							Window real_window = X11FindRealWindow(QX11Info::display(), selected_window);
-							if(real_window != None) {
-								Atom actual_type;
-								int actual_format;
-								unsigned long items, bytes_left;
-								long *data = NULL;
-								int result = XGetWindowProperty(QX11Info::display(), real_window, XInternAtom(QX11Info::display(), "_NET_FRAME_EXTENTS", true),
-																0, 4, false, AnyPropertyType, &actual_type, &actual_format, &items, &bytes_left, (unsigned char**) &data);
-								if(result == Success) {
-									if(items == 4 && bytes_left == 0 && actual_format == 32) { // format 32 means 'long', even if long is 64-bit ...
-										Window child;
-										// the attributes of the real window only store the *relative* position which is not what we need, so use XTranslateCoordinates again
-										if(XTranslateCoordinates(QX11Info::display(), real_window, QX11Info::appRootWindow(), 0, 0, &x, &y, &child)
-												 && XGetWindowAttributes(QX11Info::display(), real_window, &attributes)) {
-
-											// finally!
-											m_select_window_inner_rect = QRect(x, y, attributes.width, attributes.height);
-											m_select_window_outer_rect = m_select_window_inner_rect.adjusted(-data[0], -data[2], data[1], data[3]);
-
-										} else {
-
-											// I doubt this will ever be needed, but do it anyway
-											m_select_window_inner_rect = m_select_window_outer_rect.adjusted(data[0], data[2], -data[1], -data[3]);
-
-										}
-									}
-								}
-								if(data != NULL)
-									XFree(data);
-							}
-
-							// pick the inner rectangle if the users clicks inside the window, or the outer rectangle otherwise
-							m_rubber_band_rect = (m_select_window_inner_rect.contains(mouse_physical))? m_select_window_inner_rect : m_select_window_outer_rect;
-							UpdateRubberBand();
-
-						}
-					}
-				} else {
-					m_rubber_band_rect = QRect(mouse_physical, mouse_physical);
-					UpdateRubberBand();
-				}
-			}
-		} else {
-			StopGrabbing();
-		}
-		event->accept();
-		return;
-	}
-	event->ignore();
+                    auto *x11App = qGuiApp->nativeInterface<QNativeInterface::QX11Application>();
+                    if (x11App) {
+                        Display *display = x11App->display();
+                        Window root = DefaultRootWindow(display);
+
+                        Window selected_window;
+                        int x, y;
+                        if (XTranslateCoordinates(display, root, root, mouse_physical.x(), mouse_physical.y(), &x, &y, &selected_window)) {
+                            XWindowAttributes attributes;
+                            if (selected_window != None && XGetWindowAttributes(display, selected_window, &attributes)) {
+
+                                // naive outer/inner rectangle, this won't work for window decorations
+                                m_select_window_outer_rect = QRect(attributes.x, attributes.y, attributes.width + 2 * attributes.border_width, attributes.height + 2 * attributes.border_width);
+                                m_select_window_inner_rect = QRect(attributes.x + attributes.border_width, attributes.y + attributes.border_width, attributes.width, attributes.height);
+
+                                // try to find the real window (rather than the decorations added by the window manager)
+                                Window real_window = X11FindRealWindow(display, selected_window);
+                                if (real_window != None) {
+                                    Atom actual_type;
+                                    int actual_format;
+                                    unsigned long items, bytes_left;
+                                    long *data = NULL;
+                                    int result = XGetWindowProperty(display, real_window, XInternAtom(display, "_NET_FRAME_EXTENTS", true),
+                                                                    0, 4, false, AnyPropertyType, &actual_type, &actual_format, &items, &bytes_left, (unsigned char**) &data);
+                                    if (result == Success) {
+                                        if (items == 4 && bytes_left == 0 && actual_format == 32) { // формат 32 означает 'long', даже если long 64-бит ...
+                                            Window child;
+                                            // the attributes of the real window only store the *relative* position which is not what we need, so use XTranslateCoordinates again
+                                            if (XTranslateCoordinates(display, real_window, root, 0, 0, &x, &y, &child)
+                                                     && XGetWindowAttributes(display, real_window, &attributes)) {
+
+                                                // finally!
+                                                m_select_window_inner_rect = QRect(x, y, attributes.width, attributes.height);
+                                                m_select_window_outer_rect = m_select_window_inner_rect.adjusted(-data[0], -data[2], data[1], data[3]);
+
+                                            } else {
+                                                // I doubt this will ever be needed, but do it anyway
+                                                m_select_window_inner_rect = m_select_window_outer_rect.adjusted(data[0], data[2], -data[1], -data[3]);
+                                            }
+                                        }
+                                    }
+                                    if (data != NULL)
+                                        XFree(data);
+                                }
+
+                                // pick the inner rectangle if the users clicks inside the window, or the outer rectangle otherwise
+                                m_rubber_band_rect = (m_select_window_inner_rect.contains(mouse_physical)) ? m_select_window_inner_rect : m_select_window_outer_rect;
+                                UpdateRubberBand();
+                            }
+                        }
+                    }
+                } else {
+                    m_rubber_band_rect = QRect(mouse_physical, mouse_physical);
+                    UpdateRubberBand();
+                }
+            }
+        } else {
+            StopGrabbing();
+        }
+        event->accept();
+        return;
+    }
+    event->ignore();
 }
 
 void PageInput::mouseReleaseEvent(QMouseEvent* event) {
diff -Naur a/src/GUI/PageOutput.cpp b/src/GUI/PageOutput.cpp
--- a/src/GUI/PageOutput.cpp	2021-05-24 20:56:32.000000000 +0200
+++ b/src/GUI/PageOutput.cpp	2025-01-07 00:53:08.247554295 +0100
@@ -452,13 +452,8 @@
 	}
 
 	// choose default file name
-#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
 	QString dir_videos = QStandardPaths::writableLocation(QStandardPaths::MoviesLocation);
 	QString dir_documents = QStandardPaths::writableLocation(QStandardPaths::DocumentsLocation);
-#else
-	QString dir_videos = QDesktopServices::storageLocation(QDesktopServices::MoviesLocation);
-	QString dir_documents = QDesktopServices::storageLocation(QDesktopServices::DocumentsLocation);
-#endif
 	QString dir_home = QDir::homePath();
 	QString best_dir = (QDir(dir_videos).exists())? dir_videos : (QDir(dir_documents).exists())? dir_documents : dir_home;
 	QString default_file = best_dir + "/simplescreenrecorder." + m_containers[default_container].suffixes[0];
@@ -539,11 +534,12 @@
 }
 
 QString PageOutput::GetFileProtocol() {
-	QRegExp protocol_regex("^([a-z0-9]+)://", Qt::CaseInsensitive, QRegExp::RegExp);
-	if(protocol_regex.indexIn(GetFile()) < 0) {
+	QRegularExpression protocolRegex("^([a-z0-9]+)://", QRegularExpression::CaseInsensitiveOption);
+	QRegularExpressionMatch match = protocolRegex.match(GetFile());
+	if (!match.hasMatch()) {
 		return QString();
 	}
-	return protocol_regex.cap(1);
+	return match.captured(1);
 }
 
 QString PageOutput::GetContainerAVName() {
diff -Naur a/src/GUI/PageRecord.cpp b/src/GUI/PageRecord.cpp
--- a/src/GUI/PageRecord.cpp	2021-05-24 20:56:32.000000000 +0200
+++ b/src/GUI/PageRecord.cpp	2025-01-07 00:50:48.783038975 +0100
@@ -201,7 +201,7 @@
 		// Note: The choice of keys is currently rather limited, because capturing key presses session-wide is a bit harder than it looks.
 		// For example, applications are not allowed to capture the F1-F12 keys (on Ubuntu at least). The A-Z keys don't have this limitation apparently.
 		for(unsigned int i = 0; i < 26; ++i) {
-			m_combobox_hotkey_key->addItem(QString('A' + i));
+			m_combobox_hotkey_key->addItem(QString(QChar::fromLatin1('A' + i)));
 		}
 
 		connect(m_pushbutton_record, SIGNAL(clicked()), this, SLOT(OnRecordStartPause()));
@@ -308,7 +308,7 @@
 					label_preview_note->setSizePolicy(QSizePolicy::Ignored, QSizePolicy::MinimumExpanding);
 
 					QGridLayout *layout = new QGridLayout(m_preview_page1);
-					layout->setMargin(0);
+					layout->setContentsMargins(0, 0, 0, 0);
 					layout->addWidget(label_preview_frame_rate, 0, 0);
 					layout->addWidget(m_spinbox_preview_frame_rate, 0, 1);
 					layout->addWidget(label_preview_note, 1, 0, 1, 2);
@@ -321,7 +321,7 @@
 					m_audio_previewer = new AudioPreviewer(m_preview_page2);
 
 					QVBoxLayout *layout = new QVBoxLayout(m_preview_page2);
-					layout->setMargin(0);
+					layout->setContentsMargins(0, 0, 0, 0);
 					layout->addWidget(m_video_previewer);
 					{
 						QHBoxLayout *layout2 = new QHBoxLayout();
diff -Naur a/src/GUI/VideoPreviewer.cpp b/src/GUI/VideoPreviewer.cpp
--- a/src/GUI/VideoPreviewer.cpp	2021-05-24 20:56:32.000000000 +0200
+++ b/src/GUI/VideoPreviewer.cpp	2025-01-07 00:53:08.247554295 +0100
@@ -153,12 +153,8 @@
 void VideoPreviewer::resizeEvent(QResizeEvent* event) {
 	Q_UNUSED(event);
 	SharedLock lock(&m_shared_data);
-#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
 	qreal ratio = devicePixelRatioF();
 	lock->m_widget_size = QSize(lrint((qreal) (width() - 2) * ratio), lrint((qreal) (height() - 2) * ratio));
-#else
-	lock->m_widget_size = QSize(width() - 2, height() - 2);
-#endif
 }
 
 void VideoPreviewer::paintEvent(QPaintEvent* event) {
@@ -181,25 +177,17 @@
 
 		// create image (data is not copied)
 		QImage img(image_buffer->GetData(), image_size.width(), image_size.height(), image_stride, QImage::Format_RGB32);
-#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
 		img.setDevicePixelRatio(devicePixelRatioF());
-#endif
 
 		// draw the image
 		// Scaling is only used if the widget was resized after the image was captured, which is unlikely
 		// except when the video is paused. That's good because the quality after Qt's scaling is horrible.
-#if QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)
 		qreal ratio = devicePixelRatioF();
 		QSize widget_size = QSize(lrint((qreal) (width() - 2) * ratio), lrint((qreal) (height() - 2) * ratio));
 		QSize out_size = CalculateScaledSize(source_size, widget_size);
 		QPoint draw_pos(1 + lrint((qreal) (widget_size.width() - out_size.width()) / (2.0 * ratio) - 0.4999),
 						1 + lrint((qreal) (widget_size.height() - out_size.height()) / (2.0 * ratio) - 0.4999));
 		QSize draw_size(lrint((qreal) out_size.width() / ratio - 0.4999), lrint((qreal) out_size.height() / ratio - 0.4999));
-#else
-		QSize out_size = CalculateScaledSize(source_size, QSize(width() - 2, height() - 2));
-		QPoint draw_pos((width() - out_size.width()) / 2, (height() - out_size.height()) / 2);
-		QSize draw_size = out_size;
-#endif
 		QRect draw_rect(draw_pos, draw_size);
 		painter.drawImage(draw_rect, img);
 
diff -Naur a/src/Main.cpp b/src/Main.cpp
--- a/src/Main.cpp	2021-05-24 20:56:32.000000000 +0200
+++ b/src/Main.cpp	2025-01-07 00:54:06.207765588 +0100
@@ -26,35 +26,20 @@
 #include "Icons.h"
 #include "Logger.h"
 #include "MainWindow.h"
-#include "ScreenScaling.h"
 
 int main(int argc, char* argv[]) {
 
 	XInitThreads();
 
-	// Workarounds for broken screen scaling.
-	ScreenScalingFix();
-
 	QApplication application(argc, argv);
 
-	// SSR uses two separate character encodings:
-	// - UTF-8: Used for all internal strings.
-	//   Used by QString::fromAscii and QString::toAscii, and all implicit conversions from C-strings to QString. Also used for translations.
-	// - Local character encoding: Used for file names and logs. In practice this will almost always be UTF-8 as well.
-	//   Used by QString::fromLocal8Bit and QString::toLocal8Bit.
-	// If it is not clear what encoding an external library uses, I use the local encoding for file names and UTF-8 for everything else.
-#if QT_VERSION < QT_VERSION_CHECK(5, 0, 0)
-	QTextCodec::setCodecForCStrings(QTextCodec::codecForName("UTF-8"));
-	QTextCodec::setCodecForTr(QTextCodec::codecForName("UTF-8"));
-#endif
-
 	// set the application name
 	QCoreApplication::setOrganizationName("SimpleScreenRecorder");
 	QCoreApplication::setApplicationName("SimpleScreenRecorder");
 
 	// load Qt translations
 	QTranslator translator_qt;
-	if(translator_qt.load(QLocale::system(), "qt", "_", QLibraryInfo::location(QLibraryInfo::TranslationsPath))) {
+	if(translator_qt.load(QLocale::system(), "qt", "_", QLibraryInfo::path(QLibraryInfo::TranslationsPath))) {
 		QApplication::installTranslator(&translator_qt);
 	}
 
@@ -104,9 +89,6 @@
 	CPUFeatures::Detect();
 #endif
 
-	// show screen scaling message
-	ScreenScalingMessage();
-
 	// load icons
 	LoadIcons();
 
diff -Naur a/src/translations/CMakeLists.txt b/src/translations/CMakeLists.txt
--- a/src/translations/CMakeLists.txt	2021-05-24 20:56:32.000000000 +0200
+++ b/src/translations/CMakeLists.txt	2025-01-07 00:50:48.783038975 +0100
@@ -1,11 +1,7 @@
 # translations for 'simplescreenrecorder' executable
 
-if(WITH_QT5)
-	find_package(Qt5LinguistTools REQUIRED)
-	set(LRELEASE Qt5::lrelease)
-else()
-	find_program(LRELEASE NAMES lrelease-qt4 lrelease)
-endif()
+find_package(Qt6LinguistTools REQUIRED)
+set(LRELEASE Qt6::lrelease)
 
 if(LRELEASE)
 
