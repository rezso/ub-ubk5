diff -Naur a/daemon/gvfsbackend.h b/daemon/gvfsbackend.h
--- a/daemon/gvfsbackend.h	2024-10-18 12:28:21.000000000 +0200
+++ b/daemon/gvfsbackend.h	2025-02-20 00:02:23.975863500 +0100
@@ -213,6 +213,14 @@
 				 const char *etag,
 				 gboolean make_backup,
 				 GFileCreateFlags flags);
+  gboolean (*try_edit)          (GVfsBackend *backend,
+                                 GVfsJobOpenForWrite *job,
+                                 const char *filename,
+                                 GFileCreateFlags flags);
+  void     (*edit)              (GVfsBackend *backend,
+                                 GVfsJobOpenForWrite *job,
+                                 const char *filename,
+                                 GFileCreateFlags flags);
   void     (*close_write)       (GVfsBackend *backend,
 				 GVfsJobCloseWrite *job,
 				 GVfsBackendHandle handle);
diff -Naur a/daemon/gvfsbackendnfs.c b/daemon/gvfsbackendnfs.c
--- a/daemon/gvfsbackendnfs.c	2024-10-18 12:28:21.000000000 +0200
+++ b/daemon/gvfsbackendnfs.c	2025-02-19 23:55:10.639501532 +0100
@@ -407,7 +407,9 @@
     {
       GVfsJobRead *op_job = G_VFS_JOB_READ (job);
 
+#ifndef LIBNFS_API_V2
       memcpy (op_job->buffer, data, err);
+#endif
       g_vfs_job_read_set_size (op_job, err);
       g_vfs_job_succeeded (job);
     }
@@ -427,7 +429,11 @@
   GVfsBackendNfs *op_backend = G_VFS_BACKEND_NFS (backend);
   struct nfsfh *fh = _handle;
 
+#ifdef LIBNFS_API_V2
+  nfs_read_async (op_backend->ctx, fh, buffer, bytes_requested, read_cb, job);
+#else
   nfs_read_async (op_backend->ctx, fh, bytes_requested, read_cb, job);
+#endif
   return TRUE;
 }
 
@@ -727,7 +733,10 @@
 }
 
 static void
-append_cb (int err, struct nfs_context *ctx, void *data, void *private_data)
+open_for_write_create_cb (int err,
+                          struct nfs_context *ctx,
+                          void *data,
+                          void *private_data)
 {
   GVfsJob *job = G_VFS_JOB (private_data);
   if (err == 0)
@@ -747,19 +756,102 @@
     }
 }
 
+static void
+open_for_write_create (GVfsBackend *backend,
+                       GVfsJobOpenForWrite *job,
+                       const char *filename,
+                       GFileCreateFlags flags,
+                       int open_flags)
+{
+  GVfsBackendNfs *op_backend = G_VFS_BACKEND_NFS (backend);
+
+#ifdef LIBNFS_API_V2
+  nfs_open2_async (op_backend->ctx,
+                   filename,
+                   O_CREAT | open_flags,
+                   (flags & G_FILE_CREATE_PRIVATE ? 0600 : 0666) & ~op_backend->umask,
+                   open_for_write_create_cb,
+                   job);
+#else
+  nfs_create_async (op_backend->ctx,
+                    filename,
+                    open_flags,
+                    (flags & G_FILE_CREATE_PRIVATE ? 0600 : 0666) & ~op_backend->umask,
+                    open_for_write_create_cb,
+                    job);
+#endif
+}
+
+static void
+open_for_write_stat_cb (int err,
+                        struct nfs_context *ctx,
+                        void *data,
+                        void *private_data)
+{
+  GVfsJob *job = G_VFS_JOB (private_data);
+  GVfsJobOpenForWrite *op_job = G_VFS_JOB_OPEN_FOR_WRITE (job);
+  struct nfs_stat_64 *st = data;
+  int open_flags = 0;
+
+  if (err == 0)
+    {
+      if (S_ISDIR (st->nfs_mode))
+        {
+          g_vfs_job_failed_literal (job,
+                                    G_IO_ERROR, G_IO_ERROR_IS_DIRECTORY,
+                                    _("Target file is a directory"));
+          return;
+        }
+    }
+  else if (err != -ENOENT)
+    {
+      g_vfs_job_failed_from_errno (job, -err);
+      return;
+    }
+
+  if (op_job->mode == OPEN_FOR_WRITE_APPEND)
+    {
+      open_flags = O_APPEND;
+      g_vfs_job_open_for_write_set_initial_offset (op_job, st->nfs_size);
+    }
+
+  open_for_write_create (op_job->backend,
+                         op_job,
+                         op_job->filename,
+                         op_job->flags,
+                         open_flags);
+}
+
+static void
+open_for_write (GVfsBackend *backend,
+                GVfsJobOpenForWrite *job,
+                const char *filename)
+{
+  GVfsBackendNfs *op_backend = G_VFS_BACKEND_NFS (backend);
+
+  /* Check for existing directory because libnfs doesn't fail in this case. */
+  nfs_stat64_async (op_backend->ctx, filename, open_for_write_stat_cb, job);
+}
+
 static gboolean
 try_append_to (GVfsBackend *backend,
                GVfsJobOpenForWrite *job,
                const char *filename,
                GFileCreateFlags flags)
 {
-  GVfsBackendNfs *op_backend = G_VFS_BACKEND_NFS (backend);
+  open_for_write (backend, job, filename);
+
+  return TRUE;
+}
+
+static gboolean
+try_edit (GVfsBackend *backend,
+          GVfsJobOpenForWrite *job,
+          const char *filename,
+          GFileCreateFlags flags)
+{
+  open_for_write (backend, job, filename);
 
-  nfs_create_async (op_backend->ctx,
-                    filename,
-                    O_APPEND,
-                    (flags & G_FILE_CREATE_PRIVATE ? 0600 : 0666) & ~op_backend->umask,
-                    append_cb, job);
   return TRUE;
 }
 
@@ -778,6 +870,9 @@
   int mode;
   CopyFileCallback cb;
   void *private_data;
+#ifdef LIBNFS_API_V2
+  char buffer[COPY_BLKSIZE];
+#endif
 } CopyHandle;
 
 static void
@@ -805,7 +900,11 @@
   CopyHandle *handle = private_data;
 
   if (err > 0)
+#ifdef LIBNFS_API_V2
+    nfs_read_async (ctx, handle->srcfh, handle->buffer, COPY_BLKSIZE, copy_read_cb, handle);
+#else
     nfs_read_async (ctx, handle->srcfh, COPY_BLKSIZE, copy_read_cb, handle);
+#endif
   else
     copy_handle_complete (ctx, handle, FALSE);
 }
@@ -818,7 +917,11 @@
   if (err == 0)
     copy_handle_complete (ctx, handle, TRUE);
   else if (err > 0)
+#ifdef LIBNFS_API_V2
+    nfs_write_async (ctx, handle->destfh, handle->buffer, err, copy_write_cb, handle);
+#else
     nfs_write_async (ctx, handle->destfh, err, data, copy_write_cb, handle);
+#endif
   else
     copy_handle_complete (ctx, handle, FALSE);
 }
@@ -834,7 +937,11 @@
     {
       handle->destfh = data;
 
+#ifdef LIBNFS_API_V2
+      nfs_read_async (ctx, handle->srcfh, handle->buffer, COPY_BLKSIZE, copy_read_cb, handle);
+#else
       nfs_read_async (ctx, handle->srcfh, COPY_BLKSIZE, copy_read_cb, handle);
+#endif
     }
   else
     {
@@ -852,9 +959,15 @@
   if (err == 0)
     {
       handle->srcfh = data;
+#ifdef LIBNFS_API_V2
+      nfs_open2_async (ctx,
+                       handle->dest, O_CREAT | O_TRUNC, handle->mode & 0777,
+                       copy_open_dest_cb, handle);
+#else
       nfs_create_async (ctx,
                         handle->dest, O_TRUNC, handle->mode & 0777,
                         copy_open_dest_cb, handle);
+#endif
       g_free (handle->dest);
     }
   else
@@ -935,11 +1048,19 @@
       GVfsJobOpenForWrite *op_job = G_VFS_JOB_OPEN_FOR_WRITE (job);
       GVfsBackendNfs *op_backend = G_VFS_BACKEND_NFS (op_job->backend);
 
+#ifdef LIBNFS_API_V2
+      nfs_open2_async (op_backend->ctx,
+                       op_job->filename,
+                       O_CREAT | O_TRUNC,
+                       (op_job->flags & G_FILE_CREATE_PRIVATE ? 0600 : 0666) & ~op_backend->umask,
+                       replace_trunc_cb, handle);
+#else
       nfs_create_async (op_backend->ctx,
                         op_job->filename,
                         O_TRUNC,
                         (op_job->flags & G_FILE_CREATE_PRIVATE ? 0600 : 0666) & ~op_backend->umask,
                         replace_trunc_cb, handle);
+#endif
     }
   else
     {
@@ -1019,11 +1140,19 @@
     }
   else
     {
+#ifdef LIBNFS_API_V2
+      nfs_open2_async (ctx,
+                       op_job->filename,
+                       O_CREAT | O_TRUNC,
+                       (op_job->flags & G_FILE_CREATE_PRIVATE ? 0600 : 0666) & ~op_backend->umask,
+                       replace_trunc_cb, handle);
+#else
       nfs_create_async (ctx,
                         op_job->filename,
                         O_TRUNC,
                         (op_job->flags & G_FILE_CREATE_PRIVATE ? 0600 : 0666) & ~op_backend->umask,
                         replace_trunc_cb, handle);
+#endif
     }
 }
 
@@ -1211,11 +1340,19 @@
               handle->tempname = g_build_filename (dirname, basename, NULL);
               g_free (dirname);
 
+#ifdef LIBNFS_API_V2
+              nfs_open2_async (ctx,
+                               handle->tempname,
+                               O_CREAT | O_EXCL,
+                               (op_job->flags & G_FILE_CREATE_PRIVATE ? 0600 : 0666) & ~op_backend->umask,
+                               replace_temp_cb, handle);
+#else
               nfs_create_async (ctx,
                                 handle->tempname,
                                 O_EXCL,
                                 (op_job->flags & G_FILE_CREATE_PRIVATE ? 0600 : 0666) & ~op_backend->umask,
                                 replace_temp_cb, handle);
+#endif
             }
           else
             {
@@ -1299,49 +1436,30 @@
 {
   GVfsBackendNfs *op_backend = G_VFS_BACKEND_NFS (backend);
 
+#ifdef LIBNFS_API_V2
+  nfs_open2_async (op_backend->ctx,
+                   filename,
+                   O_CREAT | O_EXCL,
+                   (flags & G_FILE_CREATE_PRIVATE ? 0600 : 0666) & ~op_backend->umask,
+                   replace_create_cb, job);
+#else
   nfs_create_async (op_backend->ctx,
                     filename,
                     O_EXCL,
                     (flags & G_FILE_CREATE_PRIVATE ? 0600 : 0666) & ~op_backend->umask,
                     replace_create_cb, job);
+#endif
   return TRUE;
 }
 
-static void
-create_cb (int err, struct nfs_context *ctx, void *data, void *private_data)
-{
-  GVfsJob *job = G_VFS_JOB (private_data);
-
-  if (err == 0)
-    {
-      GVfsJobOpenForWrite *op_job = G_VFS_JOB_OPEN_FOR_WRITE (job);
-      WriteHandle *handle = g_slice_new0 (WriteHandle);
-
-      handle->fh = data;
-      g_vfs_job_open_for_write_set_handle (op_job, handle);
-      g_vfs_job_open_for_write_set_can_seek (op_job, TRUE);
-      g_vfs_job_open_for_write_set_can_truncate (op_job, TRUE);
-      g_vfs_job_succeeded (job);
-    }
-  else
-    {
-      g_vfs_job_failed_from_errno (job, -err);
-    }
-}
-
 static gboolean
 try_create (GVfsBackend *backend,
             GVfsJobOpenForWrite *job,
             const char *filename,
             GFileCreateFlags flags)
 {
-  GVfsBackendNfs *op_backend = G_VFS_BACKEND_NFS (backend);
+  open_for_write_create (backend, job, filename, flags, O_EXCL);
 
-  nfs_create_async (op_backend->ctx,
-                    filename,
-                    O_EXCL,
-                    (flags & G_FILE_CREATE_PRIVATE ? 0600 : 0666) & ~op_backend->umask,
-                    create_cb, job);
   return TRUE;
 }
 
@@ -1372,7 +1490,11 @@
   WriteHandle *handle = _handle;
   struct nfsfh *fh = handle->fh;
 
+#ifdef LIBNFS_API_V2
+  nfs_write_async (op_backend->ctx, fh, buffer, buffer_size, write_cb, job);
+#else
   nfs_write_async (op_backend->ctx, fh, buffer_size, buffer, write_cb, job);
+#endif
   return TRUE;
 }
 
@@ -2580,6 +2702,7 @@
   backend_class->try_make_symlink = try_make_symlink;
   backend_class->try_create = try_create;
   backend_class->try_append_to = try_append_to;
+  backend_class->try_edit = try_edit;
   backend_class->try_replace = try_replace;
   backend_class->try_write = try_write;
   backend_class->try_query_info_on_write = try_query_info_on_write;
diff -Naur a/daemon/gvfsjobopenforwrite.c b/daemon/gvfsjobopenforwrite.c
--- a/daemon/gvfsjobopenforwrite.c	2024-10-18 12:28:21.000000000 +0200
+++ b/daemon/gvfsjobopenforwrite.c	2025-02-20 00:02:23.975863500 +0100
@@ -220,6 +220,20 @@
 		      op_job->make_backup,
 		      op_job->flags);
     }
+  else if (op_job->mode == OPEN_FOR_WRITE_EDIT)
+    {
+      if (class->edit == NULL)
+        {
+          g_vfs_job_failed (job, G_IO_ERROR, G_IO_ERROR_NOT_SUPPORTED,
+                            _("Operation not supported"));
+          return;
+        }
+
+      class->edit (op_job->backend,
+                   op_job,
+                   op_job->filename,
+                   op_job->flags);
+    }
   else
     g_assert_not_reached (); /* Handled in try */
 }
@@ -266,6 +280,15 @@
 				 op_job->make_backup,
 				 op_job->flags);
     }
+  else if (op_job->mode == OPEN_FOR_WRITE_EDIT)
+    {
+      if (class->try_edit == NULL)
+        return FALSE;
+      return class->try_edit (op_job->backend,
+                              op_job,
+                              op_job->filename,
+                              op_job->flags);
+    }
   else
     {
       GError *error = NULL;
diff -Naur a/daemon/gvfsjobopenforwrite.h b/daemon/gvfsjobopenforwrite.h
--- a/daemon/gvfsjobopenforwrite.h	2024-10-18 12:28:21.000000000 +0200
+++ b/daemon/gvfsjobopenforwrite.h	2025-02-20 00:02:23.975863500 +0100
@@ -41,7 +41,8 @@
 typedef enum {
   OPEN_FOR_WRITE_CREATE = 0,
   OPEN_FOR_WRITE_APPEND = 1,
-  OPEN_FOR_WRITE_REPLACE = 2
+  OPEN_FOR_WRITE_REPLACE = 2,
+  OPEN_FOR_WRITE_EDIT = 3
 } GVfsJobOpenForWriteMode;
 
 typedef enum {
