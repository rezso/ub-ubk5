From c60e8f41dcd5ce164fa5f95c6ee1e654c2ad0cfa Mon Sep 17 00:00:00 2001
From: Ondrej Holy <oholy@redhat.com>
Date: Tue, 15 Oct 2024 14:15:10 +0200
Subject: [PATCH] sftp: Implement support for edit mode

Implement support for the newly added edit mode in the SFTP backend.

Related: https://gitlab.gnome.org/GNOME/gvfs/-/issues/249
---
 daemon/gvfsbackendsftp.c | 156 ++++++++++++++++++---------------------
 1 file changed, 72 insertions(+), 84 deletions(-)

diff --git a/daemon/gvfsbackendsftp.c b/daemon/gvfsbackendsftp.c
index 7e7736138..ffc4c8ee1 100644
--- a/daemon/gvfsbackendsftp.c
+++ b/daemon/gvfsbackendsftp.c
@@ -3423,13 +3423,33 @@ not_dir_or_not_exist_error (GVfsBackendSftp *backend,
 }
 
 static void
-create_reply (GVfsBackendSftp *backend,
-              int reply_type,
-              GDataInputStream *reply,
-              guint32 len,
-              GVfsJob *job,
-              gpointer user_data)
+open_for_write_error (GVfsBackendSftp *backend,
+                      GVfsJob *job,
+                      gint original_error,
+                      gint stat_error,
+                      GFileInfo *info,
+                      gpointer user_data)
 {
+  if (info != NULL &&
+      g_file_info_get_file_type (info) == G_FILE_TYPE_DIRECTORY)
+    {
+      g_vfs_job_failed (job, G_IO_ERROR, G_IO_ERROR_IS_DIRECTORY,
+                        _("File is directory"));
+      return;
+    }
+
+  result_from_status_code (job, original_error, -1, -1);
+}
+
+static void
+open_for_write_reply (GVfsBackendSftp *backend,
+                      int reply_type,
+                      GDataInputStream *reply,
+                      guint32 len,
+                      GVfsJob *job,
+                      gpointer user_data)
+{
+  GVfsJobOpenForWrite *op_job = G_VFS_JOB_OPEN_FOR_WRITE (job);
   SftpHandle *handle;
   guint32 code;
   
@@ -3446,6 +3466,13 @@ create_reply (GVfsBackendSftp *backend,
 	  return;
 	}
       
+      if (code == SSH_FX_FAILURE && op_job->mode != OPEN_FOR_WRITE_CREATE)
+        {
+          error_from_lstat (backend, job, code, op_job->filename,
+                            open_for_write_error, NULL);
+          return;
+        }
+
       result_from_status_code (job, code, G_IO_ERROR_EXISTS, -1);
       return;
     }
@@ -3465,11 +3492,12 @@ create_reply (GVfsBackendSftp *backend,
   g_vfs_job_succeeded (job);
 }
 
-static gboolean
-try_create (GVfsBackend *backend,
-            GVfsJobOpenForWrite *job,
-            const char *filename,
-            GFileCreateFlags flags)
+static void
+open_for_write (GVfsBackend *backend,
+                GVfsJobOpenForWrite *job,
+                const char *filename,
+                GFileCreateFlags flags,
+                int open_flags)
 {
   GVfsBackendSftp *op_backend = G_VFS_BACKEND_SFTP (backend);
   GDataOutputStream *command;
@@ -3477,76 +3505,27 @@ try_create (GVfsBackend *backend,
   command = new_command_stream (op_backend,
                                 SSH_FXP_OPEN);
   put_string (command, filename);
-  g_data_output_stream_put_uint32 (command, SSH_FXF_WRITE|SSH_FXF_CREAT|SSH_FXF_EXCL,  NULL, NULL); /* open flags */
+  g_data_output_stream_put_uint32 (command, open_flags, NULL, NULL); /* open flags */
   put_mode (command, flags);
   
   queue_command_stream_and_free (&op_backend->command_connection, command,
-                                 create_reply,
+                                 open_for_write_reply,
                                  G_VFS_JOB (job), NULL);
-
-  return TRUE;
 }
 
-static void
-append_to_error (GVfsBackendSftp *backend,
-		 GVfsJob *job,
-		 gint original_error,
-		 gint stat_error,
-		 GFileInfo *info,
-		 gpointer user_data)
-{
-  if ((original_error == SSH_FX_FAILURE) &&
-      info != NULL &&
-      g_file_info_get_file_type (info) == G_FILE_TYPE_DIRECTORY)
-    {
-      g_vfs_job_failed (job, G_IO_ERROR, G_IO_ERROR_IS_DIRECTORY,
-			_("File is directory"));
-      return;
-    }
-
-  if (original_error == SSH_FX_NO_SUCH_FILE)
-    {
-      not_dir_or_not_exist_error (backend, job,
-				  G_VFS_JOB_OPEN_FOR_WRITE (job)->filename);
-      return;
-    }
-  
-
-  result_from_status_code (job, original_error, -1, -1);
-}
-
-static void
-append_to_reply (GVfsBackendSftp *backend,
-                 int reply_type,
-                 GDataInputStream *reply,
-                 guint32 len,
-                 GVfsJob *job,
-                 gpointer user_data)
+static gboolean
+try_create (GVfsBackend *backend,
+            GVfsJobOpenForWrite *job,
+            const char *filename,
+            GFileCreateFlags flags)
 {
-  SftpHandle *handle;
-  
-  if (reply_type == SSH_FXP_STATUS)
-    {
-      error_from_lstat (backend, job, read_status_code (reply),
-			G_VFS_JOB_OPEN_FOR_WRITE (job)->filename,
-			append_to_error,
-			NULL);
-      return;
-    }
+  open_for_write (backend,
+                  job,
+                  filename,
+                  flags,
+                  SSH_FXF_WRITE|SSH_FXF_CREAT|SSH_FXF_EXCL);
 
-  if (reply_type != SSH_FXP_HANDLE)
-    {
-      g_vfs_job_failed (job, G_IO_ERROR, G_IO_ERROR_FAILED,
-                        _("Invalid reply received"));
-      return;
-    }
-
-  handle = sftp_handle_new (reply);
-  
-  g_vfs_job_open_for_write_set_handle (G_VFS_JOB_OPEN_FOR_WRITE (job), handle);
-  g_vfs_job_open_for_write_set_can_seek (G_VFS_JOB_OPEN_FOR_WRITE (job), TRUE);
-  g_vfs_job_open_for_write_set_can_truncate (G_VFS_JOB_OPEN_FOR_WRITE (job), TRUE);
-  g_vfs_job_succeeded (job);
+  return TRUE;
 }
 
 static gboolean
@@ -3555,18 +3534,26 @@ try_append_to (GVfsBackend *backend,
                const char *filename,
                GFileCreateFlags flags)
 {
-  GVfsBackendSftp *op_backend = G_VFS_BACKEND_SFTP (backend);
-  GDataOutputStream *command;
+  open_for_write (backend,
+                  job,
+                  filename,
+                  flags,
+                  SSH_FXF_WRITE|SSH_FXF_CREAT|SSH_FXF_APPEND);
 
-  command = new_command_stream (op_backend,
-                                SSH_FXP_OPEN);
-  put_string (command, filename);
-  g_data_output_stream_put_uint32 (command, SSH_FXF_WRITE|SSH_FXF_CREAT|SSH_FXF_APPEND,  NULL, NULL); /* open flags */
-  put_mode (command, flags);
-  
-  queue_command_stream_and_free (&op_backend->command_connection, command,
-                                 append_to_reply,
-                                 G_VFS_JOB (job), NULL);
+  return TRUE;
+}
+
+static gboolean
+try_edit (GVfsBackend *backend,
+          GVfsJobOpenForWrite *job,
+          const char *filename,
+          GFileCreateFlags flags)
+{
+  open_for_write (backend,
+                  job,
+                  filename,
+                  flags,
+                  SSH_FXF_WRITE|SSH_FXF_CREAT);
 
   return TRUE;
 }
@@ -6906,6 +6893,7 @@ g_vfs_backend_sftp_class_init (GVfsBackendSftpClass *klass)
   backend_class->try_enumerate = try_enumerate;
   backend_class->try_create = try_create;
   backend_class->try_append_to = try_append_to;
+  backend_class->try_edit = try_edit;
   backend_class->try_replace = try_replace;
   backend_class->try_write = try_write;
   backend_class->try_seek_on_write = try_seek_on_write;
-- 
GitLab

