diff -Naur orig/configure.ac patched/configure.ac
--- orig/configure.ac	2016-05-07 18:11:37.000000000 +0200
+++ patched/configure.ac	2016-05-09 00:36:59.128116249 +0200
@@ -82,7 +82,7 @@
 # =========================================================================
 # check libxml++
 
-PKG_CHECK_MODULES(LIBXML, libxml++-2.6 >= 2.20)
+PKG_CHECK_MODULES(LIBXML, libxml++-3.0 >= 3.0.0)
 AC_SUBST(LIBXML_CFLAGS)
 AC_SUBST(LIBXML_LIBS)
 
diff -Naur orig/plugins/actions/textcorrection/patternmanager.cc patched/plugins/actions/textcorrection/patternmanager.cc
--- orig/plugins/actions/textcorrection/patternmanager.cc	2016-05-07 18:11:37.000000000 +0200
+++ patched/plugins/actions/textcorrection/patternmanager.cc	2016-05-08 23:35:51.121927589 +0200
@@ -124,8 +124,8 @@
 			return;
 		}
 		// read patterns
-		xmlpp::Node::NodeList xml_pattern_list = xml_patterns->get_children("pattern");
-		for(xmlpp::Node::NodeList::const_iterator it=xml_pattern_list.begin(); it!=xml_pattern_list.end(); ++it)
+		xmlpp::Node::const_NodeList xml_pattern_list = xml_patterns->get_children("pattern");
+		for(xmlpp::Node::const_NodeList::const_iterator it=xml_pattern_list.begin(); it!=xml_pattern_list.end(); ++it)
 		{
 			const xmlpp::Element * xml_pattern = dynamic_cast<const xmlpp::Element*>(*it);
 			// read and add the patterns to the list
@@ -175,8 +175,8 @@
 	pattern->m_policy = xml_pattern->get_attribute_value("policy");
 	pattern->m_enabled = get_active(pattern->m_name);
 	// get rules
-	xmlpp::Node::NodeList xml_rule_list = xml_pattern->get_children("rule");
-	for(xmlpp::Node::NodeList::const_iterator it = xml_rule_list.begin(); it!=xml_rule_list.end(); ++it)
+	xmlpp::Node::const_NodeList xml_rule_list = xml_pattern->get_children("rule");
+	for(xmlpp::Node::const_NodeList::const_iterator it = xml_rule_list.begin(); it!=xml_rule_list.end(); ++it)
 	{
 		const xmlpp::Element *xml_rule = dynamic_cast<const xmlpp::Element*>(*it);
 
@@ -193,7 +193,7 @@
 			rule->m_repeat = (repeat == "True") ? true : false;
 
 			// Previous match rule
-			xmlpp::Node::NodeList xml_previous_match = xml_rule->get_children("previousmatch");
+			xmlpp::Node::const_NodeList xml_previous_match = xml_rule->get_children("previousmatch");
 			if(!xml_previous_match.empty())
 			{
 				const xmlpp::Element *pre = dynamic_cast<const xmlpp::Element*>(*xml_previous_match.begin()); 
diff -Naur orig/plugins/subtitleformats/dcsubtitle/dcsubtitle.cc patched/plugins/subtitleformats/dcsubtitle/dcsubtitle.cc
--- orig/plugins/subtitleformats/dcsubtitle/dcsubtitle.cc	2016-05-07 18:11:37.000000000 +0200
+++ patched/plugins/subtitleformats/dcsubtitle/dcsubtitle.cc	2016-05-09 00:19:47.987003096 +0200
@@ -79,17 +79,17 @@
 			// element SubtitleID
 			//xmlpp::Element* xml_subtitleid = xml_dcsubtitle->add_child("SubtitleID");
 			// element MovieTitle
-			/*xmlpp::Element* xml_movietitle = */xml_dcsubtitle->add_child("MovieTitle");
+			/*xmlpp::Element* xml_movietitle = */xml_dcsubtitle->add_child_element("MovieTitle");
 			// element ReelNumber
-			xmlpp::Element* xml_reelnumber = xml_dcsubtitle->add_child("ReelNumber");
-			xml_reelnumber->set_child_text("1");
+			xmlpp::Element* xml_reelnumber = xml_dcsubtitle->add_child_element("ReelNumber");
+			xml_reelnumber->set_first_child_text("1");
 			// element Language
 			//xmlpp::Element* xml_language = xml_dcsubtitle->add_child("Language");
 			// element LoadFont
 			//xmlpp::Element* xml_loadfont = xml_dcsubtitle->add_child("LoadFont");
 	
 			// Font
-			xmlpp::Element* xml_font = xml_dcsubtitle->add_child("Font");
+			xmlpp::Element* xml_font = xml_dcsubtitle->add_child_element("Font");
 			{
 				// attribute Id
 				// attribute Color
@@ -132,8 +132,8 @@
 		// attribute Italic
 		
 		// Read each Subtitle
-		xmlpp::Node::NodeList list = xml_font->get_children("Subtitle");
-		for(xmlpp::Node::NodeList::const_iterator it = list.begin(); it!=list.end(); ++it)
+		xmlpp::Node::const_NodeList list = xml_font->get_children("Subtitle");
+		for(xmlpp::Node::const_NodeList::const_iterator it = list.begin(); it!=list.end(); ++it)
 		{
 			read_subtitle(dynamic_cast<const xmlpp::Element*>(*it));
 		}
@@ -171,8 +171,8 @@
 		}
 
 		// Text (children)
-		xmlpp::Node::NodeList children = xml_subtitle->get_children("Text");
-		for(xmlpp::Node::NodeList::const_iterator it = children.begin(); it != children.end(); ++it)
+		xmlpp::Node::const_NodeList children = xml_subtitle->get_children("Text");
+		for(xmlpp::Node::const_NodeList::const_iterator it = children.begin(); it != children.end(); ++it)
 		{
 			const xmlpp::Element* xml_text = dynamic_cast<const xmlpp::Element*>(*it);
 
@@ -183,7 +183,7 @@
 			// attribute VPosition
 
 			// text (child)
-			Glib::ustring text = xml_text->get_child_text()->get_content();
+			Glib::ustring text = xml_text->get_first_child_text()->get_content();
 
 			if(!subtitle.get_text().empty()) // Add break line if needs
 				text = "\n" + text;
@@ -202,7 +202,7 @@
 		Glib::ustring FadeUpTime = "0";
 		Glib::ustring FadeDownTime = "0";
 
-		xmlpp::Element* xml_subtitle = xml_root->add_child("Subtitle");
+		xmlpp::Element* xml_subtitle = xml_root->add_child_element("Subtitle");
 
 		xml_subtitle->set_attribute("SpotNumber", SpotNumber);
 		xml_subtitle->set_attribute("TimeIn", TimeIn);
@@ -221,14 +221,14 @@
 			Glib::ustring VAlign = "bottom";
 			Glib::ustring VPosition = "0.0"; // FIXME ?
 
-			xmlpp::Element* xml_text = xml_subtitle->add_child("Text");
+			xmlpp::Element* xml_text = xml_subtitle->add_child_element("Text");
 
 			xml_text->set_attribute("Direction", Direction);
 			xml_text->set_attribute("HAlign", HAlign);
 			xml_text->set_attribute("HPosition", HPosition);
 			xml_text->set_attribute("VAlign", VAlign);
 			xml_text->set_attribute("VPosition", VPosition);
-			xml_text->set_child_text(lines[i]);
+			xml_text->set_first_child_text(lines[i]);
 		}
 	}
 
diff -Naur orig/plugins/subtitleformats/subtitleeditorproject/subtitleeditorproject.cc patched/plugins/subtitleformats/subtitleeditorproject/subtitleeditorproject.cc
--- orig/plugins/subtitleformats/subtitleeditorproject/subtitleeditorproject.cc	2016-05-07 18:11:37.000000000 +0200
+++ patched/plugins/subtitleformats/subtitleeditorproject/subtitleeditorproject.cc	2016-05-09 00:56:36.733955681 +0200
@@ -140,7 +140,7 @@
 	 */
 	const xmlpp::Element* get_unique_children(const xmlpp::Node *root, const Glib::ustring &name)
 	{
-		const xmlpp::Node::NodeList children = root->get_children(name);
+		const xmlpp::Node::const_NodeList children = root->get_children(name);
 		if(children.empty())
 			return NULL;
 		return dynamic_cast<const xmlpp::Element*>(children.front());
@@ -179,7 +179,7 @@
 		if(uri.empty())
 			return;
 
-		xmlpp::Element* xmlpl = root->add_child("player");
+		xmlpp::Element* xmlpl = root->add_child_element("player");
 		xmlpl->set_attribute("uri", uri);
 	}
 
@@ -213,7 +213,7 @@
 		if(!wf)
 			return;
 
-		xmlpp::Element *xmlwf = root->add_child("waveform");
+		xmlpp::Element *xmlwf = root->add_child_element("waveform");
 
 		xmlwf->set_attribute("uri", wf->get_uri());
 	}
@@ -246,7 +246,7 @@
 		if(!kf)
 			return; // don't need to save without KeyFrames... 
 
-		xmlpp::Element *xmlwf = root->add_child("keyframes");
+		xmlpp::Element *xmlwf = root->add_child_element("keyframes");
 
 		xmlwf->set_attribute("uri", kf->get_uri());
 	}
@@ -261,17 +261,17 @@
 
 		Styles styles = document()->styles();
 
-		const xmlpp::Node::NodeList list_styles = xmlstyles->get_children("style");
+		const xmlpp::Node::const_NodeList list_styles = xmlstyles->get_children("style");
 
-		for(xmlpp::Node::NodeList::const_iterator it = list_styles.begin(); it != list_styles.end();	++it)
+		for(xmlpp::Node::const_NodeList::const_iterator it = list_styles.begin(); it != list_styles.end();	++it)
 		{
 			const xmlpp::Element *el = dynamic_cast<const xmlpp::Element*>(*it);
 
 			Style style = styles.append();
 
-			const xmlpp::Element::AttributeList list = el->get_attributes();
+			const xmlpp::Element::const_AttributeList list = el->get_attributes();
 
-			for(xmlpp::Element::AttributeList::const_iterator at = list.begin(); at != list.end(); ++at)
+			for(xmlpp::Element::const_AttributeList::const_iterator at = list.begin(); at != list.end(); ++at)
 			{
 				style.set((*at)->get_name(), (*at)->get_value());
 			}
@@ -282,13 +282,13 @@
 	 */
 	void save_styles(xmlpp::Element *root)
 	{
-		xmlpp::Element *xmlstyles = root->add_child("styles");
+		xmlpp::Element *xmlstyles = root->add_child_element("styles");
 
 		Styles styles = document()->styles();
 
 		for(Style style = styles.first(); style; ++style)
 		{
-			xmlpp::Element *xml = xmlstyles->add_child("style");
+			xmlpp::Element *xml = xmlstyles->add_child_element("style");
 
 			std::map<Glib::ustring, Glib::ustring> values;
 			style.get(values);
@@ -333,19 +333,19 @@
 				document()->set_framerate(get_framerate_from_value(value));
 		}
 
-		const xmlpp::Node::NodeList list_subtitles = xmlsubtitles->get_children("subtitle");
+		const xmlpp::Node::const_NodeList list_subtitles = xmlsubtitles->get_children("subtitle");
 
 		Subtitles subtitles = document()->subtitles();
 
-		for(xmlpp::Node::NodeList::const_iterator it = list_subtitles.begin(); it != list_subtitles.end();	++it)
+		for(xmlpp::Node::const_NodeList::const_iterator it = list_subtitles.begin(); it != list_subtitles.end();	++it)
 		{
 			const xmlpp::Element *el = dynamic_cast<const xmlpp::Element*>(*it);
 
 			Subtitle sub = subtitles.append();
 
-			const xmlpp::Element::AttributeList list = el->get_attributes();
+			const xmlpp::Element::const_AttributeList list = el->get_attributes();
 
-			for(xmlpp::Element::AttributeList::const_iterator at = list.begin(); at != list.end(); ++at)
+			for(xmlpp::Element::const_AttributeList::const_iterator at = list.begin(); at != list.end(); ++at)
 			{
 				sub.set((*at)->get_name(), (*at)->get_value());
 			}
@@ -356,7 +356,7 @@
 	 */
 	void save_subtitles(xmlpp::Element *root)
 	{
-		xmlpp::Element* xmlsubtitles = root->add_child("subtitles");
+		xmlpp::Element* xmlsubtitles = root->add_child_element("subtitles");
 		
 		// document property
 		xmlsubtitles->set_attribute("timing_mode", (document()->get_timing_mode() == TIME) ? "TIME" : "FRAME");
@@ -368,7 +368,7 @@
 
 		for(Subtitle sub = subtitles.get_first(); sub; ++sub)
 		{
-			xmlpp::Element *xmlsub = xmlsubtitles->add_child("subtitle");
+			xmlpp::Element *xmlsub = xmlsubtitles->add_child_element("subtitle");
 
 			std::map<Glib::ustring, Glib::ustring> values;
 			sub.get(values);
@@ -387,14 +387,14 @@
 		if(xmlsubtitles == NULL)
 			return;
 
-		const xmlpp::Node::NodeList list_subtitles = xmlsubtitles->get_children("subtitle");
+		const xmlpp::Node::const_NodeList list_subtitles = xmlsubtitles->get_children("subtitle");
 
 		std::vector<Subtitle> selection(list_subtitles.size());
 
 		Subtitles subtitles = document()->subtitles();
 
 		unsigned int i=0;
-		for(xmlpp::Node::NodeList::const_iterator it = list_subtitles.begin(); it != list_subtitles.end();	++it, ++i)
+		for(xmlpp::Node::const_NodeList::const_iterator it = list_subtitles.begin(); it != list_subtitles.end();	++it, ++i)
 		{
 			const xmlpp::Element *el = dynamic_cast<const xmlpp::Element*>(*it);
 			long path = utility::string_to_long(el->get_attribute_value("path"));
@@ -408,13 +408,13 @@
 	 */
 	void save_subtitles_selection(xmlpp::Element *root)
 	{
-		xmlpp::Element* xml = root->add_child("subtitles-selection");
+		xmlpp::Element* xml = root->add_child_element("subtitles-selection");
 
 		std::vector<Subtitle> selection = document()->subtitles().get_selection();
 
 		for(unsigned int i=0; i < selection.size(); ++i)
 		{
-			xmlpp::Element* xmlsub = xml->add_child("subtitle");
+			xmlpp::Element* xmlsub = xml->add_child_element("subtitle");
 			xmlsub->set_attribute("path", selection[i].get("path"));
 		}
 	}
diff -Naur orig/plugins/subtitleformats/timedtextauthoringformat1/timedtextauthoringformat1.cc patched/plugins/subtitleformats/timedtextauthoringformat1/timedtextauthoringformat1.cc
--- orig/plugins/subtitleformats/timedtextauthoringformat1/timedtextauthoringformat1.cc	2016-05-07 18:11:37.000000000 +0200
+++ patched/plugins/subtitleformats/timedtextauthoringformat1/timedtextauthoringformat1.cc	2016-05-09 02:20:42.058974097 +0200
@@ -57,8 +57,8 @@
 
 				if(div)
 				{
-					xmlpp::Node::NodeList list = div->get_children();
-					for(xmlpp::Node::NodeList::const_iterator it = list.begin(); it!=list.end(); ++it)
+					xmlpp::Node::const_NodeList list = div->get_children();
+					for(xmlpp::Node::const_NodeList::const_iterator it = list.begin(); it!=list.end(); ++it)
 					{
 						read_subtitle(dynamic_cast<const xmlpp::Element*>(*it));
 					}
@@ -84,10 +84,10 @@
 			tt->set_attribute("xml:lang", "");
 			tt->set_attribute("xmlns", "http://www.w3.org/2006/10/ttaf1");
 
-			xmlpp::Element* body = tt->add_child("body");
+			xmlpp::Element* body = tt->add_child_element("body");
 
 			// div subtitles
-			xmlpp::Element* div = body->add_child("div");
+			xmlpp::Element* div = body->add_child_element("div");
 		
 			div->set_attribute("xml:lang", "en");
 
@@ -147,10 +147,10 @@
 		{
 			Glib::ustring text;
 
-			xmlpp::Node::NodeList children = p->get_children();
-			for(xmlpp::Node::NodeList::const_iterator it = children.begin(); it != children.end(); ++it)
+			xmlpp::Node::const_NodeList children = p->get_children();
+			for(xmlpp::Node::const_NodeList::const_iterator it = children.begin(); it != children.end(); ++it)
 			{
-				xmlpp::ContentNode *cn = dynamic_cast<xmlpp::ContentNode*>(*it);
+				const xmlpp::ContentNode *cn = dynamic_cast<const xmlpp::ContentNode*>(*it);
 				if(cn == NULL)
 					continue;
 				if(!text.empty())
@@ -171,12 +171,12 @@
 	
 		utility::replace(text, "\n", "<br/>");
 
-		xmlpp::Element* p = root->add_child("p");
+		xmlpp::Element* p = root->add_child_element("p");
 
 		p->set_attribute("begin", time_to_ttaf1(sub.get_start()));
 		p->set_attribute("end", time_to_ttaf1(sub.get_end()));
 		p->set_attribute("dur", time_to_ttaf1(sub.get_duration()));
-		p->set_child_text(text);
+		p->set_first_child_text(text);
 	}
 
 	/*
diff -Naur orig/src/isocodes.cc patched/src/isocodes.cc
--- orig/src/isocodes.cc	2016-05-07 18:11:37.000000000 +0200
+++ patched/src/isocodes.cc	2016-05-08 23:22:45.558032188 +0200
@@ -48,8 +48,8 @@
 		if(root->get_name() != Glib::ustring::compose("%1_entries", iso_id))
 			return false;
 
-		xmlpp::Node::NodeList entries = root->get_children(Glib::ustring::compose("%1_entry", iso_id));
-		for(xmlpp::Node::NodeList::const_iterator it=entries.begin(); it!=entries.end(); ++it)
+		xmlpp::Node::const_NodeList entries = root->get_children(Glib::ustring::compose("%1_entry", iso_id));
+		for(xmlpp::Node::const_NodeList::const_iterator it=entries.begin(); it!=entries.end(); ++it)
 		{
 			const xmlpp::Element * entry = dynamic_cast<const xmlpp::Element*>(*it);
 
