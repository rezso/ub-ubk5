diff -Naur a/src/aboutdialog.cpp b/src/aboutdialog.cpp
--- a/src/aboutdialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/aboutdialog.cpp	2025-07-09 01:46:59.624940366 +0200
@@ -38,14 +38,14 @@
 mmAboutDialog::~mmAboutDialog()
 {
     const bool v = m_send_data->GetValue();
-    Option::instance().SendUsageStatistics(v);
+    Option::instance().setSendUsageStats(v);
 }
 
 
 mmAboutDialog::mmAboutDialog(wxWindow* parent, int tabToOpenNo)
 {
     const wxString caption = (tabToOpenNo == 4)
-        ? _("License agreement")
+        ? _t("License agreement")
         : wxString::Format("%s %s", ::mmex::getProgramName(), ::mmex::getTitleProgramVersion());
     createWindow(parent, caption, tabToOpenNo);
 }
@@ -178,27 +178,27 @@
     aboutNotebook->SetMinSize(wxSize(400, 500));
 
     wxPanel* aboutTab = new wxPanel(aboutNotebook, wxID_ANY);
-    aboutNotebook->AddPage(aboutTab, _("About"));
+    aboutNotebook->AddPage(aboutTab, _t("About"));
     wxBoxSizer *aboutSizer = new wxBoxSizer(wxVERTICAL);
     aboutTab->SetSizer(aboutSizer);
 
     wxPanel* authorsTab = new wxPanel(aboutNotebook, wxID_ANY);
-    aboutNotebook->AddPage(authorsTab, _("Authors"));
+    aboutNotebook->AddPage(authorsTab, _t("Authors"));
     wxBoxSizer *authorsSizer = new wxBoxSizer(wxVERTICAL);
     authorsTab->SetSizer(authorsSizer);
 
     wxPanel* sponsorsTab = new wxPanel(aboutNotebook, wxID_ANY);
-    aboutNotebook->AddPage(sponsorsTab, _("Sponsors"));
+    aboutNotebook->AddPage(sponsorsTab, _t("Sponsors"));
     wxBoxSizer *sponsorsSizer = new wxBoxSizer(wxVERTICAL);
     sponsorsTab->SetSizer(sponsorsSizer);
 
     wxPanel* licenseTab = new wxPanel(aboutNotebook, wxID_ANY);
-    aboutNotebook->AddPage(licenseTab, _("License"));
+    aboutNotebook->AddPage(licenseTab, _t("License"));
     wxBoxSizer *licenseSizer = new wxBoxSizer(wxVERTICAL);
     licenseTab->SetSizer(licenseSizer);
 
     wxPanel* privacyTab = new wxPanel(aboutNotebook, wxID_ANY);
-    aboutNotebook->AddPage(privacyTab, _("Privacy"));
+    aboutNotebook->AddPage(privacyTab, _t("Privacy"));
     wxBoxSizer *privacySizer = new wxBoxSizer(wxVERTICAL);
     privacyTab->SetSizer(privacySizer);
 
@@ -236,15 +236,15 @@
     buttonPanel->SetSizer(buttonPanelSizer);
 
     m_send_data = new wxCheckBox(buttonPanel, wxID_ANY
-        , _("Send anonymous statistics usage data"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    mmToolTip(m_send_data, _("Enable to help us sending anonymous data about MMEX usage."));
+        , _t("Send anonymous statistics usage data"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    mmToolTip(m_send_data, _t("Enable to help us sending anonymous data about MMEX usage."));
 
     buttonPanelSizer->Add(m_send_data, g_flagsV);
 
     m_send_data->Show(tabToOpenNo == 4);
-    m_send_data->SetValue(Option::instance().SendUsageStatistics());
+    m_send_data->SetValue(Option::instance().getSendUsageStats());
 
-    wxButton* buttonOk = new wxButton(buttonPanel, wxID_OK, _("&OK "));
+    wxButton* buttonOk = new wxButton(buttonPanel, wxID_OK, _t("&OK "));
     buttonOk->SetDefault();
     buttonOk->SetFocus();
     buttonPanelSizer->Add(buttonOk, g_flagsCenter);
diff -Naur a/src/accountdialog.cpp b/src/accountdialog.cpp
--- a/src/accountdialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/accountdialog.cpp	2025-07-09 01:46:59.624940366 +0200
@@ -32,7 +32,7 @@
 
 #include "model/Model_Infotable.h"
 #include "model/Model_Currency.h"
-#include "model/Model_Attachment.h"
+#include "model/Model_Stock.h"
 
 #include <wx/valnum.h>
 
@@ -58,7 +58,7 @@
 EVT_BUTTON(wxID_CANCEL, mmNewAcctDialog::OnCancel)
 EVT_BUTTON(ID_DIALOG_NEWACCT_BUTTON_CURRENCY, mmNewAcctDialog::OnCurrency)
 EVT_BUTTON(wxID_FILE, mmNewAcctDialog::OnAttachments)
-EVT_MENU_RANGE(wxID_HIGHEST, wxID_HIGHEST + acc_img::MAX_ACC_ICON, mmNewAcctDialog::OnCustonImage)
+EVT_MENU_RANGE(wxID_HIGHEST, wxID_HIGHEST + static_cast<int>(acc_img::MAX_ACC_ICON), mmNewAcctDialog::OnCustonImage)
 EVT_CHOICE(ID_DIALOG_NEWACCT_COMBO_ACCTSTATUS, mmNewAcctDialog::OnAccountStatus)
 wxEND_EVENT_TABLE()
 
@@ -92,7 +92,7 @@
 {
     SetExtraStyle(GetExtraStyle() | wxWS_EX_BLOCK_EVENTS);
     wxDialog::Create(parent, id, caption, pos, size, style);
-    this->SetTitle(_("Edit Account"));
+    this->SetTitle(_t("Edit Account"));
     SetIcon(mmex::getProgramIcon());
 
     CreateControls();
@@ -120,57 +120,61 @@
     grid_sizer->AddGrowableCol(1, 1);
     itemBoxSizer3->Add(grid_sizer, g_flagsExpand);
 
-    grid_sizer->Add(new wxStaticText(this, wxID_STATIC, _("Account Name:")), g_flagsH);
+    grid_sizer->Add(new wxStaticText(this, wxID_STATIC, _t("Account Name:")), g_flagsH);
 
     m_textAccountName = new wxTextCtrl(this, wxID_ANY, "");
-    mmToolTip(m_textAccountName, _("Enter the Name of the Account. This name can be renamed at any time."));
+    mmToolTip(m_textAccountName, _t("Enter the Name of the Account. This name can be renamed at any time."));
     grid_sizer->Add(m_textAccountName, g_flagsExpand);
 
-    grid_sizer->Add(new wxStaticText(this, wxID_STATIC, _("Account Type:")), g_flagsH);
+    grid_sizer->Add(new wxStaticText(this, wxID_STATIC, _t("Account Type:")), g_flagsH);
 
     wxChoice* itemChoice61 = new wxChoice(this, ID_DIALOG_NEWACCT_COMBO_ACCTTYPE);
-    for (const auto& type : Model_Account::TYPE_STR)
+    for (int i = 0; i < Model_Account::TYPE_ID_size; ++i) {
+        wxString type = Model_Account::type_name(i);
         itemChoice61->Append(wxGetTranslation(type), new wxStringClientData(type));
-    if (Model_Account::TYPE_STR.Index(m_account->ACCOUNTTYPE) == wxNOT_FOUND)
+    }
+    if (Model_Account::type_id(m_account->ACCOUNTTYPE, -1) == -1)
         itemChoice61->Append(m_account->ACCOUNTTYPE);
-    mmToolTip(itemChoice61, _("Specify the type of account to be created."));
+    mmToolTip(itemChoice61, _t("Specify the type of account to be created."));
     grid_sizer->Add(itemChoice61, g_flagsExpand);
     itemChoice61->SetSelection(0);
 
-    grid_sizer->Add(new wxStaticText(this, wxID_STATIC, _("Account Status:")), g_flagsH);
+    grid_sizer->Add(new wxStaticText(this, wxID_STATIC, _t("Account Status:")), g_flagsH);
 
     wxChoice* itemChoice6 = new wxChoice(this, ID_DIALOG_NEWACCT_COMBO_ACCTSTATUS);
-    for (const auto& status : Model_Account::STATUS_STR)
+    for (int i = 0; i < Model_Account::STATUS_ID_size; ++i) {
+        wxString status = Model_Account::status_name(i);
         itemChoice6->Append(wxGetTranslation(status), new wxStringClientData(status));
-    mmToolTip(itemChoice6, _("Specify if this account has been closed. Closed accounts are inactive in most calculations, reporting etc."));
+    }
+    mmToolTip(itemChoice6, _t("Specify if this account has been closed. Closed accounts are inactive in most calculations, reporting etc."));
     grid_sizer->Add(itemChoice6, g_flagsExpand);
     itemChoice6->SetSelection(0);
 
-    grid_sizer->Add(new wxStaticText(this, wxID_STATIC, wxString::Format(_("Initial Balance: %s"), "")), g_flagsH);
+    grid_sizer->Add(new wxStaticText(this, wxID_STATIC, wxString::Format(_t("Initial Balance: %s"), "")), g_flagsH);
     m_initbalance_ctrl = new mmTextCtrl(this, ID_DIALOG_NEWACCT_TEXTCTRL_INITBALANCE, "", wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT | wxTE_PROCESS_ENTER, mmCalcValidator());
     grid_sizer->Add(m_initbalance_ctrl, g_flagsExpand);
-    mmToolTip(m_initbalance_ctrl, _("Enter the initial balance in this account."));
+    mmToolTip(m_initbalance_ctrl, _t("Enter the initial balance in this account."));
 
-    grid_sizer->Add(new wxStaticText(this, wxID_STATIC, _("Opening Date:")), g_flagsH);
+    grid_sizer->Add(new wxStaticText(this, wxID_STATIC, _t("Opening Date:")), g_flagsH);
 
     m_initdate_ctrl = new mmDatePickerCtrl(this, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDefaultSize, wxDP_DROPDOWN | wxDP_SHOWCENTURY);
-    mmToolTip(m_initdate_ctrl, _("The date when the account was opened"));
+    mmToolTip(m_initdate_ctrl, _t("The date when the account was opened"));
     grid_sizer->Add(m_initdate_ctrl, g_flagsExpand);
 
-    grid_sizer->Add(new wxStaticText(this, wxID_STATIC, _("Currency:")), g_flagsH);
+    grid_sizer->Add(new wxStaticText(this, wxID_STATIC, _t("Currency:")), g_flagsH);
 
-    wxString currName = _("Select Currency");
+    wxString currName = _t("Select Currency");
     Model_Currency::Data* base_currency = Model_Currency::GetBaseCurrency();
     if (base_currency)
         currName = base_currency->CURRENCYNAME;
 
     wxButton* itemButton71 = new wxButton(this, ID_DIALOG_NEWACCT_BUTTON_CURRENCY, currName);
-    mmToolTip(itemButton71, _("Specify the currency to be used by this account."));
+    mmToolTip(itemButton71, _t("Specify the currency to be used by this account."));
     grid_sizer->Add(itemButton71, g_flagsExpand);
 
-    wxCheckBox* itemCheckBox10 = new wxCheckBox(this, ID_DIALOG_NEWACCT_CHKBOX_FAVACCOUNT, _("Favorite Account"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    wxCheckBox* itemCheckBox10 = new wxCheckBox(this, ID_DIALOG_NEWACCT_CHKBOX_FAVACCOUNT, _t("Favorite Account"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     itemCheckBox10->SetValue(TRUE);
-    mmToolTip(itemCheckBox10, _("Select whether this is an account that is used often. This is used to filter accounts display view."));
+    mmToolTip(itemCheckBox10, _t("Select whether this is an account that is used often. This is used to filter accounts display view."));
     grid_sizer->AddSpacer(1);
     grid_sizer->Add(itemCheckBox10, g_flagsH);
 
@@ -178,16 +182,16 @@
 
     m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxNB_MULTILINE);
     wxPanel* notes_tab = new wxPanel(m_notebook, wxID_ANY);
-    m_notebook->AddPage(notes_tab, _("Notes"));
+    m_notebook->AddPage(notes_tab, _t("Notes"));
     wxBoxSizer *notes_sizer = new wxBoxSizer(wxVERTICAL);
     notes_tab->SetSizer(notes_sizer);
 
     m_notesCtrl = new wxTextCtrl(notes_tab, ID_DIALOG_NEWACCT_TEXTCTRL_NOTES, "", wxDefaultPosition, wxSize(270, 180), wxTE_MULTILINE);
-    mmToolTip(m_notesCtrl, _("Enter user notes and details about this account."));
+    mmToolTip(m_notesCtrl, _t("Enter user notes and details about this account."));
     notes_sizer->Add(m_notesCtrl, g_flagsExpand);
 
     wxPanel* others_tab = new wxPanel(m_notebook, wxID_ANY);
-    m_notebook->AddPage(others_tab, _("Other"));
+    m_notebook->AddPage(others_tab, _t("Other"));
     wxBoxSizer *others_sizer = new wxBoxSizer(wxVERTICAL);
     others_tab->SetSizer(others_sizer);
 
@@ -195,34 +199,34 @@
     grid_sizer2->AddGrowableCol(1, 1);
     others_sizer->Add(grid_sizer2, g_flagsExpand);
 
-    grid_sizer2->Add(new wxStaticText(others_tab, wxID_STATIC, (Model_Account::type_id(m_account) == Model_Account::TYPE_ID_CREDIT_CARD ? _("Card Number:") : _("Account Number:"))), g_flagsH);
+    grid_sizer2->Add(new wxStaticText(others_tab, wxID_STATIC, (Model_Account::type_id(m_account) == Model_Account::TYPE_ID_CREDIT_CARD ? _t("Card Number:") : _t("Account Number:"))), g_flagsH);
     wxTextCtrl* itemTextCtrl6 = new wxTextCtrl(others_tab, ID_ACCTNUMBER, "", wxDefaultPosition, wxDefaultSize);
-    mmToolTip(itemTextCtrl6, _("Enter the Account Number associated with this account."));
+    mmToolTip(itemTextCtrl6, _t("Enter the Account Number associated with this account."));
     grid_sizer2->Add(itemTextCtrl6, g_flagsExpand);
 
-    grid_sizer2->Add(new wxStaticText(others_tab, wxID_STATIC, _("Held At:")), g_flagsH);
+    grid_sizer2->Add(new wxStaticText(others_tab, wxID_STATIC, _t("Held At:")), g_flagsH);
     wxTextCtrl* itemTextCtrl8 = new wxTextCtrl(others_tab, ID_DIALOG_NEWACCT_TEXTCTRL_HELDAT, "");
-    mmToolTip(itemTextCtrl8, _("Enter the name of the financial institution in which the account is held."));
+    mmToolTip(itemTextCtrl8, _t("Enter the name of the financial institution in which the account is held."));
     grid_sizer2->Add(itemTextCtrl8, g_flagsExpand);
 
-    grid_sizer2->Add(new wxStaticText(others_tab, wxID_STATIC, _("Website:")), g_flagsH);
+    grid_sizer2->Add(new wxStaticText(others_tab, wxID_STATIC, _t("Website:")), g_flagsH);
     wxTextCtrl* itemTextCtrl10 = new wxTextCtrl(others_tab, ID_DIALOG_NEWACCT_TEXTCTRL_WEBSITE, "");
-    mmToolTip(itemTextCtrl10, _("Enter the URL of the website for the financial institution."));
+    mmToolTip(itemTextCtrl10, _t("Enter the URL of the website for the financial institution."));
     grid_sizer2->Add(itemTextCtrl10, g_flagsExpand);
 
-    grid_sizer2->Add(new wxStaticText(others_tab, wxID_STATIC, _("Contact:")), g_flagsH);
+    grid_sizer2->Add(new wxStaticText(others_tab, wxID_STATIC, _t("Contact:")), g_flagsH);
     wxTextCtrl* itemTextCtrl12 = new wxTextCtrl(others_tab, ID_DIALOG_NEWACCT_TEXTCTRL_CONTACT, "");
-    mmToolTip(itemTextCtrl12, _("Enter any contact information for the financial institution."));
+    mmToolTip(itemTextCtrl12, _t("Enter any contact information for the financial institution."));
     grid_sizer2->Add(itemTextCtrl12, g_flagsExpand);
 
-    grid_sizer2->Add(new wxStaticText(others_tab, wxID_STATIC, _("Access Info:")), g_flagsH);
+    grid_sizer2->Add(new wxStaticText(others_tab, wxID_STATIC, _t("Access Info:")), g_flagsH);
     wxTextCtrl* itemTextCtrl14 = new wxTextCtrl(others_tab, ID_DIALOG_NEWACCT_TEXTCTRL_ACCESSINFO, "********************");
-    mmToolTip(itemTextCtrl14, _("Enter any login/access information for the financial institution. This is not secure as anyone with access to the mmb file can access it."));
+    mmToolTip(itemTextCtrl14, _t("Enter any login/access information for the financial institution. This is not secure as anyone with access to the mmb file can access it."));
     grid_sizer2->Add(itemTextCtrl14, g_flagsExpand);
 
     //-------------------------------------------------------------------------------------
     wxPanel* statement_tab = new wxPanel(m_notebook, wxID_ANY);
-    m_notebook->AddPage(statement_tab, _("Statement"));
+    m_notebook->AddPage(statement_tab, _t("Statement"));
     wxBoxSizer* statement_sizer = new wxBoxSizer(wxVERTICAL);
     statement_tab->SetSizer(statement_sizer);
 
@@ -230,24 +234,24 @@
     statement_grid_sizer->AddGrowableCol(1, 1);
     statement_sizer->Add(statement_grid_sizer, g_flagsExpand);
 
-    statement_grid_sizer->Add(new wxStaticText(statement_tab, wxID_STATIC, _("Statement:")), g_flagsH);
-    m_statement_lock_ctrl = new wxCheckBox(statement_tab, wxID_ANY, _("Locked"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    mmToolTip(m_statement_lock_ctrl, _("Enable or disable the transaction Lock"));
+    statement_grid_sizer->Add(new wxStaticText(statement_tab, wxID_STATIC, _t("Statement:")), g_flagsH);
+    m_statement_lock_ctrl = new wxCheckBox(statement_tab, wxID_ANY, _t("Locked"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    mmToolTip(m_statement_lock_ctrl, _t("Enable or disable the transaction Lock"));
     statement_grid_sizer->Add(m_statement_lock_ctrl, g_flagsExpand);
 
-    statement_grid_sizer->Add(new wxStaticText(statement_tab, wxID_STATIC, _("Reconciled Date:")), g_flagsH);
+    statement_grid_sizer->Add(new wxStaticText(statement_tab, wxID_STATIC, _t("Reconciled Date:")), g_flagsH);
     m_statement_date_ctrl = new mmDatePickerCtrl(statement_tab, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDefaultSize, wxDP_DROPDOWN | wxDP_SHOWCENTURY);
-    mmToolTip(m_statement_date_ctrl, _("The date of the transaction lock"));
+    mmToolTip(m_statement_date_ctrl, _t("The date of the transaction lock"));
     statement_grid_sizer->Add(m_statement_date_ctrl, g_flagsExpand);
 
-    statement_grid_sizer->Add(new wxStaticText(statement_tab, wxID_STATIC, _("Minimum Bal:")), g_flagsH);
+    statement_grid_sizer->Add(new wxStaticText(statement_tab, wxID_STATIC, _t("Minimum Bal:")), g_flagsH);
     m_minimum_balance_ctrl = new mmTextCtrl(statement_tab, wxID_ANY, "0.00", wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT | wxTE_PROCESS_ENTER, mmCalcValidator());
-    mmToolTip(m_minimum_balance_ctrl, _("Account balance lower limit. Zero to disable"));
+    mmToolTip(m_minimum_balance_ctrl, _t("Account balance lower limit. Zero to disable"));
     statement_grid_sizer->Add(m_minimum_balance_ctrl, g_flagsExpand);
 
     //-------------------------------------------------------------------------------------
     wxPanel* credit_tab = new wxPanel(m_notebook, wxID_ANY);
-    m_notebook->AddPage(credit_tab, _("Credit"));
+    m_notebook->AddPage(credit_tab, _t("Credit"));
     wxBoxSizer* credit_sizer = new wxBoxSizer(wxVERTICAL);
     credit_tab->SetSizer(credit_sizer);
 
@@ -255,21 +259,21 @@
     credit_grid_sizer->AddGrowableCol(1, 1);
     credit_sizer->Add(credit_grid_sizer, g_flagsExpand);
 
-    credit_grid_sizer->Add(new wxStaticText(credit_tab, wxID_STATIC, _("Credit Limit:")), g_flagsH);
+    credit_grid_sizer->Add(new wxStaticText(credit_tab, wxID_STATIC, _t("Credit Limit:")), g_flagsH);
     m_credit_limit_ctrl = new mmTextCtrl(credit_tab, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT | wxTE_PROCESS_ENTER, mmCalcValidator());
-    mmToolTip(m_credit_limit_ctrl, _("Credit limit for the Account. Zero to disable"));
+    mmToolTip(m_credit_limit_ctrl, _t("Credit limit for the Account. Zero to disable"));
     credit_grid_sizer->Add(m_credit_limit_ctrl, g_flagsExpand);
 
-    credit_grid_sizer->Add(new wxStaticText(credit_tab, wxID_STATIC, _("Interest Rate:")), g_flagsH);
+    credit_grid_sizer->Add(new wxStaticText(credit_tab, wxID_STATIC, _t("Interest Rate:")), g_flagsH);
     m_interest_rate_ctrl = new mmTextCtrl(credit_tab, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT | wxTE_PROCESS_ENTER, mmCalcValidator());
     m_interest_rate_ctrl->SetAltPrecision(2);
     credit_grid_sizer->Add(m_interest_rate_ctrl, g_flagsExpand);
 
-    credit_grid_sizer->Add(new wxStaticText(credit_tab, wxID_STATIC, _("Payment Due Date:")), g_flagsH);
+    credit_grid_sizer->Add(new wxStaticText(credit_tab, wxID_STATIC, _t("Payment Due Date:")), g_flagsH);
     m_payment_due_date_ctrl = new mmDatePickerCtrl(credit_tab, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDefaultSize, wxDP_DROPDOWN | wxDP_SHOWCENTURY);
     credit_grid_sizer->Add(m_payment_due_date_ctrl, g_flagsExpand);
 
-    credit_grid_sizer->Add(new wxStaticText(credit_tab, wxID_STATIC, _("Minimum Payment:")), g_flagsH);
+    credit_grid_sizer->Add(new wxStaticText(credit_tab, wxID_STATIC, _t("Minimum Payment:")), g_flagsH);
     m_minimum_payment_ctrl = new mmTextCtrl(credit_tab, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT | wxTE_PROCESS_ENTER, mmCalcValidator());
     credit_grid_sizer->Add(m_minimum_payment_ctrl, g_flagsExpand);
     //-------------------------------------------------------------------------------------
@@ -288,12 +292,12 @@
     itemBoxSizer28->Add(m_bitmapButtons, g_flagsH);
 
     bAttachments_ = new wxBitmapButton(itemPanel27, wxID_FILE, mmBitmapBundle(png::CLIP));
-    mmToolTip(bAttachments_, _("Organize attachments of this account"));
+    mmToolTip(bAttachments_, _t("Organize attachments of this account"));
     itemBoxSizer28->Add(bAttachments_, g_flagsH);
 
     itemBoxSizer28->AddSpacer(20);
 
-    wxButton* itemButton29 = new wxButton(itemPanel27, wxID_OK, _("&OK "));
+    wxButton* itemButton29 = new wxButton(itemPanel27, wxID_OK, _t("&OK "));
     itemBoxSizer28->Add(itemButton29, g_flagsH);
 
     wxButton* itemButton30 = new wxButton(itemPanel27, wxID_CANCEL, wxGetTranslation(g_CancelLabel));
@@ -418,7 +422,7 @@
 
 void mmNewAcctDialog::OnAttachments(wxCommandEvent& /*event*/)
 {
-    wxString RefType = Model_Attachment::REFTYPE_STR_BANKACCOUNT;
+    wxString RefType = Model_Account::refTypeName;
     mmAttachmentDialog dlg(this, RefType, m_account->ACCOUNTID);
     dlg.ShowModal();
 }
@@ -427,7 +431,7 @@
 void mmNewAcctDialog::OnImageButton(wxCommandEvent& /*event*/)
 {
     wxMenu mainMenu;
-    wxMenuItem* menuItem = new wxMenuItem(&mainMenu, wxID_HIGHEST + acc_img::ACC_ICON_MONEY - 1, _("Default Image"));
+    wxMenuItem* menuItem = new wxMenuItem(&mainMenu, wxID_HIGHEST + static_cast<int>(acc_img::ACC_ICON_MONEY) - 1, _t("Default Image"));
 
     menuItem->SetBitmap(m_images.at(Option::instance().AccountImageId(this->m_account->ACCOUNTID, true)));
     mainMenu.Append(menuItem);
@@ -435,7 +439,7 @@
     for (int i = img::LAST_NAVTREE_PNG; i < acc_img::MAX_ACC_ICON; ++i)
     {
         menuItem = new wxMenuItem(&mainMenu, wxID_HIGHEST + i
-            , wxString::Format(_("Image #%i"), i - img::LAST_NAVTREE_PNG + 1));
+            , wxString::Format(_t("Image #%i"), i - img::LAST_NAVTREE_PNG + 1));
         menuItem->SetBitmap(m_images.at(i));
         mainMenu.Append(menuItem);
     }
@@ -448,8 +452,10 @@
     int selectedImage = (event.GetId() - wxID_HIGHEST) - img::LAST_NAVTREE_PNG + 1;
     int image_id = Option::instance().AccountImageId(this->m_account->ACCOUNTID, true);
 
-    Model_Infotable::instance().Set(wxString::Format("ACC_IMAGE_ID_%lld", this->m_account->ACCOUNTID)
-        , selectedImage);
+    Model_Infotable::instance().setInt(
+        wxString::Format("ACC_IMAGE_ID_%lld", this->m_account->ACCOUNTID),
+        selectedImage
+    );
     if (selectedImage != 0)
         image_id = selectedImage + img::LAST_NAVTREE_PNG - 1;
 
@@ -493,18 +499,18 @@
     if (acctName.IsEmpty() || Model_Account::Exist(acctName))
     {
         if (m_account && m_account->ACCOUNTNAME.CmpNoCase(acctName) != 0)
-            return mmErrorDialogs::MessageInvalid(this, _("Account Name "));
+            return mmErrorDialogs::MessageInvalid(this, _t("Account Name "));
     }
 
     Model_Currency::Data* currency = Model_Currency::instance().get(m_currencyID);
     if (!currency)
-        return mmErrorDialogs::MessageInvalid(this, _("Currency"));
+        return mmErrorDialogs::MessageInvalid(this, _t("Currency"));
 
     wxTextCtrl* textCtrlWebsite = static_cast<wxTextCtrl*>(FindWindow(ID_DIALOG_NEWACCT_TEXTCTRL_WEBSITE));
     if (!textCtrlWebsite->GetValue().empty() && !isValidURI(textCtrlWebsite->GetValue()))
     {
         m_notebook->SetSelection(1);
-        return mmErrorDialogs::ToolTip4Object(textCtrlWebsite, _("Please enter a valid URL"), _("Invalid URL"));
+        return mmErrorDialogs::ToolTip4Object(textCtrlWebsite, _t("Please enter a valid URL"), _t("Invalid URL"));
     }
 
     if (!m_initbalance_ctrl->checkValue(m_account->INITIALBAL, false))
@@ -512,7 +518,7 @@
 
     wxString openingDate = m_initdate_ctrl->GetValue().FormatISODate();
     if (openingDate > wxDate::Today().FormatISODate())
-        return mmErrorDialogs::ToolTip4Object(m_initdate_ctrl, _("Opening date is unable to be in the future"), _("Invalid Date"));
+        return mmErrorDialogs::ToolTip4Object(m_initdate_ctrl, _t("Opening date is unable to be in the future"), _t("Invalid Date"));
 
     if (this->m_account)
     {
@@ -521,19 +527,19 @@
         const Model_Checking::Data_Set all_trans_check2 = Model_Checking::instance().find(DB_Table_CHECKINGACCOUNT_V1::TRANSDATE(openingDate, LESS)
                                                                             ,DB_Table_CHECKINGACCOUNT_V1::TOACCOUNTID(m_account->ACCOUNTID, EQUAL));
         if (!all_trans_check1.empty() || !all_trans_check2.empty())
-            return mmErrorDialogs::ToolTip4Object(m_initdate_ctrl, _("Transactions for this account already exist before this date"), _("Invalid Date"));
+            return mmErrorDialogs::ToolTip4Object(m_initdate_ctrl, _t("Transactions for this account already exist before this date"), _t("Invalid Date"));
         
         const Model_Stock::Data_Set all_trans_stock = Model_Stock::instance().find(DB_Table_STOCK_V1::PURCHASEDATE(openingDate, LESS)
                                                    ,DB_Table_STOCK_V1::HELDAT(m_account->ACCOUNTID, EQUAL));
         if (!all_trans_stock.empty())
-            return mmErrorDialogs::ToolTip4Object(m_initdate_ctrl, _("Stock purchases for this account already exist before this date"), _("Invalid Date"));
+            return mmErrorDialogs::ToolTip4Object(m_initdate_ctrl, _t("Stock purchases for this account already exist before this date"), _t("Invalid Date"));
         
         const Model_Billsdeposits::Data_Set all_trans_bd1 = Model_Billsdeposits::instance().find(DB_Table_BILLSDEPOSITS_V1::TRANSDATE(openingDate, LESS)
                                                    ,DB_Table_BILLSDEPOSITS_V1::ACCOUNTID(m_account->ACCOUNTID, EQUAL));
         const Model_Billsdeposits::Data_Set all_trans_bd2 = Model_Billsdeposits::instance().find(DB_Table_BILLSDEPOSITS_V1::TRANSDATE(openingDate, LESS)
                                                    ,DB_Table_BILLSDEPOSITS_V1::TOACCOUNTID(m_account->ACCOUNTID, EQUAL));
         if (!all_trans_bd1.empty() || !all_trans_bd2.empty())
-            return mmErrorDialogs::ToolTip4Object(m_initdate_ctrl, _("Scheduled transactions for this account are scheduled before this date."), _("Invalid Date"));
+            return mmErrorDialogs::ToolTip4Object(m_initdate_ctrl, _t("Scheduled transactions for this account are scheduled before this date."), _t("Invalid Date"));
     } else
         this->m_account = Model_Account::instance().create();
 
@@ -544,7 +550,7 @@
     wxTextCtrl* textCtrlContact = static_cast<wxTextCtrl*>(FindWindow(ID_DIALOG_NEWACCT_TEXTCTRL_CONTACT));
 
     wxChoice* choice = static_cast<wxChoice*>(FindWindow(ID_DIALOG_NEWACCT_COMBO_ACCTSTATUS));
-    m_account->STATUS = Model_Account::STATUS_STR[choice->GetSelection()];
+    m_account->STATUS = Model_Account::status_name(choice->GetSelection());
 
     wxCheckBox* itemCheckBox = static_cast<wxCheckBox*>(FindWindow(ID_DIALOG_NEWACCT_CHKBOX_FAVACCOUNT));
     m_account->FAVORITEACCT = itemCheckBox->IsChecked() ? "TRUE" : "FALSE";
diff -Naur a/src/accountdialog.h b/src/accountdialog.h
--- a/src/accountdialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/accountdialog.h	2025-07-09 01:46:59.624940366 +0200
@@ -38,7 +38,7 @@
 
     bool Create(wxWindow* parent
         , wxWindowID id = wxID_ANY
-        , const wxString& caption = _("New Account")
+        , const wxString& caption = _t("New Account")
         , const wxPoint& pos = wxDefaultPosition
         , const wxSize& size = wxDefaultSize
         , long style = wxCAPTION | wxSYSTEM_MENU | wxCLOSE_BOX);
diff -Naur a/src/appstartdialog.cpp b/src/appstartdialog.cpp
--- a/src/appstartdialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/appstartdialog.cpp	2025-07-09 01:46:59.624940366 +0200
@@ -74,7 +74,7 @@
     try
     {
         bool showBeginApp = itemCheckBox->GetValue();
-        Model_Setting::instance().Set("SHOWBEGINAPP", showBeginApp);
+        Model_Setting::instance().setBool("SHOWBEGINAPP", showBeginApp);
     }
     catch (...)
     {
@@ -98,40 +98,40 @@
     wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxVERTICAL);
     itemBoxSizer3->Add(itemBoxSizer5, 0, wxALIGN_CENTER_HORIZONTAL | wxALL, 5);
 
-    wxButton* itemButton61 = new wxButton(this, wxID_FILE1, _("Open Last Opened &Database"));
+    wxButton* itemButton61 = new wxButton(this, wxID_FILE1, _t("Open Last Opened &Database"));
     itemBoxSizer5->Add(itemButton61, 0, wxGROW | wxALL, 5);
 
-    wxButton* itemButton6 = new wxButton(this, wxID_NEW, _("&New Database"));
-    mmToolTip(itemButton6, _("Create new MMEX database file"));
+    wxButton* itemButton6 = new wxButton(this, wxID_NEW, _t("&New Database"));
+    mmToolTip(itemButton6, _t("Create new MMEX database file"));
     itemBoxSizer5->Add(itemButton6, 0, wxGROW | wxALL, 5);
 
-    wxButton* itemButton7 = new wxButton(this, wxID_OPEN, _("Open &Existing Database"));
-    mmToolTip(itemButton7, _("Open MMEX database file"));
+    wxButton* itemButton7 = new wxButton(this, wxID_OPEN, _t("Open &Existing Database"));
+    mmToolTip(itemButton7, _t("Open MMEX database file"));
     itemBoxSizer5->Add(itemButton7, 0, wxGROW | wxALL, 5);
 
-    wxButton* itemButton8 = new wxButton(this, wxID_SETUP , _("User Interface &Language"));
-    mmToolTip(itemButton8, _("Change user interface language"));
+    wxButton* itemButton8 = new wxButton(this, wxID_SETUP , _t("User Interface &Language"));
+    mmToolTip(itemButton8, _t("Change user interface language"));
     itemBoxSizer5->Add(itemButton8, 0, wxGROW | wxALL, 5);
 
-    wxButton* itemButton9 = new wxButton(this, wxID_HELP, _("&User Manual"));
-    mmToolTip(itemButton9, _("Read MMEX user manual"));
+    wxButton* itemButton9 = new wxButton(this, wxID_HELP, _t("&User Manual"));
+    mmToolTip(itemButton9, _t("Read MMEX user manual"));
     itemBoxSizer5->Add(itemButton9, 0, wxGROW | wxALL, 5);
 
-    wxButton* itemButton10 = new wxButton(this, wxID_INDEX, _("&Website"));
-    const wxString s = wxString::Format(_("Visit MMEX website for the latest news and updates"));
+    wxButton* itemButton10 = new wxButton(this, wxID_INDEX, _t("&Website"));
+    const wxString s = wxString::Format(_t("Visit MMEX website for the latest news and updates"));
     mmToolTip(itemButton10, s);
     itemBoxSizer5->Add(itemButton10, 0, wxGROW | wxALL, 5);
 
-    wxButton* itemButton11 = new wxButton(this, wxID_FORWARD, _("&Forum"));
-    mmToolTip(itemButton11, _("Visit MMEX forum to read and post comments and for support"));
+    wxButton* itemButton11 = new wxButton(this, wxID_FORWARD, _t("&Forum"));
+    mmToolTip(itemButton11, _t("Visit MMEX forum to read and post comments and for support"));
     itemBoxSizer5->Add(itemButton11, 0, wxGROW | wxALL, 5);
 
     wxBoxSizer* itemBoxSizer10 = new wxBoxSizer(wxHORIZONTAL);
     itemBoxSizer2->Add(itemBoxSizer10, 0, wxALIGN_LEFT | wxALL, 5);
 
-    itemCheckBox = new wxCheckBox(this, wxID_STATIC, _("&Show this dialog box at startup"), wxDefaultPosition,
+    itemCheckBox = new wxCheckBox(this, wxID_STATIC, _t("&Show this dialog box at startup"), wxDefaultPosition,
         wxDefaultSize, wxCHK_2STATE);
-    bool showBeginApp = Model_Setting::instance().GetBoolSetting("SHOWBEGINAPP", true);
+    bool showBeginApp = Model_Setting::instance().getBool("SHOWBEGINAPP", true);
     itemCheckBox->SetValue(showBeginApp);
 
     itemBoxSizer10->Add(itemCheckBox, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);
@@ -139,8 +139,8 @@
     wxStaticLine* line = new wxStaticLine(this, wxID_STATIC, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL);
     itemBoxSizer2->Add(line, 0, wxGROW | wxALL, 5);
 
-    m_buttonClose = new wxButton(this, wxID_OK, _("&OK "));
-    m_buttonExit = new wxButton(this, wxID_EXIT, _("E&xit "));
+    m_buttonClose = new wxButton(this, wxID_OK, _t("&OK "));
+    m_buttonExit = new wxButton(this, wxID_EXIT, _t("E&xit "));
 
     m_buttonClose->Show(true);
     m_buttonExit->Show(false);
@@ -156,7 +156,7 @@
     }
     else
     {
-        mmToolTip(itemButton61, wxString::Format(_("Open the previously opened database: %s"), val));
+        mmToolTip(itemButton61, wxString::Format(_t("Open the previously opened database: %s"), val));
     }
 }
 
@@ -205,7 +205,7 @@
             langs[wxGetTranslation(info->Description)] = std::make_pair(info->Language, info->CanonicalName);
     }
 
-    langChoices.Add(_("System default"));
+    langChoices.Add(_t("System default"));
     int current = -1;
     int i = 1;
     for (auto &lang : langs)
@@ -218,7 +218,7 @@
     if ((current < 0)) // Must be wxLANGUAGE_DEFAULT
         current = 0;
 
-    mmSingleChoiceDialog lang_choice(this, _("Change user interface language"), _("User Interface Language"), langChoices);
+    mmSingleChoiceDialog lang_choice(this, _t("Change user interface language"), _t("User Interface Language"), langChoices);
     if (lang_choice.ShowModal() == wxID_OK)
     {
         auto selected = lang_choice.GetStringSelection();
@@ -226,9 +226,9 @@
         wxLanguage lang = static_cast<wxLanguage>(langNo);
         if (lang != m_app->getGUILanguage() && m_app->setGUILanguage(lang))
         mmErrorDialogs::MessageWarning(this
-            , _("The language for this application has been changed. "
+            , _t("The language for this application has been changed. "
                 "The change will take effect the next time the application is started.")
-            , _("Language change"));
+            , _t("Language change"));
     }
 }
 
diff -Naur a/src/assetdialog.cpp b/src/assetdialog.cpp
--- a/src/assetdialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/assetdialog.cpp	2025-07-09 01:46:59.624940366 +0200
@@ -27,10 +27,8 @@
 #include "util.h"
 #include "validators.h"
 
-#include "model/Model_Attachment.h"
 #include "usertransactionpanel.h"
 #include "accountdialog.h"
-#include "mmframe.h"
 
 #include <wx/valnum.h>
 
@@ -48,15 +46,15 @@
 
 mmAssetDialog::mmAssetDialog(wxWindow* parent, Model_Asset::Data* asset, const bool trans_data)
     : m_asset(asset)
-    , m_dialog_heading (_("New Asset"))
+    , m_dialog_heading (_t("New Asset"))
 {
     if (m_asset || trans_data)
     {
-        m_dialog_heading = _("Edit Asset");
+        m_dialog_heading = _t("Edit Asset");
         if (trans_data)
         {
             m_hidden_trans_entry = false;
-            m_dialog_heading = _("Add Asset Transaction");
+            m_dialog_heading = _t("Add Asset Transaction");
         }
     }
 
@@ -64,16 +62,15 @@
     Create(parent, wxID_ANY, m_dialog_heading);
 }
 
-mmAssetDialog::mmAssetDialog(wxWindow* parent, mmGUIFrame* gui_frame, Model_Translink::Data* transfer_entry, Model_Checking::Data* checking_entry)
-    : m_gui_frame(gui_frame)
-    , m_transfer_entry(transfer_entry)
+mmAssetDialog::mmAssetDialog(wxWindow* parent, Model_Translink::Data* transfer_entry, Model_Checking::Data* checking_entry)
+    : m_transfer_entry(transfer_entry)
     , m_checking_entry(checking_entry)
-    , m_dialog_heading (_("Add Asset Transaction"))
+    , m_dialog_heading (_t("Add Asset Transaction"))
     , m_hidden_trans_entry(false)
 {
     if (transfer_entry)
     {
-        m_dialog_heading = _("Edit Asset Transaction");
+        m_dialog_heading = _t("Edit Asset Transaction");
         m_asset = Model_Asset::instance().get(transfer_entry->LINKRECORDID);
     }
 
@@ -111,7 +108,11 @@
         m_assetName->Enable(false);
     m_dpc->SetValue(Model_Asset::STARTDATE(m_asset));
     m_assetType->SetSelection(Model_Asset::type_id(m_asset));
-    m_value->SetValue(std::abs(m_asset->VALUE));
+    if (Model_Account::instance().get(m_asset->ASSETTYPE)) m_assetType->Enable(false);
+
+    auto bal = Model_Asset::value(m_asset);
+    m_value->SetValue(bal.first);
+    m_curr_val->SetValue(bal.second);
 
     int valueChangeType = Model_Asset::change_id(m_asset);
     m_valueChange->SetSelection(valueChangeType);
@@ -128,21 +129,21 @@
 
     m_notes->SetValue(m_asset->NOTES);
 
-    Model_Translink::Data_Set translink = Model_Translink::TranslinkList(
-        Model_Attachment::REFTYPE_ID_ASSET, m_asset->ASSETID
-    );
+    Model_Translink::Data_Set translink = Model_Translink::TranslinkList<Model_Asset>(m_asset->ASSETID);
     if (!translink.empty())
         m_value->Enable(false);
 
     // Set up the transaction if this is the first entry.
     if (translink.empty())
-        m_transaction_panel->SetTransactionValue(m_asset->VALUE);
+        m_transaction_panel->SetTransactionValue(bal.first);
 
     if (!m_hidden_trans_entry) {
         m_assetName->Enable(false);
         m_dpc->Enable(false);
         m_assetType->Enable(false);
         m_value->Enable(false);
+        m_valueChange->Enable(false);
+        m_valueChange->Enable(false);
     }
 
     if (m_checking_entry && !m_checking_entry->DELETEDTIME.IsEmpty()) {
@@ -170,7 +171,7 @@
     /********************************************************************
     Asset Details Panel
     *********************************************************************/
-    wxStaticBox* details_frame = new wxStaticBox(this, wxID_ANY, _("Asset Details"));
+    wxStaticBox* details_frame = new wxStaticBox(this, wxID_ANY, _t("Asset Details"));
     wxStaticBoxSizer* details_frame_sizer = new wxStaticBoxSizer(details_frame, wxVERTICAL);
     left_sizer->Add(details_frame_sizer, g_flagsV);
 
@@ -180,30 +181,32 @@
     wxFlexGridSizer* itemFlexGridSizer6 = new wxFlexGridSizer(0, 2, 0, 0);
     asset_details_panel->SetSizer(itemFlexGridSizer6);
 
-    wxStaticText* n = new wxStaticText(asset_details_panel, wxID_STATIC, _("Name"));
+    wxStaticText* n = new wxStaticText(asset_details_panel, wxID_STATIC, _t("Name"));
     itemFlexGridSizer6->Add(n, g_flagsH);
     n->SetFont(this->GetFont().Bold());
 
     m_assetName = new wxTextCtrl(asset_details_panel, wxID_ANY, wxGetEmptyString());
-    mmToolTip(m_assetName, _("Enter the name of the asset"));
+    mmToolTip(m_assetName, _t("Enter the name of the asset"));
     itemFlexGridSizer6->Add(m_assetName, g_flagsExpand);
 
-    itemFlexGridSizer6->Add(new wxStaticText(asset_details_panel, wxID_STATIC, _("Date")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText(asset_details_panel, wxID_STATIC, _t("Date")), g_flagsH);
     m_dpc = new mmDatePickerCtrl(asset_details_panel, wxID_ANY);
     itemFlexGridSizer6->Add(m_dpc->mmGetLayout(false));
-    mmToolTip(m_dpc, _("Specify the date of purchase of asset"));
+    mmToolTip(m_dpc, _t("Specify the date of purchase of asset"));
 
-    itemFlexGridSizer6->Add(new wxStaticText(asset_details_panel, wxID_STATIC, _("Asset Type")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText(asset_details_panel, wxID_STATIC, _t("Asset Type")), g_flagsH);
 
     m_assetType = new wxChoice(asset_details_panel, wxID_STATIC);
-    for (const auto& a : Model_Asset::TYPE_STR)
-        m_assetType->Append(wxGetTranslation(a), new wxStringClientData(a));
+    for (int i = 0; i < Model_Asset::TYPE_ID_size; ++i) {
+        wxString type = Model_Asset::type_name(i);
+        m_assetType->Append(wxGetTranslation(type), new wxStringClientData(type));
+    }
 
-    mmToolTip(m_assetType, _("Select type of asset"));
+    mmToolTip(m_assetType, _t("Select type of asset"));
     m_assetType->SetSelection(Model_Asset::TYPE_ID_PROPERTY);
     itemFlexGridSizer6->Add(m_assetType, g_flagsExpand);
 
-    wxStaticText* v = new wxStaticText(asset_details_panel, wxID_STATIC, _("Value"));
+    wxStaticText* v = new wxStaticText(asset_details_panel, wxID_STATIC, _t("Initial Value"));
     itemFlexGridSizer6->Add(v, g_flagsH);
     v->SetFont(this->GetFont().Bold());
 
@@ -212,30 +215,45 @@
         wxDefaultPosition, wxSize(150,-1), wxALIGN_RIGHT|wxTE_PROCESS_ENTER,
         mmCalcValidator()
     );
-    mmToolTip(m_value, _("Enter the current value of the asset"));
+    mmToolTip(m_value, _t("Enter the current value of the asset"));
     itemFlexGridSizer6->Add(m_value, g_flagsExpand);
 
-    itemFlexGridSizer6->Add(new wxStaticText(asset_details_panel, wxID_STATIC, _("Change in Value")), g_flagsH);
+    wxStaticText* c = new wxStaticText(asset_details_panel, wxID_STATIC, _t("Current Value"));
+    itemFlexGridSizer6->Add(c, g_flagsH);
+    c->SetFont(this->GetFont().Bold());
+
+    m_curr_val = new mmTextCtrl(
+        asset_details_panel, IDC_CURR_VAL, wxGetEmptyString(),
+        wxDefaultPosition, wxSize(150,-1), wxALIGN_RIGHT|wxTE_PROCESS_ENTER,
+        mmCalcValidator()
+    );
+    m_curr_val->Enable(false);
+    mmToolTip(m_curr_val, _t("The current value of the asset"));
+    itemFlexGridSizer6->Add(m_curr_val, g_flagsExpand);
+
+    itemFlexGridSizer6->Add(new wxStaticText(asset_details_panel, wxID_STATIC, _t("Change in Value")), g_flagsH);
 
     m_valueChange = new wxChoice(asset_details_panel, IDC_COMBO_TYPE);
-    for(const auto& a : Model_Asset::CHANGE_STR)
-        m_valueChange->Append(wxGetTranslation(a));
+    for (int i = 0; i < Model_Asset::CHANGE_ID_size; ++i) {
+        wxString change = Model_Asset::change_name(i);
+        m_valueChange->Append(wxGetTranslation(change));
+    }
 
-    mmToolTip(m_valueChange, _("Specify if the value of the asset changes over time"));
+    mmToolTip(m_valueChange, _t("Specify if the value of the asset changes over time"));
     m_valueChange->SetSelection(Model_Asset::CHANGE_ID_NONE);
     itemFlexGridSizer6->Add(m_valueChange, g_flagsExpand);
 
-    m_compoundingLabel = new wxStaticText(asset_details_panel, wxID_STATIC, _("Compounding Period"));
+    m_compoundingLabel = new wxStaticText(asset_details_panel, wxID_STATIC, _t("Compounding Period"));
     itemFlexGridSizer6->Add(m_compoundingLabel, g_flagsH);
     m_compoundingChoice = new wxChoice(asset_details_panel, IDC_COMPOUNDING);
     for(const auto& a : Option::COMPOUNDING_NAME)
         m_compoundingChoice->Append(wxGetTranslation(a.second));
-    mmToolTip(m_compoundingChoice, _("Select the compounding period for the appreciation/depreciation rate"));
-    m_compounding = static_cast<Option::COMPOUNDING_ID>(Option::instance().AssetCompounding());
+    mmToolTip(m_compoundingChoice, _t("Select the compounding period for the appreciation/depreciation rate"));
+    m_compounding = static_cast<Option::COMPOUNDING_ID>(Option::instance().getAssetCompounding());
     m_compoundingChoice->SetSelection(m_compounding);
     itemFlexGridSizer6->Add(m_compoundingChoice, g_flagsExpand);
 
-    m_valueChangeRateLabel = new wxStaticText(asset_details_panel, wxID_STATIC, _("% Rate"));
+    m_valueChangeRateLabel = new wxStaticText(asset_details_panel, wxID_STATIC, _t("% Rate"));
     itemFlexGridSizer6->Add(m_valueChangeRateLabel, g_flagsH);
     m_valueChangeRate = new mmTextCtrl(
         asset_details_panel, IDC_RATE, wxGetEmptyString(),
@@ -243,36 +261,36 @@
         mmCalcValidator()
     );
     m_valueChangeRate->SetAltPrecision(3);
-    mmToolTip(m_valueChangeRate, _("Enter the rate at which the asset changes its value in percentage per year"));
+    mmToolTip(m_valueChangeRate, _t("Enter the rate at which the asset changes its value in percentage per year"));
     itemFlexGridSizer6->Add(m_valueChangeRate, g_flagsExpand);
     enableDisableRate(false);
 
-    itemFlexGridSizer6->Add(new wxStaticText( asset_details_panel, wxID_STATIC, _("Notes")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText( asset_details_panel, wxID_STATIC, _t("Notes")), g_flagsH);
 
     bAttachments_ = new wxBitmapButton(asset_details_panel, wxID_FILE
         , mmBitmapBundle(png::CLIP, mmBitmapButtonSize), wxDefaultPosition
         , wxSize(m_valueChange->GetSize().GetY(), m_valueChange->GetSize().GetY()));
     itemFlexGridSizer6->Add(bAttachments_, wxSizerFlags(g_flagsV).Align(wxALIGN_RIGHT));
-    mmToolTip(bAttachments_, _("Organize attachments of this asset"));
+    mmToolTip(bAttachments_, _t("Organize attachments of this asset"));
 
     m_notes = new wxTextCtrl(this, IDC_NOTES, wxGetEmptyString(), wxDefaultPosition, wxSize(220, 170), wxTE_MULTILINE);
-    mmToolTip(m_notes, _("Enter notes associated with this asset"));
+    mmToolTip(m_notes, _t("Enter notes associated with this asset"));
     details_frame_sizer->Add(m_notes, 0, wxGROW | wxLEFT | wxRIGHT | wxBOTTOM, 10);
 
     /********************************************************************
     Asset Transaction Panel
     *********************************************************************/
-    wxString trans_frame_heading = _("New Transaction Details");
+    wxString trans_frame_heading = _t("New Transaction Details");
     if (m_checking_entry)
     {
-        trans_frame_heading = _("Edit Transaction Details");
+        trans_frame_heading = _t("Edit Transaction Details");
     }
 
     m_transaction_frame = new wxStaticBox(this, wxID_ANY, trans_frame_heading);
     wxStaticBoxSizer* transaction_frame_sizer = new wxStaticBoxSizer(m_transaction_frame, wxVERTICAL);
     right_sizer->Add(transaction_frame_sizer, g_flagsV);
 
-    m_transaction_panel = new UserTransactionPanel(this, m_checking_entry, wxID_STATIC);
+    m_transaction_panel = new UserTransactionPanel(this, m_checking_entry, true, wxID_STATIC);
     transaction_frame_sizer->Add(m_transaction_panel, g_flagsV);
     if (m_transfer_entry && m_checking_entry)
     {
@@ -282,7 +300,7 @@
     {
         if (m_asset)
         {
-            m_transaction_panel->SetTransactionNumber(m_asset->ASSETNAME);
+            m_transaction_panel->SetTransactionNumber(m_asset->ASSETID.ToString() + "_" + m_asset->ASSETNAME);
             m_transaction_panel->CheckingType(Model_Translink::AS_INCOME_EXPENSE);
         }
     }
@@ -299,8 +317,8 @@
     *********************************************************************/
     wxPanel* button_panel = new wxPanel(this, wxID_STATIC);
     wxBoxSizer* button_panel_sizer = new wxBoxSizer(wxHORIZONTAL);
-    wxButton* ok_button = new wxButton(button_panel, wxID_OK, _("&OK "));
-    wxButton* cancel_button = new wxButton(button_panel, wxID_CANCEL, _("&Cancel "));
+    wxButton* ok_button = new wxButton(button_panel, wxID_OK, _t("&OK "));
+    wxButton* cancel_button = new wxButton(button_panel, wxID_CANCEL, _t("&Cancel "));
 
     main_sizer->Add(button_panel, wxSizerFlags(g_flagsV).Center());
     button_panel->SetSizer(button_panel_sizer);
@@ -395,11 +413,11 @@
     m_asset->STARTDATE        = m_dpc->GetValue().FormatISODate();
     m_asset->NOTES            = m_notes->GetValue().Trim();
     m_asset->ASSETNAME        = name;
-    m_asset->ASSETSTATUS      = Model_Asset::STATUS_STR[Model_Asset::STATUS_ID_OPEN];
-    m_asset->VALUECHANGEMODE  = Model_Asset::CHANGEMODE_STR[Model_Asset::CHANGEMODE_ID_PERCENTAGE];  
+    m_asset->ASSETSTATUS      = Model_Asset::status_name(Model_Asset::STATUS_ID_OPEN);
+    m_asset->VALUECHANGEMODE  = Model_Asset::changemode_name(Model_Asset::CHANGEMODE_ID_PERCENTAGE);  
     m_asset->CURRENCYID       = -1; 
     m_asset->VALUE            = value;
-    m_asset->VALUECHANGE      = Model_Asset::CHANGE_STR[valueChangeType];
+    m_asset->VALUECHANGE      = Model_Asset::change_name(valueChangeType);
     m_asset->VALUECHANGERATE  = valueChangeRate;
     m_asset->ASSETTYPE        = asset_type;
 
@@ -407,7 +425,7 @@
     int64 new_asset_id = Model_Asset::instance().save(m_asset);
 
     if (old_asset_id < 0) {
-        const wxString& RefType = Model_Attachment::REFTYPE_STR_ASSET;
+        const wxString& RefType = Model_Asset::refTypeName;
         mmAttachmentManage::RelocateAllAttachments(RefType, 0, RefType, new_asset_id);
     }
     if (m_transaction_panel->ValidCheckingAccountEntry()) {
@@ -423,15 +441,15 @@
         Model_Translink::UpdateAssetValue(m_asset);
     }
     else if (!m_hidden_trans_entry) {
-        mmErrorDialogs::MessageWarning(this, _("Invalid Transaction"), m_dialog_heading);
+        mmErrorDialogs::MessageWarning(this, _t("Invalid Transaction"), m_dialog_heading);
         return;
     }
 
     Model_Account::Data* asset_account = Model_Account::instance().get(name);
     if (is_new && !asset_account) {
         if (wxMessageBox(
-            _("Asset Account not found.\n\nWould you want to create one?"),
-            _("New Asset"), wxYES_NO | wxICON_INFORMATION
+            _t("Asset account not found.") + "\n\n" + _t("Do you want to create one?"),
+            _t("New Asset"), wxYES_NO | wxICON_INFORMATION
         ) == wxYES) {
             CreateAssetAccount();
         }
@@ -453,20 +471,17 @@
 void mmAssetDialog::CreateAssetAccount()
 {
     Model_Account::Data* asset_account = Model_Account::instance().create();
-    asset_account->ACCOUNTNAME = m_asset->ASSETNAME;
-    asset_account->ACCOUNTTYPE = Model_Account::TYPE_STR_ASSET;
-    asset_account->FAVORITEACCT = "TRUE";
-    asset_account->STATUS = Model_Account::STATUS_STR_OPEN;
+    asset_account->ACCOUNTNAME = m_asset->ASSETTYPE;
+    asset_account->ACCOUNTTYPE = Model_Account::TYPE_NAME_ASSET;
+    asset_account->FAVORITEACCT = "FALSE";
+    asset_account->STATUS = Model_Account::STATUS_NAME_OPEN;
     asset_account->INITIALBAL = 0;
-    asset_account->INITIALDATE = wxDate::Today().FormatISODate();
+    asset_account->INITIALDATE = m_asset->STARTDATE;
     asset_account->CURRENCYID = Model_Currency::GetBaseCurrency()->CURRENCYID;
     Model_Account::instance().save(asset_account);
 
-    mmNewAcctDialog account_dialog(asset_account, this);
-    account_dialog.ShowModal();
-
     mmAssetDialog asset_dialog(this, m_asset, true);
-    asset_dialog.SetTransactionAccountName(m_asset->ASSETNAME);
+    asset_dialog.SetTransactionAccountName(m_asset->ASSETTYPE);
     asset_dialog.SetTransactionDate();
     asset_dialog.ShowModal();
 }
@@ -477,7 +492,7 @@
         return;
     else
     {
-        const wxString& RefType = Model_Attachment::REFTYPE_STR_ASSET;
+        const wxString& RefType = Model_Asset::refTypeName;
         if (!this->m_asset)
             mmAttachmentManage::DeleteAllAttachments(RefType, 0);
         EndModal(wxID_CANCEL);
@@ -486,7 +501,7 @@
 
 void mmAssetDialog::OnQuit(wxCloseEvent& /*event*/)
 {
-    const wxString& RefType = Model_Attachment::REFTYPE_STR_ASSET;
+    const wxString& RefType = Model_Asset::refTypeName;
     if (!this->m_asset)
         mmAttachmentManage::DeleteAllAttachments(RefType, 0);
     EndModal(wxID_CANCEL);
@@ -494,7 +509,7 @@
 
 void mmAssetDialog::OnAttachments(wxCommandEvent& /*event*/)
 {
-    const wxString& RefType = Model_Attachment::REFTYPE_STR_ASSET;
+    const wxString& RefType = Model_Asset::refTypeName;
     int64 RefId;
     
     if (!this->m_asset)
diff -Naur a/src/assetdialog.h b/src/assetdialog.h
--- a/src/assetdialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/assetdialog.h	2025-07-09 01:46:59.624940366 +0200
@@ -35,7 +35,7 @@
 public:
     mmAssetDialog(){};
     mmAssetDialog(wxWindow *parent, Model_Asset::Data* asset, const bool trans_data = false);
-    mmAssetDialog(wxWindow *parent, mmGUIFrame* gui_frame, Model_Translink::Data* transfer_entry, Model_Checking::Data* checking_entry);
+    mmAssetDialog(wxWindow *parent, Model_Translink::Data* transfer_entry, Model_Checking::Data* checking_entry);
 
     Model_Asset::Data* m_asset = nullptr;
     void SetTransactionAccountName(const wxString& account_name);
@@ -62,12 +62,12 @@
     void CreateAssetAccount();
     void HideTransactionPanel();
 private:
-    mmGUIFrame* m_gui_frame = nullptr;
     wxChoice*  m_assetType = nullptr;
     wxTextCtrl* m_assetName = nullptr;
     mmDatePickerCtrl* m_dpc = nullptr;
     wxTextCtrl* m_notes = nullptr;
     mmTextCtrl* m_value = nullptr;
+    mmTextCtrl* m_curr_val = nullptr;
     wxChoice* m_valueChange = nullptr;
     wxStaticText* m_compoundingLabel = nullptr;
     wxChoice* m_compoundingChoice = nullptr;
@@ -79,7 +79,7 @@
     UserTransactionPanel* m_transaction_panel = nullptr;
     Model_Translink::Data* m_transfer_entry = nullptr;
     Model_Checking::Data* m_checking_entry = nullptr;
-    wxString m_dialog_heading = _("New Asset");
+    wxString m_dialog_heading = _t("New Asset");
     bool m_hidden_trans_entry = true;
     bool assetRichText = true;
 
@@ -87,6 +87,7 @@
     {
         IDC_COMBO_TYPE = wxID_HIGHEST + 1100,
         IDC_VALUE,
+        IDC_CURR_VAL,
         IDC_COMPOUNDING,
         IDC_RATE,
         IDC_NOTES,
diff -Naur a/src/assetspanel.cpp b/src/assetspanel.cpp
--- a/src/assetspanel.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/assetspanel.cpp	2025-07-09 01:46:59.624940366 +0200
@@ -27,60 +27,55 @@
 #include "model/allmodel.h"
 #include <wx/srchctrl.h>
 
-/*******************************************************/
-
 wxBEGIN_EVENT_TABLE(mmAssetsListCtrl, mmListCtrl)
-    EVT_LIST_ITEM_ACTIVATED(wxID_ANY,   mmAssetsListCtrl::OnListItemActivated)
-    EVT_LIST_ITEM_SELECTED(wxID_ANY,    mmAssetsListCtrl::OnListItemSelected)
-    EVT_LIST_END_LABEL_EDIT(wxID_ANY,   mmAssetsListCtrl::OnEndLabelEdit)
     EVT_RIGHT_DOWN(mmAssetsListCtrl::OnMouseRightClick)
     EVT_LEFT_DOWN(mmAssetsListCtrl::OnListLeftClick)
 
-    EVT_MENU(MENU_TREEPOPUP_NEW,    mmAssetsListCtrl::OnNewAsset)
-    EVT_MENU(MENU_TREEPOPUP_EDIT,   mmAssetsListCtrl::OnEditAsset)
-    EVT_MENU(MENU_TREEPOPUP_ADDTRANS, mmAssetsListCtrl::OnAddAssetTrans)
-    EVT_MENU(MENU_TREEPOPUP_VIEWTRANS, mmAssetsListCtrl::OnViewAssetTrans)
-    EVT_MENU(MENU_TREEPOPUP_GOTOACCOUNT, mmAssetsListCtrl::OnGotoAssetAccount)
-    EVT_MENU(MENU_TREEPOPUP_DELETE, mmAssetsListCtrl::OnDeleteAsset)
-    EVT_MENU(MENU_ON_DUPLICATE_TRANSACTION, mmAssetsListCtrl::OnDuplicateAsset)
+    EVT_LIST_ITEM_ACTIVATED(wxID_ANY, mmAssetsListCtrl::OnListItemActivated)
+    EVT_LIST_ITEM_SELECTED(wxID_ANY,  mmAssetsListCtrl::OnListItemSelected)
+    EVT_LIST_END_LABEL_EDIT(wxID_ANY, mmAssetsListCtrl::OnEndLabelEdit)
+    EVT_LIST_KEY_DOWN(wxID_ANY,       mmAssetsListCtrl::OnListKeyDown)
+
+    EVT_MENU(MENU_TREEPOPUP_NEW,                  mmAssetsListCtrl::OnNewAsset)
+    EVT_MENU(MENU_TREEPOPUP_EDIT,                 mmAssetsListCtrl::OnEditAsset)
+    EVT_MENU(MENU_TREEPOPUP_ADDTRANS,             mmAssetsListCtrl::OnAddAssetTrans)
+    EVT_MENU(MENU_TREEPOPUP_VIEWTRANS,            mmAssetsListCtrl::OnViewAssetTrans)
+    EVT_MENU(MENU_TREEPOPUP_GOTOACCOUNT,          mmAssetsListCtrl::OnGotoAssetAccount)
+    EVT_MENU(MENU_TREEPOPUP_DELETE,               mmAssetsListCtrl::OnDeleteAsset)
     EVT_MENU(MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS, mmAssetsListCtrl::OnOrganizeAttachments)
-
-    EVT_LIST_KEY_DOWN(wxID_ANY, mmAssetsListCtrl::OnListKeyDown)
+    EVT_MENU(MENU_ON_DUPLICATE_TRANSACTION,       mmAssetsListCtrl::OnDuplicateAsset)
 wxEND_EVENT_TABLE()
-/*******************************************************/
 
-mmAssetsListCtrl::mmAssetsListCtrl(mmAssetsPanel* cp, wxWindow *parent, wxWindowID winid)
-: mmListCtrl(parent, winid)
-, m_panel(cp)
+const std::vector<ListColumnInfo> mmAssetsListCtrl::LIST_INFO = {
+    { LIST_ID_ICON,          true, _n("Icon"),          25,  _FL, false },
+    { LIST_ID_ID,            true, _n("ID"),            _WA, _FR, true },
+    { LIST_ID_NAME,          true, _n("Name"),          150, _FL, true },
+    { LIST_ID_DATE,          true, _n("Date"),          _WH, _FL, true },
+    { LIST_ID_TYPE,          true, _n("Type"),          _WH, _FL, true },
+    { LIST_ID_VALUE_INITIAL, true, _n("Initial Value"), _WH, _FR, true },
+    { LIST_ID_VALUE_CURRENT, true, _n("Current Value"), _WH, _FR, true },
+    { LIST_ID_NOTES,         true, _n("Notes"),         450, _FL, true },
+};
+
+mmAssetsListCtrl::mmAssetsListCtrl(mmAssetsPanel* cp, wxWindow *parent, wxWindowID winid) :
+    mmListCtrl(parent, winid),
+    m_panel(cp)
 {
     mmThemeMetaColour(this, meta::COLOR_LISTPANEL);
 
-    m_columns.push_back(PANEL_COLUMN(" ", 25, wxLIST_FORMAT_LEFT, false));
-    m_real_columns.push_back(m_panel->COL_ICON);
-    m_columns.push_back(PANEL_COLUMN(_("ID"), wxLIST_AUTOSIZE, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(m_panel->COL_ID);
-    m_columns.push_back(PANEL_COLUMN(_("Name"), 150, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(m_panel->COL_NAME);
-    m_columns.push_back(PANEL_COLUMN(_("Date"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(m_panel->COL_DATE);
-    m_columns.push_back(PANEL_COLUMN(_("Type"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(m_panel->COL_TYPE);
-    m_columns.push_back(PANEL_COLUMN(_("Initial Value"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(m_panel->COL_VALUE_INITIAL);
-    m_columns.push_back(PANEL_COLUMN(_("Current Value"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(m_panel->COL_VALUE_CURRENT);
-    m_columns.push_back(PANEL_COLUMN(_("Notes"), 450, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(m_panel->COL_NOTES);
-
-    m_col_width = "ASSETS_COL%d_WIDTH";
-    m_col_idstr = "ASSETS";
-
-    CreateColumns();
-
-    // load the global variables
-    m_default_sort_column = m_panel->col_sort();
-    m_selected_col = Model_Setting::instance().GetIntSetting("ASSETS_SORT_COL", m_default_sort_column);
-    m_asc = Model_Setting::instance().GetBoolSetting("ASSETS_ASC", true);
+    m_setting_name = "ASSETS";
+    o_col_order_prefix = "ASSETS";
+    o_col_width_prefix = "ASSETS_COL";
+    o_sort_prefix = "ASSETS";
+    m_col_info_id = LIST_INFO;
+    m_col_id_nr = ListColumnInfo::getListId(LIST_INFO);
+    m_sort_col_id = { LIST_ID_DATE };
+    createColumns();
+}
+
+int mmAssetsListCtrl::getSortIcon(bool asc) const
+{
+    return asc ? mmAssetsPanel::ICON_UPARROW : mmAssetsPanel::ICON_DOWNARROW;
 }
 
 void mmAssetsListCtrl::OnMouseRightClick(wxMouseEvent& event)
@@ -97,19 +92,19 @@
     }
     m_panel->updateExtraAssetData(m_selected_row);
     wxMenu menu;
-    menu.Append(MENU_TREEPOPUP_NEW, _u("&New Asset…"));
+    menu.Append(MENU_TREEPOPUP_NEW, _tu("&New Asset…"));
     menu.AppendSeparator();
-    menu.Append(MENU_ON_DUPLICATE_TRANSACTION, _u("D&uplicate Asset…"));
+    menu.Append(MENU_ON_DUPLICATE_TRANSACTION, _tu("D&uplicate Asset…"));
     menu.AppendSeparator();
-    menu.Append(MENU_TREEPOPUP_ADDTRANS, _u("&Add Asset Transaction…"));
-    menu.Append(MENU_TREEPOPUP_VIEWTRANS, _("&View Asset Transactions"));
-    menu.Append(MENU_TREEPOPUP_GOTOACCOUNT, _u("&Open Asset Account…"));
+    menu.Append(MENU_TREEPOPUP_ADDTRANS, _tu("&Add Asset Transaction…"));
+    menu.Append(MENU_TREEPOPUP_VIEWTRANS, _t("&View Asset Transactions"));
+    menu.Append(MENU_TREEPOPUP_GOTOACCOUNT, _tu("&Open Asset Account…"));
     menu.AppendSeparator();
-    menu.Append(MENU_TREEPOPUP_EDIT, _u("&Edit Asset…"));
+    menu.Append(MENU_TREEPOPUP_EDIT, _tu("&Edit Asset…"));
     menu.AppendSeparator();
-    menu.Append(MENU_TREEPOPUP_DELETE, _u("&Delete Asset…"));
+    menu.Append(MENU_TREEPOPUP_DELETE, _tu("&Delete Asset…"));
     menu.AppendSeparator();
-    menu.Append(MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS, _u("&Organize Attachments…"));
+    menu.Append(MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS, _tu("&Organize Attachments…"));
     if (m_selected_row < 0)
     {
         menu.Enable(MENU_ON_DUPLICATE_TRANSACTION, false);
@@ -119,10 +114,13 @@
         menu.Enable(MENU_TREEPOPUP_DELETE, false);
         menu.Enable(MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS, false);
     }
-
-    const auto& asset_accounts = Model_Account::instance().find(Model_Account::ACCOUNTTYPE(Model_Account::TYPE_STR_ASSET));
-    menu.Enable(MENU_TREEPOPUP_GOTOACCOUNT, !asset_accounts.empty());
-    menu.Enable(MENU_TREEPOPUP_VIEWTRANS, !asset_accounts.empty());
+    else
+    {
+        auto asset_account = Model_Account::instance().get(m_panel->m_assets[m_selected_row].ASSETNAME);  // ASSETNAME <=> ACCOUNTNAME
+        if (!asset_account) asset_account = Model_Account::instance().get(m_panel->m_assets[m_selected_row].ASSETTYPE);  // ASSETTYPE <=> ACCOUNTNAME
+        menu.Enable(MENU_TREEPOPUP_GOTOACCOUNT, asset_account);
+        menu.Enable(MENU_TREEPOPUP_VIEWTRANS, asset_account);
+    }
 
     PopupMenu(&menu, event.GetPosition());
 }
@@ -139,9 +137,9 @@
     event.Skip();
 }
 
-wxString mmAssetsListCtrl::OnGetItemText(long item, long column) const
+wxString mmAssetsListCtrl::OnGetItemText(long item, long col_nr) const
 {
-    return m_panel->getItem(item, m_real_columns[column]);
+    return m_panel->getItem(item, getColId_Nr(col_nr));
 }
 
 void mmAssetsListCtrl::OnListItemSelected(wxListEvent& event)
@@ -180,12 +178,12 @@
 
 void mmAssetsListCtrl::doRefreshItems(int64 trx_id)
 {
-    int selectedIndex = m_panel->initVirtualListControl(trx_id, m_selected_col, m_asc);
+    int selectedIndex = m_panel->initVirtualListControl(trx_id);
 
     long cnt = static_cast<long>(m_panel->m_assets.size());
 
     if (selectedIndex >= cnt || selectedIndex < 0)
-        selectedIndex = m_asc ? cnt - 1 : 0;
+        selectedIndex = getSortAsc() ? cnt - 1 : 0;
 
     if (cnt>0)
         RefreshItems(0, cnt > 0 ? --cnt : 0);
@@ -206,18 +204,18 @@
     if (m_selected_row < 0)    return;
 
     wxMessageDialog msgDlg(this
-        , _("Do you really want to delete the Asset?")
-        , _("Confirm Asset Deletion")
+        , _t("Do you want to delete the asset?")
+        , _t("Confirm Asset Deletion")
         , wxYES_NO | wxNO_DEFAULT | wxICON_ERROR);
 
     if (msgDlg.ShowModal() == wxID_YES)
     {
         const Model_Asset::Data& asset = m_panel->m_assets[m_selected_row];
         Model_Asset::instance().remove(asset.ASSETID);
-        mmAttachmentManage::DeleteAllAttachments(Model_Attachment::REFTYPE_STR_ASSET, asset.ASSETID);
-        Model_Translink::RemoveTransLinkRecords(Model_Attachment::REFTYPE_ID_ASSET, asset.ASSETID);
+        mmAttachmentManage::DeleteAllAttachments(Model_Asset::refTypeName, asset.ASSETID);
+        Model_Translink::RemoveTransLinkRecords<Model_Asset>(asset.ASSETID);
 
-        m_panel->initVirtualListControl(-1, m_selected_col, m_asc);
+        m_panel->initVirtualListControl();
         m_selected_row = -1;
         m_panel->updateExtraAssetData(m_selected_row);
     }
@@ -270,7 +268,7 @@
 {
     if (m_selected_row < 0) return;
 
-    wxString RefType = Model_Attachment::REFTYPE_STR_ASSET;
+    wxString RefType = Model_Asset::refTypeName;
     int64 RefId = m_panel->m_assets[m_selected_row].ASSETID;
 
     mmAttachmentDialog dlg(this, RefType, RefId);
@@ -283,7 +281,7 @@
 {
     if (m_selected_row < 0) return;
 
-    wxString RefType = Model_Attachment::REFTYPE_STR_ASSET;
+    wxString RefType = Model_Asset::refTypeName;
     int64 RefId = m_panel->m_assets[m_selected_row].ASSETID;
 
     mmAttachmentManage::OpenAttachmentFromPanelIcon(this, RefType, RefId);
@@ -315,27 +313,19 @@
 
 void mmAssetsListCtrl::OnColClick(wxListEvent& event)
 {
-    int ColumnNr;
-    if (event.GetId() != MENU_HEADER_SORT)
-         ColumnNr = event.GetColumn();
-    else
-         ColumnNr = m_ColumnHeaderNbr;
-    if (0 > ColumnNr || ColumnNr >= m_panel->col_max() || ColumnNr == 0) return;
-
-    if (m_selected_col == ColumnNr && event.GetId() != MENU_HEADER_SORT) m_asc = !m_asc;
-
-    wxListItem item;
-    item.SetMask(wxLIST_MASK_IMAGE);
-    item.SetImage(-1);
-    SetColumn(m_selected_col, item);
-
-    m_selected_col = ColumnNr;
-
-    item.SetImage(m_asc ? mmAssetsPanel::ICON_UPARROW : mmAssetsPanel::ICON_DOWNARROW);
-    SetColumn(m_selected_col, item);
-
-    Model_Setting::instance().Set("ASSETS_ASC", m_asc);
-    Model_Setting::instance().Set("ASSETS_SORT_COL", m_selected_col);
+    int col_nr = (event.GetId() == MENU_HEADER_SORT) ? m_sel_col_nr : event.GetColumn();
+    if (!isValidColNr(col_nr))
+        return;
+    int col_id = getColId_Nr(col_nr);
+    if (!m_col_info_id[col_id].sortable)
+        return;
+
+    if (m_sort_col_id[0] != col_id)
+        m_sort_col_id[0] = col_id;
+    else if (event.GetId() != MENU_HEADER_SORT)
+        m_sort_asc[0] = !m_sort_asc[0];
+    updateSortIcon();
+    savePreferences();
 
     int64 trx_id = -1;
     if (m_selected_row>=0) trx_id = m_panel->m_assets[m_selected_row].ASSETID;
@@ -352,7 +342,6 @@
     RefreshItems(event.GetIndex(), event.GetIndex());
 }
 
-/*******************************************************/
 BEGIN_EVENT_TABLE(mmAssetsPanel, wxPanel)
     EVT_BUTTON(wxID_NEW, mmAssetsPanel::OnNewAsset)
     EVT_BUTTON(wxID_EDIT, mmAssetsPanel::OnEditAsset)
@@ -363,9 +352,7 @@
     EVT_BUTTON(wxID_FILE2, mmAssetsPanel::OnMouseLeftDown)
     EVT_MENU(wxID_ANY, mmAssetsPanel::OnViewPopupSelected)
     EVT_SEARCHCTRL_SEARCH_BTN(wxID_FIND, mmAssetsPanel::OnSearchTxtEntered)
-    EVT_TEXT_ENTER(wxID_FIND, mmAssetsPanel::OnSearchTxtEntered)
 END_EVENT_TABLE()
-/*******************************************************/
 
 mmAssetsPanel::mmAssetsPanel(mmGUIFrame* frame, wxWindow *parent, wxWindowID winid, const wxString& name)
     : m_frame(frame)
@@ -389,14 +376,14 @@
     this->windowsFreezeThaw();
 
     auto start = wxDateTime::UNow();
-    tips_ = _("MMEX allows you to track fixed assets like cars, houses, land and others. Each asset can have its value appreciate by a certain rate per year, depreciate by a certain rate per year, or not change in value. The total assets are added to your total financial worth.");
+    tips_ = _t("MMEX allows fixed assets like cars, houses, land, and others to be tracked. Each asset can have its value appreciate by a certain rate per year, depreciate by a certain rate per year, or not change in value. The total assets are added to your total financial worth.");
     CreateControls();
     GetSizer()->Fit(this);
     GetSizer()->SetSizeHints(this);
 
-    initVirtualListControl(-1, m_listCtrlAssets->m_selected_col, m_listCtrlAssets->m_asc);
+    initVirtualListControl();
     if (!this->m_assets.empty())
-        m_listCtrlAssets->EnsureVisible(this->m_assets.size() - 1);
+        m_lc->EnsureVisible(this->m_assets.size() - 1);
 
     this->windowsFreezeThaw();
     GetSizer()->Fit(this);
@@ -419,7 +406,7 @@
     wxBoxSizer* itemBoxSizerVHeader = new wxBoxSizer(wxVERTICAL);
     headerPanel->SetSizer(itemBoxSizerVHeader);
 
-    wxStaticText* itemStaticText9 = new wxStaticText(headerPanel, wxID_STATIC, _("Assets"));
+    wxStaticText* itemStaticText9 = new wxStaticText(headerPanel, wxID_STATIC, _t("Assets"));
     itemStaticText9->SetFont(this->GetFont().Larger().Bold());
     itemBoxSizerVHeader->Add(itemStaticText9, g_flagsBorder1V);
 
@@ -428,7 +415,7 @@
 
     m_bitmapTransFilter = new wxButton(headerPanel, wxID_FILE2);
     m_bitmapTransFilter->SetBitmap(mmBitmapBundle(png::TRANSFILTER, mmBitmapButtonSize));
-    m_bitmapTransFilter->SetLabel(_("All"));
+    m_bitmapTransFilter->SetLabel(_t("All"));
     m_bitmapTransFilter->SetMinSize(wxSize(150, -1));
     itemBoxSizerHHeader2->Add(m_bitmapTransFilter, g_flagsBorder1H);
 
@@ -440,7 +427,7 @@
     wxSplitterWindow* itemSplitterWindow10 = new wxSplitterWindow( this, wxID_STATIC,
         wxDefaultPosition, wxSize(200, 200), wxSP_3DBORDER|wxSP_3DSASH|wxNO_BORDER);
 
-    m_listCtrlAssets = new mmAssetsListCtrl(this, itemSplitterWindow10, wxID_ANY);
+    m_lc = new mmAssetsListCtrl(this, itemSplitterWindow10, wxID_ANY);
 
     wxVector<wxBitmapBundle> images;
     images.push_back(mmBitmapBundle(png::PROPERTY));
@@ -453,13 +440,13 @@
     images.push_back(mmBitmapBundle(png::UPARROW));
     images.push_back(mmBitmapBundle(png::DOWNARROW));
 
-    m_listCtrlAssets->SetSmallImages(images);
+    m_lc->SetSmallImages(images);
 
     wxPanel* assets_panel = new wxPanel(itemSplitterWindow10, wxID_ANY
         , wxDefaultPosition, wxDefaultSize, wxNO_BORDER | wxTAB_TRAVERSAL);
     mmThemeMetaColour(assets_panel, meta::COLOR_LISTPANEL);
 
-    itemSplitterWindow10->SplitHorizontally(m_listCtrlAssets, assets_panel);
+    itemSplitterWindow10->SplitHorizontally(m_lc, assets_panel);
     itemSplitterWindow10->SetMinimumPaneSize(100);
     itemSplitterWindow10->SetSashGravity(1.0);
     itemBoxSizer9->Add(itemSplitterWindow10, g_flagsExpandBorder1);
@@ -470,49 +457,49 @@
     wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
     itemBoxSizer4->Add(itemBoxSizer5, g_flagsBorder1V);
 
-    wxButton* itemButton6 = new wxButton( assets_panel, wxID_NEW, _("&New "));
-    mmToolTip(itemButton6, _("New Asset"));
+    wxButton* itemButton6 = new wxButton( assets_panel, wxID_NEW, _t("&New "));
+    mmToolTip(itemButton6, _t("New Asset"));
     itemBoxSizer5->Add(itemButton6, 0, wxRIGHT, 5);
 
-    wxButton* add_trans_btn = new wxButton(assets_panel, wxID_ADD, _("&Add Trans "));
-    mmToolTip(add_trans_btn, _("Add Asset Transaction"));
+    wxButton* add_trans_btn = new wxButton(assets_panel, wxID_ADD, _t("&Add Trans "));
+    mmToolTip(add_trans_btn, _t("Add Asset Transaction"));
     itemBoxSizer5->Add(add_trans_btn, 0, wxRIGHT, 5);
     add_trans_btn->Enable(false);
 
-    wxButton* view_trans_btn = new wxButton(assets_panel, wxID_VIEW_DETAILS, _("&View Trans "));
-    mmToolTip(view_trans_btn, _("View Asset Transactions"));
+    wxButton* view_trans_btn = new wxButton(assets_panel, wxID_VIEW_DETAILS, _t("&View Trans "));
+    mmToolTip(view_trans_btn, _t("View Asset Transactions"));
     itemBoxSizer5->Add(view_trans_btn, 0, wxRIGHT, 5);
     view_trans_btn->Enable(false);
 
-    wxButton* itemButton81 = new wxButton( assets_panel, wxID_EDIT, _("&Edit "));
-    mmToolTip(itemButton81, _("Edit Asset"));
+    wxButton* itemButton81 = new wxButton( assets_panel, wxID_EDIT, _t("&Edit "));
+    mmToolTip(itemButton81, _t("Edit Asset"));
     itemBoxSizer5->Add(itemButton81, 0, wxRIGHT, 5);
     itemButton81->Enable(false);
 
-    wxButton* itemButton7 = new wxButton( assets_panel, wxID_DELETE, _("&Delete "));
-    mmToolTip(itemButton7, _("Delete Asset"));
+    wxButton* itemButton7 = new wxButton( assets_panel, wxID_DELETE, _t("&Delete "));
+    mmToolTip(itemButton7, _t("Delete Asset"));
     itemBoxSizer5->Add(itemButton7, 0, wxRIGHT, 5);
     itemButton7->Enable(false);
 
     wxBitmapButton* attachment_button_ = new wxBitmapButton(assets_panel
         , wxID_FILE, mmBitmapBundle(png::CLIP, mmBitmapButtonSize), wxDefaultPosition,
         wxSize(30, itemButton7->GetSize().GetY()));
-    mmToolTip(attachment_button_, _("Open attachments"));
+    mmToolTip(attachment_button_, _t("Open attachments"));
     itemBoxSizer5->Add(attachment_button_, 0, wxRIGHT, 5);
     attachment_button_->Enable(false);
 
     wxSearchCtrl* searchCtrl = new wxSearchCtrl(assets_panel
         , wxID_FIND, wxEmptyString, wxDefaultPosition
         , wxSize(100, itemButton7->GetSize().GetHeight())
-        , wxTE_PROCESS_ENTER, wxDefaultValidator, _("Search"));
-    searchCtrl->SetHint(_("Search"));
+        , wxTE_PROCESS_ENTER, wxDefaultValidator, _t("Search"));
+    searchCtrl->SetHint(_t("Search"));
     itemBoxSizer5->Add(searchCtrl, 0, wxCENTER, 1);
     mmToolTip(searchCtrl,
-        _("Enter any string to find related assets") + "\n\n" +
-        _("Tips: You can use wildcard characters - question mark (?), asterisk (*) - in your search criteria.") + "\n" +
-        _("Use the question mark (?) to find any single character - for example, s?t finds 'sat' and 'set'.") + "\n" +
-        _("Use the asterisk (*) to find any number of characters - for example, s*d finds 'sad' and 'started'.") + "\n" +
-        _("Use the asterisk (*) in the begin to find any string in the middle of the sentence.")
+        _t("Enter any string to find related assets") + "\n\n" +
+        _tu("Tips: Wildcard characters—question mark (?), asterisk (*)—can be used in search criteria.") + "\n" +
+        _tu("Use the question mark (?) to find any single character—for example, “s?t” finds “sat” and “set”.") + "\n" +
+        _tu("Use the asterisk (*) to find any number of characters—for example, “s*d” finds “sad” and “started”.") + "\n" +
+        _tu("Use the asterisk (*) at the beginning to find any string in the middle of the sentence.")
     );
 
     //Infobar-mini
@@ -527,63 +514,67 @@
     updateExtraAssetData(-1);
 }
 
-void mmAssetsPanel::sortTable()
+void mmAssetsPanel::sortList()
 {
     std::sort(this->m_assets.begin(), this->m_assets.end());
     std::stable_sort(this->m_assets.begin(), this->m_assets.end(), SorterBySTARTDATE());
-    switch (this->m_listCtrlAssets->m_selected_col)
+    switch (this->m_lc->getSortColId())
     {
-    case COL_ID:
+    case mmAssetsListCtrl::LIST_ID_ID:
         std::stable_sort(this->m_assets.begin(), this->m_assets.end(), SorterByASSETID());
         break;
-    case COL_NAME:
+    case mmAssetsListCtrl::LIST_ID_NAME:
         std::stable_sort(this->m_assets.begin(), this->m_assets.end(), SorterByASSETNAME());
         break;
-    case COL_TYPE:
+    case mmAssetsListCtrl::LIST_ID_TYPE:
         std::stable_sort(this->m_assets.begin(), this->m_assets.end(), SorterByASSETTYPE());
         break;
-    case COL_VALUE_INITIAL:
-        std::stable_sort(this->m_assets.begin(), this->m_assets.end(), SorterByVALUE());
+    case mmAssetsListCtrl::LIST_ID_VALUE_INITIAL:
+        std::stable_sort(this->m_assets.begin(), this->m_assets.end()
+            , [](const Model_Asset::Data& x, const Model_Asset::Data& y)
+            {
+                return Model_Asset::value(x).first < Model_Asset::value(y).first;
+            });
         break;
-    case COL_VALUE_CURRENT:
+    case mmAssetsListCtrl::LIST_ID_VALUE_CURRENT:
         std::stable_sort(this->m_assets.begin(), this->m_assets.end()
             , [](const Model_Asset::Data& x, const Model_Asset::Data& y)
             {
-                return Model_Asset::value(x) < Model_Asset::value(y);
+                return Model_Asset::value(x).second < Model_Asset::value(y).second;
             });
         break;
-    case COL_DATE:
+    case mmAssetsListCtrl::LIST_ID_DATE:
         break;
-    case COL_NOTES:
+    case mmAssetsListCtrl::LIST_ID_NOTES:
         std::stable_sort(this->m_assets.begin(), this->m_assets.end(), SorterByNOTES());
     default:
         break;
     }
 
-    if (!this->m_listCtrlAssets->m_asc) std::reverse(this->m_assets.begin(), this->m_assets.end());
+    if (!this->m_lc->getSortAsc()) std::reverse(this->m_assets.begin(), this->m_assets.end());
 }
 
-int mmAssetsPanel::initVirtualListControl(int64 id, int col, bool asc)
+int mmAssetsPanel::initVirtualListControl(int64 id)
 {
     /* Clear all the records */
-    m_listCtrlAssets->DeleteAllItems();
-
-    wxListItem item;
-    item.SetMask(wxLIST_MASK_IMAGE);
-    item.SetImage(asc ? ICON_UPARROW : ICON_DOWNARROW);
-    m_listCtrlAssets->SetColumn(col, item);
+    m_lc->DeleteAllItems();
 
     if (this->m_filter_type == Model_Asset::TYPE_ID(-1)) // ALL
         this->m_assets = Model_Asset::instance().all();
     else
         this->m_assets = Model_Asset::instance().find(Model_Asset::ASSETTYPE(m_filter_type));
-    this->sortTable();
+    this->sortList();
 
-    m_listCtrlAssets->SetItemCount(this->m_assets.size());
+    m_lc->SetItemCount(this->m_assets.size());
 
-    double balance = 0.0;
-    for (const auto& asset: this->m_assets) balance += Model_Asset::value(asset); 
-    header_text_->SetLabelText(wxString::Format(_("Total: %s"), Model_Currency::toCurrency(balance))); // balance
+    double initial = 0.0, balance = 0.0;
+    for (const auto& asset: this->m_assets)
+    {
+        auto bal = Model_Asset::value(asset);
+        initial += bal.first;
+        balance += bal.second;
+    }
+    header_text_->SetLabelText(wxString::Format("%s, %s", wxString::Format(_t("Total: %s"), Model_Currency::toCurrency(balance)),  wxString::Format(_t("Initial: %s"), Model_Currency::toCurrency(initial)))); // balance
 
     int selected_item = 0;
     for (const auto& asset: this->m_assets)
@@ -596,58 +587,56 @@
 
 void mmAssetsPanel::OnDeleteAsset(wxCommandEvent& event)
 {
-    m_listCtrlAssets->OnDeleteAsset(event);
+    m_lc->OnDeleteAsset(event);
 }
 
 void mmAssetsPanel::OnNewAsset(wxCommandEvent& event)
 {
-    m_listCtrlAssets->OnNewAsset(event);
+    m_lc->OnNewAsset(event);
 }
 
 void mmAssetsPanel::OnEditAsset(wxCommandEvent& event)
 {
-    m_listCtrlAssets->OnEditAsset(event);
+    m_lc->OnEditAsset(event);
 }
 
 void mmAssetsPanel::OnAddAssetTrans(wxCommandEvent& event)
 {
-    m_listCtrlAssets->OnAddAssetTrans(event);
+    m_lc->OnAddAssetTrans(event);
 }
 
 void mmAssetsPanel::OnViewAssetTrans(wxCommandEvent& event)
 {
-    m_listCtrlAssets->OnViewAssetTrans(event);
+    m_lc->OnViewAssetTrans(event);
 }
 
 void mmAssetsPanel::OnOpenAttachment(wxCommandEvent& event)
 {
-    m_listCtrlAssets->OnOpenAttachment(event);
+    m_lc->OnOpenAttachment(event);
 }
 
-wxString mmAssetsPanel::getItem(long item, long column)
+wxString mmAssetsPanel::getItem(long item, int col_id)
 {
     const Model_Asset::Data& asset = this->m_assets[item];
-    switch (column)
-    {
-    case COL_ICON:
+    switch (col_id) {
+    case mmAssetsListCtrl::LIST_ID_ICON:
         return "";
-    case COL_ID:
+    case mmAssetsListCtrl::LIST_ID_ID:
         return wxString::Format("%lld", asset.ASSETID).Trim();
-    case COL_NAME:
+    case mmAssetsListCtrl::LIST_ID_NAME:
         return asset.ASSETNAME;
-    case COL_TYPE:
+    case mmAssetsListCtrl::LIST_ID_TYPE:
         return wxGetTranslation(asset.ASSETTYPE);
-    case COL_VALUE_INITIAL:
-        return Model_Currency::toCurrency(asset.VALUE);
-    case COL_VALUE_CURRENT:
-        return Model_Currency::toCurrency(Model_Asset::value(asset));
-    case COL_DATE:
+    case mmAssetsListCtrl::LIST_ID_VALUE_INITIAL:
+        return Model_Currency::toCurrency(Model_Asset::value(asset).first);
+    case mmAssetsListCtrl::LIST_ID_VALUE_CURRENT:
+        return Model_Currency::toCurrency(Model_Asset::value(asset).second);
+    case mmAssetsListCtrl::LIST_ID_DATE:
         return mmGetDateTimeForDisplay(asset.STARTDATE);
-    case COL_NOTES:
-    {
+    case mmAssetsListCtrl::LIST_ID_NOTES: {
         wxString full_notes = asset.NOTES;
         full_notes.Replace("\n", " ");
-        if (Model_Attachment::NrAttachments(Model_Attachment::REFTYPE_STR_ASSET, asset.ASSETID))
+        if (Model_Attachment::NrAttachments(Model_Asset::refTypeName, asset.ASSETID))
             full_notes = full_notes.Prepend(mmAttachmentManage::GetAttachmentNoteSign());
         return full_notes;
     }
@@ -666,7 +655,7 @@
         enableEditDeleteButtons(true);
         const auto& change_rate = (Model_Asset::change_id(asset) != Model_Asset::CHANGE_ID_NONE)
             ? wxString::Format("%.2f %%", asset.VALUECHANGERATE) : "";
-        const wxString& miniInfo = " " + wxString::Format(_("Change in Value: %1$s %2$s")
+        const wxString& miniInfo = " " + wxString::Format(_t("Change in Value: %1$s %2$s")
             , wxGetTranslation(asset.VALUECHANGE), change_rate);
 
         st->SetLabelText(asset.NOTES);
@@ -705,10 +694,10 @@
 {
     int i = 0;
     wxMenu menu;
-    menu.Append(++i, wxGetTranslation(wxTRANSLATE("All")));
+    menu.Append(++i, _t("All"));
 
-    for (const auto& type: Model_Asset::TYPE_STR)
-    {
+    for (int typeId = 0; typeId < Model_Asset::TYPE_ID_size; ++typeId) {
+        wxString type = Model_Asset::type_name(typeId);
         menu.Append(++i, wxGetTranslation(type));
     }
     PopupMenu(&menu);
@@ -722,7 +711,7 @@
 
     if (evt == 0)
     {
-        m_bitmapTransFilter->SetLabel(_("All"));
+        m_bitmapTransFilter->SetLabel(_t("All"));
         m_bitmapTransFilter->SetBitmap(mmBitmapBundle(png::TRANSFILTER, mmBitmapButtonSize));
         this->m_filter_type = Model_Asset::TYPE_ID(-1);
     }
@@ -730,11 +719,11 @@
     {
         this->m_filter_type = Model_Asset::TYPE_ID(evt - 1);
         m_bitmapTransFilter->SetBitmap(mmBitmapBundle(png::TRANSFILTER_ACTIVE, mmBitmapButtonSize));
-        m_bitmapTransFilter->SetLabel(wxGetTranslation(Model_Asset::TYPE_STR[evt - 1]));
+        m_bitmapTransFilter->SetLabel(wxGetTranslation(Model_Asset::type_name(evt - 1)));
     }
 
     int64 trx_id = -1;
-    m_listCtrlAssets->doRefreshItems(trx_id);
+    m_lc->doRefreshItems(trx_id);
     updateExtraAssetData(-1);
 }
 
@@ -743,28 +732,38 @@
     const wxString search_string = event.GetString().Lower();
     if (search_string.IsEmpty()) return;
 
-    long last = m_listCtrlAssets->GetItemCount();
-    long selectedItem = m_listCtrlAssets->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
-    if (selectedItem < 0) //nothing selected
-        selectedItem = m_listCtrlAssets->m_asc ? last - 1 : 0;
-
-    while (selectedItem > 0 && selectedItem <= last)
-    {
-        m_listCtrlAssets->m_asc ? selectedItem-- : selectedItem++;
-        const wxString t = getItem(selectedItem, COL_NOTES).Lower();
-        if (t.Matches(search_string + "*"))
+    long last = m_lc->GetItemCount();
+    if (last == 0) return;
+
+    long selectedItem = m_lc->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
+    if (selectedItem == wxNOT_FOUND)
+        selectedItem = 0;
+    else
+        selectedItem = (selectedItem + 1) % last;
+
+    long startItem = selectedItem;
+
+    SetEvtHandlerEnabled(false);
+
+    do {
+        const wxString t = getItem(selectedItem, mmAssetsListCtrl::LIST_ID_NOTES).Lower();
+        if (t.Contains(search_string))
         {
-            //First of all any items should be unselected
-            long cursel = m_listCtrlAssets->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
+            long cursel = m_lc->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
             if (cursel != wxNOT_FOUND)
-                m_listCtrlAssets->SetItemState(cursel, 0, wxLIST_STATE_SELECTED | wxLIST_STATE_FOCUSED);
+                m_lc->SetItemState(cursel, 0, wxLIST_STATE_SELECTED | wxLIST_STATE_FOCUSED);
 
-            //Then finded item will be selected
-            m_listCtrlAssets->SetItemState(selectedItem, wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED);
-            m_listCtrlAssets->EnsureVisible(selectedItem);
+            m_lc->SetItemState(selectedItem, wxLIST_STATE_SELECTED | wxLIST_STATE_FOCUSED,
+                                              wxLIST_STATE_SELECTED | wxLIST_STATE_FOCUSED);
+            m_lc->EnsureVisible(selectedItem);
             break;
         }
-    }
+
+        selectedItem = (selectedItem + 1) % last;
+
+    } while (selectedItem != startItem);
+
+    SetEvtHandlerEnabled(true);
 }
 
 void mmAssetsPanel::AddAssetTrans(const int selected_index)
@@ -772,19 +771,20 @@
     Model_Asset::Data* asset = &m_assets[selected_index];
     mmAssetDialog asset_dialog(this, asset, true);
     Model_Account::Data* account = Model_Account::instance().get(asset->ASSETNAME);
-    if (account)
+    Model_Account::Data* account2 = Model_Account::instance().get(asset->ASSETTYPE);
+    if (account || account2)
     {
-        asset_dialog.SetTransactionAccountName(asset->ASSETNAME);
+        asset_dialog.SetTransactionAccountName(account ? asset->ASSETNAME : asset->ASSETTYPE);
     }
     else
     {
-        Model_Translink::Data_Set translist = Model_Translink::TranslinkList(Model_Attachment::REFTYPE_ID_ASSET, asset->ASSETID);
-        if (!translist.empty())
+        Model_Translink::Data_Set translist = Model_Translink::TranslinkList<Model_Asset>(asset->ASSETID);
+        if (translist.empty())
         {
-            wxMessageBox(_(
+            wxMessageBox(_t(
                 "This asset does not have its own account\n\n"
                 "Multiple transactions for this asset are not recommended.")
-                , _("Asset Management"), wxOK | wxICON_INFORMATION);
+                , _t("Asset Management"), wxOK | wxICON_INFORMATION);
 
             return; // abort process
         }
@@ -792,30 +792,137 @@
 
     if (asset_dialog.ShowModal() == wxID_OK)
     {
-        m_listCtrlAssets->doRefreshItems(selected_index);
+        m_lc->doRefreshItems(selected_index);
         updateExtraAssetData(selected_index);
     }
 }
 
-void mmAssetsPanel::ViewAssetTrans(const int selected_index)
+void mmAssetsPanel::ViewAssetTrans(int selectedIndex)
 {
-    Model_Asset::Data* asset = &m_assets[selected_index];
-    Model_Translink::Data_Set asset_list = Model_Translink::TranslinkList(Model_Attachment::REFTYPE_ID_ASSET, asset->ASSETID);
+    Model_Asset::Data* asset = &m_assets[selectedIndex];
 
-    // TODO create a panel to display all the information on one screen
-    wxString msg = _("Account \t Date\t   Value\n\n");
-    for (const auto &asset_entry : asset_list)
+    wxDialog dlg(this, wxID_ANY,
+                 _t("View Asset Transactions") + ": " + asset->ASSETNAME,
+                 wxDefaultPosition, wxDefaultSize,
+                 wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER);
+
+    dlg.SetIcon(mmex::getProgramIcon());
+    wxWindow* parent = dlg.GetMainWindowOfCompositeControl();
+    wxBoxSizer* topsizer = new wxBoxSizer(wxVERTICAL);
+
+    // Initialize list control
+    wxListCtrl* assetTxnListCtrl = this->InitAssetTxnListCtrl(parent);
+    topsizer->Add(assetTxnListCtrl, wxSizerFlags(g_flagsExpand).TripleBorder());
+
+    // Bind events here
+    BindAssetListEvents(assetTxnListCtrl);
+
+    // Load asset transactions
+    LoadAssetTransactions(assetTxnListCtrl, asset->ASSETID);
+
+    // Add buttons
+    wxSizer* buttonSizer = dlg.CreateSeparatedButtonSizer(wxOK);
+    if (buttonSizer) {
+        topsizer->Add(buttonSizer, wxSizerFlags().Expand().DoubleBorder(wxLEFT | wxRIGHT | wxBOTTOM));
+    }
+
+    dlg.SetSizerAndFit(topsizer);
+    dlg.SetInitialSize(wxSize(600, 400)); // Set default size
+    dlg.Center();
+    dlg.ShowModal();
+}
+
+// Initialize the list control
+wxListCtrl* mmAssetsPanel::InitAssetTxnListCtrl(wxWindow* parent)
+{
+    wxListCtrl* listCtrl = new wxListCtrl(parent, wxID_ANY, wxDefaultPosition, wxDefaultSize,
+                                          wxLC_REPORT | wxLC_HRULES | wxLC_VRULES | wxLC_AUTOARRANGE);
+
+    listCtrl->AppendColumn(_t("Account"), wxLIST_FORMAT_LEFT, 120);
+    listCtrl->AppendColumn(_t("Date"), wxLIST_FORMAT_LEFT, 100);
+    listCtrl->AppendColumn(_t("Trade Type"), wxLIST_FORMAT_LEFT, 100);
+    listCtrl->AppendColumn(_t("Value"), wxLIST_FORMAT_RIGHT, 120);
+
+    return listCtrl;
+}
+
+// Load asset transactions into the list control
+void mmAssetsPanel::LoadAssetTransactions(wxListCtrl* listCtrl, int64 assetId)
+{
+    Model_Translink::Data_Set assetList = Model_Translink::TranslinkList<Model_Asset>(assetId);
+
+    int row = 0;
+    for (const auto& assetEntry : assetList)
     {
-        Model_Checking::Data* asset_trans = Model_Checking::instance().get(asset_entry.CHECKINGACCOUNTID);
-        if (asset_trans)
-        {
-            const auto aa = Model_Account::get_account_name(asset_trans->ACCOUNTID);
-            const auto ad = mmGetDateTimeForDisplay(asset_trans->TRANSDATE);
-            const auto av = Model_Currency::toString(asset_trans->TRANSAMOUNT); //TODO: check if currency needed
-            msg << wxString::Format("%s \t%s   \t%s \n", aa, ad, av);
+        auto* assetTrans = Model_Checking::instance().get(assetEntry.CHECKINGACCOUNTID);
+        if (!assetTrans) continue;
+
+        long index = listCtrl->InsertItem(row++, "");
+        listCtrl->SetItemData(index, assetTrans->TRANSID.GetValue());
+        FillAssetListRow(listCtrl, index, *assetTrans);
+    }
+}
+
+void mmAssetsPanel::FillAssetListRow(wxListCtrl* listCtrl, long index, const Model_Checking::Data& txn)
+{
+    listCtrl->SetItem(index, 0, Model_Account::get_account_name(txn.ACCOUNTID));
+    listCtrl->SetItem(index, 1, mmGetDateTimeForDisplay(txn.TRANSDATE));
+    listCtrl->SetItem(index, 2, Model_Checking::trade_type_name(Model_Checking::type_id(txn.TRANSCODE)));
+    listCtrl->SetItem(index, 3, Model_Currency::toString(txn.TRANSAMOUNT));
+//    listCtrl->SetItem(index, 3, Model_Currency::get_currency_symbol(txn.CURRENCYID));
+}
+
+void mmAssetsPanel::BindAssetListEvents(wxListCtrl* listCtrl)
+{
+    listCtrl->Bind(wxEVT_LIST_ITEM_ACTIVATED, [listCtrl, this](wxListEvent& event) {
+        long index = event.GetIndex();
+        auto* txn = Model_Checking::instance().get(event.GetData());
+        if (!txn) return;
+
+        auto link = Model_Translink::TranslinkRecord(txn->TRANSID);
+        mmAssetDialog dlg(listCtrl, &link, txn);
+        dlg.ShowModal();
+
+        this->FillAssetListRow(listCtrl, index, *txn);
+
+        listCtrl->SortItems([](wxIntPtr item1, wxIntPtr item2, wxIntPtr) -> int {
+            auto date1 = Model_Checking::TRANSDATE(Model_Checking::instance().get(item1));
+            auto date2 = Model_Checking::TRANSDATE(Model_Checking::instance().get(item2));
+            return date1.IsEarlierThan(date2) ? -1 : (date1.IsLaterThan(date2) ? 1 : 0);
+        }, 0);
+    });
+
+    listCtrl->Bind(wxEVT_CHAR, [listCtrl, this](wxKeyEvent& event) {
+        if (event.GetKeyCode() == WXK_CONTROL_C) {
+            CopySelectedRowsToClipboard(listCtrl);
+        } else if (event.GetKeyCode() == WXK_CONTROL_A) {
+            for (int row = 0; row < listCtrl->GetItemCount(); row++)
+                listCtrl->SetItemState(row, wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED);
         }
+    });
+}
+
+void mmAssetsPanel::CopySelectedRowsToClipboard(wxListCtrl* listCtrl)
+{
+    if (!wxTheClipboard->Open()) return;
+
+    wxString data;
+    const wxString separator = "\t";
+
+    for (int row = 0; row < listCtrl->GetItemCount(); row++) {
+        if (listCtrl->GetItemState(row, wxLIST_STATE_SELECTED) != wxLIST_STATE_SELECTED)
+            continue;
+
+        for (int col = 0; col < listCtrl->GetColumnCount(); col++) {
+            if (listCtrl->GetColumnWidth(col) > 0) {
+                data += listCtrl->GetItemText(row, col) + separator;
+            }
+        }
+        data += "\n";
     }
-    wxMessageBox(msg, "Viewing Asset Transactions");
+
+    wxTheClipboard->SetData(new wxTextDataObject(data));
+    wxTheClipboard->Close();
 }
 
 void mmAssetsPanel::GotoAssetAccount(const int selected_index)
@@ -828,7 +935,7 @@
     }
     else
     {
-        Model_Translink::Data_Set asset_list = Model_Translink::TranslinkList(Model_Attachment::REFTYPE_ID_ASSET, asset->ASSETID);
+        Model_Translink::Data_Set asset_list = Model_Translink::TranslinkList<Model_Asset>(asset->ASSETID);
         for (const auto &asset_entry : asset_list)
         {
             Model_Checking::Data* asset_trans = Model_Checking::instance().get(asset_entry.CHECKINGACCOUNTID);
diff -Naur a/src/assetspanel.h b/src/assetspanel.h
--- a/src/assetspanel.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/assetspanel.h	2025-07-09 01:46:59.624940366 +0200
@@ -27,8 +27,38 @@
 /* Custom ListCtrl class that implements virtual LC style */
 class mmAssetsListCtrl: public mmListCtrl
 {
+public:
+    enum LIST_ID
+    {
+        LIST_ID_ICON = 0,
+        LIST_ID_ID,
+        LIST_ID_NAME,
+        LIST_ID_DATE,
+        LIST_ID_TYPE,
+        LIST_ID_VALUE_INITIAL,
+        LIST_ID_VALUE_CURRENT,
+        LIST_ID_NOTES,
+        LIST_ID_size, // number of columns
+    };
+
+private:
     DECLARE_NO_COPY_CLASS(mmAssetsListCtrl)
     wxDECLARE_EVENT_TABLE();
+    enum {
+        MENU_TREEPOPUP_NEW = wxID_HIGHEST + 1200,
+        MENU_TREEPOPUP_ADDTRANS,
+        MENU_TREEPOPUP_VIEWTRANS,
+        MENU_TREEPOPUP_GOTOACCOUNT,
+        MENU_TREEPOPUP_EDIT,
+        MENU_TREEPOPUP_DELETE,
+        MENU_ON_DUPLICATE_TRANSACTION,
+        MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS,
+    };
+
+private:
+    static const std::vector<ListColumnInfo> LIST_INFO;
+    mmAssetsPanel* m_panel = nullptr;
+    long m_selected_row = -1;
 
 public:
     mmAssetsListCtrl(mmAssetsPanel* cp, wxWindow *parent, wxWindowID winid = wxID_ANY);
@@ -46,14 +76,13 @@
     void doRefreshItems(int64 trx_id = -1);
 
 protected:
-    virtual void OnColClick(wxListEvent& event);
+    virtual int getSortIcon(bool asc) const override;
+    virtual void OnColClick(wxListEvent& event) override;
 
 private:
-    mmAssetsPanel* m_panel = nullptr;
-
     /* required overrides for virtual style list control */
-    virtual wxString OnGetItemText(long item, long column) const;
-    virtual int OnGetItemImage(long item) const;
+    virtual wxString OnGetItemText(long item, long col_nr) const override;
+    virtual int OnGetItemImage(long item) const override;
 
     void OnMouseRightClick(wxMouseEvent& event);
     void OnListLeftClick(wxMouseEvent& event);
@@ -62,17 +91,6 @@
     void OnListItemSelected(wxListEvent& event);
     void OnEndLabelEdit(wxListEvent& event);
     bool EditAsset(Model_Asset::Data* pEntry);
-
-    enum {
-        MENU_TREEPOPUP_NEW = wxID_HIGHEST + 1200,
-        MENU_TREEPOPUP_ADDTRANS,
-        MENU_TREEPOPUP_VIEWTRANS,
-        MENU_TREEPOPUP_GOTOACCOUNT,
-        MENU_TREEPOPUP_EDIT,
-        MENU_TREEPOPUP_DELETE,
-        MENU_ON_DUPLICATE_TRANSACTION,
-        MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS,
-    };
 };
 
 class mmAssetsPanel : public mmPanelBase
@@ -93,35 +111,25 @@
         ICON_DOWNARROW
     };
 
-    enum EColumn
-    {
-        COL_ICON = 0,
-        COL_ID,
-        COL_NAME,
-        COL_DATE,
-        COL_TYPE,
-        COL_VALUE_INITIAL,
-        COL_VALUE_CURRENT,
-        COL_NOTES,
-        COL_MAX, // number of columns
-    };
-
     mmAssetsPanel(mmGUIFrame* frame, wxWindow *parent, wxWindowID winid, const wxString& name="mmAssetsPanel");
     mmGUIFrame* m_frame = nullptr;
 
     void updateExtraAssetData(int selIndex);
-    int initVirtualListControl(int64 trx_id = -1, int col = 0, bool asc = true);
-    wxString getItem(long item, long column);
+    int initVirtualListControl(int64 trx_id = -1);
+    wxString getItem(long item, int col_id);
 
     Model_Asset::Data_Set m_assets;
     Model_Asset::TYPE_ID m_filter_type;
-    int col_max() { return COL_MAX; }
-    int col_sort() { return COL_DATE; }
 
-    wxString BuildPage() const { return m_listCtrlAssets->BuildPage(_("Assets")); }
+    wxString BuildPage() const { return m_lc->BuildPage(_t("Assets")); }
 
     void AddAssetTrans(const int selected_index);
     void ViewAssetTrans(const int selected_index);
+    wxListCtrl* InitAssetTxnListCtrl(wxWindow* parent);
+    void LoadAssetTransactions(wxListCtrl* listCtrl, int64 assetId);
+    void FillAssetListRow(wxListCtrl* listCtrl, long index, const Model_Checking::Data& txn);
+    void BindAssetListEvents(wxListCtrl* listCtrl);
+    void CopySelectedRowsToClipboard(wxListCtrl* listCtrl);
     void GotoAssetAccount(const int selected_index);
     void RefreshList();
 
@@ -129,7 +137,7 @@
     void enableEditDeleteButtons(bool enable);
     void OnSearchTxtEntered(wxCommandEvent& event);
     
-    mmAssetsListCtrl* m_listCtrlAssets = nullptr;
+    mmAssetsListCtrl* m_lc = nullptr;
     wxButton* m_bitmapTransFilter = nullptr;
     wxStaticText* header_text_ = nullptr;
 
@@ -151,7 +159,7 @@
     void OnViewAssetTrans(wxCommandEvent& event);
 
     void OnViewPopupSelected(wxCommandEvent& event);
-    void sortTable();
+    void sortList();
     void SetAccountParameters(const Model_Account::Data* account);
 
 private:
@@ -162,4 +170,4 @@
     };
 };
 
-inline void mmAssetsPanel::RefreshList(){ m_listCtrlAssets->doRefreshItems(); }
+inline void mmAssetsPanel::RefreshList(){ m_lc->doRefreshItems(); }
diff -Naur a/src/attachmentdialog.cpp b/src/attachmentdialog.cpp
--- a/src/attachmentdialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/attachmentdialog.cpp	2025-07-09 01:46:59.624940366 +0200
@@ -24,8 +24,11 @@
 #include "paths.h"
 #include "util.h"
 
-#include "model/Model_Attachment.h"
 #include "model/Model_Infotable.h"
+#include "model/Model_Asset.h"
+#include "model/Model_Stock.h"
+#include "model/Model_Payee.h"
+#include "model/Model_Attachment.h"
 
 #include <wx/mimetype.h>
 
@@ -47,8 +50,8 @@
     , m_RefId(RefId)
 {
     if (debug_) ColName_[ATTACHMENT_ID] = "#";
-    ColName_[ATTACHMENT_DESCRIPTION] = _("Description");
-    ColName_[ATTACHMENT_FILENAME] = _("File");
+    ColName_[ATTACHMENT_DESCRIPTION] = _t("Description");
+    ColName_[ATTACHMENT_FILENAME] = _t("File");
 
     Create(parent, name);
 
@@ -56,17 +59,17 @@
 
     if (AttachmentsFolder == wxEmptyString)
     {
-        wxString msgStr = wxString() << _("Attachment folder not defined.") << "\n"
-            << _u("Please set it in Tools → Settings… → Attachments") << "\n";
-        wxMessageBox(msgStr, _("Attachment folder not defined"), wxICON_ERROR);
+        wxString msgStr = wxString() << _t("Attachment folder not defined.") << "\n"
+            << _tu("Please set it in Tools → Settings… → Attachments") << "\n";
+        wxMessageBox(msgStr, _t("Attachment folder not defined"), wxICON_ERROR);
     }
     else if (!wxDirExists(AttachmentsFolder))
     {
-        wxString msgStr = wxString() << _("Unable to find attachments folder:") << "\n"
+        wxString msgStr = wxString() << _t("Unable to find attachments folder:") << "\n"
             << "'" << AttachmentsFolder << "'" << "\n"
             << "\n"
-            << _("Please verify that above path is correct") << "\n";
-        wxMessageBox(msgStr, _("Attachments folder not found"), wxICON_ERROR);
+            << _t("Please verify that above path is correct") << "\n";
+        wxMessageBox(msgStr, _t("Attachments folder not found."), wxICON_ERROR);
     }
 }
 
@@ -79,9 +82,9 @@
     if (m_RefId > 0)
     {
         int refEnum = 0;
-        for(const auto& pair : Model_Attachment::REFTYPE_CHOICES)
-        {
-            if(pair.second == m_RefType)
+        for (int i = 0; i < Model_Attachment::REFTYPE_ID_size; ++i) {
+            wxString reftype = ModelBase::reftype_name(i);
+            if (reftype == m_RefType)
                 break;
             refEnum++;
         }
@@ -106,11 +109,11 @@
             RefName = "";
         }       
         if (RefName.IsEmpty())
-            WindowTitle = wxString::Format(_("Attachment Manager | %s | %lld"), wxGetTranslation(m_RefType), m_RefId);
+            WindowTitle = wxString::Format(_t("Attachment Manager | %s | %lld"), wxGetTranslation(m_RefType), m_RefId);
         else
-            WindowTitle = wxString::Format(_("Attachment Manager | %1$s | %2$s"), wxGetTranslation(m_RefType), RefName);
+            WindowTitle = wxString::Format(_t("Attachment Manager | %1$s | %2$s"), wxGetTranslation(m_RefType), RefName);
     } else
-        WindowTitle = wxString::Format(_("Attachment Manager | New %s"), wxGetTranslation(m_RefType));
+        WindowTitle = wxString::Format(_t("Attachment Manager | New %s"), wxGetTranslation(m_RefType));
 
     if (!wxDialog::Create(parent, wxID_ANY, WindowTitle, wxDefaultPosition, wxDefaultSize, style, name))
         return;
@@ -143,14 +146,14 @@
     wxStdDialogButtonSizer* buttons_sizer = new wxStdDialogButtonSizer;
     buttons_panel->SetSizer(buttons_sizer);
 
-    wxButton* buttonOK = new wxButton(buttons_panel, wxID_OK, _("&OK "));
+    wxButton* buttonOK = new wxButton(buttons_panel, wxID_OK, _t("&OK "));
     wxButton* btnCancel = new wxButton(buttons_panel, wxID_CANCEL, wxGetTranslation(g_CancelLabel));
     buttons_sizer->Add(buttonOK, g_flagsH);
     buttons_sizer->Add(btnCancel, g_flagsH);
 
     wxBitmapButton* magicButton = new wxBitmapButton(buttons_panel
         , wxID_APPLY, mmBitmapBundle(png::MORE_OPTIONS, mmBitmapButtonSize));
-    mmToolTip(magicButton, _("Other tools"));
+    mmToolTip(magicButton, _t("Other tools"));
     buttons_sizer->Add(magicButton, g_flagsH);
 
     Center();
@@ -182,7 +185,7 @@
 {
     if (FilePath.empty())
     {
-        FilePath = wxFileSelector(_("Import attachment:")
+        FilePath = wxFileSelector(_t("Import attachment:")
             , wxEmptyString, wxEmptyString, wxEmptyString
             , "All Files |*.*"
             , wxFD_FILE_MUST_EXIST);
@@ -193,8 +196,8 @@
     const wxString attachmentFileName = wxFileName(FilePath).GetName();
     const wxString attachmentFileExtension = wxFileName(FilePath).GetExt().MakeLower();
     
-    mmDialogComboBoxAutocomplete dlg(this, _("Enter a description for the new attachment:") + wxString::Format("\n(%s)", FilePath),
-        _("Attachment Manager: Add Attachment"), attachmentFileName, Model_Attachment::instance().allDescriptions());
+    mmDialogComboBoxAutocomplete dlg(this, _t("Enter a description for the new attachment:") + wxString::Format("\n(%s)", FilePath),
+        _t("Attachment Manager: Add Attachment"), attachmentFileName, Model_Attachment::instance().allDescriptions());
 
     if (dlg.ShowModal() != wxID_OK)
         return;
@@ -219,7 +222,7 @@
         m_attachment_id = Model_Attachment::instance().save(NewAttachment);
         m_attachment_id = NewAttachment->ATTACHMENTID;
 
-        if (m_RefType == Model_Attachment::REFTYPE_STR_TRANSACTION)
+        if (m_RefType == Model_Checking::refTypeName)
             Model_Checking::instance().updateTimestamp(m_RefId);
     }
 
@@ -240,8 +243,8 @@
     Model_Attachment::Data *attachment = Model_Attachment::instance().get(m_attachment_id);
     if (attachment)
     {
-        mmDialogComboBoxAutocomplete dlg(this, _("Enter a new description for the attachment:"),
-            _("Attachment Manager: Edit Attachment"), attachment->DESCRIPTION,
+        mmDialogComboBoxAutocomplete dlg(this, _t("Enter a new description for the attachment:"),
+            _t("Attachment Manager: Edit Attachment"), attachment->DESCRIPTION,
             Model_Attachment::instance().allDescriptions());
 
         if (dlg.ShowModal() != wxID_OK)
@@ -255,7 +258,7 @@
         m_attachment_id = Model_Attachment::instance().save(attachment);
         m_attachment_id = attachment->ATTACHMENTID;
 
-        if (attachment->REFTYPE == Model_Attachment::REFTYPE_STR_TRANSACTION)
+        if (attachment->REFTYPE == Model_Checking::refTypeName)
             Model_Checking::instance().updateTimestamp(attachment->REFID);
 
         fillControls();
@@ -268,15 +271,15 @@
     if (attachment)
     {
         int DeleteResponse = wxMessageBox(
-            _("Do you really want to delete this attachment?")
-            , _("Confirm Attachment Deletion")
+            _t("Do you want to delete this attachment?")
+            , _t("Confirm Attachment Deletion")
             , wxYES_NO | wxNO_DEFAULT | wxICON_ERROR);
         if (DeleteResponse == wxYES)
         {
             const wxString AttachmentsFolder = mmex::getPathAttachment(mmAttachmentManage::InfotablePathSetting()) + attachment->REFTYPE;
             if (mmAttachmentManage::DeleteAttachment(AttachmentsFolder + m_PathSep + attachment->FILENAME))
             {
-                if (attachment->REFTYPE == Model_Attachment::REFTYPE_STR_TRANSACTION)
+                if (attachment->REFTYPE == Model_Checking::refTypeName)
                     Model_Checking::instance().updateTimestamp(attachment->REFID);
                 Model_Attachment::instance().remove(m_attachment_id);
             }
@@ -345,12 +348,12 @@
 
     wxMenu* mainMenu = new wxMenu;
     if (attachment) mainMenu->SetTitle(attachment->DESCRIPTION);
-    mainMenu->Append(new wxMenuItem(mainMenu, MENU_NEW_ATTACHMENT, _("&Add ")));
+    mainMenu->Append(new wxMenuItem(mainMenu, MENU_NEW_ATTACHMENT, _t("&Add ")));
     mainMenu->AppendSeparator();
-    mainMenu->Append(new wxMenuItem(mainMenu, MENU_OPEN_ATTACHMENT, _("&Open ")));
-    mainMenu->Append(new wxMenuItem(mainMenu, MENU_EDIT_ATTACHMENT, _("&Edit ")));
+    mainMenu->Append(new wxMenuItem(mainMenu, MENU_OPEN_ATTACHMENT, _t("&Open ")));
+    mainMenu->Append(new wxMenuItem(mainMenu, MENU_EDIT_ATTACHMENT, _t("&Edit ")));
     if (!attachment) mainMenu->Enable(MENU_EDIT_ATTACHMENT, false);
-    mainMenu->Append(new wxMenuItem(mainMenu, MENU_DELETE_ATTACHMENT, _("&Remove ")));
+    mainMenu->Append(new wxMenuItem(mainMenu, MENU_DELETE_ATTACHMENT, _t("&Remove ")));
     
     //Disable buttons
     const wxString AttachmentsFolder = mmex::getPathAttachment(mmAttachmentManage::InfotablePathSetting());
@@ -387,21 +390,21 @@
 
 const wxString mmAttachmentManage::InfotablePathSetting()
 {
-    return Model_Infotable::instance().GetStringInfo("ATTACHMENTSFOLDER:" + mmPlatformType(), "");
+    return Model_Infotable::instance().getString("ATTACHMENTSFOLDER:" + mmPlatformType(), "");
 }
 
 const wxString mmAttachmentManage::GetAttachmentNoteSign()
 {
-    return wxString::Format("[%s] ",_("Att."));
+    return wxString::Format("[%s] ",_t("Att."));
 }
 
 bool mmAttachmentManage::CreateReadmeFile(const wxString& FolderPath)
 {
     wxString ReadmeFilePath = FolderPath + m_PathSep + "readme.txt";
     wxString ReadmeText;
-    ReadmeText << _("This directory and its files are automatically managed by MMEX.") << wxTextFile::GetEOL();
+    ReadmeText << _t("This directory and its files are automatically managed by MMEX.") << wxTextFile::GetEOL();
     ReadmeText << wxTextFile::GetEOL();
-    ReadmeText << _("Please do not remove, rename or modify manually directories and files.") << wxTextFile::GetEOL();
+    ReadmeText << _t("Please do not remove, rename or modify manually directories and files.") << wxTextFile::GetEOL();
 
     if (wxFileExists(ReadmeFilePath))
     {
@@ -446,25 +449,25 @@
         const auto &attachments = Model_Attachment::instance().find(Model_Attachment::FILENAME(wxFileNameFromPath(ImportedFile)));
         if (attachments.empty())
         {
-            wxString msgStr = wxString() << _("Destination file already exist:") << "\n"
+            wxString msgStr = wxString() << _t("Destination file already exist:") << "\n"
                 << "'" << ImportedFile << "'" << "\n"
                 << "\n"
-                << _("File not found in attachments. Please delete or rename it.") << "\n";
-            wxMessageBox(msgStr, _("Destination file already exist"), wxICON_ERROR);
+                << _t("File not found in attachments. Please delete or rename it.") << "\n";
+            wxMessageBox(msgStr, _t("Destination file already exist"), wxICON_ERROR);
         }
         else
         {
-            wxString msgStr = wxString() << _("Destination file already exist:") << "\n"
+            wxString msgStr = wxString() << _t("Destination file already exist:") << "\n"
                 << "'" << ImportedFile << "'" << "\n"
                 << "\n"
-                << _("File already found in attachments") << "\n";
-            wxMessageBox(msgStr, _("Destination file already exist"), wxICON_ERROR);
+                << _t("File already found in attachments") << "\n";
+            wxMessageBox(msgStr, _t("Destination file already exist"), wxICON_ERROR);
         }
         return false;
     }
     else if (wxCopyFile(FileToImport, ImportedFile))
     {
-        if (Model_Infotable::instance().GetBoolInfo("ATTACHMENTSDELETE", false))
+        if (Model_Infotable::instance().getBool("ATTACHMENTSDELETE", false))
             wxRemoveFile(FileToImport);
     }
     else
@@ -477,7 +480,7 @@
 {
     if (wxFileExists(FileToDelete))
     {
-        if (Model_Infotable::instance().GetBoolInfo("ATTACHMENTSTRASH", false))
+        if (Model_Infotable::instance().getBool("ATTACHMENTSTRASH", false))
         {
             const wxString DeletedAttachmentFolder = mmex::getPathAttachment(mmAttachmentManage::InfotablePathSetting()) + m_PathSep + "Deleted";
 
@@ -500,11 +503,11 @@
     }
     else
     {
-        wxString msgStr = wxString() << _("Attachment not found:") << "\n"
+        wxString msgStr = wxString() << _t("Attachment not found:") << "\n"
             << "'" << FileToDelete << "'" << "\n"
             << "\n"
-            << _("Do you want to continue and delete attachment on database?") << "\n";
-        int DeleteResponse = wxMessageBox(msgStr, _("Delete attachment failed"), wxYES_NO | wxNO_DEFAULT | wxICON_ERROR);
+            << _t("Do you want to delete the attachment in the database?") << "\n";
+        int DeleteResponse = wxMessageBox(msgStr, _t("Delete attachment failed"), wxYES_NO | wxNO_DEFAULT | wxICON_ERROR);
         if (DeleteResponse == wxYES)
             return true;
         else
@@ -517,11 +520,11 @@
 {
     if (!wxFileExists(FileToOpen))
     {
-        wxString msgStr = wxString() << _("Unable to open file:") << "\n"
+        wxString msgStr = wxString() << _t("Unable to open file:") << "\n"
             << "'" << FileToOpen << "'" << "\n"
             << "\n"
-            << _("Please verify that file exists and user has rights to read it.") << "\n";
-        wxMessageBox(msgStr, _("Open attachment failed"), wxICON_ERROR);
+            << _t("Please verify that file exists and user has rights to read it.") << "\n";
+        wxMessageBox(msgStr, _t("Open attachment failed"), wxICON_ERROR);
         return false;
     }
 
@@ -539,7 +542,7 @@
         Model_Attachment::instance().remove(entry.ATTACHMENTID);
     }
 
-    if (RefType == Model_Attachment::REFTYPE_STR_TRANSACTION)
+    if (RefType == Model_Checking::refTypeName)
         Model_Checking::instance().updateTimestamp(RefId);
 
     return true;
@@ -566,9 +569,9 @@
     }
     Model_Attachment::instance().save(attachments);
 
-    if (OldRefType == Model_Attachment::REFTYPE_STR_TRANSACTION)
+    if (OldRefType == Model_Checking::refTypeName)
         Model_Checking::instance().updateTimestamp(OldRefId);
-    if (NewRefType == Model_Attachment::REFTYPE_STR_TRANSACTION)
+    if (NewRefType == Model_Checking::refTypeName)
         Model_Checking::instance().updateTimestamp(NewRefId);
 
     return true;
@@ -592,7 +595,7 @@
         Model_Attachment::instance().save(NewAttachment);
     }
 
-    if (RefType == Model_Attachment::REFTYPE_STR_TRANSACTION)
+    if (RefType == Model_Checking::refTypeName)
         Model_Checking::instance().updateTimestamp(NewRefId);
 
     return true;
diff -Naur a/src/attachmentdialog.h b/src/attachmentdialog.h
--- a/src/attachmentdialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/attachmentdialog.h	2025-07-09 01:46:59.624940366 +0200
@@ -20,11 +20,10 @@
 #ifndef MM_EX_ATTACHMENTDIALOG_H_
 #define MM_EX_ATTACHMENTDIALOG_H_
 
-#include "defs.h"
 #include <wx/dataview.h>
 #include <map>
-
-typedef wxLongLong int64;
+#include "defs.h"
+#include "primitive.h"
 
 class mmAttachmentDialog : public wxDialog
 {
@@ -54,8 +53,8 @@
 
     int64 m_attachment_id = -1;
     std::map<int, wxString> ColName_;
-    wxButton* btnCancel_ = nullptr;
-    wxButton* button_OK_ = nullptr;
+    //wxButton* btnCancel_ = nullptr;
+    //wxButton* button_OK_ = nullptr;
     wxString m_PathSep = wxFileName::GetPathSeparator();
 
     wxString m_RefType;
diff -Naur a/src/billsdepositsdialog.cpp b/src/billsdepositsdialog.cpp
--- a/src/billsdepositsdialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/billsdepositsdialog.cpp	2025-07-09 01:46:59.628940390 +0200
@@ -35,30 +35,29 @@
 #include "mmTextCtrl.h"
 #include "splittransactionsdialog.h"
 #include "model/Model_Payee.h"
-#include "model/Model_Attachment.h"
 #include "model/Model_CurrencyHistory.h"
 #include <wx/valnum.h>
 
 // the order in gui may be different than the database encoding order.
 const std::vector<std::pair<int, wxString> > mmBDDialog::BILLSDEPOSITS_REPEATS =
 {
-    { Model_Billsdeposits::REPEAT_ONCE, wxTRANSLATE("Once")},
-    { Model_Billsdeposits::REPEAT_WEEKLY, wxTRANSLATE("Weekly")},
-    { Model_Billsdeposits::REPEAT_BI_WEEKLY, wxTRANSLATE("Fortnightly")},
-    { Model_Billsdeposits::REPEAT_MONTHLY, wxTRANSLATE("Monthly")},
-    { Model_Billsdeposits::REPEAT_BI_MONTHLY, wxTRANSLATE("Every 2 Months")},
-    { Model_Billsdeposits::REPEAT_QUARTERLY, wxTRANSLATE("Quarterly")},
-    { Model_Billsdeposits::REPEAT_HALF_YEARLY, wxTRANSLATE("Half-Yearly")},
-    { Model_Billsdeposits::REPEAT_YEARLY, wxTRANSLATE("Yearly")},
-    { Model_Billsdeposits::REPEAT_FOUR_MONTHLY, wxTRANSLATE("Four Months")},
-    { Model_Billsdeposits::REPEAT_FOUR_WEEKLY, wxTRANSLATE("Four Weeks")},
-    { Model_Billsdeposits::REPEAT_DAILY, wxTRANSLATE("Daily")},
-    { Model_Billsdeposits::REPEAT_IN_X_DAYS, wxTRANSLATE("In (n) Days")},
-    { Model_Billsdeposits::REPEAT_IN_X_MONTHS, wxTRANSLATE("In (n) Months")},
-    { Model_Billsdeposits::REPEAT_EVERY_X_DAYS, wxTRANSLATE("Every (n) Days")},
-    { Model_Billsdeposits::REPEAT_EVERY_X_MONTHS, wxTRANSLATE("Every (n) Months")},
-    { Model_Billsdeposits::REPEAT_MONTHLY_LAST_DAY, wxTRANSLATE("Monthly (last day)")},
-    { Model_Billsdeposits::REPEAT_MONTHLY_LAST_BUSINESS_DAY, wxTRANSLATE("Monthly (last business day)")}
+    { Model_Billsdeposits::REPEAT_ONCE,                      _n("Once") },
+    { Model_Billsdeposits::REPEAT_WEEKLY,                    _n("Weekly") },
+    { Model_Billsdeposits::REPEAT_BI_WEEKLY,                 _n("Fortnightly") },
+    { Model_Billsdeposits::REPEAT_MONTHLY,                   _n("Monthly") },
+    { Model_Billsdeposits::REPEAT_BI_MONTHLY,                _n("Every 2 Months") },
+    { Model_Billsdeposits::REPEAT_QUARTERLY,                 _n("Quarterly") },
+    { Model_Billsdeposits::REPEAT_HALF_YEARLY,               _n("Half-Yearly") },
+    { Model_Billsdeposits::REPEAT_YEARLY,                    _n("Yearly") },
+    { Model_Billsdeposits::REPEAT_FOUR_MONTHLY,              _n("Four Months") },
+    { Model_Billsdeposits::REPEAT_FOUR_WEEKLY,               _n("Four Weeks") },
+    { Model_Billsdeposits::REPEAT_DAILY,                     _n("Daily") },
+    { Model_Billsdeposits::REPEAT_IN_X_DAYS,                 _n("In (n) Days") },
+    { Model_Billsdeposits::REPEAT_IN_X_MONTHS,               _n("In (n) Months") },
+    { Model_Billsdeposits::REPEAT_EVERY_X_DAYS,              _n("Every (n) Days") },
+    { Model_Billsdeposits::REPEAT_EVERY_X_MONTHS,            _n("Every (n) Months") },
+    { Model_Billsdeposits::REPEAT_MONTHLY_LAST_DAY,          _n("Monthly (last day)") },
+    { Model_Billsdeposits::REPEAT_MONTHLY_LAST_BUSINESS_DAY, _n("Monthly (last business day)") }
 };
 
 // Used to determine if we need to refresh the tag text ctrl after
@@ -98,7 +97,7 @@
     wxSize size = GetSize();
     if (m_custom_fields->IsCustomPanelShown())
         size = wxSize(GetSize().GetWidth() - m_custom_fields->GetMinWidth(), GetSize().GetHeight());
-    Model_Infotable::instance().Set("RECURRINGTRANS_DIALOG_SIZE", size);
+    Model_Infotable::instance().setSize("RECURRINGTRANS_DIALOG_SIZE", size);
 }
 
 mmBDDialog::mmBDDialog(wxWindow* parent, int64 bdID, bool duplicate, bool enterOccur)
@@ -131,13 +130,13 @@
         m_bill_data.COLOR = bill->COLOR;
         wxArrayInt64 billtags;
         for (const auto& tag : Model_Taglink::instance().find(
-            Model_Taglink::REFTYPE(Model_Attachment::REFTYPE_STR_BILLSDEPOSIT),
+            Model_Taglink::REFTYPE(Model_Billsdeposits::refTypeName),
             Model_Taglink::REFID(bill->BDID)
         ))
             billtags.push_back(tag.TAGID);
         m_bill_data.TAGS = billtags;
         //
-        const wxString& splitRefType = Model_Attachment::REFTYPE_STR_BILLSDEPOSITSPLIT;
+        const wxString& splitRefType = Model_Budgetsplittransaction::refTypeName;
         for (const auto& item : Model_Billsdeposits::split(bill)) {
             wxArrayInt64 splittags;
             for (const auto& tag : Model_Taglink::instance().find(Model_Taglink::REFTYPE(splitRefType), Model_Taglink::REFID(item.SPLITTRANSID)))
@@ -146,14 +145,14 @@
         }
 
         // If duplicate then we may need to copy the attachments
-        if (m_dup_bill && Model_Infotable::instance().GetBoolInfo("ATTACHMENTSDUPLICATE", false))
+        if (m_dup_bill && Model_Infotable::instance().getBool("ATTACHMENTSDUPLICATE", false))
         {
-            const wxString& RefType = Model_Attachment::REFTYPE_STR_BILLSDEPOSIT;
+            const wxString& RefType = Model_Billsdeposits::refTypeName;
             mmAttachmentManage::CloneAllAttachments(RefType, bdID, 0);
         }
     }
 
-    m_transfer = (m_bill_data.TRANSCODE == Model_Checking::TYPE_STR_TRANSFER);
+    m_transfer = (m_bill_data.TRANSCODE == Model_Checking::TYPE_NAME_TRANSFER);
 
     int64 ref_id = m_dup_bill ?  -bdID : (m_new_bill ? 0 : -m_bill_data.BDID);
     m_custom_fields = new mmCustomDataTransaction(this, ref_id, ID_CUSTOMFIELDS);
@@ -207,11 +206,11 @@
     }
     setRepeatType(Model_Billsdeposits::REPEAT_MONTHLY);
 
-    for (const auto& i : Model_Checking::TYPE_STR)
-    {
-        if (i == Model_Checking::TYPE_STR_TRANSFER && Model_Account::instance().all().size() < 2)
+    for (int i = 0; i < Model_Checking::TYPE_ID_size; ++i) {
+        if (i == Model_Checking::TYPE_ID_TRANSFER && Model_Account::instance().all().size() < 2)
             break;
-        m_choice_transaction_type->Append(wxGetTranslation(i), new wxStringClientData(i));
+        wxString type = Model_Checking::type_name(i);
+        m_choice_transaction_type->Append(wxGetTranslation(type), new wxStringClientData(type));
     }
     m_choice_transaction_type->SetSelection(Model_Checking::TYPE_ID_WITHDRAWAL);
 
@@ -301,14 +300,14 @@
     if (!m_enter_occur)
     {
         if (m_dup_bill)
-            SetDialogHeader(_("Duplicate Scheduled Transaction"));
+            SetDialogHeader(_t("Duplicate Scheduled Transaction"));
         else
-            SetDialogHeader(_("Edit Scheduled Transaction"));
+            SetDialogHeader(_t("Edit Scheduled Transaction"));
         textAmount_->SetFocus();
     }
     else
     {
-        SetDialogHeader(_("Enter Scheduled Transaction"));
+        SetDialogHeader(_t("Enter Scheduled Transaction"));
         m_date_due->Enable(false);
         m_choice_transaction_type->Disable();
         m_choice_repeat->Disable();
@@ -332,7 +331,7 @@
 void mmBDDialog::SetDialogParameters(int64 trx_id)
 {
     const auto split = Model_Splittransaction::instance().get_all();
-    const auto tags = Model_Taglink::instance().get_all(Model_Attachment::REFTYPE_STR_BILLSDEPOSIT);
+    const auto tags = Model_Taglink::instance().get_all(Model_Billsdeposits::refTypeName);
     //const auto trx = Model_Checking::instance().find(Model_Checking::TRANSID(trx_id)).at(0);
     const auto trx = Model_Checking::instance().get(trx_id);
     Model_Checking::Full_Data t(*trx, split, tags);
@@ -341,7 +340,7 @@
 
     m_bill_data.TRANSCODE = t.TRANSCODE;
     m_choice_transaction_type->SetSelection(Model_Checking::type_id(t.TRANSCODE));
-    m_transfer = (m_bill_data.TRANSCODE == Model_Checking::TYPE_STR_TRANSFER);
+    m_transfer = (m_bill_data.TRANSCODE == Model_Checking::TYPE_NAME_TRANSFER);
     updateControlsForTransType();
 
     m_bill_data.TRANSAMOUNT = t.TRANSAMOUNT;
@@ -402,7 +401,7 @@
 
     /* Bills & Deposits Details */
 
-    wxStaticBox* repeatDetailsStaticBox = new wxStaticBox(this, wxID_ANY, _("Scheduled Transaction Details"));
+    wxStaticBox* repeatDetailsStaticBox = new wxStaticBox(this, wxID_ANY, _t("Scheduled Transaction Details"));
     wxStaticBoxSizer* repeatTransBoxSizer = new wxStaticBoxSizer(repeatDetailsStaticBox, wxVERTICAL);
 
     //mainBoxSizerInner will align contents horizontally
@@ -416,26 +415,26 @@
     // Date Due --------------------------------------------
 
     m_date_due = new mmDatePickerCtrl(this, ID_DIALOG_BD_DUE_DATE);
-    mmToolTip(m_date_due, _("Specify the date when this bill or deposit is due"));
-    itemFlexGridSizer5->Add(new wxStaticText(this, wxID_STATIC, _("Date Due")), g_flagsH);
+    mmToolTip(m_date_due, _t("Specify the date when this bill or deposit is due"));
+    itemFlexGridSizer5->Add(new wxStaticText(this, wxID_STATIC, _t("Date Due")), g_flagsH);
     itemFlexGridSizer5->Add(m_date_due->mmGetLayout(false));
 
     // Repeats --------------------------------------------
 
-    staticTextRepeats_ = new wxStaticText(this, wxID_STATIC, _("Repeats"));
+    staticTextRepeats_ = new wxStaticText(this, wxID_STATIC, _t("Repeats"));
     itemFlexGridSizer5->Add(staticTextRepeats_, g_flagsH);
     itemFlexGridSizer5->AddSpacer(1);
 
     m_btn_due_prev_date = new wxBitmapButton(this, ID_DIALOG_TRANS_BUTTONTRANSNUMPREV
         , mmBitmapBundle(png::LEFTARROW, mmBitmapButtonSize));
-    mmToolTip(m_btn_due_prev_date, _("Back to the last occurring date with the specified values"));
+    mmToolTip(m_btn_due_prev_date, _t("Back to the last occurring date with the specified values"));
 
     m_choice_repeat = new wxChoice(this, ID_DIALOG_BD_COMBOBOX_REPEATS);
 
     wxBoxSizer* repeatBoxSizer = new wxBoxSizer(wxHORIZONTAL);
     m_btn_due_date = new wxBitmapButton(this, ID_DIALOG_TRANS_BUTTONTRANSNUM
         , mmBitmapBundle(png::RIGHTARROW, mmBitmapButtonSize));
-    mmToolTip(m_btn_due_date, _("Advance the next occurring date with the specified values"));
+    mmToolTip(m_btn_due_date, _t("Advance the next occurring date with the specified values"));
     repeatBoxSizer->Add(m_btn_due_prev_date, g_flagsH);
     repeatBoxSizer->Add(m_choice_repeat, wxSizerFlags(g_flagsExpand));
     repeatBoxSizer->Add(m_btn_due_date, g_flagsH);
@@ -446,7 +445,7 @@
     repeatTransBoxSizer->Add(itemFlexGridSizer52);
 
     // Repeat Times --------------------------------------------
-    staticTimesRepeat_ = new wxStaticText(this, wxID_STATIC, _("Payments Left"));
+    staticTimesRepeat_ = new wxStaticText(this, wxID_STATIC, _t("Payments Left"));
     itemFlexGridSizer52->Add(staticTimesRepeat_, g_flagsH);
 
     wxBoxSizer* repeatTimesBoxSizer = new wxBoxSizer(wxHORIZONTAL);
@@ -454,26 +453,26 @@
 
     wxIntegerValidator<int> intValidator(nullptr, wxNUM_VAL_ZERO_AS_BLANK);
     intValidator.SetMin(0);
-    textNumRepeats_ = new wxTextCtrl(this, ID_DIALOG_BD_TEXTCTRL_NUM_TIMES, "", wxDefaultPosition, m_date_due->GetSize(), 0, intValidator);
+    textNumRepeats_ = new wxTextCtrl(this, ID_DIALOG_BD_TEXTCTRL_NUM_TIMES, "", wxDefaultPosition, wxDefaultSize, 0, intValidator);
     repeatTimesBoxSizer->Add(textNumRepeats_, g_flagsH);
     textNumRepeats_->SetMaxLength(12);
     setRepeatDetails();
 
     /* Auto Execution Status */
     itemCheckBoxAutoExeUserAck_ = new wxCheckBox(this, ID_DIALOG_BD_CHECKBOX_AUTO_EXECUTE_USERACK
-        ,  _("Request user to enter payment"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    mmToolTip(itemCheckBoxAutoExeUserAck_, _("User requested to enter this transaction on the 'Date Paid'"));
+        ,  _t("Request user to enter payment"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    mmToolTip(itemCheckBoxAutoExeUserAck_, _t("User requested to enter this transaction on the 'Date Paid'"));
 
     itemCheckBoxAutoExeSilent_ = new wxCheckBox(this, ID_DIALOG_BD_CHECKBOX_AUTO_EXECUTE_SILENT
-        , _("Grant automatic execute"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    mmToolTip(itemCheckBoxAutoExeSilent_, _("The requested payment will occur without user interaction"));
+        , _t("Grant automatic execute"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    mmToolTip(itemCheckBoxAutoExeSilent_, _t("The requested payment will occur without user interaction"));
 
     repeatTransBoxSizer->Add(itemCheckBoxAutoExeUserAck_, g_flagsExpand);
     repeatTransBoxSizer->Add(itemCheckBoxAutoExeSilent_, g_flagsExpand);
 
     /*************************************************************************************************************/
 
-    wxStaticBox* transDetailsStaticBox = new wxStaticBox(this, wxID_REMOVE, _("Transaction Details"));
+    wxStaticBox* transDetailsStaticBox = new wxStaticBox(this, wxID_REMOVE, _t("Transaction Details"));
     wxStaticBoxSizer* transDetailsStaticBoxSizer = new wxStaticBoxSizer(transDetailsStaticBox, wxVERTICAL);
     wxFlexGridSizer* transPanelSizer = new wxFlexGridSizer(0, 3, 0, 0);
     transPanelSizer->AddGrowableCol(1, 0);
@@ -482,43 +481,43 @@
 
     // Trans Date --------------------------------------------
     m_date_paid = new mmDatePickerCtrl(this, ID_DIALOG_TRANS_BUTTON_PAYDATE);
-    mmToolTip(m_date_paid, _("Specify the date the user is requested to enter this transaction"));
-    transPanelSizer->Add(new wxStaticText(this, wxID_STATIC, _("Date Paid")), g_flagsH);
+    mmToolTip(m_date_paid, _t("Specify the date the user is requested to enter this transaction"));
+    transPanelSizer->Add(new wxStaticText(this, wxID_STATIC, _t("Date Paid")), g_flagsH);
     transPanelSizer->Add(m_date_paid->mmGetLayout());
     transPanelSizer->AddSpacer(1);
 
     // Status --------------------------------------------
     m_choice_status = new wxChoice(this, ID_DIALOG_TRANS_STATUS);
 
-    for (const auto& i : Model_Checking::STATUS_STR)
-    {
-        m_choice_status->Append(wxGetTranslation(i), new wxStringClientData(i));
+    for (int i = 0; i < Model_Checking::STATUS_ID_size; ++i) {
+        wxString status = Model_Checking::status_name(i);
+        m_choice_status->Append(wxGetTranslation(status), new wxStringClientData(status));
     }
-    m_choice_status->SetSelection(Option::instance().TransStatusReconciled());
-    mmToolTip(m_choice_status, _("Specify the status for the transaction"));
+    m_choice_status->SetSelection(Option::instance().getTransStatusReconciled());
+    mmToolTip(m_choice_status, _t("Specify the status for the transaction"));
 
-    transPanelSizer->Add(new wxStaticText(this, wxID_STATIC, _("Status")), g_flagsH);
+    transPanelSizer->Add(new wxStaticText(this, wxID_STATIC, _t("Status")), g_flagsH);
     transPanelSizer->Add(m_choice_status, g_flagsH);
     transPanelSizer->AddSpacer(1);
 
     // Type --------------------------------------------
     m_choice_transaction_type = new wxChoice(this, wxID_VIEW_DETAILS);
-    mmToolTip(m_choice_transaction_type, _("Specify the type of transactions to be created."));
-    cAdvanced_ = new wxCheckBox(this, ID_DIALOG_TRANS_ADVANCED_CHECKBOX, _("&Advanced")
+    mmToolTip(m_choice_transaction_type, _t("Specify the type of transactions to be created."));
+    cAdvanced_ = new wxCheckBox(this, ID_DIALOG_TRANS_ADVANCED_CHECKBOX, _t("&Advanced")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     cAdvanced_->SetValue(false);
-    mmToolTip(cAdvanced_, _("Allows the setting of different amounts in the FROM and TO accounts."));
+    mmToolTip(cAdvanced_, _t("Allows the setting of different amounts in the FROM and TO accounts."));
 
     wxBoxSizer* typeSizer = new wxBoxSizer(wxHORIZONTAL);
     typeSizer->Add(m_choice_transaction_type, g_flagsH);
     typeSizer->Add(cAdvanced_, g_flagsH);
 
-    transPanelSizer->Add(new wxStaticText(this, wxID_STATIC, _("Type")), g_flagsH);
+    transPanelSizer->Add(new wxStaticText(this, wxID_STATIC, _t("Type")), g_flagsH);
     transPanelSizer->Add(typeSizer);
     transPanelSizer->AddSpacer(1);
 
     // Amount Fields --------------------------------------------
-    wxStaticText* amount_label = new wxStaticText(this, wxID_STATIC, _("Amount"));
+    wxStaticText* amount_label = new wxStaticText(this, wxID_STATIC, _t("Amount"));
     amount_label->SetFont(this->GetFont().Bold());
 
     textAmount_ = new mmTextCtrl(this, ID_DIALOG_TRANS_TEXTAMOUNT, ""
@@ -529,7 +528,7 @@
     toTextAmount_ = new mmTextCtrl(this, ID_DIALOG_TRANS_TOTEXTAMOUNT, ""
         , wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT | wxTE_PROCESS_ENTER
         , mmCalcValidator());
-    mmToolTip(toTextAmount_, _("Specify the transfer amount in the To Account"));
+    mmToolTip(toTextAmount_, _t("Specify the transfer amount in the To Account"));
 
     wxBoxSizer* amountSizer = new wxBoxSizer(wxHORIZONTAL);
     amountSizer->Add(textAmount_, g_flagsExpand);
@@ -540,23 +539,23 @@
 
     bCalc_ = new wxBitmapButton(this, wxID_ANY, mmBitmapBundle(png::CALCULATOR, mmBitmapButtonSize));
     bCalc_->Connect(wxID_ANY, wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(mmBDDialog::OnCalculator), nullptr, this);
-    mmToolTip(bCalc_, _("Open Calculator"));
+    mmToolTip(bCalc_, _t("Open Calculator"));
     transPanelSizer->Add(bCalc_, g_flagsH);
     calcTarget_ = textAmount_;
     calcPopup_ = new mmCalculatorPopup(bCalc_, calcTarget_);
 
     // Account ------------------------------------------------
-    wxStaticText* acc_label = new wxStaticText(this, ID_DIALOG_TRANS_STATIC_ACCOUNT, _("Account"));
+    wxStaticText* acc_label = new wxStaticText(this, ID_DIALOG_TRANS_STATIC_ACCOUNT, _t("Account"));
     acc_label->SetFont(this->GetFont().Bold());
     transPanelSizer->Add(acc_label, g_flagsH);
     cbAccount_ = new mmComboBoxAccount(this, mmID_ACCOUNTNAME, wxDefaultSize, m_bill_data.ACCOUNTID);
     cbAccount_->SetMinSize(cbAccount_->GetSize());
-    mmToolTip(cbAccount_, _("Specify the Account that will own the scheduled transaction"));
+    mmToolTip(cbAccount_, _t("Specify the Account that will own the scheduled transaction"));
     transPanelSizer->Add(cbAccount_, g_flagsExpand);
     transPanelSizer->AddSpacer(1);
 
     // To Account ------------------------------------------------
-    wxStaticText* to_acc_label = new wxStaticText(this, ID_DIALOG_TRANS_STATIC_TOACCOUNT, _("To"));
+    wxStaticText* to_acc_label = new wxStaticText(this, ID_DIALOG_TRANS_STATIC_TOACCOUNT, _t("To"));
     to_acc_label->SetFont(this->GetFont().Bold());
     transPanelSizer->Add(to_acc_label, g_flagsH);
     cbToAccount_ = new mmComboBoxAccount(this, mmID_TOACCOUNTNAME, wxDefaultSize, m_bill_data.TOACCOUNTID);
@@ -566,7 +565,7 @@
     transPanelSizer->AddSpacer(1);
 
     // Payee ------------------------------------------------
-    wxStaticText* payee_label = new wxStaticText(this, ID_DIALOG_TRANS_STATIC_PAYEE, _("Payee"));
+    wxStaticText* payee_label = new wxStaticText(this, ID_DIALOG_TRANS_STATIC_PAYEE, _t("Payee"));
     payee_label->SetFont(this->GetFont().Bold());
 
     cbPayee_ = new mmComboBoxPayee(this, mmID_PAYEE, wxDefaultSize, m_bill_data.PAYEEID, true);
@@ -578,13 +577,13 @@
 
     // Category ---------------------------------------------
 
-    wxStaticText* categ_label2 = new wxStaticText(this, ID_DIALOG_TRANS_CATEGLABEL, _("Category"));
+    wxStaticText* categ_label2 = new wxStaticText(this, ID_DIALOG_TRANS_CATEGLABEL, _t("Category"));
     categ_label2->SetFont(this->GetFont().Bold());
     cbCategory_ = new mmComboBoxCategory(this, mmID_CATEGORY, wxDefaultSize
                                             , m_bill_data.CATEGID, true);
     cbCategory_->SetMinSize(cbCategory_->GetSize());
     bSplit_ = new wxBitmapButton(this, ID_DIALOG_TRANS_BUTTONSPLIT, mmBitmapBundle(png::NEW_TRX, mmBitmapButtonSize));
-    mmToolTip(bSplit_, _("Use split Categories"));
+    mmToolTip(bSplit_, _t("Use split Categories"));
 
     transPanelSizer->Add(categ_label2, g_flagsH);
     transPanelSizer->Add(cbCategory_, g_flagsExpand);
@@ -592,7 +591,7 @@
 
     // Tags ---------------------------------------------
 
-    wxStaticText* tag_label = new wxStaticText(this, wxID_ANY, _("Tags"));
+    wxStaticText* tag_label = new wxStaticText(this, wxID_ANY, _t("Tags"));
     tagTextCtrl_ = new mmTagTextCtrl(this);
     
     transPanelSizer->Add(tag_label, g_flagsH);
@@ -601,43 +600,43 @@
 
     // Number ---------------------------------------------
     textNumber_ = new wxTextCtrl(this, ID_DIALOG_TRANS_TEXTNUMBER, "", wxDefaultPosition, wxDefaultSize);
-    mmToolTip(textNumber_, _("Specify any associated check number or transaction number"));
+    mmToolTip(textNumber_, _t("Specify any associated check number or transaction number"));
 
-    transPanelSizer->Add(new wxStaticText(this, wxID_STATIC, _("Number")), g_flagsH);
+    transPanelSizer->Add(new wxStaticText(this, wxID_STATIC, _t("Number")), g_flagsH);
     transPanelSizer->Add(textNumber_, g_flagsExpand);
     transPanelSizer->AddSpacer(1);
 
     // Frequently Used Notes
     wxButton* bFrequentUsedNotes = new wxButton(this, ID_DIALOG_TRANS_BUTTON_FREQENTNOTES, "..."
         , wxDefaultPosition, bSplit_->GetSize());
-    mmToolTip(bFrequentUsedNotes, _("Select one of the frequently used notes"));
+    mmToolTip(bFrequentUsedNotes, _t("Select one of the frequently used notes"));
     bFrequentUsedNotes->Connect(ID_DIALOG_TRANS_BUTTON_FREQENTNOTES
         , wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(mmBDDialog::OnFrequentUsedNotes), nullptr, this);
 
     // Colours
     bColours_ = new mmColorButton(this, wxID_LOWEST, bSplit_->GetSize());
-    mmToolTip(bColours_, _("User Colors"));
+    mmToolTip(bColours_, _t("User Colors"));
 
     // Attachments
     bAttachments_ = new wxBitmapButton(this, wxID_FILE, mmBitmapBundle(png::CLIP, mmBitmapButtonSize));
-    mmToolTip(bAttachments_, _("Organize attachments of this scheduled transaction"));
+    mmToolTip(bAttachments_, _t("Organize attachments of this scheduled transaction"));
 
     // Now display the Frequntly Used Notes, Colour, Attachment buttons
     wxBoxSizer* notes_sizer = new wxBoxSizer(wxHORIZONTAL);
     transPanelSizer->Add(notes_sizer);
-    notes_sizer->Add(new wxStaticText(this, wxID_STATIC, _("Notes")), g_flagsH);
+    notes_sizer->Add(new wxStaticText(this, wxID_STATIC, _t("Notes")), g_flagsH);
     notes_sizer->Add(bFrequentUsedNotes, g_flagsH);
 
     wxBoxSizer* RightAlign_sizer = new wxBoxSizer(wxHORIZONTAL);
     transPanelSizer->Add(RightAlign_sizer, wxSizerFlags(g_flagsH).Align(wxALIGN_RIGHT));
-    RightAlign_sizer->Add(new wxStaticText(this, wxID_STATIC, _("Color")), g_flagsH);
+    RightAlign_sizer->Add(new wxStaticText(this, wxID_STATIC, _t("Color")), g_flagsH);
     RightAlign_sizer->Add(bColours_, wxSizerFlags());
     transPanelSizer->Add(bAttachments_, g_flagsH);
 
     // Notes
     textNotes_ = new wxTextCtrl(this, ID_DIALOG_TRANS_TEXTNOTES, ""
         , wxDefaultPosition, wxSize(-1, m_date_due->GetSize().GetHeight() * 5), wxTE_MULTILINE);
-    mmToolTip(textNotes_, _("Specify any text notes you want to add to this transaction."));
+    mmToolTip(textNotes_, _t("Specify any text notes you want to add to this transaction."));
     transDetailsStaticBoxSizer->Add(textNotes_, wxSizerFlags(g_flagsExpand).Border(wxLEFT | wxRIGHT | wxBOTTOM, 10));
 
     /**********************************************************************************************
@@ -647,14 +646,14 @@
     wxBoxSizer* button_sizer = new wxBoxSizer(wxHORIZONTAL);
     buttonsPanel->SetSizer(button_sizer);
 
-    wxButton* button_ok = new wxButton(buttonsPanel, wxID_OK, _("&OK "));
+    wxButton* button_ok = new wxButton(buttonsPanel, wxID_OK, _t("&OK "));
 
     m_button_cancel = new wxButton(buttonsPanel, wxID_CANCEL, wxGetTranslation(g_CancelLabel));
 
     mainBoxSizerOuter->Add(buttonsPanel, wxSizerFlags(g_flagsV).Center().Border(wxALL, 0));
     wxBitmapButton* button_hide = new wxBitmapButton(buttonsPanel
         , ID_BTN_CUSTOMFIELDS, mmBitmapBundle(png::RIGHTARROW, mmBitmapButtonSize));
-    mmToolTip(button_hide, _("Show/Hide custom fields window"));
+    mmToolTip(button_hide, _t("Show/Hide custom fields window"));
     if (m_custom_fields->GetCustomFieldsCount() == 0) {
         button_hide->Hide();
     }
@@ -680,7 +679,7 @@
 
 void mmBDDialog::OnQuit(wxCloseEvent& WXUNUSED(event))
 {
-    const wxString& RefType = Model_Attachment::REFTYPE_STR_BILLSDEPOSIT;
+    const wxString& RefType = Model_Billsdeposits::refTypeName;
     if (m_bill_data.BDID != 0)
         mmAttachmentManage::DeleteAllAttachments(RefType, m_bill_data.BDID);
     EndModal(wxID_CANCEL);
@@ -698,7 +697,7 @@
     }
 #endif
 
-    const wxString& RefType = Model_Attachment::REFTYPE_STR_BILLSDEPOSIT;
+    const wxString RefType = Model_Billsdeposits::refTypeName;
     if (m_bill_data.BDID != 0)
         mmAttachmentManage::DeleteAllAttachments(RefType, m_bill_data.BDID);
     EndModal(wxID_CANCEL);
@@ -712,8 +711,8 @@
         // Only for new/duplicate transactions: if user want to autofill last category used for payee.
         // If this is a Split Transaction, ignore displaying last category for payee
         if (payee->CATEGID != -1 && m_bill_data.local_splits.empty()
-            && (Option::instance().TransCategorySelectionNonTransfer() == Option::LASTUSED ||
-                Option::instance().TransCategorySelectionNonTransfer() == Option::DEFAULT)
+            && (Option::instance().getTransCategoryNone() == Option::LASTUSED ||
+                Option::instance().getTransCategoryNone() == Option::DEFAULT)
             && (!Model_Category::is_hidden(payee->CATEGID) && !Model_Category::is_hidden(payee->CATEGID)))
         {
             m_bill_data.CATEGID = payee->CATEGID;
@@ -807,7 +806,7 @@
 
 void mmBDDialog::OnAttachments(wxCommandEvent& WXUNUSED(event))
 {
-    const wxString& RefType = Model_Attachment::REFTYPE_STR_BILLSDEPOSIT;
+    const wxString& RefType = Model_Billsdeposits::refTypeName;
     mmAttachmentDialog dlg(this, RefType, m_bill_data.BDID);
     dlg.ShowModal();
 }
@@ -824,7 +823,7 @@
     {
         m_transfer = true;
         mmToolTip(textAmount_, amountTransferTip_);
-        accountLabel->SetLabelText(_("From"));
+        accountLabel->SetLabelText(_t("From"));
 
         cbToAccount_->mmSetId(m_bill_data.TOACCOUNTID);
         m_bill_data.PAYEEID = -1;
@@ -833,8 +832,8 @@
     case Model_Checking::TYPE_ID_WITHDRAWAL:
     {
         mmToolTip(textAmount_, amountNormalTip_);
-        accountLabel->SetLabelText(_("Account"));
-        stp->SetLabelText(_("Payee"));
+        accountLabel->SetLabelText(_t("Account"));
+        stp->SetLabelText(_t("Payee"));
         mmToolTip(cbPayee_, payeeWithdrawalTip_);
 
         cbPayee_->mmSetId(m_bill_data.PAYEEID);
@@ -846,8 +845,8 @@
     case Model_Checking::TYPE_ID_DEPOSIT:
     {
         mmToolTip(textAmount_, amountNormalTip_);
-        accountLabel->SetLabelText(_("Account"));
-        stp->SetLabelText(_("From"));
+        accountLabel->SetLabelText(_t("Account"));
+        stp->SetLabelText(_t("From"));
         mmToolTip(cbPayee_, payeeDepositTip_);
 
         cbPayee_->mmSetId(m_bill_data.PAYEEID);
@@ -893,8 +892,8 @@
 {
     // Ideally 'paid date' should be on or before the 'due date'
     if (m_date_paid->GetValue().GetDateOnly() > m_date_due->GetValue())
-        if (wxMessageBox(_("The payment date is after the due date, is this what you intended?"),
-            _("Looks like a late payment"),
+        if (wxMessageBox(_t("The payment date is after the due date. Is this intended?"),
+            _t("Looks like a late payment"),
             wxYES_NO | wxNO_DEFAULT | wxICON_WARNING) != wxYES)
             return;
 
@@ -938,8 +937,8 @@
         if (!payee)
         {
             wxMessageDialog msgDlg( this
-                , wxString::Format(_("You have not used this payee name before. Is the name correct?\n%s"), payee_name)
-                , _("Confirm payee name")
+                , wxString::Format(_t("Payee name has not been used before. Is the name correct?\n%s"), payee_name)
+                , _t("Confirm payee name")
                 , wxYES_NO | wxYES_DEFAULT | wxICON_WARNING);
             if (msgDlg.ShowModal() == wxID_YES)
             {
@@ -958,13 +957,13 @@
     if (m_bill_data.local_splits.empty())
     {
         if (!cbCategory_->mmIsValid()) {
-            return mmErrorDialogs::ToolTip4Object(cbCategory_, _("Invalid value"), _("Category"), wxICON_ERROR);
+            return mmErrorDialogs::ToolTip4Object(cbCategory_, _t("Invalid value"), _t("Category"), wxICON_ERROR);
         }
         m_bill_data.CATEGID = cbCategory_->mmGetCategoryId();
     }
 
     if (!tagTextCtrl_->IsValid()) {
-        return mmErrorDialogs::ToolTip4Object(tagTextCtrl_, _("Invalid value"), _("Tags"), wxICON_ERROR);
+        return mmErrorDialogs::ToolTip4Object(tagTextCtrl_, _t("Invalid value"), _t("Tags"), wxICON_ERROR);
     }
 
     if (!m_custom_fields->ValidateCustomValues(-m_bill_data.BDID))
@@ -1038,10 +1037,10 @@
     const Model_Account::Data* account = Model_Account::instance().get(m_bill_data.ACCOUNTID);
     const Model_Account::Data* toAccount = Model_Account::instance().get(m_bill_data.TOACCOUNTID);
     if (m_bill_data.TRANSDATE < account->INITIALDATE)
-        return mmErrorDialogs::ToolTip4Object(cbAccount_, _("The opening date for the account is later than the date of this transaction"), _("Invalid Date"));
+        return mmErrorDialogs::ToolTip4Object(cbAccount_, _t("The opening date for the account is later than the date of this transaction"), _t("Invalid Date"));
   
     if (toAccount && (m_bill_data.TRANSDATE < toAccount->INITIALDATE))
-        return mmErrorDialogs::ToolTip4Object(cbToAccount_, _("The opening date for the account is later than the date of this transaction"), _("Invalid Date"));
+        return mmErrorDialogs::ToolTip4Object(cbToAccount_, _t("The opening date for the account is later than the date of this transaction"), _t("Invalid Date"));
 
     if (!m_enter_occur)
     {
@@ -1053,7 +1052,7 @@
         bill->ACCOUNTID = m_bill_data.ACCOUNTID;
         bill->TOACCOUNTID = m_bill_data.TOACCOUNTID;
         bill->PAYEEID = m_bill_data.PAYEEID;
-        bill->TRANSCODE = Model_Checking::TYPE_STR[m_choice_transaction_type->GetSelection()];
+        bill->TRANSCODE = Model_Checking::type_name(m_choice_transaction_type->GetSelection());
         bill->TRANSAMOUNT = m_bill_data.TRANSAMOUNT;
         bill->STATUS = m_bill_data.STATUS;
         bill->TRANSACTIONNUMBER = m_bill_data.TRANSACTIONNUMBER;
@@ -1081,7 +1080,7 @@
         Model_Budgetsplittransaction::instance().update(splt, m_trans_id);
 
         // Save split tags
-        const wxString& splitRefType = Model_Attachment::REFTYPE_STR_BILLSDEPOSITSPLIT;
+        const wxString& splitRefType = Model_Budgetsplittransaction::refTypeName;
 
         for (size_t i = 0; i < m_bill_data.local_splits.size(); i++)
         {
@@ -1097,7 +1096,7 @@
             Model_Taglink::instance().update(splitTaglinks, splitRefType, splt.at(i).SPLITTRANSID);
         }
 
-        const wxString& RefType = Model_Attachment::REFTYPE_STR_BILLSDEPOSIT;
+        const wxString& RefType = Model_Billsdeposits::refTypeName;
         mmAttachmentManage::RelocateAllAttachments(RefType, 0, RefType, m_trans_id);
 
         // Save base transaction tags
@@ -1135,7 +1134,7 @@
             tran->ACCOUNTID = m_bill_data.ACCOUNTID;
             tran->TOACCOUNTID = m_bill_data.TOACCOUNTID;
             tran->PAYEEID = m_bill_data.PAYEEID;
-            tran->TRANSCODE = Model_Checking::TYPE_STR[m_choice_transaction_type->GetSelection()];
+            tran->TRANSCODE = Model_Checking::type_name(m_choice_transaction_type->GetSelection());
             tran->TRANSAMOUNT = m_bill_data.TRANSAMOUNT;
             tran->STATUS = m_bill_data.STATUS;
             tran->TRANSACTIONNUMBER = m_bill_data.TRANSACTIONNUMBER;
@@ -1160,7 +1159,7 @@
             Model_Splittransaction::instance().update(checking_splits, trans_id);
 
             // Save split tags
-            const wxString& splitRefType = Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT;
+            const wxString& splitRefType = Model_Splittransaction::refTypeName;
 
             for (size_t i = 0; i < m_bill_data.local_splits.size(); i++)
             {
@@ -1179,8 +1178,8 @@
             //Custom Data
             m_custom_fields->SaveCustomValues(trans_id);
 
-            const wxString& oldRefType = Model_Attachment::REFTYPE_STR_BILLSDEPOSIT;
-            const wxString& newRefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+            const wxString& oldRefType = Model_Billsdeposits::refTypeName;
+            const wxString& newRefType = Model_Checking::refTypeName;
             mmAttachmentManage::RelocateAllAttachments(oldRefType, m_bill_data.BDID, newRefType, trans_id);
 
             // Save base transaction tags
@@ -1281,7 +1280,7 @@
 {
     m_advanced = advanced;
     toTextAmount_->Enable(m_advanced);
-    mmToolTip(textAmount_, m_advanced ? amountTransferTip_ : _("Specify the transfer amount in the From Account"));
+    mmToolTip(textAmount_, m_advanced ? amountTransferTip_ : _t("Specify the transfer amount in the From Account"));
     if (m_advanced)
         toTextAmount_->SetValue(m_bill_data.TOTRANSAMOUNT);
     else
@@ -1290,31 +1289,31 @@
 
 void mmBDDialog::setRepeatDetails()
 {
-    staticTextRepeats_->SetLabelText(_("Repeats"));
+    staticTextRepeats_->SetLabelText(_t("Repeats"));
 
     int repeats = getRepeatType();
     if (repeats == Model_Billsdeposits::REPEAT_IN_X_DAYS || repeats == Model_Billsdeposits::REPEAT_EVERY_X_DAYS)
     {
-        staticTimesRepeat_->SetLabelText(_("Period: Days"));
-        const auto toolTipsStr = _("Specify period in Days.");
+        staticTimesRepeat_->SetLabelText(_t("Period: Days"));
+        const auto toolTipsStr = _t("Specify period in Days.");
         mmToolTip(textNumRepeats_, toolTipsStr);
     }
     else if (repeats == Model_Billsdeposits::REPEAT_IN_X_MONTHS || repeats == Model_Billsdeposits::REPEAT_EVERY_X_MONTHS)
     {
-        staticTimesRepeat_->SetLabelText(_("Period: Months"));
-        const auto toolTipsStr = _("Specify period in Months.");
+        staticTimesRepeat_->SetLabelText(_t("Period: Months"));
+        const auto toolTipsStr = _t("Specify period in Months.");
         mmToolTip(textNumRepeats_, toolTipsStr);
     }
     else if (repeats == Model_Billsdeposits::REPEAT_ONCE)
     {
-        staticTimesRepeat_->SetLabelText(_("Payments Left"));
-        const auto toolTipsStr = _("Ignored (leave blank).");
+        staticTimesRepeat_->SetLabelText(_t("Payments Left"));
+        const auto toolTipsStr = _t("Ignored (leave blank).");
         mmToolTip(textNumRepeats_, toolTipsStr);
     }
     else
     {
-        staticTimesRepeat_->SetLabelText(_("Payments Left"));
-        const auto toolTipsStr = _("Specify the number of payments to be made.\n"
+        staticTimesRepeat_->SetLabelText(_t("Payments Left"));
+        const auto toolTipsStr = _t("Specify the number of payments to be made.\n"
             "Leave blank if the payments continue forever.");
         mmToolTip(textNumRepeats_, toolTipsStr);
     }
@@ -1388,7 +1387,7 @@
     case Model_Billsdeposits::REPEAT_EVERY_X_MONTHS:
         span = wxAtoi(valueStr);
         if (!valueStr.IsNumber() || !span) {
-            mmErrorDialogs::ToolTip4Object(textNumRepeats_, _("Invalid value"), _("Error"));
+            mmErrorDialogs::ToolTip4Object(textNumRepeats_, _t("Invalid value"), _t("Error"));
             break;
         }
         wxFALLTHROUGH;
@@ -1413,7 +1412,7 @@
         m_bill_data.local_splits.push_back(s);
     }
 
-    mmSplitTransactionDialog dlg(this, m_bill_data.local_splits, m_bill_data.ACCOUNTID, m_choice_transaction_type->GetSelection());
+    mmSplitTransactionDialog dlg(this, m_bill_data.local_splits, m_bill_data.ACCOUNTID);
     if (dlg.ShowModal() == wxID_OK)
     {
         m_bill_data.local_splits = dlg.mmGetResult();
@@ -1449,7 +1448,7 @@
         bSplit_->SetToolTip(Model_Splittransaction::get_tooltip(m_bill_data.local_splits, currency));
     }
     else
-        mmToolTip(bSplit_, _("Use split Categories"));
+        mmToolTip(bSplit_, _t("Use split Categories"));
 }
 
 void mmBDDialog::setCategoryLabel()
@@ -1459,12 +1458,12 @@
     bSplit_->UnsetToolTip();
     if (has_split)
     {
-        cbCategory_->SetLabelText(_("Split Transaction"));
+        cbCategory_->SetLabelText(_t("Split Transaction"));
         textAmount_->SetValue(Model_Splittransaction::get_total(m_bill_data.local_splits));
         m_bill_data.CATEGID = -1;
     }
     else if (m_transfer && m_new_bill
-        && Option::instance().TransCategorySelectionTransfer() == Option::LASTUSED)
+        && Option::instance().getTransCategoryTransferNone() == Option::LASTUSED)
     {
         Model_Checking::Data_Set transactions = Model_Checking::instance().find(
             Model_Checking::TRANSCODE(Model_Checking::TYPE_ID_TRANSFER, EQUAL)
diff -Naur a/src/billsdepositsdialog.h b/src/billsdepositsdialog.h
--- a/src/billsdepositsdialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/billsdepositsdialog.h	2025-07-09 01:46:59.628940390 +0200
@@ -55,7 +55,7 @@
 
 private:
     bool Create(wxWindow* parent, wxWindowID id = wxID_ANY,
-        const wxString& caption = _("New Scheduled Transaction"),
+        const wxString& caption = _t("New Scheduled Transaction"),
         const wxPoint& pos = wxDefaultPosition,
         const wxSize& size = wxDefaultSize,
         long style = wxCAPTION | wxSYSTEM_MENU | wxCLOSE_BOX,
@@ -97,7 +97,7 @@
     mmTextCtrl* toTextAmount_ = nullptr;
     mmTextCtrl* calcTarget_ = nullptr;
     wxTextCtrl* textNotes_ = nullptr;
-    wxTextCtrl* textCategory_ = nullptr;
+    //wxTextCtrl* textCategory_ = nullptr;
     wxTextCtrl* textNumRepeats_ = nullptr;
     mmComboBoxCategory* cbCategory_ = nullptr;
     wxBitmapButton* bSplit_ = nullptr;
@@ -128,11 +128,11 @@
 
     std::vector<wxString> frequentNotes_;
 
-    const wxString payeeWithdrawalTip_ = _("Specify where the transaction is going to");
-    const wxString payeeDepositTip_ = _("Specify where the transaction is coming from");
-    const wxString payeeTransferTip_ = _("Specify which account the transfer is going to");
-    const wxString amountNormalTip_ = _("Specify the amount for this transaction");
-    const wxString amountTransferTip_ = _("Specify the amount to be transferred");
+    const wxString payeeWithdrawalTip_ = _t("Specify where the transaction is going to");
+    const wxString payeeDepositTip_ = _t("Specify where the transaction is coming from");
+    const wxString payeeTransferTip_ = _t("Specify which account the transfer is going to");
+    const wxString amountNormalTip_ = _t("Specify the amount for this transaction");
+    const wxString amountTransferTip_ = _t("Specify the amount to be transferred");
 private:
     void setTooltips();
     void setCategoryLabel();
diff -Naur a/src/billsdepositspanel.cpp b/src/billsdepositspanel.cpp
--- a/src/billsdepositspanel.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/billsdepositspanel.cpp	2025-07-09 01:46:59.628940390 +0200
@@ -47,65 +47,86 @@
 
 const wxString BILLSDEPOSITS_REPEATS[] =
 {
-    wxTRANSLATE("Once"),
-    wxTRANSLATE("Weekly"),
-    wxTRANSLATE("Fortnightly"),
-    wxTRANSLATE("Monthly"),
-    wxTRANSLATE("Every 2 Months"),
-    wxTRANSLATE("Quarterly"),
-    wxTRANSLATE("Half-Yearly"),
-    wxTRANSLATE("Yearly"),
-    wxTRANSLATE("Four Months"),
-    wxTRANSLATE("Four Weeks"),
-    wxTRANSLATE("Daily"),
-    wxTRANSLATE("In %s Days"),
-    wxTRANSLATE("In %s Months"),
-    wxTRANSLATE("Every %s Days"),
-    wxTRANSLATE("Every %s Months"),
-    wxTRANSLATE("Monthly (last day)"),
-    wxTRANSLATE("Monthly (last business day)")
-
+    _n("Once"),
+    _n("Weekly"),
+    _n("Fortnightly"),
+    _n("Monthly"),
+    _n("Every 2 Months"),
+    _n("Quarterly"),
+    _n("Half-Yearly"),
+    _n("Yearly"),
+    _n("Four Months"),
+    _n("Four Weeks"),
+    _n("Daily"),
+    _n("In %s Days"),
+    _n("In %s Months"),
+    _n("Every %s Days"),
+    _n("Every %s Months"),
+    _n("Monthly (last day)"),
+    _n("Monthly (last business day)")
 };
 
-/*******************************************************/
 wxBEGIN_EVENT_TABLE(mmBillsDepositsPanel, wxPanel)
-EVT_BUTTON(wxID_NEW, mmBillsDepositsPanel::OnNewBDSeries)
-EVT_BUTTON(wxID_EDIT, mmBillsDepositsPanel::OnEditBDSeries)
-EVT_BUTTON(wxID_DUPLICATE, mmBillsDepositsPanel::OnDuplicateBDSeries)
-EVT_BUTTON(wxID_DELETE, mmBillsDepositsPanel::OnDeleteBDSeries)
-EVT_BUTTON(wxID_PASTE, mmBillsDepositsPanel::OnEnterBDTransaction)
-EVT_BUTTON(wxID_IGNORE, mmBillsDepositsPanel::OnSkipBDTransaction)
-EVT_BUTTON(wxID_FILE, mmBillsDepositsPanel::OnOpenAttachment)
-EVT_BUTTON(wxID_FILE2, mmBillsDepositsPanel::OnFilterTransactions)
+    EVT_BUTTON(wxID_NEW,       mmBillsDepositsPanel::OnNewBDSeries)
+    EVT_BUTTON(wxID_EDIT,      mmBillsDepositsPanel::OnEditBDSeries)
+    EVT_BUTTON(wxID_DUPLICATE, mmBillsDepositsPanel::OnDuplicateBDSeries)
+    EVT_BUTTON(wxID_DELETE,    mmBillsDepositsPanel::OnDeleteBDSeries)
+    EVT_BUTTON(wxID_PASTE,     mmBillsDepositsPanel::OnEnterBDTransaction)
+    EVT_BUTTON(wxID_IGNORE,    mmBillsDepositsPanel::OnSkipBDTransaction)
+    EVT_BUTTON(wxID_FILE,      mmBillsDepositsPanel::OnOpenAttachment)
+    EVT_BUTTON(wxID_FILE2,     mmBillsDepositsPanel::OnFilterTransactions)
 wxEND_EVENT_TABLE()
-/*******************************************************/
+
 wxBEGIN_EVENT_TABLE(billsDepositsListCtrl, mmListCtrl)
-EVT_LIST_ITEM_ACTIVATED(wxID_ANY,   billsDepositsListCtrl::OnListItemActivated)
-EVT_RIGHT_DOWN(billsDepositsListCtrl::OnItemRightClick)
-EVT_LEFT_DOWN(billsDepositsListCtrl::OnListLeftClick)
-EVT_LIST_ITEM_SELECTED(wxID_ANY, billsDepositsListCtrl::OnListItemSelected)
-
-EVT_MENU(MENU_TREEPOPUP_NEW,              billsDepositsListCtrl::OnNewBDSeries)
-EVT_MENU(MENU_TREEPOPUP_EDIT,             billsDepositsListCtrl::OnEditBDSeries)
-EVT_MENU(MENU_TREEPOPUP_DUPLICATE,        billsDepositsListCtrl::OnDuplicateBDSeries)
-EVT_MENU(MENU_TREEPOPUP_DELETE,           billsDepositsListCtrl::OnDeleteBDSeries)
-EVT_MENU(MENU_POPUP_BD_ENTER_OCCUR,       billsDepositsListCtrl::OnEnterBDTransaction)
-EVT_MENU(MENU_POPUP_BD_SKIP_OCCUR,        billsDepositsListCtrl::OnSkipBDTransaction)
-EVT_MENU(MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS, billsDepositsListCtrl::OnOrganizeAttachments)
-EVT_MENU_RANGE(MENU_ON_SET_UDC0, MENU_ON_SET_UDC7, billsDepositsListCtrl::OnSetUserColour)
+    EVT_LEFT_DOWN(billsDepositsListCtrl::OnListLeftClick)
+    EVT_RIGHT_DOWN(billsDepositsListCtrl::OnItemRightClick)
 
-EVT_LIST_KEY_DOWN(wxID_ANY,   billsDepositsListCtrl::OnListKeyDown)
+    EVT_LIST_ITEM_ACTIVATED(wxID_ANY, billsDepositsListCtrl::OnListItemActivated)
+    EVT_LIST_ITEM_SELECTED(wxID_ANY,  billsDepositsListCtrl::OnListItemSelected)
+    EVT_LIST_KEY_DOWN(wxID_ANY,       billsDepositsListCtrl::OnListKeyDown)
+
+    EVT_MENU(MENU_TREEPOPUP_NEW,                  billsDepositsListCtrl::OnNewBDSeries)
+    EVT_MENU(MENU_TREEPOPUP_EDIT,                 billsDepositsListCtrl::OnEditBDSeries)
+    EVT_MENU(MENU_TREEPOPUP_DUPLICATE,            billsDepositsListCtrl::OnDuplicateBDSeries)
+    EVT_MENU(MENU_TREEPOPUP_DELETE,               billsDepositsListCtrl::OnDeleteBDSeries)
+    EVT_MENU(MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS, billsDepositsListCtrl::OnOrganizeAttachments)
+    EVT_MENU(MENU_POPUP_BD_ENTER_OCCUR,           billsDepositsListCtrl::OnEnterBDTransaction)
+    EVT_MENU(MENU_POPUP_BD_SKIP_OCCUR,            billsDepositsListCtrl::OnSkipBDTransaction)
+    EVT_MENU_RANGE(
+        MENU_ON_SET_UDC0, MENU_ON_SET_UDC7,
+        billsDepositsListCtrl::OnSetUserColour
+    )
 wxEND_EVENT_TABLE()
-/*******************************************************/
 
-billsDepositsListCtrl::billsDepositsListCtrl(mmBillsDepositsPanel* bdp, wxWindow *parent, wxWindowID winid)
-    : mmListCtrl(parent, winid)
-    , m_bdp(bdp)
+const std::vector<ListColumnInfo> billsDepositsListCtrl::LIST_INFO = {
+    { LIST_ID_ICON,         true, _n("Icon"),        25,  _FL, false },
+    { LIST_ID_ID,           true, _n("ID"),          _WA, _FR, true },
+    { LIST_ID_PAYMENT_DATE, true, _n("Date Paid"),   _WH, _FL, true },
+    { LIST_ID_DUE_DATE,     true, _n("Date Due"),    _WH, _FL, true },
+    { LIST_ID_ACCOUNT,      true, _n("Account"),     _WH, _FL, true },
+    { LIST_ID_PAYEE,        true, _n("Payee"),       _WH, _FL, true },
+    { LIST_ID_STATUS,       true, _n("Status"),      _WH, _FL, true },
+    { LIST_ID_CATEGORY,     true, _n("Category"),    _WH, _FL, true },
+    { LIST_ID_TAGS,         true, _n("Tags"),        200, _FL, true },
+    { LIST_ID_TYPE,         true, _n("Type"),        _WH, _FL, true },
+    { LIST_ID_AMOUNT,       true, _n("Amount"),      _WH, _FR, true },
+    { LIST_ID_FREQUENCY,    true, _n("Frequency"),   _WH, _FL, true },
+    { LIST_ID_REPEATS,      true, _n("Repetitions"), _WH, _FR, true },
+    { LIST_ID_AUTO,         true, _n("Autorepeat"),  _WH, _FL, true },
+    { LIST_ID_DAYS,         true, _n("Payment"),     _WH, _FL, true },
+    { LIST_ID_NUMBER,       true, _n("Number"),      _WH, _FL, true },
+    { LIST_ID_NOTES,        true, _n("Notes"),       150, _FL, true },
+};
+
+billsDepositsListCtrl::billsDepositsListCtrl(
+    mmBillsDepositsPanel* bdp, wxWindow *parent, wxWindowID winid
+) :
+    mmListCtrl(parent, winid),
+    m_bdp(bdp)
 {
     mmThemeMetaColour(this, meta::COLOR_LISTPANEL);
 
-    const wxAcceleratorEntry entries[] =
-    {
+    const wxAcceleratorEntry entries[] = {
         wxAcceleratorEntry(wxACCEL_CTRL, 'N', MENU_TREEPOPUP_NEW),
         wxAcceleratorEntry(wxACCEL_CTRL, 'E', MENU_TREEPOPUP_EDIT),
         wxAcceleratorEntry(wxACCEL_CTRL, 'U', MENU_TREEPOPUP_DUPLICATE),
@@ -119,55 +140,17 @@
         wxAcceleratorEntry(wxACCEL_CTRL, '6', MENU_ON_SET_UDC6),
         wxAcceleratorEntry(wxACCEL_CTRL, '7', MENU_ON_SET_UDC7)
     };
-
     wxAcceleratorTable tab(sizeof(entries) / sizeof(*entries), entries);
     SetAcceleratorTable(tab);
 
-    // load the global variables
-    m_selected_col = Model_Setting::instance().GetIntSetting("BD_SORT_COL", m_bdp->col_sort());
-    m_asc = Model_Setting::instance().GetBoolSetting("BD_ASC", true);
-
-    m_columns.push_back(PANEL_COLUMN(" ", 25, wxLIST_FORMAT_LEFT, false));
-    m_real_columns.push_back(m_bdp->COL_ICON);
-    m_columns.push_back(PANEL_COLUMN(_("ID"), wxLIST_AUTOSIZE, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(m_bdp->COL_ID);
-    m_columns.push_back(PANEL_COLUMN(_("Date Paid"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(m_bdp->COL_PAYMENT_DATE);
-    m_columns.push_back(PANEL_COLUMN(_("Date Due"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(m_bdp->COL_DUE_DATE);
-    m_columns.push_back(PANEL_COLUMN(_("Account"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(m_bdp->COL_ACCOUNT);
-    m_columns.push_back(PANEL_COLUMN(_("Payee"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(m_bdp->COL_PAYEE);
-    m_columns.push_back(PANEL_COLUMN(_("Status"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(m_bdp->COL_STATUS);
-    m_columns.push_back(PANEL_COLUMN(_("Category"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(m_bdp->COL_CATEGORY);
-    m_columns.push_back(PANEL_COLUMN(_("Tags"), 200, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(m_bdp->COL_TAGS);
-    m_columns.push_back(PANEL_COLUMN(_("Type"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(m_bdp->COL_TYPE);
-    m_columns.push_back(PANEL_COLUMN(_("Amount"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(m_bdp->COL_AMOUNT);
-    m_columns.push_back(PANEL_COLUMN(_("Frequency"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(m_bdp->COL_FREQUENCY);
-    m_columns.push_back(PANEL_COLUMN(_("Repetitions"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(m_bdp->COL_REPEATS);
-    m_columns.push_back(PANEL_COLUMN(_("Autorepeat"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(m_bdp->COL_AUTO);
-    m_columns.push_back(PANEL_COLUMN(_("Payment"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(m_bdp->COL_DAYS);
-    m_columns.push_back(PANEL_COLUMN(_("Number"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(m_bdp->COL_NUMBER);
-    m_columns.push_back(PANEL_COLUMN(_("Notes"), 150, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(m_bdp->COL_NOTES);
-
-    m_col_width = "BD_COL%d_WIDTH";
-    m_col_idstr = "BD";
-    m_default_sort_column = m_bdp->col_sort();
-
-    CreateColumns();
-
+    m_setting_name = "SCHEDULED";
+    o_col_order_prefix = "BD";
+    o_col_width_prefix = "BD_COL";
+    o_sort_prefix = "BD";
+    m_col_info_id = LIST_INFO;
+    m_col_id_nr = ListColumnInfo::getListId(LIST_INFO);
+    m_sort_col_id = { col_sort() };
+    createColumns();
 }
 
 billsDepositsListCtrl::~billsDepositsListCtrl()
@@ -175,26 +158,26 @@
     wxLogDebug("Exit billsDepositsListCtrl");
 }
 
-void billsDepositsListCtrl::OnColClick(wxListEvent& event)
+int billsDepositsListCtrl::getSortIcon(bool asc) const
 {
-    int ColumnNr;
-    if (event.GetId() != MENU_HEADER_SORT)
-        ColumnNr = event.GetColumn();
-    else
-        ColumnNr = m_ColumnHeaderNbr;
-    if (0 > ColumnNr || ColumnNr >= m_bdp->getColumnsNumber() || ColumnNr == 0) return;
-
-    if (m_selected_col == ColumnNr && event.GetId() != MENU_HEADER_SORT) m_asc = !m_asc;
-
-    wxListItem item;
-    item.SetMask(wxLIST_MASK_IMAGE);
-    item.SetImage(-1);
-    SetColumn(m_selected_col, item);
-
-    m_selected_col = ColumnNr;
+    return asc ? mmBillsDepositsPanel::ICON_UPARROW : mmBillsDepositsPanel::ICON_DOWNARROW;
+}
 
-    Model_Setting::instance().Set("BD_ASC", m_asc);
-    Model_Setting::instance().Set("BD_SORT_COL", m_selected_col);
+void billsDepositsListCtrl::OnColClick(wxListEvent& event)
+{
+    int col_nr = (event.GetId() == MENU_HEADER_SORT) ? m_sel_col_nr : event.GetColumn();
+    if (!isValidColNr(col_nr))
+        return;
+    int col_id = getColId_Nr(col_nr);
+    if (!m_col_info_id[col_id].sortable)
+        return;
+
+    if (m_sort_col_id[0] != col_id)
+        m_sort_col_id[0] = col_id;
+    else if (event.GetId() != MENU_HEADER_SORT)
+        m_sort_asc[0] = !m_sort_asc[0];
+    updateSortIcon();
+    savePreferences();
 
     if (m_selected_row >= 0)
         refreshVisualList(m_bdp->initVirtualListControl(m_bdp->bills_[m_selected_row].BDID));
@@ -206,10 +189,10 @@
     , const wxPoint& pos, const wxSize& size, long style, const wxString& name)
 {
     m_today = wxDate::Today();
-    this->tips_.Add(_("MMEX allows regular payments to be set up as transactions. These transactions can also be regular deposits,"
+    this->tips_.Add(_t("MMEX allows regular payments to be set up as transactions. These transactions can also be regular deposits,"
         " or transfers that will occur at some future time. These transactions act as a reminder that an event is about to occur,"
         " and appears on the Dashboard 14 days before the transaction is due."));
-    this->tips_.Add(_("Tip: These transactions can be set up to activate - allowing the user to adjust any values on the due date."));
+    this->tips_.Add(_t("Tip: These transactions can be set up to activate - allowing the user to adjust any values on the due date."));
 
     Create(parent, winid, pos, size, style, name);
 }
@@ -255,7 +238,7 @@
     headerPanel->SetSizer(itemBoxSizerVHeader);
 
     wxStaticText* itemStaticText9 = new wxStaticText(headerPanel, wxID_ANY
-        , _("Scheduled Transactions"));
+        , _t("Scheduled Transactions"));
     itemStaticText9->SetFont(this->GetFont().Larger().Bold());
     itemBoxSizerVHeader->Add(itemStaticText9, g_flagsBorder1V);
 
@@ -268,7 +251,7 @@
 
     m_bitmapTransFilter = new wxButton(headerPanel, wxID_FILE2);
     m_bitmapTransFilter->SetBitmap(mmBitmapBundle(png::TRANSFILTER, mmBitmapButtonSize));
-    m_bitmapTransFilter->SetLabel(_("Transaction Filter"));
+    m_bitmapTransFilter->SetLabel(_t("Transaction Filter"));
     itemBoxSizerHHeader2->Add(m_bitmapTransFilter, g_flagsBorder1H);
     */
 
@@ -284,15 +267,15 @@
     images.push_back(mmBitmapBundle(png::UPARROW));
     images.push_back(mmBitmapBundle(png::DOWNARROW));
 
-    listCtrlAccount_ = new billsDepositsListCtrl(this, itemSplitterWindowBillsDeposit);
+    m_lc = new billsDepositsListCtrl(this, itemSplitterWindowBillsDeposit);
 
-    listCtrlAccount_->SetSmallImages(images);
+    m_lc->SetSmallImages(images);
 
     wxPanel* bdPanel = new wxPanel(itemSplitterWindowBillsDeposit, wxID_ANY
         , wxDefaultPosition, wxDefaultSize, wxNO_BORDER | wxTAB_TRAVERSAL);
     mmThemeMetaColour(bdPanel, meta::COLOR_LISTPANEL);
 
-    itemSplitterWindowBillsDeposit->SplitHorizontally(listCtrlAccount_, bdPanel);
+    itemSplitterWindowBillsDeposit->SplitHorizontally(m_lc, bdPanel);
     itemSplitterWindowBillsDeposit->SetMinimumPaneSize(100);
     itemSplitterWindowBillsDeposit->SetSashGravity(1.0);
     itemBoxSizer9->Add(itemSplitterWindowBillsDeposit, g_flagsExpandBorder1);
@@ -303,39 +286,39 @@
     wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
     itemBoxSizer4->Add(itemBoxSizer5, g_flagsBorder1V);
 
-    wxButton* itemButtonNew = new wxButton(bdPanel, wxID_NEW, _("&New "));
-    mmToolTip(itemButtonNew, _("New Scheduled Transaction"));
+    wxButton* itemButtonNew = new wxButton(bdPanel, wxID_NEW, _t("&New "));
+    mmToolTip(itemButtonNew, _t("New Scheduled Transaction"));
     itemBoxSizer5->Add(itemButtonNew, 0, wxRIGHT, 2);
 
-    wxButton* itemButton81 = new wxButton(bdPanel, wxID_EDIT, _("&Edit "));
-    mmToolTip(itemButton81, _("Edit Scheduled Transaction"));
+    wxButton* itemButton81 = new wxButton(bdPanel, wxID_EDIT, _t("&Edit "));
+    mmToolTip(itemButton81, _t("Edit Scheduled Transaction"));
     itemBoxSizer5->Add(itemButton81, 0, wxRIGHT, 2);
     itemButton81->Enable(false);
 
-    wxButton* itemButton82 = new wxButton(bdPanel, wxID_DUPLICATE, _("D&uplicate "));
-    mmToolTip(itemButton82, _("Duplicate Scheduled Transaction"));
+    wxButton* itemButton82 = new wxButton(bdPanel, wxID_DUPLICATE, _t("D&uplicate "));
+    mmToolTip(itemButton82, _t("Duplicate Scheduled Transaction"));
     itemBoxSizer5->Add(itemButton82, 0, wxRIGHT, 2);
     itemButton82->Enable(false);
 
-    wxButton* itemButton7 = new wxButton(bdPanel, wxID_DELETE, _("&Delete "));
-    mmToolTip(itemButton7, _("Delete Scheduled Transaction"));
+    wxButton* itemButton7 = new wxButton(bdPanel, wxID_DELETE, _t("&Delete "));
+    mmToolTip(itemButton7, _t("Delete Scheduled Transaction"));
     itemBoxSizer5->Add(itemButton7, 0, wxRIGHT, 2);
     itemButton7->Enable(false);
 
-    wxButton* itemButton8 = new wxButton(bdPanel, wxID_PASTE, _("Ente&r"));
-    mmToolTip(itemButton8, _("Enter Next Scheduled Transaction Occurrence"));
+    wxButton* itemButton8 = new wxButton(bdPanel, wxID_PASTE, _t("Ente&r"));
+    mmToolTip(itemButton8, _t("Enter Next Scheduled Transaction Occurrence"));
     itemBoxSizer5->Add(itemButton8, 0, wxRIGHT, 2);
     itemButton8->Enable(false);
 
-    wxButton* buttonSkipTrans = new wxButton(bdPanel, wxID_IGNORE, _("&Skip"));
-    mmToolTip(buttonSkipTrans, _("Skip Next Scheduled Transaction Occurrence"));
+    wxButton* buttonSkipTrans = new wxButton(bdPanel, wxID_IGNORE, _t("&Skip"));
+    mmToolTip(buttonSkipTrans, _t("Skip Next Scheduled Transaction Occurrence"));
     itemBoxSizer5->Add(buttonSkipTrans, 0, wxRIGHT, 2);
     buttonSkipTrans->Enable(false);
 
     wxBitmapButton* btnAttachment_ = new wxBitmapButton(bdPanel, wxID_FILE
         , mmBitmapBundle(png::CLIP, mmBitmapButtonSize), wxDefaultPosition
         , wxSize(30, itemButton8->GetSize().GetY()));
-    mmToolTip(btnAttachment_, _("Open attachments"));
+    mmToolTip(btnAttachment_, _t("Open attachments"));
     itemBoxSizer5->Add(btnAttachment_, 0, wxRIGHT, 2);
     btnAttachment_->Enable(false);
 
@@ -353,12 +336,7 @@
 
 int mmBillsDepositsPanel::initVirtualListControl(int64 id)
 {
-    listCtrlAccount_->DeleteAllItems();
-
-    wxListItem item;
-    item.SetMask(wxLIST_MASK_IMAGE);
-    item.SetImage(listCtrlAccount_->m_asc ? ICON_UPARROW : ICON_DOWNARROW);
-    listCtrlAccount_->SetColumn(listCtrlAccount_->m_selected_col, item);
+    m_lc->DeleteAllItems();
 
     bills_.clear();
     const auto split = Model_Budgetsplittransaction::instance().get_all();
@@ -372,7 +350,7 @@
         bills_.push_back(r);
     }
 
-    sortTable();
+    sortList();
 
     int cnt = 0, selected_item = -1;
     for (const auto& entry: bills_)
@@ -385,45 +363,45 @@
         ++cnt;
     }
 
-    listCtrlAccount_->SetItemCount(static_cast<long>(bills_.size()));
+    m_lc->SetItemCount(static_cast<long>(bills_.size()));
     return selected_item;
 }
 
 void mmBillsDepositsPanel::OnNewBDSeries(wxCommandEvent& event)
 {
-    listCtrlAccount_->OnNewBDSeries(event);
+    m_lc->OnNewBDSeries(event);
 }
 
 void mmBillsDepositsPanel::OnEditBDSeries(wxCommandEvent& event)
 {
-    listCtrlAccount_->OnEditBDSeries(event);
+    m_lc->OnEditBDSeries(event);
 }
 
 void mmBillsDepositsPanel::OnDuplicateBDSeries(wxCommandEvent& event)
 {
-    listCtrlAccount_->OnDuplicateBDSeries(event);
+    m_lc->OnDuplicateBDSeries(event);
 }
 
 void mmBillsDepositsPanel::OnDeleteBDSeries(wxCommandEvent& event)
 {
-    listCtrlAccount_->OnDeleteBDSeries(event);
+    m_lc->OnDeleteBDSeries(event);
 }
 
 void mmBillsDepositsPanel::OnEnterBDTransaction(wxCommandEvent& event)
 {
-    listCtrlAccount_->OnEnterBDTransaction(event);
+    m_lc->OnEnterBDTransaction(event);
 }
 
 void mmBillsDepositsPanel::OnSkipBDTransaction(wxCommandEvent& event)
 {
-    listCtrlAccount_->OnSkipBDTransaction(event);
-    listCtrlAccount_->SetFocus();
+    m_lc->OnSkipBDTransaction(event);
+    m_lc->SetFocus();
 }
 
 void mmBillsDepositsPanel::OnOpenAttachment(wxCommandEvent& event)
 {
-    listCtrlAccount_->OnOpenAttachment(event);
-    listCtrlAccount_->SetFocus();
+    m_lc->OnOpenAttachment(event);
+    m_lc->SetFocus();
 }
 
 /*******************************************************/
@@ -442,17 +420,17 @@
     m_bdp->updateBottomPanelData(m_selected_row);
     bool item_active = (m_selected_row >= 0);
     wxMenu menu;
-    menu.Append(MENU_POPUP_BD_ENTER_OCCUR, _u("Enter next Occurrence…"));
+    menu.Append(MENU_POPUP_BD_ENTER_OCCUR, _tu("Enter next Occurrence…"));
     menu.AppendSeparator();
-    menu.Append(MENU_POPUP_BD_SKIP_OCCUR, _("Skip next Occurrence"));
+    menu.Append(MENU_POPUP_BD_SKIP_OCCUR, _t("Skip next Occurrence"));
     menu.AppendSeparator();
-    menu.Append(MENU_TREEPOPUP_NEW, _u("&New Scheduled Transaction…"));
-    menu.Append(MENU_TREEPOPUP_EDIT, _u("&Edit Scheduled Transaction…"));
-    menu.Append(MENU_TREEPOPUP_DUPLICATE, _u("D&uplicate Scheduled Transaction…"));
+    menu.Append(MENU_TREEPOPUP_NEW, _tu("&New Scheduled Transaction…"));
+    menu.Append(MENU_TREEPOPUP_EDIT, _tu("&Edit Scheduled Transaction…"));
+    menu.Append(MENU_TREEPOPUP_DUPLICATE, _tu("D&uplicate Scheduled Transaction…"));
     menu.AppendSeparator();
-    menu.Append(MENU_TREEPOPUP_DELETE, _u("&Delete Scheduled Transaction…"));
+    menu.Append(MENU_TREEPOPUP_DELETE, _tu("&Delete Scheduled Transaction…"));
     menu.AppendSeparator();
-    menu.Append(MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS, _u("&Organize Attachments…"));
+    menu.Append(MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS, _tu("&Organize Attachments…"));
 
     menu.Enable(MENU_POPUP_BD_ENTER_OCCUR, item_active);
     menu.Enable(MENU_POPUP_BD_SKIP_OCCUR, item_active);
@@ -465,35 +443,33 @@
     this->SetFocus();
 }
 
-wxString mmBillsDepositsPanel::getItem(long item, long column)
+wxString mmBillsDepositsPanel::getItem(long item, int col_id)
 {
     const Model_Billsdeposits::Full_Data& bill = this->bills_.at(item);
-    switch (column)
-    {
-    case COL_ID:
+    switch (col_id) {
+    case billsDepositsListCtrl::LIST_ID_ID:
         return wxString::Format("%lld", bill.BDID).Trim();
-    case COL_PAYMENT_DATE:
+    case billsDepositsListCtrl::LIST_ID_PAYMENT_DATE:
         return mmGetDateTimeForDisplay(bill.TRANSDATE);
-    case COL_DUE_DATE:
+    case billsDepositsListCtrl::LIST_ID_DUE_DATE:
         return mmGetDateTimeForDisplay(bill.NEXTOCCURRENCEDATE);
-    case COL_ACCOUNT:
+    case billsDepositsListCtrl::LIST_ID_ACCOUNT:
         return bill.ACCOUNTNAME;
-    case COL_PAYEE:
+    case billsDepositsListCtrl::LIST_ID_PAYEE:
         return bill.real_payee_name();
-    case COL_STATUS:
+    case billsDepositsListCtrl::LIST_ID_STATUS:
         return bill.STATUS;
-    case COL_CATEGORY:
+    case billsDepositsListCtrl::LIST_ID_CATEGORY:
         return bill.CATEGNAME;
-    case COL_TAGS:
+    case billsDepositsListCtrl::LIST_ID_TAGS:
         return bill.TAGNAMES;
-    case COL_TYPE:
+    case billsDepositsListCtrl::LIST_ID_TYPE:
         return wxGetTranslation(bill.TRANSCODE);
-    case COL_AMOUNT:
+    case billsDepositsListCtrl::LIST_ID_AMOUNT:
         return Model_Account::toCurrency(bill.TRANSAMOUNT, Model_Account::instance().get(bill.ACCOUNTID));
-    case COL_FREQUENCY:
+    case billsDepositsListCtrl::LIST_ID_FREQUENCY:
         return GetFrequency(&bill);
-    case COL_REPEATS:
-    {
+    case billsDepositsListCtrl::LIST_ID_REPEATS: {
         int numRepeats = GetNumRepeats(&bill);
         if (numRepeats > 0)
             return wxString::Format("%i", numRepeats).Trim();
@@ -502,24 +478,22 @@
         else
             return L"\x2015";  // HORIZONTAL BAR
     }
-    case COL_AUTO:
-    {
+    case billsDepositsListCtrl::LIST_ID_AUTO: {
         int autoExecute = bill.REPEATS.GetValue() / BD_REPEATS_MULTIPLEX_BASE;
         wxString repeatSTR =
-            (autoExecute == Model_Billsdeposits::REPEAT_AUTO_SILENT) ? _("Automated") :
-            (autoExecute == Model_Billsdeposits::REPEAT_AUTO_MANUAL) ? _("Suggested") :
-            _("Manual");
+            (autoExecute == Model_Billsdeposits::REPEAT_AUTO_SILENT) ? _t("Automated") :
+            (autoExecute == Model_Billsdeposits::REPEAT_AUTO_MANUAL) ? _t("Suggested") :
+            _t("Manual");
         return repeatSTR;
     }
-    case COL_DAYS:
+    case billsDepositsListCtrl::LIST_ID_DAYS:
         return GetRemainingDays(&bill);
-    case COL_NUMBER:
+    case billsDepositsListCtrl::LIST_ID_NUMBER:
         return bill.TRANSACTIONNUMBER;
-    case COL_NOTES:
-    {
+    case billsDepositsListCtrl::LIST_ID_NOTES: {
         wxString value = bill.NOTES;
         value.Replace("\n", " ");
-        if (Model_Attachment::NrAttachments(Model_Attachment::REFTYPE_STR_BILLSDEPOSIT, bill.BDID))
+        if (Model_Attachment::NrAttachments(Model_Billsdeposits::refTypeName, bill.BDID))
             value.Prepend(mmAttachmentManage::GetAttachmentNoteSign());
         return value;
     }
@@ -563,7 +537,7 @@
     int repeats = item->REPEATS.GetValue() % BD_REPEATS_MULTIPLEX_BASE; // DeMultiplex the Auto Executable fields.
     if (repeats >= Model_Billsdeposits::REPEAT_IN_X_DAYS && repeats <= Model_Billsdeposits::REPEAT_EVERY_X_MONTHS && item->NUMOCCURRENCES < 0)
     {
-        return _("Inactive");
+        return _t("Inactive");
     }
     
     int daysRemaining = Model_Billsdeposits::TRANSDATE(item)
@@ -579,9 +553,9 @@
     return text;
 }
 
-wxString billsDepositsListCtrl::OnGetItemText(long item, long column) const
+wxString billsDepositsListCtrl::OnGetItemText(long item, long col_nr) const
 {
-    return m_bdp->getItem(item, m_real_columns[column]);
+    return m_bdp->getItem(item, getColId_Nr(static_cast<int>(col_nr)));
 }
 
 void billsDepositsListCtrl::OnListItemSelected(wxListEvent& event)
@@ -673,14 +647,14 @@
     if (m_bdp->bills_.empty()) return;
     if (m_selected_row < 0) return;
 
-    wxMessageDialog msgDlg(this, _("Do you really want to delete the scheduled transaction?")
-        , _("Confirm Deletion")
+    wxMessageDialog msgDlg(this, _t("Do you want to delete the scheduled transaction?")
+        , _t("Confirm Deletion")
         , wxYES_NO | wxNO_DEFAULT | wxICON_ERROR);
     if (msgDlg.ShowModal() == wxID_YES)
     {
         int64 BdId = m_bdp->bills_[m_selected_row].BDID;
         Model_Billsdeposits::instance().remove(BdId);
-        mmAttachmentManage::DeleteAllAttachments(Model_Attachment::REFTYPE_STR_BILLSDEPOSIT, BdId);
+        mmAttachmentManage::DeleteAllAttachments(Model_Billsdeposits::refTypeName, BdId);
         m_bdp->do_delete_custom_values(-BdId);
         m_bdp->initVirtualListControl();
         refreshVisualList(m_selected_row);
@@ -717,7 +691,7 @@
     if (m_selected_row == -1) return;
 
     int64 RefId = m_bdp->bills_[m_selected_row].BDID;
-    const wxString& RefType = Model_Attachment::REFTYPE_STR_BILLSDEPOSIT;
+    const wxString& RefType = Model_Billsdeposits::refTypeName;
 
     mmAttachmentDialog dlg(this, RefType, RefId);
     dlg.ShowModal();
@@ -729,7 +703,7 @@
 {
     if (m_selected_row == -1) return;
     int64 RefId = m_bdp->bills_[m_selected_row].BDID;
-    const wxString& RefType = Model_Attachment::REFTYPE_STR_BILLSDEPOSIT;
+    const wxString& RefType = Model_Billsdeposits::refTypeName;
 
     mmAttachmentManage::OpenAttachmentFromPanelIcon(this, RefType, RefId);
     refreshVisualList(m_bdp->initVirtualListControl(RefId));
@@ -773,39 +747,39 @@
     m_infoTextMini->ClearBackground();
 }
 
-void mmBillsDepositsPanel::sortTable()
+void mmBillsDepositsPanel::sortList()
 {
     std::sort(bills_.begin(), bills_.end());
-    switch (listCtrlAccount_->m_selected_col)
+    switch (m_lc->getSortColId())
     {
-    case COL_ID:
+    case billsDepositsListCtrl::LIST_ID_ID:
         std::stable_sort(bills_.begin(), bills_.end(), SorterByBDID());
         break;
-    case COL_PAYMENT_DATE:
+    case billsDepositsListCtrl::LIST_ID_PAYMENT_DATE:
         std::stable_sort(bills_.begin(), bills_.end(), SorterByTRANSDATE());
         break;
-    case COL_DUE_DATE:
+    case billsDepositsListCtrl::LIST_ID_DUE_DATE:
         std::stable_sort(bills_.begin(), bills_.end(), SorterByNEXTOCCURRENCEDATE());
         break;
-    case COL_ACCOUNT:
+    case billsDepositsListCtrl::LIST_ID_ACCOUNT:
         std::stable_sort(bills_.begin(), bills_.end(), SorterByACCOUNTNAME());
         break;
-    case COL_PAYEE:
+    case billsDepositsListCtrl::LIST_ID_PAYEE:
         std::stable_sort(bills_.begin(), bills_.end(), SorterByPAYEENAME());
         break;
-    case COL_STATUS:
+    case billsDepositsListCtrl::LIST_ID_STATUS:
         std::stable_sort(bills_.begin(), bills_.end(), SorterBySTATUS());
         break;
-    case COL_CATEGORY:
+    case billsDepositsListCtrl::LIST_ID_CATEGORY:
         std::stable_sort(bills_.begin(), bills_.end(), SorterByCATEGNAME());
         break;
-    case COL_TYPE:
+    case billsDepositsListCtrl::LIST_ID_TYPE:
         std::stable_sort(bills_.begin(), bills_.end(), SorterByTRANSCODE());
         break;
-    case COL_AMOUNT:
+    case billsDepositsListCtrl::LIST_ID_AMOUNT:
         std::stable_sort(bills_.begin(), bills_.end(), SorterByTRANSAMOUNT());
         break;
-    case COL_FREQUENCY:
+    case billsDepositsListCtrl::LIST_ID_FREQUENCY:
         std::stable_sort(bills_.begin(), bills_.end()
             , [&](const Model_Billsdeposits::Full_Data& x, const Model_Billsdeposits::Full_Data& y)
         {
@@ -814,7 +788,7 @@
             return x_text < y_text;
         });
         break;
-    case COL_REPEATS:
+    case billsDepositsListCtrl::LIST_ID_REPEATS:
         std::stable_sort(bills_.begin(), bills_.end()
             , [&](const Model_Billsdeposits::Full_Data& x, const Model_Billsdeposits::Full_Data& y)
         {
@@ -827,7 +801,7 @@
                 return xn == Model_Billsdeposits::REPEAT_NUM_INFINITY && yn == Model_Billsdeposits::REPEAT_NUM_UNKNOWN;
         });
         break;
-    case COL_DAYS:
+    case billsDepositsListCtrl::LIST_ID_DAYS:
         std::stable_sort(bills_.begin(), bills_.end()
             , [&](const Model_Billsdeposits::Data& x, const Model_Billsdeposits::Data& y)
         {
@@ -859,13 +833,13 @@
             return ((!x_useText && !y_useText) ? x_num < y_num : x_text < y_text);
         });
         break;
-    case COL_NOTES:
+    case billsDepositsListCtrl::LIST_ID_NOTES:
         std::stable_sort(bills_.begin(), bills_.end(), SorterByNOTES());
         break;
     default:
         break;
     }
-    if (!listCtrlAccount_->m_asc) std::reverse(bills_.begin(), bills_.end());
+    if (!m_lc->getSortAsc()) std::reverse(bills_.begin(), bills_.end());
 }
 
 wxString mmBillsDepositsPanel::tips()
@@ -915,8 +889,7 @@
     if (color_id > 0)
     {
         color_id = std::min(7, color_id);
-        const auto it = cache.find(color_id);
-        if (it != cache.end())
+        if (const auto it = cache.find(color_id); it != cache.end())
             return it->second.get();
         else {
             switch (color_id)
@@ -961,7 +934,7 @@
 
 void mmBillsDepositsPanel::RefreshList()
 {
-    listCtrlAccount_->RefreshList();
+    m_lc->RefreshList();
 }
 
 void mmBillsDepositsPanel::OnFilterTransactions(wxCommandEvent& WXUNUSED(event))
@@ -983,11 +956,11 @@
 
 wxString  mmBillsDepositsPanel::BuildPage() const
 {
-    return listCtrlAccount_->BuildPage(_("Scheduled Transactions"));
+    return m_lc->BuildPage(_t("Scheduled Transactions"));
 }
 
 void mmBillsDepositsPanel::do_delete_custom_values(int64 id)
 {
-    const wxString& RefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+    const wxString& RefType = Model_Checking::refTypeName;
     Model_CustomFieldData::DeleteAllData(RefType, id);
 }
diff -Naur a/src/billsdepositspanel.h b/src/billsdepositspanel.h
--- a/src/billsdepositspanel.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/billsdepositspanel.h	2025-07-09 01:46:59.628940390 +0200
@@ -35,6 +35,34 @@
     wxDECLARE_EVENT_TABLE();
 
 public:
+    enum LIST_ID
+    {
+        LIST_ID_ICON = 0,
+        LIST_ID_ID,
+        LIST_ID_PAYMENT_DATE,
+        LIST_ID_DUE_DATE,
+        LIST_ID_ACCOUNT,
+        LIST_ID_PAYEE,
+        LIST_ID_STATUS,
+        LIST_ID_CATEGORY,
+        LIST_ID_TAGS,
+        LIST_ID_TYPE,
+        LIST_ID_AMOUNT,
+        LIST_ID_FREQUENCY,
+        LIST_ID_REPEATS,
+        LIST_ID_AUTO,
+        LIST_ID_DAYS,
+        LIST_ID_NUMBER,
+        LIST_ID_NOTES,
+        LIST_ID_size, // number of columns
+    };
+
+private:
+    static const std::vector<ListColumnInfo> LIST_INFO;
+    mmBillsDepositsPanel* m_bdp;
+    long m_selected_row = -1;
+
+public:
     billsDepositsListCtrl(mmBillsDepositsPanel* bdp, wxWindow *parent, wxWindowID winid = wxID_ANY);
     ~billsDepositsListCtrl();
 
@@ -49,13 +77,17 @@
     void RefreshList();
 
 protected:
-    virtual void OnColClick(wxListEvent& event);
-    virtual wxListItemAttr *OnGetItemAttr(long item) const;
+    virtual int getSortIcon(bool asc) const override;
+    virtual void OnColClick(wxListEvent& event) override;
+    virtual wxListItemAttr *OnGetItemAttr(long item) const override;
 
 private:
+    static int col_sort();
+    void refreshVisualList(int selected_index = -1);
+
     /* required overrides for virtual style list control */
-    virtual wxString OnGetItemText(long item, long column) const;
-    virtual int OnGetItemImage(long item) const;
+    virtual wxString OnGetItemText(long item, long col_nr) const override;
+    virtual int OnGetItemImage(long item) const override;
 
     void OnItemRightClick(wxMouseEvent& event);
     void OnListLeftClick(wxMouseEvent& event);
@@ -65,10 +97,6 @@
     void OnListKeyDown(wxListEvent& event);
     void OnListItemSelected(wxListEvent& event);
     void OnSetUserColour(wxCommandEvent& event);
-
-    void refreshVisualList(int selected_index = -1);
-
-    mmBillsDepositsPanel* m_bdp;
 };
 
 class mmBillsDepositsPanel : public mmPanelBase
@@ -86,28 +114,6 @@
         ICON_DOWNARROW
     };
 
-    enum EColumn
-    {
-        COL_ICON = 0,
-        COL_ID,
-        COL_PAYMENT_DATE,
-        COL_DUE_DATE,
-        COL_ACCOUNT,
-        COL_PAYEE,
-        COL_STATUS,
-        COL_CATEGORY,
-        COL_TAGS,
-        COL_TYPE,
-        COL_AMOUNT,
-        COL_FREQUENCY,
-        COL_REPEATS,
-        COL_AUTO,
-        COL_DAYS,
-        COL_NUMBER,
-        COL_NOTES,
-        COL_MAX, // number of columns
-    };
-
     mmBillsDepositsPanel(wxWindow *parent
         , wxWindowID winid = wxID_ANY
         , const wxPoint& pos = wxDefaultPosition
@@ -124,10 +130,8 @@
     /* updates the Repeating transactions panel data */
     int initVirtualListControl(int64 id = -1);
     /* Getter for Virtual List Control */
-    wxString getItem(long item, long column);
+    wxString getItem(long item, int col_id);
     void RefreshList();
-    int getColumnsNumber();
-    int col_sort();
 
     const wxString GetFrequency(const Model_Billsdeposits::Data* item) const;
     int GetNumRepeats(const Model_Billsdeposits::Data* item) const;
@@ -158,12 +162,12 @@
 
     //void OnViewPopupSelected(wxCommandEvent& event);
 
-    void sortTable();
+    void sortList();
     wxString tips();
 
 private:
     wxSharedPtr<mmFilterTransactionsDialog> transFilterDlg_;
-    billsDepositsListCtrl* listCtrlAccount_ = nullptr;
+    billsDepositsListCtrl* m_lc = nullptr;
     wxStaticText* m_infoText = nullptr;
     wxStaticText* m_infoTextMini = nullptr;
     wxDate m_today;
@@ -175,8 +179,8 @@
     wxArrayString tips_;
 };
 
+inline int billsDepositsListCtrl::col_sort() { return LIST_ID_PAYMENT_DATE; }
+
 inline wxDate mmBillsDepositsPanel::getToday() const { return m_today; }
-inline int mmBillsDepositsPanel::getColumnsNumber() { return COL_MAX; }
-inline int mmBillsDepositsPanel::col_sort() { return COL_PAYMENT_DATE; }
-#endif
 
+#endif
diff -Naur a/src/budgetentrydialog.cpp b/src/budgetentrydialog.cpp
--- a/src/budgetentrydialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/budgetentrydialog.cpp	2025-07-09 01:46:59.628940390 +0200
@@ -44,7 +44,7 @@
 {
     budgetEntry_ = entry;
     long style = wxCAPTION | wxSYSTEM_MENU | wxCLOSE_BOX;
-    Create(parent, wxID_ANY, _("Budget Year Entry"), wxDefaultPosition, wxSize(500, 300), style);
+    Create(parent, wxID_ANY, _t("Budget Year Entry"), wxDefaultPosition, wxSize(500, 300), style);
 }
 
 bool mmBudgetEntryDialog::Create(wxWindow* parent
@@ -87,7 +87,7 @@
     wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
     this->SetSizer(itemBoxSizer2);
 
-    wxStaticBox* itemStaticBoxSizer4Static = new wxStaticBox(this, wxID_ANY, ""); //  ,_("Budget Entry Details"));
+    wxStaticBox* itemStaticBoxSizer4Static = new wxStaticBox(this, wxID_ANY, ""); //  ,_t("Budget Entry Details"));
     wxStaticBoxSizer* itemStaticBoxSizer4 = new wxStaticBoxSizer(itemStaticBoxSizer4Static, wxVERTICAL);
     itemBoxSizer2->Add(itemStaticBoxSizer4, 0, wxALIGN_CENTER_HORIZONTAL | wxLEFT | wxTOP | wxRIGHT, 10);
 
@@ -103,54 +103,61 @@
     wxStaticText* itemTextEstCatAmt = new wxStaticText(itemPanel7, wxID_STATIC, catEstimateAmountStr_);
     wxStaticText* itemTextActCatAmt = new wxStaticText(itemPanel7, wxID_STATIC, catActualAmountStr_);
     
-    itemGridSizer2->Add(new wxStaticText(itemPanel7, wxID_STATIC, _("Category: ")), g_flagsH);
+    itemGridSizer2->Add(new wxStaticText(itemPanel7, wxID_STATIC, _t("Category: ")), g_flagsH);
     wxString categname = Model_Category::full_name(category);
     wxStaticText* categNameLabel = new wxStaticText(itemPanel7, wxID_STATIC,
         (categname.size() > 50 ? wxString::FromUTF8("\u2026") + categname.substr(categname.size() - 50) : categname));
     if (categname.size() > 50) categNameLabel->SetToolTip(categname);
     itemGridSizer2->Add(categNameLabel, wxSizerFlags(g_flagsH).Align(wxALIGN_RIGHT));
-    itemGridSizer2->Add(new wxStaticText(itemPanel7, wxID_STATIC, _("Estimated:")), g_flagsH);
+    itemGridSizer2->Add(new wxStaticText(itemPanel7, wxID_STATIC, _t("Estimated:")), g_flagsH);
     itemGridSizer2->Add(itemTextEstCatAmt, wxSizerFlags(g_flagsH).Align(wxALIGN_RIGHT));
-    itemGridSizer2->Add(new wxStaticText(itemPanel7, wxID_STATIC, _("Actual:")), g_flagsH);
+    itemGridSizer2->Add(new wxStaticText(itemPanel7, wxID_STATIC, _t("Actual:")), g_flagsH);
     itemGridSizer2->Add(itemTextActCatAmt, wxSizerFlags(g_flagsH).Align(wxALIGN_RIGHT));
 
-    itemGridSizer2->Add(new wxStaticText(itemPanel7, wxID_STATIC, _("Type:")), g_flagsH);
+    itemGridSizer2->Add(new wxStaticText(itemPanel7, wxID_STATIC, _t("Type:")), g_flagsH);
 
     wxArrayString itemTypeStrings;  
-    itemTypeStrings.Add(_("Expense"));
-    itemTypeStrings.Add(_("Income"));
+    itemTypeStrings.Add(_t("Expense"));
+    itemTypeStrings.Add(_t("Income"));
 
     m_choiceType = new wxChoice(itemPanel7, wxID_ANY
         , wxDefaultPosition, wxDefaultSize, itemTypeStrings);
     itemGridSizer2->Add(m_choiceType, g_flagsExpand);
-    mmToolTip(m_choiceType, _("Specify whether this category is an income or an expense category"));
+    mmToolTip(m_choiceType, _t("Specify whether this category is an income or an expense category"));
 
-    itemGridSizer2->Add(new wxStaticText(itemPanel7, wxID_STATIC, _("Frequency:")), g_flagsH);
+    itemGridSizer2->Add(new wxStaticText(itemPanel7, wxID_STATIC, _t("Frequency:")), g_flagsH);
 
-    m_choiceItem = new wxChoice(itemPanel7, wxID_ANY
-        , wxDefaultPosition, wxDefaultSize, Model_Budget::period_loc_all());
+    wxArrayString period;
+    for (int i = 0; i < Model_Budget::PERIOD_ID_size; ++i) {
+        period.Add(wxGetTranslation(Model_Budget::period_name(i)));
+    }
+    m_choiceItem = new wxChoice(
+        itemPanel7, wxID_ANY,
+        wxDefaultPosition, wxDefaultSize,
+        period
+    );
     itemGridSizer2->Add(m_choiceItem, g_flagsExpand);
-    mmToolTip(m_choiceItem, _("Specify the frequency of the expense or deposit"));
+    mmToolTip(m_choiceItem, _t("Specify the income or expense frequency"));
     m_choiceItem->Connect(wxID_ANY, wxEVT_CHAR, wxKeyEventHandler(mmBudgetEntryDialog::onChoiceChar), nullptr, this);
 
-    itemGridSizer2->Add(new wxStaticText(itemPanel7, wxID_STATIC, _("Amount:")), g_flagsH);
+    itemGridSizer2->Add(new wxStaticText(itemPanel7, wxID_STATIC, _t("Amount:")), g_flagsH);
 
     m_textAmount = new mmTextCtrl(itemPanel7, wxID_ANY, ""
         , wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT | wxTE_PROCESS_ENTER, mmCalcValidator());
     itemGridSizer2->Add(m_textAmount, g_flagsExpand);
-    mmToolTip(m_textAmount, _("Enter the amount budgeted for this category."));
+    mmToolTip(m_textAmount, _t("Enter the amount budgeted for this category."));
     m_textAmount->SetFocus();
 
-    itemStaticBoxSizer4->Add(new wxStaticText(this, wxID_STATIC, _("Notes")),0, wxGROW|wxALL, 5);
+    itemStaticBoxSizer4->Add(new wxStaticText(this, wxID_STATIC, _t("Notes")),0, wxGROW|wxALL, 5);
     m_Notes = new wxTextCtrl(this, wxID_ANY, ""
         , wxDefaultPosition, wxSize(-1, m_textAmount->GetSize().GetHeight() * 5), wxTE_MULTILINE);
     itemStaticBoxSizer4->Add(m_Notes,0, wxGROW|wxALL, 5);
-    mmToolTip(m_Notes, _("Enter notes to describe this budget entry"));
+    mmToolTip(m_Notes, _t("Enter notes to describe this budget entry"));
     
     wxBoxSizer* itemBoxSizer9 = new wxBoxSizer(wxHORIZONTAL);
     itemBoxSizer2->Add(itemBoxSizer9, wxSizerFlags(g_flagsV).Center());
    
-    wxButton* itemButton7 = new wxButton(this, wxID_OK, _("&OK "));
+    wxButton* itemButton7 = new wxButton(this, wxID_OK, _t("&OK "));
     itemBoxSizer9->Add(itemButton7, g_flagsH);
 
     wxButton* itemButton8 = new wxButton(this, wxID_CANCEL, wxGetTranslation(g_CancelLabel));
@@ -161,13 +168,13 @@
 void mmBudgetEntryDialog::OnOk(wxCommandEvent& event)
 {
     int typeSelection = m_choiceType->GetSelection();    
-    wxString period = Model_Budget::PERIOD_STR[m_choiceItem->GetSelection()];
+    int period = m_choiceItem->GetSelection();
     double amt = 0.0;
 
     if (!m_textAmount->checkValue(amt))
         return;
 
-    if (period == Model_Budget::PERIOD_STR[Model_Budget::PERIOD_ID_NONE] && amt > 0) {
+    if (period == Model_Budget::PERIOD_ID_NONE && amt > 0) {
         m_choiceItem->SetFocus();
         m_choiceItem->SetSelection(DEF_FREQ_MONTHLY);
         event.Skip();
@@ -175,12 +182,12 @@
     }
     
     if (amt == 0.0)
-        period = Model_Budget::PERIOD_STR[Model_Budget::PERIOD_ID_NONE];
+        period = Model_Budget::PERIOD_ID_NONE;
 
     if (typeSelection == DEF_TYPE_EXPENSE)
         amt = -amt;
 
-    budgetEntry_->PERIOD = period;
+    budgetEntry_->PERIOD = Model_Budget::period_name(period);
     budgetEntry_->AMOUNT = amt;
     budgetEntry_->NOTES = m_Notes->GetValue();
     Model_Budget::instance().save(budgetEntry_);
diff -Naur a/src/budgetingpanel.cpp b/src/budgetingpanel.cpp
--- a/src/budgetingpanel.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/budgetingpanel.cpp	2025-07-09 01:46:59.628940390 +0200
@@ -24,7 +24,7 @@
 #include "images_list.h"
 #include "option.h"
 #include "mmex.h"
-#include "mmframe.h"
+#include "constants.h"
 #include "reports/budget.h"
 #include "reports/mmDateRange.h"
 #include "model/allmodel.h"
@@ -44,36 +44,41 @@
     ID_DIALOG_BUDGETENTRY_SUMMARY_EXPENSES_EST,
     ID_DIALOG_BUDGETENTRY_SUMMARY_EXPENSES_ACT,
     ID_DIALOG_BUDGETENTRY_SUMMARY_EXPENSES_DIF,
-    MENU_HEADER_HIDE,
-    MENU_HEADER_SORT,
-    MENU_HEADER_RESET,
 };
 
-static const wxString VIEW_ALL = wxTRANSLATE("View All Budget Categories");
-static const wxString VIEW_NON_ZERO = wxTRANSLATE("View Non-Zero Budget Categories");
-static const wxString VIEW_PLANNED = wxTRANSLATE("View Planned Budget Categories");
-static const wxString VIEW_INCOME = wxTRANSLATE("View Income Budget Categories");
-static const wxString VIEW_EXPENSE = wxTRANSLATE("View Expense Budget Categories");
-static const wxString VIEW_SUMM = wxTRANSLATE("View Budget Category Summary");
+static const wxString VIEW_ALL      = _n("View All Budget Categories");
+static const wxString VIEW_NON_ZERO = _n("View Non-Zero Budget Categories");
+static const wxString VIEW_PLANNED  = _n("View Planned Budget Categories");
+static const wxString VIEW_INCOME   = _n("View Income Budget Categories");
+static const wxString VIEW_EXPENSE  = _n("View Expense Budget Categories");
+static const wxString VIEW_SUMM     = _n("View Budget Category Summary");
 
-/*******************************************************/
 wxBEGIN_EVENT_TABLE(mmBudgetingPanel, wxPanel)
-EVT_BUTTON(wxID_FILE2, mmBudgetingPanel::OnMouseLeftDown)
-EVT_MENU(wxID_ANY, mmBudgetingPanel::OnViewPopupSelected)
+    EVT_BUTTON(wxID_FILE2, mmBudgetingPanel::OnMouseLeftDown)
+    EVT_MENU(wxID_ANY,     mmBudgetingPanel::OnViewPopupSelected)
 wxEND_EVENT_TABLE()
-/*******************************************************/
+
 wxBEGIN_EVENT_TABLE(budgetingListCtrl, mmListCtrl)
-EVT_LIST_ITEM_SELECTED(wxID_ANY, budgetingListCtrl::OnListItemSelected)
-EVT_LIST_ITEM_ACTIVATED(wxID_ANY, budgetingListCtrl::OnListItemActivated)
+    EVT_LIST_ITEM_SELECTED(wxID_ANY,  budgetingListCtrl::OnListItemSelected)
+    EVT_LIST_ITEM_ACTIVATED(wxID_ANY, budgetingListCtrl::OnListItemActivated)
 wxEND_EVENT_TABLE()
-/*******************************************************/
+
+const std::vector<ListColumnInfo> budgetingListCtrl::LIST_INFO = {
+    { LIST_ID_ICON,      true, _n("Icon"),      _WH, _FL, false },
+    { LIST_ID_CATEGORY,  true, _n("Category"),  _WH, _FL, false },
+    { LIST_ID_FREQUENCY, true, _n("Frequency"), _WH, _FL, false },
+    { LIST_ID_AMOUNT,    true, _n("Amount"),    _WH, _FR, false },
+    { LIST_ID_ESTIMATED, true, _n("Estimated"), _WH, _FR, false },
+    { LIST_ID_ACTUAL,    true, _n("Actual"),    _WH, _FR, false },
+    { LIST_ID_NOTES,     true, _n("Notes"),     _WH, _FL, false },
+};
+
 mmBudgetingPanel::mmBudgetingPanel(int64 budgetYearID
-    , wxWindow *parent, mmGUIFrame *frame
+    , wxWindow *parent
     , wxWindowID winid
     , const wxPoint& pos, const wxSize& size
     , long style, const wxString& name)
-    : m_frame(frame)
-    , listCtrlBudget_(nullptr)
+    : m_lc(nullptr)
     , budgetYearID_(budgetYearID)
 {
     Create(parent, winid, pos, size, style, name);
@@ -93,7 +98,7 @@
 
     initVirtualListControl();
     if (!budget_.empty())
-        listCtrlBudget_->EnsureVisible(0);
+        m_lc->EnsureVisible(0);
 
     this->windowsFreezeThaw();
     Model_Usage::instance().pageview(this);
@@ -123,7 +128,7 @@
     else
         wxASSERT(false);
 
-    Model_Infotable::instance().Set("BUDGET_FILTER", currentView_);
+    Model_Infotable::instance().setString("BUDGET_FILTER", currentView_);
 
     RefreshList();
 }
@@ -131,10 +136,10 @@
 void mmBudgetingPanel::RefreshList()
 {
     initVirtualListControl();
-    listCtrlBudget_->Refresh();
-    listCtrlBudget_->Update();
+    m_lc->Refresh();
+    m_lc->Update();
     if (!budget_.empty())
-        listCtrlBudget_->EnsureVisible(0);
+        m_lc->EnsureVisible(0);
 }
 
 void mmBudgetingPanel::OnMouseLeftDown(wxCommandEvent& event)
@@ -157,30 +162,30 @@
     wxString yearStr = Model_Budgetyear::instance().Get(budgetYearID_);
     if ((yearStr.length() < 5))
     {
-        if (Option::instance().BudgetFinancialYears())
+        if (Option::instance().getBudgetFinancialYears())
         {
             long year;
             yearStr.ToLong(&year);
             year++;
-            yearStr = wxString::Format(_("Financial Year: %s - %li"), yearStr, year);
+            yearStr = wxString::Format(_t("Financial Year: %s - %li"), yearStr, year);
         }
         else
         {
-            yearStr = wxString::Format(_("Year: %s"), yearStr);
+            yearStr = wxString::Format(_t("Year: %s"), yearStr);
         }
     }
     else
     {
-        yearStr = wxString::Format(_("Month: %s"), yearStr);
+        yearStr = wxString::Format(_t("Month: %s"), yearStr);
         yearStr += wxString::Format(" (%s)", m_monthName);
     }
 
     if (Option::instance().getBudgetDaysOffset() != 0)
     {
-        yearStr = wxString::Format(_("%1$s    Start Date of: %2$s"), yearStr, mmGetDateTimeForDisplay(m_budget_offset_date));
+        yearStr = wxString::Format(_t("%1$s    Start Date of: %2$s"), yearStr, mmGetDateTimeForDisplay(m_budget_offset_date));
     }
 
-    return wxString::Format(_("Budget Planner for %s"), yearStr);
+    return wxString::Format(_t("Budget Planner for %s"), yearStr);
 }
 
 void mmBudgetingPanel::UpdateBudgetHeading()
@@ -237,20 +242,20 @@
     expenses_diff_ = new wxStaticText(itemPanel3
         , ID_DIALOG_BUDGETENTRY_SUMMARY_EXPENSES_DIF, "$");
 
-    itemIncomeSizer->Add(new wxStaticText(itemPanel3, wxID_STATIC, _("Income: ")));
-    itemIncomeSizer->Add(new wxStaticText(itemPanel3, wxID_STATIC, _("Estimated: ")));
+    itemIncomeSizer->Add(new wxStaticText(itemPanel3, wxID_STATIC, _t("Income: ")));
+    itemIncomeSizer->Add(new wxStaticText(itemPanel3, wxID_STATIC, _t("Estimated: ")));
     itemIncomeSizer->Add(income_estimated_);
-    itemIncomeSizer->Add(new wxStaticText(itemPanel3, wxID_STATIC, _("Actual: ")));
+    itemIncomeSizer->Add(new wxStaticText(itemPanel3, wxID_STATIC, _t("Actual: ")));
     itemIncomeSizer->Add(income_actual_);
-    itemIncomeSizer->Add(new wxStaticText(itemPanel3, wxID_STATIC, _("Difference: ")));
+    itemIncomeSizer->Add(new wxStaticText(itemPanel3, wxID_STATIC, _t("Difference: ")));
     itemIncomeSizer->Add(income_diff_);
 
-    itemIncomeSizer->Add(new wxStaticText(itemPanel3, wxID_STATIC, _("Expenses: ")));
-    itemIncomeSizer->Add(new wxStaticText(itemPanel3, wxID_STATIC, _("Estimated: ")));
+    itemIncomeSizer->Add(new wxStaticText(itemPanel3, wxID_STATIC, _t("Expenses: ")));
+    itemIncomeSizer->Add(new wxStaticText(itemPanel3, wxID_STATIC, _t("Estimated: ")));
     itemIncomeSizer->Add(expenses_estimated_);
-    itemIncomeSizer->Add(new wxStaticText(itemPanel3, wxID_STATIC, _("Actual: ")));
+    itemIncomeSizer->Add(new wxStaticText(itemPanel3, wxID_STATIC, _t("Actual: ")));
     itemIncomeSizer->Add(expenses_actual_);
-    itemIncomeSizer->Add(new wxStaticText(itemPanel3, wxID_STATIC, _("Difference: ")));
+    itemIncomeSizer->Add(new wxStaticText(itemPanel3, wxID_STATIC, _t("Difference: ")));
     itemIncomeSizer->Add(expenses_diff_);
     /* ---------------------- */
 
@@ -259,47 +264,30 @@
     images.push_back(mmBitmapBundle(png::VOID_STAT));
     images.push_back(mmBitmapBundle(png::FOLLOW_UP));
 
-    listCtrlBudget_ = new budgetingListCtrl(this, this, wxID_ANY);
+    m_lc = new budgetingListCtrl(this, this, wxID_ANY);
+    m_lc->SetSmallImages(images);
+    m_lc->createColumns();
+
+    itemBoxSizer2->Add(m_lc.get(), 1, wxGROW | wxALL, 1);
+}
 
-    listCtrlBudget_->SetSmallImages(images);
-    listCtrlBudget_->InsertColumn(COL_ICON, (" "));
-    listCtrlBudget_->InsertColumn(COL_CATEGORY, listCtrlBudget_->m_columns[COL_CATEGORY].HEADER);
-    listCtrlBudget_->InsertColumn(COL_FREQUENCY, listCtrlBudget_->m_columns[COL_FREQUENCY].HEADER);
-    listCtrlBudget_->InsertColumn(COL_AMOUNT, listCtrlBudget_->m_columns[COL_AMOUNT].HEADER, wxLIST_FORMAT_RIGHT);
-    listCtrlBudget_->InsertColumn(COL_ESTIMATED, listCtrlBudget_->m_columns[COL_ESTIMATED].HEADER, wxLIST_FORMAT_RIGHT);
-    listCtrlBudget_->InsertColumn(COL_ACTUAL, listCtrlBudget_->m_columns[COL_ACTUAL].HEADER, wxLIST_FORMAT_RIGHT);
-    listCtrlBudget_->InsertColumn(COL_NOTES, listCtrlBudget_->m_columns[COL_NOTES].HEADER, wxLIST_FORMAT_LEFT);
-
-    /* Get data from inidb */
-    for (int i = 0; i < listCtrlBudget_->GetColumnCount(); ++i)
-    {
-        int col_width = Model_Setting::instance().GetIntSetting(wxString::Format(listCtrlBudget_->m_col_width, i)
-            , listCtrlBudget_->m_columns[i].WIDTH);
-        listCtrlBudget_->SetColumnWidth(i, col_width);
-    }
-    itemBoxSizer2->Add(listCtrlBudget_.get(), 1, wxGROW | wxALL, 1);
-}
-
-budgetingListCtrl::budgetingListCtrl(mmBudgetingPanel* cp, wxWindow *parent, const wxWindowID id)
-    : mmListCtrl(parent, id)
-    , attr3_(new wxListItemAttr(wxNullColour, mmThemeMetaColour(meta::COLOR_LISTTOTAL), wxNullFont))
-    , cp_(cp)
+budgetingListCtrl::budgetingListCtrl(
+    mmBudgetingPanel* cp, wxWindow *parent, const wxWindowID id
+) :
+    mmListCtrl(parent, id),
+    attr3_(new wxListItemAttr(
+        wxNullColour, mmThemeMetaColour(meta::COLOR_LISTTOTAL), wxNullFont
+    )),
+    cp_(cp)
 {
     mmThemeMetaColour(this, meta::COLOR_LISTPANEL);
 
-    m_columns.push_back(PANEL_COLUMN(_("Icon"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, false));
-    m_columns.push_back(PANEL_COLUMN(_("Category"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_columns.push_back(PANEL_COLUMN(_("Frequency"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_columns.push_back(PANEL_COLUMN(_("Amount"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_columns.push_back(PANEL_COLUMN(_("Estimated"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_columns.push_back(PANEL_COLUMN(_("Actual"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_columns.push_back(PANEL_COLUMN(_("Notes"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-
-    m_col_width = "BUDGET_COL%d_WIDTH";
-    m_col_idstr = "BUDGET";
+    m_setting_name = "BUDGET";
+    m_col_info_id = LIST_INFO;
+    o_col_width_prefix = "BUDGET_COL";
 }
 
-void mmBudgetingPanel::sortTable()
+void mmBudgetingPanel::sortList()
 {
     //TODO: Sort budget panel
 }
@@ -358,19 +346,19 @@
     mmReportBudget budgetDetails;
 
     bool evaluateTransfer = false;
-    if (Option::instance().BudgetIncludeTransfers())
+    if (Option::instance().getBudgetIncludeTransfers())
     {
         evaluateTransfer = true;
     }
 
-    currentView_ = Model_Infotable::instance().GetStringInfo("BUDGET_FILTER", VIEW_ALL);
+    currentView_ = Model_Infotable::instance().getString("BUDGET_FILTER", VIEW_ALL);
     const wxString budgetYearStr = Model_Budgetyear::instance().Get(budgetYearID_);
     long year = 0;
     budgetYearStr.ToLong(&year);
 
     int startDay = 1;
     wxDate::Month startMonth = wxDateTime::Jan;
-    if (Option::instance().BudgetFinancialYears())
+    if (Option::instance().getBudgetFinancialYears())
         budgetDetails.GetFinancialYearValues(startDay, startMonth);
     wxDateTime dtBegin(startDay, startMonth, year);
     wxDateTime dtEnd = dtBegin;
@@ -385,9 +373,9 @@
     }
 
     // Readjust dates by the Budget Offset Option
-    Option::instance().setBudgetDateOffset(dtBegin);
+    Option::instance().addBudgetDateOffset(dtBegin);
     m_budget_offset_date = dtBegin.FormatISODate();
-    Option::instance().setBudgetDateOffset(dtEnd);
+    Option::instance().addBudgetDateOffset(dtEnd);
     mmSpecifiedRange date_range(dtBegin, dtEnd);
 
     //Get statistics
@@ -424,7 +412,7 @@
         budgetTotals_[category.CATEGID].second = actual;
 
         if (DisplayEntryAllowed(category.CATEGID, -1))
-            budget_.push_back(std::make_pair(category.CATEGID, -1));
+            budget_.emplace_back(category.CATEGID, -1);
 
         std::vector<int> totals_queue;
         //now a depth-first walk of the subtree of this root category
@@ -470,18 +458,18 @@
 
             // add the subcategory row to the display list
             if (DisplayEntryAllowed(subcats[i].CATEGID, -1))
-                budget_.push_back(std::make_pair(subcats[i].CATEGID, -1));
+                budget_.emplace_back(subcats[i].CATEGID, -1);
 
             // check if we need to show any total rows before the next subcategory
             if (i < static_cast<int>(subcats.size()) - 1) { //not the last subcategory
-                if (subcats[i].CATEGID == subcats[i + 1].PARENTID) totals_queue.push_back(i); //if next subcategory is our child, queue the total for after the children
+                if (subcats[i].CATEGID == subcats[i + 1].PARENTID) totals_queue.emplace_back(i); //if next subcategory is our child, queue the total for after the children
                 else if (subcats[i].PARENTID != subcats[i + 1].PARENTID) { // last sibling -- we've exhausted this branch, so display all the totals we held on to
                     while (!totals_queue.empty() && subcats[totals_queue.back()].CATEGID != subcats[i + 1].PARENTID) {
                         if (DisplayEntryAllowed(-1, subcats[totals_queue.back()].CATEGID))
                         {
-                            budget_.push_back(std::make_pair(-1, subcats[totals_queue.back()].CATEGID));
+                            budget_.emplace_back(-1, subcats[totals_queue.back()].CATEGID);
                             size_t transCatTotalIndex = budget_.size() - 1;
-                            listCtrlBudget_->RefreshItem(transCatTotalIndex);
+                            m_lc->RefreshItem(transCatTotalIndex);
                         }
                         totals_queue.pop_back();
                     }
@@ -492,9 +480,9 @@
                 while (!totals_queue.empty()) {
                     if (DisplayEntryAllowed(-1, subcats[totals_queue.back()].CATEGID))
                     {
-                        budget_.push_back(std::make_pair(-1, subcats[totals_queue.back()].CATEGID));
+                        budget_.emplace_back(-1, subcats[totals_queue.back()].CATEGID);
                         size_t transCatTotalIndex = budget_.size() - 1;
-                        listCtrlBudget_->RefreshItem(transCatTotalIndex);
+                        m_lc->RefreshItem(transCatTotalIndex);
                     }
                     totals_queue.pop_back();
                 }
@@ -504,13 +492,13 @@
         // show the total of the category after all subcats have been shown
         if (DisplayEntryAllowed(-1, category.CATEGID))
         {
-            budget_.push_back(std::make_pair(-1, category.CATEGID));
+            budget_.emplace_back(-1, category.CATEGID);
             size_t transCatTotalIndex = budget_.size() - 1;
-            listCtrlBudget_->RefreshItem(transCatTotalIndex);
+            m_lc->RefreshItem(transCatTotalIndex);
         }
     }
 
-    listCtrlBudget_->SetItemCount(budget_.size());
+    m_lc->SetItemCount(budget_.size());
 
     wxString est_amount, act_amount, diff_amount;
     est_amount = Model_Currency::toCurrency(estIncome);
@@ -562,14 +550,12 @@
     selectedIndex_ = event.GetIndex();
 }
 
-wxString mmBudgetingPanel::getItem(long item, long column)
+wxString mmBudgetingPanel::getItem(long item, int col_id)
 {
-    switch (column)
-    {
-    case COL_ICON:
+    switch (col_id) {
+    case budgetingListCtrl::LIST_ID_ICON:
         return " ";
-    case COL_CATEGORY:
-    {
+    case budgetingListCtrl::LIST_ID_CATEGORY: {
         Model_Category::Data* category = Model_Category::instance().get(budget_[item].first > 0
             ? budget_[item].first : budget_[item].second);
         if (category) {
@@ -581,56 +567,45 @@
         }
         return wxEmptyString;
     }
-    case COL_FREQUENCY:
-    {
-        if (budget_[item].first >= 0 && displayDetails_[budget_[item].first].second)
-        {
+    case budgetingListCtrl::LIST_ID_FREQUENCY: {
+        if (budget_[item].first >= 0 && displayDetails_[budget_[item].first].second) {
             Model_Budget::PERIOD_ID period = budgetPeriod_[budget_[item].first];
-            return wxGetTranslation(Model_Budget::PERIOD_STR[period]);
+            return wxGetTranslation(Model_Budget::period_name(period));
         }
         return wxEmptyString;
     }
-    case COL_AMOUNT:
-    {
-        if (budget_[item].first >= 0 && displayDetails_[budget_[item].first].second)
-        {
+    case budgetingListCtrl::LIST_ID_AMOUNT: {
+        if (budget_[item].first >= 0 && displayDetails_[budget_[item].first].second) {
             double amt = budgetAmt_[budget_[item].first];
             return Model_Currency::toCurrency(amt);
         }
         return wxEmptyString;
     }
-    case COL_ESTIMATED:
-    {
-        if (budget_[item].first < 0)
-        {
+    case budgetingListCtrl::LIST_ID_ESTIMATED: {
+        if (budget_[item].first < 0) {
             double estimated = budgetTotals_[budget_[item].second].first;
             return Model_Currency::toCurrency(estimated);
         }
-        else if (displayDetails_[budget_[item].first].second)
-        {
+        else if (displayDetails_[budget_[item].first].second) {
             double estimated = getEstimate(budget_[item].first);
             return Model_Currency::toCurrency(estimated);
         }
         return wxEmptyString;
     }
-    case COL_ACTUAL:
-    {
-        if (budget_[item].first < 0)
-        {
+    case budgetingListCtrl::LIST_ID_ACTUAL: {
+        if (budget_[item].first < 0) {
             double actual = budgetTotals_[budget_[item].second].second;
             return Model_Currency::toCurrency(actual);
         }
-        else if (displayDetails_[budget_[item].first].second)
-        {
+        else if (displayDetails_[budget_[item].first].second) {
             double actual = categoryStats_[budget_[item].second >= 0 ? budget_[item].second
                 : budget_[item].first][0];
             return Model_Currency::toCurrency(actual);
         }
         return wxEmptyString;
     }
-    case COL_NOTES:
-        if (budget_[item].first >= 0 && displayDetails_[budget_[item].first].second)
-        {
+    case budgetingListCtrl::LIST_ID_NOTES:
+        if (budget_[item].first >= 0 && displayDetails_[budget_[item].first].second) {
             wxString value = budgetNotes_[budget_[item].second >= 0 ? budget_[item].second
                 : budget_[item].first];
             value.Replace("\n", " ");
@@ -681,9 +656,9 @@
     }
 }
 
-wxString budgetingListCtrl::OnGetItemText(long item, long column) const
+wxString budgetingListCtrl::OnGetItemText(long item, long col_nr) const
 {
-    return cp_->getItem(item, column);
+    return cp_->getItem(item, getColId_Nr(static_cast<int>(col_nr)));
 }
 
 wxListItemAttr* budgetingListCtrl::OnGetItemAttr(long item) const
@@ -738,8 +713,8 @@
     if (dlg.ShowModal() == wxID_OK)
     {
         initVirtualListControl();
-        listCtrlBudget_->Refresh();
-        listCtrlBudget_->Update();
-        listCtrlBudget_->EnsureVisible(selectedIndex);
+        m_lc->Refresh();
+        m_lc->Update();
+        m_lc->EnsureVisible(selectedIndex);
     }
 }
diff -Naur a/src/budgetingpanel.h b/src/budgetingpanel.h
--- a/src/budgetingpanel.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/budgetingpanel.h	2025-07-09 01:46:59.628940390 +0200
@@ -26,20 +26,35 @@
 class wxListCtrl;
 class wxListEvent;
 class mmBudgetingPanel;
-class mmGUIFrame;
 
 /* Custom ListCtrl class that implements virtual LC style */
 class budgetingListCtrl : public mmListCtrl
 {
     DECLARE_NO_COPY_CLASS(budgetingListCtrl)
-        wxDECLARE_EVENT_TABLE();
+    wxDECLARE_EVENT_TABLE();
+
+public:
+    enum LIST_ID
+    {
+        LIST_ID_ICON = 0,
+        LIST_ID_CATEGORY,
+        LIST_ID_FREQUENCY,
+        LIST_ID_AMOUNT,
+        LIST_ID_ESTIMATED,
+        LIST_ID_ACTUAL,
+        LIST_ID_NOTES,
+        LIST_ID_size, // number of columns
+    };
+
+private:
+    static const std::vector<ListColumnInfo> LIST_INFO;
 
 public:
     budgetingListCtrl(mmBudgetingPanel* cp, wxWindow *parent, const wxWindowID id);
 
 public:
     /* required overrides for virtual style list control */
-    virtual wxString OnGetItemText(long item, long column) const;
+    virtual wxString OnGetItemText(long item, long col_nr) const;
     virtual wxListItemAttr *OnGetItemAttr(long item) const;
     virtual int OnGetItemImage(long item) const;
 
@@ -58,7 +73,7 @@
 
 public:
     mmBudgetingPanel(int64 budgetYearID
-        , wxWindow *parent, mmGUIFrame *frame
+        , wxWindow *parent
         , wxWindowID winid = wxID_ANY
         , const wxPoint& pos = wxDefaultPosition
         , const wxSize& size = wxDefaultSize
@@ -68,10 +83,9 @@
 
     /* updates the checking panel data */
     void initVirtualListControl();
-    int col_max() { return COL_MAX; }
 
     /* Getter for Virtual List Control */
-    wxString getItem(long item, long column);
+    wxString getItem(long item, int col_id);
 
     void DisplayBudgetingDetails(int64 budgetYearID);
     int64 GetBudgetYearID()
@@ -91,7 +105,7 @@
 
     void RefreshList();
 
-    wxString BuildPage() const { return listCtrlBudget_->BuildPage(GetPanelTitle()); }
+    wxString BuildPage() const { return m_lc->BuildPage(GetPanelTitle()); }
 
 private:
     enum EIcons
@@ -101,7 +115,6 @@
         ICON_FOLLOWUP
     };
 
-    mmGUIFrame* m_frame = nullptr;
     std::vector<std::pair<int64, int64> > budget_;
     std::map<int64, std::pair<int, bool > > displayDetails_; //map categid to level of the category, whether category is visible, and whether any subtree is visible 
     std::map<int64, std::pair<double, double> > budgetTotals_;
@@ -110,7 +123,7 @@
     std::map<int64, wxString> budgetNotes_;
     std::map<int64, std::map<int,double> > categoryStats_;
     bool monthlyBudget_;
-    wxSharedPtr<budgetingListCtrl> listCtrlBudget_;
+    wxSharedPtr<budgetingListCtrl> m_lc;
     wxString currentView_;
     int64 budgetYearID_;
     wxString m_monthName;
@@ -131,7 +144,7 @@
         , const wxString& name = "mmBudgetingPanel");
 
     void CreateControls();
-    void sortTable();
+    void sortList();
     bool DisplayEntryAllowed(int64 categoryID, int64 subcategoryID);
     void UpdateBudgetHeading();
     double getEstimate(int64 category) const;
@@ -140,17 +153,5 @@
     /* Event handlers for Buttons */
     void OnViewPopupSelected(wxCommandEvent& event);
     void OnMouseLeftDown(wxCommandEvent& event);
-
-    enum EColumn
-    {
-        COL_ICON = 0,
-        COL_CATEGORY,
-        COL_FREQUENCY,
-        COL_AMOUNT,
-        COL_ESTIMATED,
-        COL_ACTUAL,
-        COL_NOTES,
-        COL_MAX, // number of columns
-    };
 };
 
diff -Naur a/src/budgetyeardialog.cpp b/src/budgetyeardialog.cpp
--- a/src/budgetyeardialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/budgetyeardialog.cpp	2025-07-09 01:46:59.628940390 +0200
@@ -43,7 +43,7 @@
     budgetYearID_ = -1;
 
     long style = wxCAPTION | wxSYSTEM_MENU | wxCLOSE_BOX;
-    Create(parent, wxID_ANY, _("Budget Editor"), wxDefaultPosition, wxSize(500, 300), style);
+    Create(parent, wxID_ANY, _t("Budget Editor"), wxDefaultPosition, wxSize(500, 300), style);
 }
 
 bool mmBudgetYearDialog::Create(wxWindow* parent, wxWindowID id,
@@ -90,19 +90,19 @@
     itemBoxSizer2->Add(itemBoxSizer5, 1, wxGROW|wxALL, 5);
 
     wxButton* itemButton7 = new wxButton(this, wxID_ADD
-        , _("Add &Year"));
+        , _t("Add &Year"));
     itemBoxSizer5->Add(itemButton7, 0, wxALIGN_CENTER_VERTICAL);
-    mmToolTip(itemButton7, _("Add a new budget year"));
+    mmToolTip(itemButton7, _t("Add a new budget year"));
 
     wxButton* itemBudgetMonth = new wxButton(this, ID_ADD_MONTH
-        , _("Add &Month"));
+        , _t("Add &Month"));
     itemBoxSizer5->Add(itemBudgetMonth, 0, wxALIGN_CENTER_VERTICAL | wxLEFT, 5);
-    mmToolTip(itemBudgetMonth, _("Add a new budget month"));
+    mmToolTip(itemBudgetMonth, _t("Add a new budget month"));
 
     wxButton* itemButtonDelete = new wxButton(this, wxID_DELETE
-        , _("&Delete "));
+        , _t("&Delete "));
     itemBoxSizer5->Add(itemButtonDelete, 0, wxALIGN_CENTER_VERTICAL | wxLEFT, 5);
-    mmToolTip(itemButtonDelete, _("Delete existing budget"));
+    mmToolTip(itemButtonDelete, _t("Delete existing budget"));
 
     wxStaticLine* line = new wxStaticLine(this, wxID_STATIC, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL);
     itemBoxSizer2->Add(line, 0, wxGROW | wxALL, 5);
@@ -113,7 +113,7 @@
     wxBoxSizer* itemButtonSizer = new wxBoxSizer(wxHORIZONTAL);
     itemPanel25->SetSizer(itemButtonSizer);
 
-    wxButton* itemButtonOK = new wxButton(itemPanel25, wxID_OK, _("&OK "));
+    wxButton* itemButtonOK = new wxButton(itemPanel25, wxID_OK, _t("&OK "));
     itemButtonSizer->Add(itemButtonOK, 0, wxALIGN_CENTER_VERTICAL | wxRIGHT | wxBOTTOM, 5);
 
     wxButton* itemButtonCancel = new wxButton(itemPanel25, wxID_CANCEL, wxGetTranslation(g_CancelLabel));
diff -Naur a/src/budgetyearentrydialog.cpp b/src/budgetyearentrydialog.cpp
--- a/src/budgetyearentrydialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/budgetyearentrydialog.cpp	2025-07-09 01:46:59.628940390 +0200
@@ -40,9 +40,9 @@
 {
     withMonth_ = withMonth;
     long style = wxCAPTION | wxSYSTEM_MENU | wxCLOSE_BOX;
-    Create(parent, wxID_ANY, _("Budget Entry Details"), wxDefaultPosition, wxSize(500, 300), style);
+    Create(parent, wxID_ANY, _t("Budget Entry Details"), wxDefaultPosition, wxSize(500, 300), style);
     if (withMonth_)
-        this->SetTitle(_("Budget Month Entry"));
+        this->SetTitle(_t("Budget Month Entry"));
 }
 
 bool mmBudgetYearEntryDialog::Create(wxWindow* parent, wxWindowID id
@@ -69,21 +69,21 @@
     wxFlexGridSizer* itemGridSizer2 = new wxFlexGridSizer(0, 2, 0, 0);
     itemBoxSizer2->Add(itemGridSizer2, 0, wxALL, 5);
     
-    wxStaticText* itemStaticText3 = new wxStaticText( this, wxID_STATIC, _("Budget Year"));
+    wxStaticText* itemStaticText3 = new wxStaticText( this, wxID_STATIC, _t("Budget Year"));
     itemGridSizer2->Add(itemStaticText3, 0, wxALIGN_LEFT | wxALIGN_CENTER_VERTICAL | wxALL, 5);
 
     int year = wxDate::GetCurrentYear();
     textYear_ = new wxSpinCtrl( this, wxID_ANY
         , wxEmptyString, wxDefaultPosition, wxSize(100,-1), wxSP_ARROW_KEYS, 1900, 3000, year);
     textYear_->SetValue(year);
-    textYear_->SetToolTip(_("Specify the required year.\n"
+    textYear_->SetToolTip(_t("Specify the required year.\n"
         "Use Spin buttons to increase or decrease the year."));
     itemGridSizer2->Add(textYear_, 0, wxALIGN_LEFT | wxALIGN_CENTER_VERTICAL | wxALL, 5);
 
     if (withMonth_)
     {
         wxStaticText* itemStaticTextMonth = new wxStaticText(this
-            , wxID_STATIC, _("Budget Month"), wxDefaultPosition, wxDefaultSize, 0);
+            , wxID_STATIC, _t("Budget Month"), wxDefaultPosition, wxDefaultSize, 0);
         itemGridSizer2->Add(itemStaticTextMonth, 0
             , wxALIGN_LEFT | wxALIGN_CENTER_VERTICAL | wxALL, 5);
 
@@ -92,14 +92,14 @@
             , wxEmptyString, wxDefaultPosition, textYear_->GetSize()
             , wxSP_ARROW_KEYS, 1, 12, month);
         textMonth_->SetValue(month);
-        textMonth_->SetToolTip(_("Specify the required month.\n"
+        textMonth_->SetToolTip(_t("Specify the required month.\n"
             "Use Spin buttons to increase or decrease the month."));
  
         itemGridSizer2->Add(textMonth_, 0, wxALIGN_LEFT |wxALIGN_CENTER_VERTICAL|wxALL, 5);
     }
 
     wxStaticText* itemStaticText51 = new wxStaticText(this
-        , wxID_STATIC, _("Base Budget On"));
+        , wxID_STATIC, _t("Base Budget On"));
     itemGridSizer2->Add(itemStaticText51, 0
         , wxALIGN_LEFT | wxALIGN_CENTER_VERTICAL | wxALL, 5);
 
@@ -110,7 +110,7 @@
         , wxDefaultPosition, textYear_->GetSize(), itemYearStrings );
     itemChoice_->SetSelection(0);
     itemGridSizer2->Add(itemChoice_, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);
-    mmToolTip(itemChoice_, _("Specify year to base budget on"));
+    mmToolTip(itemChoice_, _t("Specify year to base budget on"));
 
     unsigned int index = 1;
     for (const auto& e : Model_Budgetyear::instance().all())
@@ -125,7 +125,7 @@
     wxBoxSizer* itemBoxSizer9 = new wxBoxSizer(wxHORIZONTAL);
     itemBoxSizer2->Add(itemBoxSizer9, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);
    
-    wxButton* itemButtonOK = new wxButton( this, wxID_OK, _("&OK ") );
+    wxButton* itemButtonOK = new wxButton( this, wxID_OK, _t("&OK ") );
     itemBoxSizer9->Add(itemButtonOK, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
 
     wxButton* itemButtonCancel = new wxButton( this, wxID_CANCEL, wxGetTranslation(g_CancelLabel) );
@@ -149,8 +149,8 @@
 
     if (Model_Budgetyear::instance().Get(currYearText) != -1)
     {   
-        wxMessageBox(_("Budget Year already exists")
-            , _("Budget Entry Details"), wxICON_WARNING);
+        wxMessageBox(_t("Budget Year already exists")
+            , _t("Budget Entry Details"), wxICON_WARNING);
         return;
     }
     else
diff -Naur a/src/categdialog.cpp b/src/categdialog.cpp
--- a/src/categdialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/categdialog.cpp	2025-07-09 01:46:59.628940390 +0200
@@ -27,9 +27,11 @@
 #include "paths.h"
 #include "constants.h"
 #include "webapp.h"
+#include "model/Model_Attachment.h"
 #include "model/Model_Setting.h"
-#include "model/Model_Payee.h"
 #include "model/Model_Infotable.h"
+#include "model/Model_Payee.h"
+#include "model/Model_CustomFieldData.h"
 
 wxIMPLEMENT_DYNAMIC_CLASS(mmCategDialog, wxDialog);
 wxIMPLEMENT_DYNAMIC_CLASS(mmCategDialogTreeCtrl, wxTreeCtrl);
@@ -67,7 +69,7 @@
 
 mmCategDialog::~mmCategDialog()
 {
-    Model_Infotable::instance().Set("CATEGORIES_DIALOG_SIZE", GetSize());
+    Model_Infotable::instance().setSize("CATEGORIES_DIALOG_SIZE", GetSize());
 }
 
 mmCategDialog::mmCategDialog()
@@ -116,7 +118,7 @@
     fillControls();
 
     m_treeCtrl->CollapseAll();
-    bool expand_categs_tree = Model_Setting::instance().GetBoolSetting("EXPAND_CATEGS_TREE", false);
+    bool expand_categs_tree = Model_Setting::instance().getBool("EXPAND_CATEGS_TREE", false);
     if (expand_categs_tree)
         m_treeCtrl->ExpandAll();
     else
@@ -124,7 +126,7 @@
     m_treeCtrl->Expand(root_);
     m_tbExpand->SetValue(expand_categs_tree);
     m_tbCollapse->SetValue(!expand_categs_tree);
-    m_tbShowAll->SetValue(Model_Setting::instance().GetBoolSetting("SHOW_HIDDEN_CATEGS", true));
+    m_tbShowAll->SetValue(Model_Setting::instance().getBool("SHOW_HIDDEN_CATEGS", true));
     saveCurrentCollapseState();
 
     m_maskTextCtrl->SetFocus();
@@ -184,12 +186,12 @@
 {
     m_processExpandCollapse = false;
     m_treeCtrl->DeleteAllItems();
-    root_ = m_treeCtrl->AddRoot(_("Categories"));
+    root_ = m_treeCtrl->AddRoot(_t("Categories"));
     m_selectedItemId = root_;
     m_treeCtrl->SetItemBold(root_, true);
     m_treeCtrl->SetFocus();
     NormalColor_ = m_treeCtrl->GetItemTextColour(root_);
-    bool show_hidden_categs = Model_Setting::instance().GetBoolSetting("SHOW_HIDDEN_CATEGS", true);
+    bool show_hidden_categs = Model_Setting::instance().getBool("SHOW_HIDDEN_CATEGS", true);
 
     const wxString match = m_maskStr + "*";
     wxTreeItemId maincat = root_;
@@ -214,7 +216,7 @@
                 m_treeCtrl->SetItemTextColour(maincat, wxColour("GREY"));
             if (m_categ_id == category.CATEGID)
                 m_selectedItemId = maincat;
-            if (m_maskStr.IsEmpty() && (m_categoryVisible.count(category.CATEGID) > 0) && !m_categoryVisible.at(category.CATEGID))
+            if (m_maskStr.IsEmpty() && (m_categoryVisible.find(category.CATEGID) != m_categoryVisible.end()) && !m_categoryVisible.at(category.CATEGID))
                 m_treeCtrl->CollapseAllChildren(maincat);
             else m_treeCtrl->ExpandAllChildren(maincat);
         }
@@ -255,21 +257,21 @@
         , wxID_REPLACE_ALL, mmBitmapBundle(png::RELOCATION, mmBitmapButtonSize));
     m_buttonRelocate->Connect(wxID_REPLACE_ALL, wxEVT_COMMAND_BUTTON_CLICKED
         , wxCommandEventHandler(mmCategDialog::OnCategoryRelocation), nullptr, this);
-    mmToolTip(m_buttonRelocate, _("Merge Categories"));
+    mmToolTip(m_buttonRelocate, _t("Merge Categories"));
 
-    m_tbCollapse = new wxToggleButton(this, ID_COLLAPSE, _("C&ollapse All"), wxDefaultPosition
+    m_tbCollapse = new wxToggleButton(this, ID_COLLAPSE, _t("C&ollapse All"), wxDefaultPosition
         , wxDefaultSize);
     m_tbCollapse->Connect(wxID_ANY, wxEVT_TOGGLEBUTTON,
         wxCommandEventHandler(mmCategDialog::OnExpandOrCollapseToggle), nullptr, this);
 
-    m_tbExpand = new wxToggleButton(this, ID_EXPAND, _("E&xpand All"), wxDefaultPosition
+    m_tbExpand = new wxToggleButton(this, ID_EXPAND, _t("E&xpand All"), wxDefaultPosition
         , wxDefaultSize);
     m_tbExpand->Connect(wxID_ANY, wxEVT_TOGGLEBUTTON,
         wxCommandEventHandler(mmCategDialog::OnExpandOrCollapseToggle), nullptr, this);
 
-    m_tbShowAll = new wxToggleButton(this, wxID_SELECTALL, _("&Show All"), wxDefaultPosition
+    m_tbShowAll = new wxToggleButton(this, wxID_SELECTALL, _t("&Show All"), wxDefaultPosition
         , wxDefaultSize);
-    mmToolTip(m_tbShowAll, _("Show all hidden categories"));
+    mmToolTip(m_tbShowAll, _t("Show all hidden categories"));
     m_tbShowAll->Connect(wxID_SELECTALL, wxEVT_TOGGLEBUTTON
         , wxCommandEventHandler(mmCategDialog::OnShowHiddenToggle), nullptr, this);
 
@@ -299,7 +301,7 @@
     searchPanel->SetSizer(search_sizer);
 
     m_maskTextCtrl = new wxSearchCtrl(searchPanel, wxID_FIND);
-    search_sizer->Add(new wxStaticText(searchPanel, wxID_STATIC, _("Search")), g_flagsH);
+    search_sizer->Add(new wxStaticText(searchPanel, wxID_STATIC, _t("Search")), g_flagsH);
     search_sizer->Add(m_maskTextCtrl, g_flagsExpand);
 
     wxPanel* buttonsPanel = new wxPanel(this, wxID_ANY);
@@ -310,24 +312,24 @@
     wxStdDialogButtonSizer* itemBoxSizer66 = new wxStdDialogButtonSizer;
     buttonsSizer->Add(itemBoxSizer66, wxSizerFlags(g_flagsV).Border(wxALL, 0).Center());
 
-    m_buttonAdd = new wxButton(buttonsPanel, wxID_ADD, _("&Add "));
+    m_buttonAdd = new wxButton(buttonsPanel, wxID_ADD, _t("&Add "));
     itemBoxSizer66->Add(m_buttonAdd, g_flagsH);
-    mmToolTip(m_buttonAdd, _("Add a new category"));
+    mmToolTip(m_buttonAdd, _t("Add a new category"));
 
-    m_buttonEdit = new wxButton(buttonsPanel, wxID_EDIT, _("&Edit "));
+    m_buttonEdit = new wxButton(buttonsPanel, wxID_EDIT, _t("&Edit "));
     itemBoxSizer66->Add(m_buttonEdit, g_flagsH);
-    mmToolTip(m_buttonEdit, _("Edit the name of an existing category"));
+    mmToolTip(m_buttonEdit, _t("Edit the name of an existing category"));
 
-    m_buttonDelete = new wxButton(buttonsPanel, wxID_REMOVE, _("&Delete "));
+    m_buttonDelete = new wxButton(buttonsPanel, wxID_REMOVE, _t("&Delete "));
     itemBoxSizer66->Add(m_buttonDelete, g_flagsH);
-    mmToolTip(m_buttonDelete, _("Delete an existing category. The category is unable to be used by existing transactions."));
+    mmToolTip(m_buttonDelete, _t("Delete an existing category. The category is unable to be used by existing transactions."));
 
     wxStdDialogButtonSizer* itemBoxSizer9 = new wxStdDialogButtonSizer;
     buttonsSizer->Add(itemBoxSizer9, wxSizerFlags(g_flagsV).Border(wxALL, 0).Center());
 
-    m_buttonSelect = new wxButton(buttonsPanel, wxID_OK, _("&Select"));
+    m_buttonSelect = new wxButton(buttonsPanel, wxID_OK, _t("&Select"));
     itemBoxSizer9->Add(m_buttonSelect, g_flagsH);
-    mmToolTip(m_buttonSelect, _("Select the currently selected category as the selected category for the transaction"));
+    mmToolTip(m_buttonSelect, _t("Select the currently selected category as the selected category for the transaction"));
 
     //Some interfaces has no any close buttons, it may confuse user. Cancel button added
     wxButton* itemCancelButton = new wxButton(buttonsPanel, wxID_CANCEL, wxGetTranslation(g_CancelLabel));
@@ -340,10 +342,10 @@
 {
     if (wxNOT_FOUND != name.Find(':'))
     {
-        wxString errMsg = _("Name contains category delimiter.");
-        errMsg << "\n\n" << _("The colon (:) character is used to separate categories and subcategories"
+        wxString errMsg = _t("Name contains category delimiter.");
+        errMsg << "\n\n" << _t("The colon (:) character is used to separate categories and subcategories"
             " and therefore should not be used in the name");
-        wxMessageBox(errMsg, _("Category Manager: Invalid Name"), wxOK | wxICON_ERROR);
+        wxMessageBox(errMsg, _t("Category Manager: Invalid Name"), wxOK | wxICON_ERROR);
         return false;
     }
     return true;
@@ -351,8 +353,8 @@
 
 void mmCategDialog::OnAdd(wxCommandEvent& /*event*/)
 {
-    wxString prompt_msg = _("Enter the name for the new category:");
-    const wxString& text = wxGetTextFromUser(prompt_msg, _("Add Category"), "");
+    wxString prompt_msg = _t("Enter the name for the new category:");
+    const wxString& text = wxGetTextFromUser(prompt_msg, _t("Add Category"), "");
     if (text.IsEmpty() || !validateName(text))
         return;
     Model_Category::Data* selectedCategory = dynamic_cast<mmTreeItemCateg*>(m_treeCtrl->GetItemData(m_selectedItemId))->getCategData();
@@ -363,7 +365,7 @@
         const auto& categories = Model_Category::instance().find(Model_Category::CATEGNAME(text), Model_Category::PARENTID(-1));
         if (!categories.empty())
         {
-            wxMessageBox(_("A category with this name already exists for the parent"), _("Category Manager: Adding Error"), wxOK | wxICON_ERROR);
+            wxMessageBox(_t("A category with this name already exists for the parent"), _t("Category Manager: Adding Error"), wxOK | wxICON_ERROR);
             return;
         }
         category->PARENTID = -1;
@@ -372,7 +374,7 @@
         const auto& categories = Model_Category::instance().find(Model_Category::CATEGNAME(text), Model_Category::PARENTID(selectedCategory->CATEGID));
         if (!categories.empty())
         {
-            wxMessageBox(_("A category with this name already exists for the parent"), _("Category Manager: Adding Error"), wxOK | wxICON_ERROR);
+            wxMessageBox(_t("A category with this name already exists for the parent"), _t("Category Manager: Adding Error"), wxOK | wxICON_ERROR);
             return;
         }
         category->PARENTID = selectedCategory->CATEGID;
@@ -424,8 +426,8 @@
 
     if (!Model_Category::instance().find(Model_Category::CATEGNAME(sourceCat->CATEGNAME), Model_Category::PARENTID(categID)).empty() && sourceCat->PARENTID != categID)
     {
-        wxMessageBox(_("Unable to move a subcategory to a category that already has a subcategory with that name. Consider renaming before moving.")
-            , _("A subcategory with this name already exists")
+        wxMessageBox(_t("Unable to move a subcategory to a category that already has a subcategory with that name. Consider renaming before moving.")
+            , _t("A subcategory with this name already exists")
             , wxOK | wxICON_ERROR);
         return;
     }
@@ -437,17 +439,17 @@
         if (subcat.CATEGID == categID)
         {
             wxMessageBox(wxString::Format("Unable to move a category to one of its own descendants.\n\nConsider first relocating subcategory %s to move the subtree.", subtree_root)
-                , _("Target category is a descendant")
+                , _t("Target category is a descendant")
                 , wxOK | wxICON_ERROR);
             return;
         }
     }
 
     wxString moveMessage = wxString::Format(
-        _("Are you sure you want to move\n\"%1$s\"\nto:\n\"%2$s\"?")
+        _tu("Do you want to move\n“%1$s”\nto:\n“%2$s”?")
         , Model_Category::full_name(m_dragSourceCATEGID)
-        , categID != -1 ? Model_Category::full_name(categID) : _("Top level"));
-    wxMessageDialog msgDlg(this, moveMessage, _("Confirm Move"),
+        , categID != -1 ? Model_Category::full_name(categID) : _t("Top level"));
+    wxMessageDialog msgDlg(this, moveMessage, _t("Confirm Move"),
         wxYES_NO | wxNO_DEFAULT | wxICON_EXCLAMATION);
     if (msgDlg.ShowModal() != wxID_YES)
         return;
@@ -464,17 +466,17 @@
 
 void mmCategDialog::showCategDialogDeleteError(bool category)
 {
-    wxString deleteCategoryErrMsg = category ? _("Category in use.") : _("Subcategory in use.");
+    wxString deleteCategoryErrMsg = category ? _t("Category in use.") : _t("Subcategory in use.");
     if (category)
-        deleteCategoryErrMsg << "\n\n" << _("Tip: Change all transactions using this Category to\n"
+        deleteCategoryErrMsg << "\n\n" << _t("Tip: Change all transactions using this Category to\n"
             "another Category using the merge command:");
     else
-        deleteCategoryErrMsg << "\n\n" << _("Tip: Change all transactions using this Subcategory to\n"
+        deleteCategoryErrMsg << "\n\n" << _t("Tip: Change all transactions using this Subcategory to\n"
             "another Category using the merge command:");
 
-    deleteCategoryErrMsg << "\n\n" << _u("Tools → Merge → Categories");
+    deleteCategoryErrMsg << "\n\n" << _tu("Tools → Merge → Categories");
 
-    wxMessageBox(deleteCategoryErrMsg, _("Category Manager: Delete Error"), wxOK | wxICON_ERROR);
+    wxMessageBox(deleteCategoryErrMsg, _t("Category Manager: Delete Error"), wxOK | wxICON_ERROR);
 }
 
 void mmCategDialog::mmDoDeleteSelectedCategory()
@@ -497,10 +499,10 @@
         }
     }
 
-    wxMessageDialog msgDlg(this, _("Deleted transactions exist which use this category or one of its descendants.")
-            + "\n\n" + _("Deleting the category will also automatically purge the associated deleted transactions.")
-            + "\n\n" + _("Do you wish to continue ?")
-        , _("Confirm Category Deletion"), wxYES_NO | wxNO_DEFAULT | wxICON_WARNING);
+    wxMessageDialog msgDlg(this, _t("Deleted transactions exist which use this category or one of its descendants.")
+            + "\n\n" + _t("Deleting the category will also automatically purge the associated deleted transactions.")
+            + "\n\n" + _t("Do you want to continue?")
+        , _t("Confirm Category Deletion"), wxYES_NO | wxNO_DEFAULT | wxICON_WARNING);
     if ((deletedTrans.empty() && splits.empty()) || msgDlg.ShowModal() == wxID_YES)
     {
         if(!(deletedTrans.empty() && splits.empty())){
@@ -508,7 +510,7 @@
             Model_Splittransaction::instance().Savepoint();
             Model_Attachment::instance().Savepoint();
             Model_CustomFieldData::instance().Savepoint();
-            const wxString& RefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+            const wxString& RefType = Model_Checking::refTypeName;
             for (auto& split : splits) {
                 Model_Checking::instance().remove(split.TRANSID);
                 mmAttachmentManage::DeleteAllAttachments(RefType, split.TRANSID);
@@ -609,8 +611,8 @@
         return;
 
     const wxString old_name = m_treeCtrl->GetItemText(m_selectedItemId);
-    const wxString msg = wxString::Format(_("Enter a new name for '%s'"), old_name);
-    wxString text = wxGetTextFromUser(msg, _("Edit Category"), old_name);
+    const wxString msg = wxString::Format(_t("Enter a new name for '%s'"), old_name);
+    wxString text = wxGetTextFromUser(msg, _t("Edit Category"), old_name);
     if (text.IsEmpty() || old_name == text || !validateName(text)) {
         return;
     }
@@ -621,8 +623,8 @@
     Model_Category::Data_Set categories = Model_Category::instance().find(Model_Category::CATEGNAME(text), Model_Category::PARENTID(category->PARENTID));
     if (!categories.empty())
     {
-        wxString errMsg = _("A category with this name already exists for the parent");
-        wxMessageBox(errMsg, _("Category Manager: Editing Error"), wxOK | wxICON_ERROR);
+        wxString errMsg = _t("A category with this name already exists for the parent");
+        wxMessageBox(errMsg, _t("Category Manager: Editing Error"), wxOK | wxICON_ERROR);
         return;
     }
     category->CATEGNAME = text;
@@ -679,10 +681,10 @@
     if (dlg.ShowModal() == wxID_OK)
     {
         wxString msgStr;
-        msgStr << _("Merge categories completed") << "\n\n"
-            << wxString::Format(_("Records have been updated in the database: %i"),
+        msgStr << _t("Merge categories completed") << "\n\n"
+            << wxString::Format(_t("Records have been updated in the database: %i"),
                 dlg.updatedCategoriesCount());
-        wxMessageBox(msgStr, _("Merge categories result"));
+        wxMessageBox(msgStr, _t("Merge categories result"));
         m_refresh_requested = true;
         fillControls();
     }
@@ -706,14 +708,14 @@
         m_tbCollapse->SetValue(true);
     }
     m_treeCtrl->EnsureVisible(m_selectedItemId);
-    Model_Setting::instance().Set("EXPAND_CATEGS_TREE", m_tbExpand->GetValue());
+    Model_Setting::instance().setBool("EXPAND_CATEGS_TREE", m_tbExpand->GetValue());
     saveCurrentCollapseState();
     m_processExpandCollapse = true;
 }
 
 void mmCategDialog::OnShowHiddenToggle(wxCommandEvent& /*event*/)
 {
-    Model_Setting::instance().Set("SHOW_HIDDEN_CATEGS", m_tbShowAll->GetValue());
+    Model_Setting::instance().setBool("SHOW_HIDDEN_CATEGS", m_tbShowAll->GetValue());
     fillControls();
 }
 
@@ -758,8 +760,8 @@
     }
     case MENU_ITEM_CLEAR:
     {
-        wxMessageDialog msgDlg(this, _("Are you sure you want to unhide all categories")
-                , _("Unhide all categories")
+        wxMessageDialog msgDlg(this, _t("Do you want to unhide all categories?")
+                , _t("Unhide all categories")
                 , wxYES_NO | wxNO_DEFAULT | wxICON_EXCLAMATION);
         if (msgDlg.ShowModal() == wxID_YES)
         {
@@ -787,13 +789,13 @@
 void mmCategDialog::OnItemRightClick(wxTreeEvent& event)
 {
     wxMenu mainMenu;
-    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_ITEM_HIDE, _("Hide Selected Category")));
-    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_ITEM_UNHIDE, _("Unhide Selected Category")));
+    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_ITEM_HIDE, _t("Hide Selected Category")));
+    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_ITEM_UNHIDE, _t("Unhide Selected Category")));
     mainMenu.AppendSeparator();
-    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_ITEM_DELETE, _("Remove Category")));
+    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_ITEM_DELETE, _t("Remove Category")));
 
     mainMenu.AppendSeparator();
-    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_ITEM_CLEAR, _("Clear Settings")));
+    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_ITEM_CLEAR, _t("Clear Settings")));
     bool bItemHidden = (m_treeCtrl->GetItemTextColour(m_selectedItemId) != NormalColor_);
     mainMenu.Enable(MENU_ITEM_HIDE, !bItemHidden && (m_selectedItemId != root_));
     mainMenu.Enable(MENU_ITEM_UNHIDE, bItemHidden && (m_selectedItemId != root_));
diff -Naur a/src/categdialog.h b/src/categdialog.h
--- a/src/categdialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/categdialog.h	2025-07-09 01:46:59.628940390 +0200
@@ -65,7 +65,7 @@
 
     bool Create(wxWindow* parent
         , wxWindowID id = wxID_ANY
-        , const wxString& caption = _("Category Manager")
+        , const wxString& caption = _t("Category Manager")
         , const wxString& name = "Organize Categories"
         , const wxPoint& pos = wxDefaultPosition
         , const wxSize& size = wxDefaultSize
diff -Naur a/src/choices.cpp b/src/choices.cpp
--- a/src/choices.cpp	1970-01-01 01:00:00.000000000 +0100
+++ b/src/choices.cpp	2025-07-09 01:46:59.628940390 +0200
@@ -0,0 +1,93 @@
+/*******************************************************
+ Copyright (C) 2025 George Ef (george.a.ef@gmail.com)
+
+ This program is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2 of the License, or
+ (at your option) any later version.
+
+ This program is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program; if not, write to the Free Software
+ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ ********************************************************/
+
+#include "choices.h"
+
+ChoicesName::ChoicesName(const std::vector<Item>& array_, bool nocase_) :
+    array(array_),
+    nocase(nocase_)
+{
+}
+
+ChoicesName::~ChoicesName()
+{
+}
+
+const wxString ChoicesName::getName(int id) const
+{
+    wxASSERT(id >= 0 && id < static_cast<int>(array.size()));
+    wxASSERT(array[id].id == id);
+    return array[id].name;
+}
+
+int ChoicesName::findName(const wxString& name, int default_id)
+{
+    if (const auto it = name_id.find(name); it != name_id.end())
+        return it->second;
+
+    int id = default_id;
+    for (const Item& item : array) {
+        bool match = nocase ? (name.CmpNoCase(item.name) == 0) : (name == item.name);
+        if (match) { id = item.id; break; }
+    }
+    name_id.insert({name, id});
+    return id;
+}
+
+//----------------------------------------------------------------------------
+
+ChoicesKeyName::ChoicesKeyName(const std::vector<Item>& array_, bool nocase_) :
+    array(array_),
+    nocase(nocase_)
+{
+}
+
+ChoicesKeyName::~ChoicesKeyName()
+{
+}
+
+const wxString ChoicesKeyName::getKey(int id) const
+{
+    wxASSERT(id >= 0 && id < static_cast<int>(array.size()));
+    wxASSERT(array[id].id == id);
+    return array[id].key;
+}
+
+const wxString ChoicesKeyName::getName(int id) const
+{
+    wxASSERT(id >= 0 && id < static_cast<int>(array.size()));
+    wxASSERT(array[id].id == id);
+    return array[id].name;
+}
+
+int ChoicesKeyName::findKeyName(const wxString& keyOrName, int default_id)
+{
+    if (const auto it = keyOrName_id.find(keyOrName); it != keyOrName_id.end())
+        return it->second;
+
+    int id = default_id;
+    for (const Item& item : array) {
+        bool match = nocase ?
+            (keyOrName.CmpNoCase(item.key) == 0 || keyOrName.CmpNoCase(item.name) == 0) :
+            (keyOrName == item.key || keyOrName == item.name);
+        if (match) { id = item.id; break; }
+    }
+    keyOrName_id.insert({keyOrName, id});
+    return id;
+}
+
diff -Naur a/src/choices.h b/src/choices.h
--- a/src/choices.h	1970-01-01 01:00:00.000000000 +0100
+++ b/src/choices.h	2025-07-09 01:46:59.628940390 +0200
@@ -0,0 +1,58 @@
+/*******************************************************
+ Copyright (C) 2025 George Ef (george.a.ef@gmail.com)
+
+ This program is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2 of the License, or
+ (at your option) any later version.
+
+ This program is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program; if not, write to the Free Software
+ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ ********************************************************/
+
+#pragma once
+
+#include <unordered_map>
+#include "defs.h"
+
+class ChoicesName {
+public:
+    struct Item { int id; wxString name; };
+
+private:
+    const std::vector<Item> array;
+    const bool nocase;
+    std::unordered_map<wxString, int> name_id; // cache for findName()
+
+public:
+    ChoicesName(const std::vector<Item>& array_, bool nocase_ = true);
+    ~ChoicesName();
+
+    const wxString getName(int id) const;
+    int findName(const wxString& name, int default_id);
+};
+
+class ChoicesKeyName {
+public:
+    struct Item { int id; wxString key; wxString name; };
+
+private:
+    const std::vector<Item> array;
+    const bool nocase;
+    std::unordered_map<wxString, int> keyOrName_id;  // cache for findKeyName()
+
+public:
+    ChoicesKeyName(const std::vector<Item>& array_, bool nocase_ = true);
+    ~ChoicesKeyName();
+
+    const wxString getKey(int id) const;
+    const wxString getName(int id) const;
+    int findKeyName(const wxString& keyOrName, int default_id);
+};
+
diff -Naur a/src/CMakeLists.txt b/src/CMakeLists.txt
--- a/src/CMakeLists.txt	2025-02-07 16:12:06.000000000 +0100
+++ b/src/CMakeLists.txt	2025-07-09 01:46:59.624940366 +0200
@@ -88,6 +88,8 @@
     budgetyearentrydialog.h
     categdialog.cpp
     categdialog.h
+    choices.cpp
+    choices.h
     constants.cpp
     constants.h
     currencydialog.cpp
@@ -96,6 +98,8 @@
     customfieldeditdialog.h
     customfieldlistdialog.cpp
     customfieldlistdialog.h
+    daterange2.cpp
+    daterange2.h
     dbcheck.cpp
     dbcheck.h
     dbupgrade.cpp
@@ -147,6 +151,8 @@
     mmTextCtrl.cpp
     mmTextCtrl.h
     mmTips.h
+    mmTreeItemData.cpp
+    mmTreeItemData.h
     option.cpp
     option.h
     optiondialog.cpp
@@ -170,6 +176,8 @@
     payeedialog.cpp
     payeedialog.h
     platfdep.h
+    primitive.cpp
+    primitive.h
     recentfiles.cpp
     recentfiles.h
     relocatecategorydialog.cpp
@@ -314,6 +322,7 @@
     model/Model_CustomFieldData.cpp
     model/Model_CustomFieldData.h
     model/Model_CustomField.h
+    model/Model.cpp
     model/Model.h
     model/Model_Infotable.cpp
     model/Model_Infotable.h
diff -Naur a/src/constants.cpp b/src/constants.cpp
--- a/src/constants.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/constants.cpp	2025-07-09 01:46:59.628940390 +0200
@@ -69,30 +69,30 @@
 
 const wxString g_CancelLabel =
 #if defined(__APPLE__)
-    wxTRANSLATE("Cancel");
+    _n("Cancel");
 #else
-    wxTRANSLATE("&Cancel ");
+    _n("&Cancel ");
 #endif
 const wxString g_CloseLabel =
 #if defined(__APPLE__)
-    wxTRANSLATE("Close");
+    _n("Close");
 #else
-    wxTRANSLATE("&Close ");
+    _n("&Close ");
 #endif
 const wxString g_OkLabel =
 #if defined(__APPLE__)
-wxTRANSLATE("OK");
+_n("OK");
 #else
-wxTRANSLATE("&OK ");
+_n("&OK ");
 #endif
 
 //bug #5590
-const wxString grm_menu_undo = _("Undo");
-const wxString grm_menu_redo = _("Redo");
-const wxString grm_menu_cut = _("Cut");
-const wxString grm_menu_copy = _("Copy");
-const wxString grm_menu_paste = _("Paste");
-const wxString grm_menu_selall = _("Select All");
+const wxString grm_menu_undo = _t("Undo");
+const wxString grm_menu_redo = _t("Redo");
+const wxString grm_menu_cut = _t("Cut");
+const wxString grm_menu_copy = _t("Copy");
+const wxString grm_menu_paste = _t("Paste");
+const wxString grm_menu_selall = _t("Select All");
 
 //---------------------------------------------------------------------------
 int mmex::MIN_DATAVERSION = 2;
@@ -108,7 +108,7 @@
 {
     const wxString architecture =
 #if defined(_WIN64) || defined(__x86_64__)
-        _("64-bit");
+        _t("64-bit");
 #else
         "";
 #endif
@@ -181,32 +181,20 @@
 // Valid intervals: [m1, m5, m15, m30, h1, h2, h6, h12, d1]
 const wxString mmex::weblink::CoinCapHistory = "http://api.coincap.io/v2/assets/%s/history?interval=%s&start=%lld&end=%lld";
 
+const wxString mmex::weblink::GeneralReport = "https://moneymanagerex.org/general-reports/";
+
 /* End namespace weblink */
 
 const wxString LANGUAGE_PARAMETER = "LANGUAGE";
-const wxString INIDB_USE_CURRENCY_HISTORY = "USECURRENCYHISTORY";
 const wxString INIDB_USE_TRANSACTION_SOUND = "USETRANSSOUND";
 const wxString INIDB_USE_ORG_DATE_COPYPASTE = "USEORIGDATEONCOPYPASTE";
 const wxString INIDB_USE_ORG_DATE_DUPLICATE = "USEORIGDATEONDUPLICATE";
 const wxString INIDB_SEND_USAGE_STATS = "SENDUSAGESTATS";
-const wxString INIDB_CHECK_NEWS = "CHECKNEWS";
 
-const wxString VIEW_ACCOUNTS_ALL_STR = wxTRANSLATE("ALL");
-const wxString VIEW_ACCOUNTS_OPEN_STR = wxTRANSLATE("Open");
-const wxString VIEW_ACCOUNTS_CLOSED_STR = wxTRANSLATE("Closed");
-const wxString VIEW_ACCOUNTS_FAVORITES_STR = wxTRANSLATE("Favorites");
-
-const wxString INIDB_HIDE_SHARE_ACCOUNTS          = "HIDE_SHARE_ACCOUNTS";
-const wxString INIDB_HIDE_DELETED_TRANSACTIONS    = "HIDE_DELETED_TRANSACTIONS";
-const wxString INIDB_BUDGET_FINANCIAL_YEARS       = "BUDGET_FINANCIAL_YEARS";
-const wxString INIDB_BUDGET_INCLUDE_TRANSFERS     = "BUDGET_INCLUDE_TRANSFERS";
-const wxString INIDB_BUDGET_SETUP_WITHOUT_SUMMARY = "BUDGET_SETUP_WITHOUT_SUMMARY";
-const wxString INIDB_BUDGET_SUMMARY_WITHOUT_CATEG = "BUDGET_SUMMARY_WITHOUT_CATEGORIES";
-const wxString INIDB_BUDGET_OVERRIDE              = "BUDGET_OVERRIDE";
-const wxString INIDB_BUDGET_DEDUCT_MONTH_FROM_YEAR = "BUDGET_DEDUCT_MONTH_FROM_YEAR";
-const wxString INIDB_IGNORE_FUTURE_TRANSACTIONS   = "IGNORE_FUTURE_TRANSACTIONS";
-const wxString INIDB_SHOW_TOOLTIPS                = "IGNORE_SHOW_TOOLTIPS";
-const wxString INIDB_SHOW_MONEYTIPS               = "IGNORE_SHOW_MONEYTIPS";
+const wxString VIEW_ACCOUNTS_ALL_STR       = _n("ALL");
+const wxString VIEW_ACCOUNTS_OPEN_STR      = _n("Open");
+const wxString VIEW_ACCOUNTS_CLOSED_STR    = _n("Closed");
+const wxString VIEW_ACCOUNTS_FAVORITES_STR = _n("Favorites");
 
 const wxString ATTACHMENTS_FOLDER_DOCUMENTS = "%DOCUMENTS%";
 const wxString ATTACHMENTS_FOLDER_DATABASE = "%DATABASE%";
diff -Naur a/src/constants.h b/src/constants.h
--- a/src/constants.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/constants.h	2025-07-09 01:46:59.628940390 +0200
@@ -91,6 +91,7 @@
     extern const wxString YahooQuotesHistory;
     extern const wxString CoinCapSearch;
     extern const wxString CoinCapHistory;
+    extern const wxString GeneralReport;
 } // namespace weblink
 } // namespace mmex
 
@@ -100,23 +101,10 @@
 extern const wxString VIEW_ACCOUNTS_FAVORITES_STR;
 
 extern const wxString LANGUAGE_PARAMETER;
-extern const wxString INIDB_USE_CURRENCY_HISTORY;
 extern const wxString INIDB_USE_TRANSACTION_SOUND;
 extern const wxString INIDB_USE_ORG_DATE_COPYPASTE;
 extern const wxString INIDB_USE_ORG_DATE_DUPLICATE;
 extern const wxString INIDB_SEND_USAGE_STATS;
-extern const wxString INIDB_CHECK_NEWS;
-
-extern const wxString INIDB_HIDE_SHARE_ACCOUNTS;
-extern const wxString INIDB_HIDE_DELETED_TRANSACTIONS;
-extern const wxString INIDB_BUDGET_FINANCIAL_YEARS;
-extern const wxString INIDB_BUDGET_INCLUDE_TRANSFERS;
-extern const wxString INIDB_BUDGET_SUMMARY_WITHOUT_CATEG;
-extern const wxString INIDB_BUDGET_OVERRIDE;
-extern const wxString INIDB_BUDGET_DEDUCT_MONTH_FROM_YEAR;
-extern const wxString INIDB_IGNORE_FUTURE_TRANSACTIONS;
-extern const wxString INIDB_SHOW_TOOLTIPS;
-extern const wxString INIDB_SHOW_MONEYTIPS;
 
 extern const wxString ATTACHMENTS_FOLDER_DOCUMENTS;
 extern const wxString ATTACHMENTS_FOLDER_DATABASE;
diff -Naur a/src/currencydialog.cpp b/src/currencydialog.cpp
--- a/src/currencydialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/currencydialog.cpp	2025-07-09 01:46:59.628940390 +0200
@@ -72,11 +72,11 @@
         m_currency->SCALE = 100;
         m_currency->DECIMAL_POINT = ".";
         m_currency->GROUP_SEPARATOR = ",";
-        m_currency->CURRENCY_TYPE = Model_Currency::TYPE_STR_FIAT;
+        m_currency->CURRENCY_TYPE = Model_Currency::TYPE_NAME_FIAT;
     }
 
     // Check if locale will be used in preference
-    const wxString locale = Model_Infotable::instance().GetStringInfo("LOCALE", "");
+    const wxString locale = Model_Infotable::instance().getString("LOCALE", "");
     m_locale_used = false;
     if (!locale.empty())
     {
@@ -109,7 +109,7 @@
 
     if (!m_currency)
     {
-        mmSingleChoiceDialog select_currency_name(this, _("Currency name"), _("Select Currency")
+        mmSingleChoiceDialog select_currency_name(this, _t("Currency name"), _t("Select Currency")
             , Model_Currency::instance().all_currency_names());
         if (select_currency_name.ShowModal() == wxID_OK)
         {
@@ -185,50 +185,50 @@
     itemBoxSizer2->Add(itemFlexGridSizer3, g_flagsExpand);
 
     //--------------------------
-    itemFlexGridSizer3->Add(new wxStaticText(this, wxID_STATIC, _("Currency Name")), g_flagsH);
+    itemFlexGridSizer3->Add(new wxStaticText(this, wxID_STATIC, _t("Currency Name")), g_flagsH);
     mctrl_name = new wxTextCtrl(this, ID_DIALOG_CURRENCY);
     mctrl_name->SetMinSize(wxSize(220, -1));
     itemFlexGridSizer3->Add(mctrl_name, g_flagsExpand);
 
-    itemFlexGridSizer3->Add(new wxStaticText(this, wxID_STATIC, _("Currency Code")), g_flagsH);
+    itemFlexGridSizer3->Add(new wxStaticText(this, wxID_STATIC, _t("Currency Code")), g_flagsH);
     mctrl_code = new wxTextCtrl(this, ID_DIALOG_CURRENCY);
     mctrl_code->SetMaxLength(12);
     itemFlexGridSizer3->Add(mctrl_code, g_flagsExpand);
 
-    itemFlexGridSizer3->Add(new wxStaticText(this, wxID_STATIC, _("Currency Symbol")), g_flagsH);
+    itemFlexGridSizer3->Add(new wxStaticText(this, wxID_STATIC, _t("Currency Symbol")), g_flagsH);
     mctrl_symbol = new wxTextCtrl(this, ID_DIALOG_CURRENCY, "");
     itemFlexGridSizer3->Add(mctrl_symbol, g_flagsExpand);
 
-    itemFlexGridSizer3->Add(new wxStaticText(this, wxID_STATIC, _("Symbol Location")), g_flagsH);
-    mctrl_prefix = new wxRadioButton(this, ID_DIALOG_CURRENCY, _("Prefix"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP);
-    mctrl_suffix = new wxRadioButton(this, ID_DIALOG_CURRENCY, _("Suffix"), wxDefaultPosition, wxDefaultSize);
+    itemFlexGridSizer3->Add(new wxStaticText(this, wxID_STATIC, _t("Symbol Location")), g_flagsH);
+    mctrl_prefix = new wxRadioButton(this, ID_DIALOG_CURRENCY, _t("Prefix"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP);
+    mctrl_suffix = new wxRadioButton(this, ID_DIALOG_CURRENCY, _t("Suffix"), wxDefaultPosition, wxDefaultSize);
     wxBoxSizer* radSizer = new wxBoxSizer(wxHORIZONTAL);
     radSizer->Add(mctrl_prefix);
     radSizer->Add(mctrl_suffix);
     itemFlexGridSizer3->Add(radSizer, g_flagsExpand);
 
-    itemFlexGridSizer3->Add(new wxStaticText(this, wxID_STATIC, _("Decimal Char")), g_flagsH);
+    itemFlexGridSizer3->Add(new wxStaticText(this, wxID_STATIC, _t("Decimal Char")), g_flagsH);
     mctrl_decimalSep = new wxChoice(this, ID_DIALOG_CURRENCY);
     itemFlexGridSizer3->Add(mctrl_decimalSep, g_flagsExpand);
-    mctrl_decimalSep->Append(_("Dot"), new wxStringClientData("."));
-    mctrl_decimalSep->Append(_("Comma"), new wxStringClientData(","));
+    mctrl_decimalSep->Append(_t("Dot"), new wxStringClientData("."));
+    mctrl_decimalSep->Append(_t("Comma"), new wxStringClientData(","));
 
-    itemFlexGridSizer3->Add(new wxStaticText(this, wxID_STATIC, _("Grouping Char")), g_flagsH);
+    itemFlexGridSizer3->Add(new wxStaticText(this, wxID_STATIC, _t("Grouping Char")), g_flagsH);
     mctrl_groupSep = new wxChoice(this, ID_DIALOG_CURRENCY);
     itemFlexGridSizer3->Add(mctrl_groupSep, g_flagsExpand);
-    mctrl_groupSep->Append(_("None"), new wxStringClientData(""));    
-    mctrl_groupSep->Append(_("Dot"), new wxStringClientData("."));
-    mctrl_groupSep->Append(_("Comma"), new wxStringClientData(","));
-    mctrl_groupSep->Append(_("Space"), new wxStringClientData(" "));
+    mctrl_groupSep->Append(_t("None"), new wxStringClientData(""));    
+    mctrl_groupSep->Append(_t("Dot"), new wxStringClientData("."));
+    mctrl_groupSep->Append(_t("Comma"), new wxStringClientData(","));
+    mctrl_groupSep->Append(_t("Space"), new wxStringClientData(" "));
 
     wxIntegerValidator<int> valInt(&m_scale, wxNUM_VAL_THOUSANDS_SEPARATOR);
     valInt.SetMin(0); // Only allow positive numbers
     valInt.SetMax(SCALE);
-    itemFlexGridSizer3->Add(new wxStaticText(this, wxID_STATIC, _("Scale")), g_flagsH);
+    itemFlexGridSizer3->Add(new wxStaticText(this, wxID_STATIC, _t("Scale")), g_flagsH);
     mctrl_scale = new wxTextCtrl(this, ID_DIALOG_CURRENCY, "", wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT, valInt);
     itemFlexGridSizer3->Add(mctrl_scale, g_flagsExpand);
 
-    itemFlexGridSizer3->Add(new wxStaticText(this, wxID_STATIC, _("Conversion to Base Rate")), g_flagsH);
+    itemFlexGridSizer3->Add(new wxStaticText(this, wxID_STATIC, _t("Conversion to Base Rate")), g_flagsH);
     mctrl_baseConvRate = new mmTextCtrl(this, ID_DIALOG_CURRENCY_RATE, ""
         , wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT | wxTE_PROCESS_ENTER
         , mmCalcValidator());
@@ -236,15 +236,15 @@
         , wxCommandEventHandler(mmCurrencyDialog::OnTextEntered), nullptr, this);
     mctrl_baseConvRate->SetAltPrecision(SCALE);
     wxString ConvRateTooltip = wxEmptyString;
-    if (Option::instance().getCurrencyHistoryEnabled())
-        ConvRateTooltip = _("Conversion rate will be used in case no currency history has been found for the currency");
+    if (Option::instance().getUseCurrencyHistory())
+        ConvRateTooltip = _t("Conversion rate will be used in case no currency history has been found for the currency");
     else
-        ConvRateTooltip = _("Fixed conversion rate");
+        ConvRateTooltip = _t("Fixed conversion rate");
     mmToolTip(mctrl_baseConvRate, ConvRateTooltip);
     itemFlexGridSizer3->Add(mctrl_baseConvRate, g_flagsExpand);
 
     //--------------------------
-    wxStaticBox* itemStaticBox_01 = new wxStaticBox(this, wxID_STATIC, _("Currency Format Sample:"));
+    wxStaticBox* itemStaticBox_01 = new wxStaticBox(this, wxID_STATIC, _t("Currency Format Sample:"));
     wxStaticBoxSizer* itemStaticBoxSizer_01 = new wxStaticBoxSizer(itemStaticBox_01, wxHORIZONTAL);
     itemBoxSizer2->Add(itemStaticBoxSizer_01, wxSizerFlags(g_flagsExpand).Proportion(0));
 
@@ -256,13 +256,13 @@
     wxBoxSizer* itemBoxSizer22 = new wxBoxSizer(wxHORIZONTAL);
     itemBoxSizer2->Add(itemBoxSizer22, wxSizerFlags(g_flagsV).Centre());
 
-    wxButton* itemButton24 = new wxButton(this, wxID_OK, _("&OK "));
+    wxButton* itemButton24 = new wxButton(this, wxID_OK, _t("&OK "));
     itemBoxSizer22->Add(itemButton24, g_flagsH);
-    mmToolTip(itemButton24, _("Save any changes made"));
+    mmToolTip(itemButton24, _t("Save any changes made"));
 
     wxButton* itemButton25 = new wxButton(this, wxID_CANCEL, wxGetTranslation(g_CloseLabel));
     itemBoxSizer22->Add(itemButton25, g_flagsH);
-    mmToolTip(itemButton25, _("Any changes will be lost without update"));
+    mmToolTip(itemButton25, _t("Any changes will be lost without update"));
 }
 
 void mmCurrencyDialog::OnOk(wxCommandEvent& WXUNUSED(event))
@@ -281,14 +281,14 @@
 
     if (m_currency->SCALE > 1)
         if (m_currency->GROUP_SEPARATOR == m_currency->DECIMAL_POINT) {
-            return mmErrorDialogs::ToolTip4Object(mctrl_groupSep, _("Invalid Entry")
-                        , _("Grouping character is unable to be the same as the decimal character"));
+            return mmErrorDialogs::ToolTip4Object(mctrl_groupSep, _t("Invalid Entry")
+                        , _t("Grouping character is unable to be the same as the decimal character"));
         }
 
     if (mctrl_baseConvRate->Calculate(SCALE))
         mctrl_baseConvRate->GetDouble(m_currency->BASECONVRATE);
     if (!mctrl_baseConvRate->checkValue(m_currency->BASECONVRATE))
-        return mmErrorDialogs::ToolTip4Object(mctrl_baseConvRate, _("Invalid Entry"), _("Conversion to Base Rate"));;
+        return mmErrorDialogs::ToolTip4Object(mctrl_baseConvRate, _t("Invalid Entry"), _t("Conversion to Base Rate"));;
 
     Model_Currency::instance().save(m_currency);
     EndModal(wxID_OK);
@@ -306,8 +306,8 @@
     int scale = wxAtoi(mctrl_scale->GetValue());
 
     if ((scale > 0) && (grouping == decimal))
-        mmErrorDialogs::ToolTip4Object(mctrl_groupSep, _("Invalid Entry")
-                , _("Grouping character is unable to be the same as the decimal character"));
+        mmErrorDialogs::ToolTip4Object(mctrl_groupSep, _t("Invalid Entry")
+                , _t("Grouping character is unable to be the same as the decimal character"));
 
     mctrl_decimalSep->Enable(!m_locale_used && scale > 0); 
 
@@ -329,9 +329,9 @@
     wxString dispAmount = "";
     double base_amount = 1234567.89;
 
-    dispAmount = wxString::Format(_("%.2f Shown As: %s"), base_amount, Model_Currency::toCurrency(base_amount, m_currency, scale));
+    dispAmount = wxString::Format(_t("%.2f Shown As: %s"), base_amount, Model_Currency::toCurrency(base_amount, m_currency, scale));
     if (m_locale_used)
-        dispAmount = dispAmount + "  " + _("(Using Locale)");
+        dispAmount = dispAmount + "  " + _t("(Using Locale)");
     mctrl_sampleText->SetLabelText(dispAmount);
 }
 
diff -Naur a/src/currencydialog.h b/src/currencydialog.h
--- a/src/currencydialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/currencydialog.h	2025-07-09 01:46:59.628940390 +0200
@@ -45,7 +45,7 @@
 
 private:
     bool Create(wxWindow* parent, wxWindowID id = wxID_ANY,
-        const wxString& caption = _("Currency Manager"),
+        const wxString& caption = _t("Currency Manager"),
         const wxString& name = "Currency Manager",
         const wxPoint& pos = wxDefaultPosition,
         const wxSize& size = wxDefaultSize,
diff -Naur a/src/customfieldeditdialog.cpp b/src/customfieldeditdialog.cpp
--- a/src/customfieldeditdialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/customfieldeditdialog.cpp	2025-07-09 01:46:59.628940390 +0200
@@ -26,7 +26,6 @@
 #include "paths.h"
 #include "util.h"
 
-#include "Model_Attachment.h"
 #include "Model_CustomField.h"
 #include "Model_CustomFieldData.h"
 
@@ -43,7 +42,7 @@
 
 mmCustomFieldEditDialog::mmCustomFieldEditDialog(wxWindow* parent, Model_CustomField::Data* field)
     : m_field(field)
-    , m_fieldRefType(Model_Attachment::REFTYPE_STR_TRANSACTION)
+    , m_fieldRefType(Model_Checking::refTypeName)
 {
     this->SetFont(parent->GetFont());
     Create(parent);
@@ -76,7 +75,7 @@
     {
         m_itemDescription->SetValue(m_field->DESCRIPTION);
         m_itemType->SetSelection(Model_CustomField::type_id(m_field));
-        m_itemReference->SetSelection(Model_CustomField::getReference(m_field->REFTYPE));
+        m_itemReference->SetSelection(Model_CustomField::reftype_id(m_field->REFTYPE));
         m_itemTooltip->SetValue(Model_CustomField::getTooltip(m_field->PROPERTIES));
         m_itemRegEx->SetValue(Model_CustomField::getRegEx(m_field->PROPERTIES));
         m_itemAutocomplete->SetValue(Model_CustomField::getAutocomplete(m_field->PROPERTIES));
@@ -94,7 +93,7 @@
     }
     else
     {
-        m_itemReference->SetSelection(Model_CustomField::getReference(m_fieldRefType));
+        m_itemReference->SetSelection(Model_CustomField::reftype_id(m_fieldRefType));
         m_itemType->SetSelection(Model_CustomField::TYPE_ID_STRING);
         m_itemUDFC->SetSelection(0);
     }
@@ -110,7 +109,7 @@
     wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxVERTICAL);
     itemBoxSizer2->Add(itemBoxSizer3, g_flagsExpand);
 
-    wxStaticBox* itemStaticBoxSizer4Static = new wxStaticBox(this, wxID_ANY, _("Custom Field Details"));
+    wxStaticBox* itemStaticBoxSizer4Static = new wxStaticBox(this, wxID_ANY, _t("Custom Field Details"));
     wxStaticBoxSizer* itemStaticBoxSizer4 = new wxStaticBoxSizer(itemStaticBoxSizer4Static, wxVERTICAL);
     itemBoxSizer3->Add(itemStaticBoxSizer4, g_flagsExpand);
 
@@ -121,68 +120,72 @@
     itemFlexGridSizer6->AddGrowableCol(1, 1);
     itemPanel5->SetSizer(itemFlexGridSizer6);
 
-    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _("Attribute of")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _t("Attribute of")), g_flagsH);
     m_itemReference = new wxChoice(itemPanel5, wxID_HIGHEST);
-    for (const auto& type : Model_Attachment::REFTYPE_CHOICES) {
-        if (type.first != Model_Attachment::REFTYPE_ID_BILLSDEPOSIT)
-            m_itemReference->Append(wxGetTranslation(type.second), new wxStringClientData(type.second));
+    for (int i = 0; i < Model_CustomField::REFTYPE_ID_size; ++i) {
+        if (i != Model_CustomField::REFTYPE_ID_BILLSDEPOSIT) {
+            wxString reftype = ModelBase::reftype_name(i);
+            m_itemReference->Append(wxGetTranslation(reftype), new wxStringClientData(reftype));
+        }
     }
-    mmToolTip(m_itemReference, _("Select the item that the custom field is associated with"));
+    mmToolTip(m_itemReference, _t("Select the item that the custom field is associated with"));
     itemFlexGridSizer6->Add(m_itemReference, g_flagsExpand);
     m_itemReference->Enable(false);
 
-    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _("Name")), g_flagsExpand);
+    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _t("Name")), g_flagsExpand);
     m_itemDescription = new wxTextCtrl(itemPanel5, wxID_ANY);
     m_itemDescription->SetMinSize(wxSize(150, -1));
 
-    mmToolTip(m_itemDescription, _("Enter the name of the custom field"));
+    mmToolTip(m_itemDescription, _t("Enter the name of the custom field"));
     itemFlexGridSizer6->Add(m_itemDescription, g_flagsExpand);
 
-    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _("Field Type")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _t("Field Type")), g_flagsH);
     m_itemType = new wxChoice(itemPanel5, wxID_HIGHEST);
-    for (const auto& type : Model_CustomField::TYPE_STR)
+    for (int i = 0; i < Model_CustomField::TYPE_ID_size; ++i) {
+        wxString type = Model_CustomField::type_name(i);
         m_itemType->Append(wxGetTranslation(type), new wxStringClientData(type));
-    mmToolTip(m_itemType, _("Select type of custom field"));
+    }
+    mmToolTip(m_itemType, _t("Select type of custom field"));
     itemFlexGridSizer6->Add(m_itemType, g_flagsExpand);
 
-    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _("Tooltip")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _t("Tooltip")), g_flagsH);
     m_itemTooltip = new wxTextCtrl(itemPanel5, wxID_ANY, "");
-    mmToolTip(m_itemTooltip, _("Enter the tooltip that will be shown"));
+    mmToolTip(m_itemTooltip, _t("Enter the tooltip that will be shown"));
     itemFlexGridSizer6->Add(m_itemTooltip, g_flagsExpand);
 
-    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _("RegEx")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _t("RegEx")), g_flagsH);
     m_itemRegEx = new wxTextCtrl(itemPanel5, wxID_ANY, R"(^.+$)");
-    mmToolTip(m_itemRegEx, _("Enter the RegEx to validate field"));
+    mmToolTip(m_itemRegEx, _t("Enter the RegEx to validate field"));
     itemFlexGridSizer6->Add(m_itemRegEx, g_flagsExpand);
 
-    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _("Autocomplete")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _t("Autocomplete")), g_flagsH);
     m_itemAutocomplete = new wxCheckBox(itemPanel5, wxID_STATIC, "", wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     m_itemAutocomplete->SetValue(FALSE);
-    mmToolTip(m_itemAutocomplete, _("Enables autocomplete on custom field"));
+    mmToolTip(m_itemAutocomplete, _t("Enables autocomplete on custom field"));
     itemFlexGridSizer6->Add(m_itemAutocomplete, g_flagsExpand);
 
-    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _("Default")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _t("Default")), g_flagsH);
     m_itemDefault = new wxTextCtrl(itemPanel5, wxID_ANY, "");
-    m_itemDefault->SetToolTip(_("Enter the default for this field\n"
+    m_itemDefault->SetToolTip(_t("Enter the default for this field\n"
         "For date/time insert 'Now' to make current date/time as default"));
     itemFlexGridSizer6->Add(m_itemDefault, g_flagsExpand);
 
-    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _("Choices")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _t("Choices")), g_flagsH);
     m_itemChoices = new wxTextCtrl(itemPanel5, wxID_ANY, "");
-    mmToolTip(m_itemChoices, _("Enter the choices for this field separated with a semicolon"));
+    mmToolTip(m_itemChoices, _t("Enter the choices for this field separated with a semicolon"));
     itemFlexGridSizer6->Add(m_itemChoices, g_flagsExpand);
 
-    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _("Digits scale")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _t("Digits scale")), g_flagsH);
     m_itemDigitScale = new wxSpinCtrl(itemPanel5, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 20, 0);
-    mmToolTip(m_itemDigitScale, _("Enter the decimal digits scale allowed"));
+    mmToolTip(m_itemDigitScale, _t("Enter the decimal digits scale allowed"));
     itemFlexGridSizer6->Add(m_itemDigitScale, g_flagsExpand);
 
-    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _("Panel's column")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _t("Panel's column")), g_flagsH);
     m_itemUDFC = new wxChoice(itemPanel5, wxID_APPLY);
     for (const auto& type : Model_CustomField::getUDFCList(m_field)) {
         m_itemUDFC->Append(wxGetTranslation(type), new wxStringClientData(type));
     }
-    mmToolTip(m_itemUDFC, _("Select a value to represent the item on a panel"));
+    mmToolTip(m_itemUDFC, _t("Select a value to represent the item on a panel"));
     itemFlexGridSizer6->Add(m_itemUDFC, g_flagsExpand);
 
     wxPanel* itemPanel27 = new wxPanel(this, wxID_STATIC, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
@@ -191,7 +194,7 @@
     wxBoxSizer* itemBoxSizer28 = new wxBoxSizer(wxHORIZONTAL);
     itemPanel27->SetSizer(itemBoxSizer28);
 
-    wxButton* itemButton29 = new wxButton(itemPanel27, wxID_OK, _("&OK "));
+    wxButton* itemButton29 = new wxButton(itemPanel27, wxID_OK, _t("&OK "));
     itemBoxSizer28->Add(itemButton29, g_flagsH);
 
     wxButton* itemButton30 = new wxButton(itemPanel27, wxID_CANCEL, wxGetTranslation(g_CancelLabel));
@@ -217,22 +220,22 @@
     int itemType = m_itemType->GetSelection();
     if (ArrChoices.IsEmpty() && (itemType == Model_CustomField::TYPE_ID_SINGLECHOICE || itemType == Model_CustomField::TYPE_ID_MULTICHOICE))
     {
-        return mmErrorDialogs::ToolTip4Object(m_itemChoices, _("Empty value"), _("Choices"));
+        return mmErrorDialogs::ToolTip4Object(m_itemChoices, _t("Empty value"), _t("Choices"));
     }
 
     if (!this->m_field)
     {
         this->m_field = Model_CustomField::instance().create();
     }
-    else if (m_field->TYPE != Model_CustomField::TYPE_STR[m_itemType->GetSelection()])
+    else if (m_field->TYPE != Model_CustomField::type_name(m_itemType->GetSelection()))
     {
         auto DataSet = Model_CustomFieldData::instance().find(Model_CustomFieldData::FIELDID(m_field->FIELDID));
         if (DataSet.size() > 0)
         {
             int DeleteResponse = wxMessageBox(
-                _("Changing field type will delete all content!") + "\n"
-                + _("Do you want to proceed?") << "\n"
-                , _("Custom Field Change")
+                _t("Changing field type will delete all content!") + "\n"
+                + _t("Do you want to continue?") << "\n"
+                , _t("Custom Field Change")
                 , wxYES_NO | wxNO_DEFAULT | wxICON_ERROR);
             if (DeleteResponse != wxYES)
                 return;
@@ -252,9 +255,9 @@
         if (DataSet.size() > 0)
         {
             int DeleteResponse = wxMessageBox(
-                _("You have modified choices: ones removed will be cleaned!") + "\n"
-                + _("Do you want to proceed?") << "\n"
-                , _("Custom Field Change")
+                _t("Modified choices available: ones removed will be cleaned!") + "\n"
+                + _t("Do you want to continue?") << "\n"
+                , _t("Custom Field Change")
                 , wxYES_NO | wxNO_DEFAULT | wxICON_EXCLAMATION);
             if (DeleteResponse != wxYES)
                 return;
@@ -280,7 +283,7 @@
 
     m_field->REFTYPE = m_fieldRefType;
     m_field->DESCRIPTION = name;
-    m_field->TYPE = Model_CustomField::TYPE_STR[m_itemType->GetSelection()];
+    m_field->TYPE = Model_CustomField::type_name(m_itemType->GetSelection());
     m_field->PROPERTIES = Model_CustomField::formatProperties(
         m_itemTooltip->GetValue(),
         regexp,
diff -Naur a/src/customfieldeditdialog.h b/src/customfieldeditdialog.h
--- a/src/customfieldeditdialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/customfieldeditdialog.h	2025-07-09 01:46:59.628940390 +0200
@@ -19,6 +19,7 @@
 #ifndef MM_EX_CUSTOMFIELDEDITDIALOG_H_
 #define MM_EX_CUSTOMFIELDEDITDIALOG_H_
 
+#include "defs.h"
 #include <wx/dialog.h>
 #include "Model_CustomField.h"
 class wxChoice;
@@ -38,7 +39,7 @@
 private:
     bool Create(wxWindow* parent
         , wxWindowID id = wxID_ANY
-        , const wxString& caption = _("New/Edit Custom Field")
+        , const wxString& caption = _t("New/Edit Custom Field")
         , const wxPoint& pos = wxDefaultPosition
         , const wxSize& size = wxDefaultSize
         , long style = wxCAPTION | wxSYSTEM_MENU | wxRESIZE_BORDER | wxCLOSE_BOX);
@@ -70,4 +71,4 @@
         IDC_RATE,
     };
 };
-#endif // MM_EX_CUSTOMFIELDEDITDIALOG_H_
\ Nincs új sor a fájl végén
+#endif // MM_EX_CUSTOMFIELDEDITDIALOG_H_
diff -Naur a/src/customfieldlistdialog.cpp b/src/customfieldlistdialog.cpp
--- a/src/customfieldlistdialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/customfieldlistdialog.cpp	2025-07-09 01:46:59.632940413 +0200
@@ -43,11 +43,11 @@
 
 mmCustomFieldListDialog::mmCustomFieldListDialog (wxWindow* parent)
 {
-    if (debug_) ColName_[FIELD_ID] = _("#");
-    ColName_[FIELD_REF] = _("Attribute of");
-    ColName_[FIELD_NAME] = _("Name");
-    ColName_[FIELD_TYPE] = _("Type");
-    ColName_[FIELD_PROPERTIES] = _("Properties");
+    if (debug_) ColName_[FIELD_ID] = "#";
+    ColName_[FIELD_REF] = _t("Attribute of");
+    ColName_[FIELD_NAME] = _t("Name");
+    ColName_[FIELD_TYPE] = _t("Type");
+    ColName_[FIELD_PROPERTIES] = _t("Properties");
 
     this->SetFont(parent->GetFont());
     Create(parent);
@@ -58,7 +58,7 @@
     SetExtraStyle(GetExtraStyle()|wxWS_EX_BLOCK_EVENTS);
     long style = wxCAPTION | wxCLOSE_BOX | wxRESIZE_BORDER;
 
-    wxString WindowTitle = wxString::Format(_("Custom Field Manager"));
+    wxString WindowTitle = wxString::Format(_t("Custom Field Manager"));
     if (!wxDialog::Create(parent, wxID_ANY, WindowTitle, wxDefaultPosition, wxDefaultSize, style))
         return;
     CreateControls();
@@ -91,7 +91,7 @@
     buttons_sizer->Add(btnClose, g_flagsH);
 
     wxBitmapButton* magicButton = new wxBitmapButton(buttons_panel, wxID_APPLY, mmBitmapBundle(png::MORE_OPTIONS, mmBitmapButtonSize));
-    mmToolTip(magicButton, _("Other tools"));
+    mmToolTip(magicButton, _t("Other tools"));
     buttons_sizer->Add(magicButton, g_flagsH);
 
     this->SetSizer(mainBoxSizer);
@@ -162,8 +162,8 @@
     if (field)
     {
         int DeleteResponse = wxMessageBox(
-            _("Do you really want to delete this custom field and all its data?")
-            , _("Confirm Custom Field Deletion")
+            _t("Do you want to delete the custom field and all its data?")
+            , _t("Confirm Custom Field Deletion")
             , wxYES_NO | wxNO_DEFAULT | wxICON_ERROR);
         if (DeleteResponse == wxYES)
         {
@@ -181,33 +181,33 @@
         return;
 
     int UpdateResponse = wxMessageBox(
-        wxString::Format(_("This function will bulk search & replace for \"%s\" custom field values\n"
+        wxString::Format(_t("This function will bulk search & replace for \"%s\" custom field values\n"
             "It will match & replace only complete field value, no partial or middle-value replaces allowed\n"
             "Please consider that there isn't any validation!"),field->DESCRIPTION)
-        , _("Confirm Custom Field Content Update")
+        , _t("Confirm Custom Field Content Update")
         , wxYES_NO | wxNO_DEFAULT | wxICON_WARNING);
     if (UpdateResponse != wxYES)
         return;
 
-    const wxString txtSearch = wxGetTextFromUser(_("Find what"), _("Update Custom Field Content"));
+    const wxString txtSearch = wxGetTextFromUser(_t("Find what"), _t("Update Custom Field Content"));
     if (txtSearch == "")
     {
         int Response = wxMessageBox(
-            _("Do you want to update blank content?\n"
-                "Press no if you want to abort replace procedure!")
-            , _("Update Custom Field Content")
+            _t("Do you want to update blank custom field content?\n"
+                "Select No if you want to abort the replace procedure.")
+            , _t("Update Custom Field Content")
             , wxYES_NO | wxNO_DEFAULT | wxICON_WARNING);
         if (Response != wxYES)
             return;
     }
 
-    const wxString txtReplace = wxGetTextFromUser(_("Replace with"), _("Update Custom Field Content"));
+    const wxString txtReplace = wxGetTextFromUser(_t("Replace with"), _t("Update Custom Field Content"));
     if (txtReplace == "")
     {
         int Response = wxMessageBox(
-            _("Do you want to update to blank?\n"
-                "Press no if you want to abort replace procedure!")
-            , _("Update Custom Field Content")
+            _t("Do you want to update blank custom field content?\n"
+                "Select No if you want to abort the replace procedure.")
+            , _t("Update Custom Field Content")
             , wxYES_NO | wxNO_DEFAULT | wxICON_WARNING);
         if (Response != wxYES)
             return;
@@ -222,7 +222,7 @@
     Model_CustomFieldData::instance().save(data);
 
     wxMessageBox(wxString::Format(wxPLURAL("%zu occurrence founded and replaced!", "%zu occurrences founded and replaced!", data.size()), data.size())
-        , _("Update Custom Field Content"), wxOK | wxICON_INFORMATION);
+        , _t("Update Custom Field Content"), wxOK | wxICON_INFORMATION);
 }
 
 void mmCustomFieldListDialog::OnMenuSelected(wxCommandEvent& event)
@@ -252,11 +252,11 @@
 
     wxMenu* mainMenu = new wxMenu;
     if (field) mainMenu->SetTitle(field->DESCRIPTION);
-    mainMenu->Append(new wxMenuItem(mainMenu, MENU_NEW_FIELD, _("&Add ")));
+    mainMenu->Append(new wxMenuItem(mainMenu, MENU_NEW_FIELD, _t("&Add ")));
     mainMenu->AppendSeparator();
-    mainMenu->Append(new wxMenuItem(mainMenu, MENU_EDIT_FIELD, _("&Edit ")));
-    mainMenu->Append(new wxMenuItem(mainMenu, MENU_DELETE_FIELD, _("&Remove ")));
-    mainMenu->Append(new wxMenuItem(mainMenu, MENU_UPDATE_FIELD, _("&Bulk content update ")));
+    mainMenu->Append(new wxMenuItem(mainMenu, MENU_EDIT_FIELD, _t("&Edit ")));
+    mainMenu->Append(new wxMenuItem(mainMenu, MENU_DELETE_FIELD, _t("&Remove ")));
+    mainMenu->Append(new wxMenuItem(mainMenu, MENU_UPDATE_FIELD, _t("&Bulk content update ")));
     if (!field)
     {
         mainMenu->Enable(MENU_EDIT_FIELD, false);
diff -Naur a/src/daterange2.cpp b/src/daterange2.cpp
--- a/src/daterange2.cpp	1970-01-01 01:00:00.000000000 +0100
+++ b/src/daterange2.cpp	2025-07-09 01:46:59.632940413 +0200
@@ -0,0 +1,585 @@
+/*******************************************************
+ Copyright (C) 2025 George Ef (george.a.ef@gmail.com)
+
+ This program is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2 of the License, or
+ (at your option) any later version.
+
+ This program is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program; if not, write to the Free Software
+ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ ********************************************************/
+
+#include "daterange2.h"
+#include "option.h"
+
+const DateRange2::PERIOD_INFO_t DateRange2::PERIOD_INFO[] =
+{
+    { PERIOD_ID_A, "A" },
+    { PERIOD_ID_Y, "Y" },
+    { PERIOD_ID_Q, "Q" },
+    { PERIOD_ID_M, "M" },
+    { PERIOD_ID_W, "W" },
+    { PERIOD_ID_T, "T" },
+    { PERIOD_ID_S, "S" },
+};
+DateRange2::PERIOD_LABEL_ID_t DateRange2::PERIOD_LABEL_ID = make_period_label_id();
+
+DateRange2::PERIOD_LABEL_ID_t DateRange2::make_period_label_id()
+{
+    PERIOD_LABEL_ID_t period_label_id;
+    for (int i = 0; i < static_cast<int>(sizeof(PERIOD_INFO)/sizeof(PERIOD_INFO[0])); ++i) {
+        char c = PERIOD_INFO[i].label[0];
+        period_label_id[c] = PERIOD_INFO[i].id;
+    }
+    return period_label_id;
+}
+
+DateRange2::Spec::Spec(
+    int so1_new, PERIOD_ID sp1_new,
+    int eo1_new, PERIOD_ID ep1_new,
+    int so2_new, PERIOD_ID sp2_new,
+    int eo2_new, PERIOD_ID ep2_new,
+    int f_new, wxString name_new
+) {
+    sp1 = (sp1_new == PERIOD_ID_none) ? PERIOD_ID_A : sp1_new;
+    ep1 = (ep1_new == PERIOD_ID_none) ? PERIOD_ID_A : ep1_new;
+    so1 = (sp1 == PERIOD_ID_A) ? 0 : so1_new;
+    eo1 = (ep1 == PERIOD_ID_A) ? 0 : eo1_new;
+    if (sp2_new == PERIOD_ID_none || ep2_new == PERIOD_ID_none) {
+        sp2 = PERIOD_ID_none; so2 = 0;
+        ep2 = PERIOD_ID_none; eo2 = 0;
+    }
+    else {
+        sp2 = sp2_new; so2 = (sp2 == PERIOD_ID_A) ? 0 : so2_new;
+        ep2 = ep2_new; eo2 = (ep2 == PERIOD_ID_A) ? 0 : eo2_new;
+    }
+    f = (f_new == 1) ? 1 : 0;
+    name = name_new;
+}
+
+void DateRange2::Spec::scanWhiteSpace(StringIt &str_i, StringIt str_end)
+{
+    const wxString ws = " \t\r\n"; 
+    while (str_i != str_end && ws.Find(*str_i) != wxNOT_FOUND)
+        str_i++;
+}
+
+// the returned token is one of: o (offset), f (F), p (period), . (..), (,), ; (end), _ (error)
+// token_o is set if token==o; token_p is set if token==p
+char DateRange2::Spec::scanToken(StringIt &str_i, StringIt str_end, int &token_o, PERIOD_ID &token_p)
+{
+    scanWhiteSpace(str_i, str_end);
+    if (str_i == str_end)
+        return ';';
+    char c;
+    if (!(*str_i).IsAscii() || !(*str_i).GetAsChar(&c))
+        return '_';
+
+    char c1 = 0;
+    if (c == '+' || c == '-') {
+        c1 = c;
+        str_i++;
+        if (str_i == str_end || !(*str_i).IsAscii() || !(*str_i).GetAsChar(&c))
+            return '_';
+    }
+    if (isdigit(c)) {
+        StringIt str_start = str_i;
+        do { str_i++; } while (
+            str_i != str_end && (*str_i).IsAscii() && (*str_i).GetAsChar(&c) && isdigit(c)
+        );
+        wxString str_o = "";
+        str_o.append(str_start, str_i);
+        token_o = wxAtoi(str_o);
+        if (c1 == '-') token_o = -token_o;
+        return 'o';
+    }
+    if (c1)
+        return '_';
+
+    if (c == 'F') {
+        str_i++;
+        return 'f';
+    }
+
+    auto label_it = PERIOD_LABEL_ID.find(c);
+    if (label_it != PERIOD_LABEL_ID.end()) {
+        str_i++;
+        token_p = label_it->second;
+        return 'p';
+    }
+
+    if (c == '.') {
+        c1 = c;
+        str_i++;
+        if (str_i == str_end || !(*str_i).IsAscii() || !(*str_i).GetAsChar(&c))
+            return '_';
+    }
+    if (c == '.') {
+        str_i++;
+        return '.';
+    }
+    if (c1)
+        return '_';
+
+    if (c == ',' || c == ';') {
+        str_i++;
+        return c;
+    }
+
+    return '_';
+}
+
+// return true if parse is successful
+bool DateRange2::Spec::parseLabel(StringIt &str_i, StringIt str_end)
+{
+    // range = subrange ("," subrange)? ("F")? (";" name)?
+    // subrange = so? sp ".." eo? ep
+    // subrange = so ".." eo p
+    // subrange = o? p
+
+    int so_new[2] = { 0, 0 }; PERIOD_ID sp_new[2] = { PERIOD_ID_none, PERIOD_ID_none };
+    int eo_new[2] = { 0, 0 }; PERIOD_ID ep_new[2] = { PERIOD_ID_none, PERIOD_ID_none };
+    int f_new = 0;
+    int i = 0;     // index into {s,e}{o,p}[] (0: first subrange, 1: second subrange)
+    int state = 0; // parse state: 0 (so) 1 (sp) 2 (..) 3 (eo) 4 (ep) 5 (f) 6 (;) 7
+
+    while (1) {
+        char token;                         // one of [ofp.,;_]
+        int token_o = 0;                    // offset (applicable if token == 'o')
+        PERIOD_ID token_p = PERIOD_ID_none; // period (applicable if token == 'p')
+        token = scanToken(str_i, str_end, token_o, token_p);
+        //wxLogDebug("DEBUG: state=%d, token=%c", state, token);
+        if (state == 0 && token == 'o') {
+            so_new[i] = token_o;
+            state = 1;
+            continue;
+        }
+        if ((state == 0 || state == 1) && token == 'p') {
+            sp_new[i] = token_p;
+            state = 2;
+            continue;
+        }
+        if ((state == 1 || state == 2) && token == '.') {
+            state = 3;
+            continue;
+        }
+        if (state == 3 && token == 'o') {
+            eo_new[i] = token_o;
+            state = 4;
+            continue;
+        }
+        if ((state == 3 || state == 4) && token == 'p') {
+            if (sp_new[i] == PERIOD_ID_none)
+                sp_new[i] = token_p;
+            ep_new[i] = token_p;
+            state = 5;
+            continue;
+        }
+        if (state == 2 && ((i == 0 && token == ',') || token == 'f' || token == ';')) {
+            eo_new[i] = so_new[i];
+            ep_new[i] = sp_new[i];
+            state = 5;
+        }
+        if (i == 0 && state == 5 && token == ',') {
+            i = 1;
+            state = 0;
+            continue;
+        }
+        if (state == 5 && token == 'f') {
+            f_new = 1;
+            state = 6;
+            continue;
+        }
+        if ((state == 5 || state == 6) && token == ';') {
+            state = 7;
+            break;
+        }
+        break;
+    }
+
+    if (state != 7) {
+        wxLogDebug("ERROR: DateRange2::parseLabel(): state=%d", state);
+        return false;
+    }
+
+    so1 = so_new[0]; sp1 = sp_new[0]; eo1 = eo_new[0]; ep1 = ep_new[0];
+    so2 = so_new[1]; sp2 = sp_new[1]; eo2 = eo_new[1]; ep2 = ep_new[1];
+    f = f_new;
+
+    return true;
+}
+
+void DateRange2::Spec::parseName(StringIt &str_i, StringIt str_end)
+{
+    name = "";
+    scanWhiteSpace(str_i, str_end);
+    name.append(str_i, str_end);
+}
+
+bool DateRange2::Spec::parseSpec(const wxString &str, const wxString &name_new)
+{
+    Spec spec_new = Spec();
+    StringIt str_i = str.begin();
+    if (!spec_new.parseLabel(str_i, str.end()))
+        return false;
+    if (!name_new.empty())
+        spec_new.name = name_new;
+    else
+        spec_new.parseName(str_i, str.end());
+    *this = spec_new;
+    return true;
+}
+
+const wxString DateRange2::Spec::offset_range_str(int so, int eo, bool show_zero)
+{
+    if (so == eo) {
+        return offset_str(so, show_zero);
+    }
+    else {
+        StringBuilder s;
+        s.append(offset_str(so, true));
+        s.append("..");
+        s.append(offset_str(eo, true));
+        return s.buffer;
+    }
+}
+
+const wxString DateRange2::Spec::getLabel() const
+{
+    StringBuilder sb;
+
+    // first range
+    wxString sp1_label = PERIOD_INFO[sp1].label;
+    if (sp1 == ep1) {
+        sb.append(offset_range_str(so1, eo1)); sb.sep(); sb.append(sp1_label);
+    }
+    else {
+        wxString ep1_label = PERIOD_INFO[ep1].label;
+        sb.append(offset_str(so1)); sb.sep(); sb.append(sp1_label);
+        sb.sep(); sb.append(".."); sb.sep();
+        sb.append(offset_str(eo1)); sb.sep(); sb.append(ep1_label);
+    }
+
+    // second range
+    if (sp2 != PERIOD_ID_none && ep2 != PERIOD_ID_none) {
+        sb.append(","); sb.sep();
+        wxString sp2_label = PERIOD_INFO[sp2].label;
+        if (sp2 == ep2) {
+            sb.append(offset_range_str(so2, eo2)); sb.sep(); sb.append(sp2_label);
+        }
+        else {
+            wxString ep2_label = PERIOD_INFO[ep2].label;
+            sb.append(offset_str(so2)); sb.sep(); sb.append(sp2_label);
+            sb.sep(); sb.append(".."); sb.sep();
+            sb.append(offset_str(eo2)); sb.sep(); sb.append(ep2_label);
+        }
+    }
+
+    // financial
+    if (f == 1) {
+        sb.sep(); sb.append("F");
+    }
+
+    return sb.buffer;
+}
+
+const wxString DateRange2::Spec::getLabelName() const
+{
+    wxString s = getLabel();
+    if (!name.empty()) {
+        s.append("; ");
+        s.append(name);
+    }
+    return s;
+}
+
+const wxString DateRange2::Spec::checking_name() const
+{
+    wxString str = getLabel();
+    // TODO
+    return str;
+}
+
+const wxString DateRange2::Spec::checking_description() const
+{
+    static StringBuilder sb;
+    sb.reset();
+    sb.append(getLabel());
+    // TODO
+    return sb.buffer;
+}
+
+DateRange2::DateRange2(wxDateTime date_s, wxDateTime date_t) :
+    firstDay{
+        Option::instance().getReportingFirstDay(),
+        Option::instance().getFinancialFirstDay()
+    },
+    firstMonth{
+        wxDateTime::Jan,
+        Option::instance().getFinancialFirstMonth()
+    },
+    firstWeekday(
+        Option::instance().getReportingFirstWeekday()
+    ),
+    spec(Spec())
+{
+    setDateT(date_t);
+    setDateS(date_s);
+}
+
+// return true if parse is successful
+bool DateRange2::parseSpec(const wxString &str, const wxString &name)
+{
+    Spec spec_new = Spec();
+    if (!spec_new.parseSpec(str, name))
+        return false;
+    spec = spec_new;
+    return true;
+}
+
+wxDateTime DateRange2::addOffset(wxDateTime date, int offset, PERIOD_ID period)
+{
+    if (offset == 0)
+        return date;
+    if (period == PERIOD_ID_Y)
+        return date + wxDateSpan::Years(offset);
+    else if (period == PERIOD_ID_Q)
+        return date + wxDateSpan::Months(3*offset);
+    else if (period == PERIOD_ID_M)
+        return date + wxDateSpan::Months(offset);
+    else if (period == PERIOD_ID_W)
+        return date + wxDateSpan::Weeks(offset);
+    else if (period == PERIOD_ID_T || period == PERIOD_ID_S)
+        return date + wxDateSpan::Days(offset);
+    else
+        return wxInvalidDateTime;
+}
+
+wxDateTime DateRange2::period_start(wxDateTime date, PERIOD_ID period) const
+{
+    if (date == wxInvalidDateTime || period < PERIOD_ID_Y || period > PERIOD_ID_S)
+        return wxInvalidDateTime;
+    wxDateTime start_date = date;
+    if (period == PERIOD_ID_Y || period == PERIOD_ID_Q || period == PERIOD_ID_M) {
+        if (start_date.GetDay() < firstDay[spec.f])
+            start_date -= wxDateSpan::Months(1);
+        start_date.SetDay(firstDay[spec.f]);
+        if (period == PERIOD_ID_Y) {
+            if (start_date.GetMonth() < firstMonth[spec.f])
+                start_date -= wxDateSpan::Years(1);
+            start_date.SetMonth(firstMonth[spec.f]);
+        }
+        else if (period == PERIOD_ID_Q) {
+            int m = (start_date.GetMonth() - firstMonth[spec.f] + 12) % 3;
+            if (m > 0)
+                start_date -= wxDateSpan::Months(m);
+        }
+    }
+    else if (period == PERIOD_ID_W) {
+        int d = (start_date.GetWeekDay() - firstWeekday + 7) % 7;
+        if (d > 0)
+            start_date -= wxDateSpan::Days(d);
+    }
+    return start_date;
+}
+
+wxDateTime DateRange2::period_end(wxDateTime date, PERIOD_ID period) const
+{
+    if (date == wxInvalidDateTime || period < PERIOD_ID_Y || period > PERIOD_ID_S)
+        return wxInvalidDateTime;
+    wxDateTime end_date = date;
+    if (period == PERIOD_ID_Y || period == PERIOD_ID_Q || period == PERIOD_ID_M) {
+        if (end_date.GetDay() >= firstDay[spec.f])
+            end_date += wxDateSpan::Months(1);
+        end_date.SetDay(firstDay[spec.f]);
+        if (period == PERIOD_ID_Y) {
+            if (end_date.GetMonth() > firstMonth[spec.f])
+                end_date += wxDateSpan::Years(1);
+            end_date.SetMonth(firstMonth[spec.f]);
+        }
+        else if (period == PERIOD_ID_Q) {
+            int m = (firstMonth[spec.f] - end_date.GetMonth() + 12) % 3;
+            if (m > 0)
+                end_date += wxDateSpan::Months(m);
+        }
+        end_date -= wxDateSpan::Days(1);
+    }
+    else if (period == PERIOD_ID_W) {
+        int d = (firstWeekday - end_date.GetWeekDay() + 6) % 7;
+        if (d > 0)
+            end_date += wxDateSpan::Days(d);
+    }
+    return end_date;
+}
+
+wxDateTime DateRange2::checking_start() const
+{
+    if (spec.sp1 == PERIOD_ID_A || spec.sp2 == PERIOD_ID_A)
+        return wxInvalidDateTime;
+    wxDateTime start_date1 = (spec.sp1 == PERIOD_ID_S) ? date_s : date_t;
+    start_date1 = addOffset(start_date1, spec.so1, spec.sp1);
+    start_date1 = period_start(start_date1, spec.sp1);
+    if (start_date1 == wxInvalidDateTime || spec.sp2 == PERIOD_ID_none || spec.ep2 == PERIOD_ID_none)
+        return start_date1;
+    wxDateTime start_date2 = (spec.sp2 == PERIOD_ID_S) ? date_s : date_t;
+    start_date2 = addOffset(start_date2, spec.so2, spec.sp2);
+    start_date2 = period_start(start_date2, spec.sp1 > spec.sp2 ? spec.sp1 : spec.sp2);
+    if (start_date2 == wxInvalidDateTime)
+        return wxInvalidDateTime;
+    return start_date1 <= start_date2 ? start_date1 : start_date2;
+}
+
+wxDateTime DateRange2::checking_end() const
+{
+    if (spec.ep1 == PERIOD_ID_A || spec.ep2 == PERIOD_ID_A)
+        return wxInvalidDateTime;
+    wxDateTime end_date1 = (spec.ep1 == PERIOD_ID_S) ? date_s : date_t;
+    end_date1 = addOffset(end_date1, spec.eo1, spec.ep1);
+    end_date1 = period_end(end_date1, spec.ep1);
+    if (end_date1 == wxInvalidDateTime || spec.sp2 == PERIOD_ID_none || spec.ep2 == PERIOD_ID_none)
+        return end_date1;
+    wxDateTime end_date2 = (spec.ep2 == PERIOD_ID_S) ? date_s : date_t;
+    end_date2 = addOffset(end_date2, spec.eo2, spec.ep2);
+    end_date2 = period_end(end_date2, spec.ep1 > spec.ep2 ? spec.ep1 : spec.ep2);
+    if (end_date2 == wxInvalidDateTime)
+        return wxInvalidDateTime;
+    return end_date1 >= end_date2 ? end_date1 : end_date2;
+}
+
+wxDateTime DateRange2::reporting_start() const
+{
+    // TODO
+    return wxInvalidDateTime;
+}
+
+wxDateTime DateRange2::reporting_end() const
+{
+    // TODO
+    return wxInvalidDateTime;
+}
+
+const wxString DateRange2::checking_tooltip() const
+{
+    static StringBuilder sb;
+    sb.reset();
+
+    wxDateTime date1 = checking_start();
+    wxDateTime date2 = checking_end();
+    if (date1 != wxInvalidDateTime)
+        sb.append(dateISO(date1));
+    sb.sep(); sb.append(".."); sb.sep();
+    if (date2 != wxInvalidDateTime)
+        sb.append(dateISO(date2));
+    sb.flush();
+
+    sb.append("\n");
+    sb.append(spec.checking_description());
+    return sb.buffer;
+}
+
+const wxString DateRange2::reporting_tooltip() const
+{
+    // TODO
+    return "";
+}
+
+
+#ifndef NDEBUG
+DateRange2::DateRange2(
+    int firstDay_new_0, int firstDay_new_1,
+    wxDateTime::Month firstMonth_new_0, wxDateTime::Month firstMonth_new_1,
+    wxDateTime::WeekDay firstWeekday_new,
+    wxDateTime date_t_new, wxDateTime date_s_new
+) :
+    firstDay{firstDay_new_0, firstDay_new_1},
+    firstMonth{firstMonth_new_0, firstMonth_new_1},
+    firstWeekday(firstWeekday_new),
+    spec(Spec())
+{
+    setDateT(date_t_new);
+    setDateS(date_s_new);
+}
+
+bool DateRange2::debug()
+{
+    bool ok = true;
+    wxLogDebug("{{{ DateRange2::debug()");
+
+    // check order in PERIOD_INFO
+    for (int i = 0; i < static_cast<int>(sizeof(PERIOD_INFO)/sizeof(PERIOD_INFO[0])); i++) {
+        wxASSERT_MSG(PERIOD_INFO[i].id == i, "Wrong order in DateRange2::PERIOD_INFO");
+    }
+
+    wxDateTime date_t, date_s;
+    date_t.ParseISOCombined("2025-01-30T00:00:01"); // Thu
+    date_s.ParseISOCombined("2024-08-30T00:00:01"); // Fri
+    DateRange2 dr = DateRange2(
+        1, 6,
+        wxDateTime::Month::Jan, wxDateTime::Month::Apr,
+        wxDateTime::WeekDay::Mon,
+        date_t, date_s
+    );
+    //wxLogDebug("INFO: date_t=[%s]", dateTimeISO(dr.getT()));
+    //wxLogDebug("INFO: date_s=[%s]", dateTimeISO(dr.getS()));
+
+    struct { wxString spec; wxString sc; wxString ec; } checking[] = {
+        { "A",            "",           "" },
+        { "Y",            "2025-01-01", "2025-12-31" },
+        { "Q",            "2025-01-01", "2025-03-31" },
+        { "M",            "2025-01-01", "2025-01-31" },
+        { "W",            "2025-01-27", "2025-02-02" },
+        { "T",            "2025-01-30", "2025-01-30" },
+        { "S",            "2024-08-30", "2024-08-30" },
+        { "Y F",          "2024-04-06", "2025-04-05" },
+        { "Q F",          "2025-01-06", "2025-04-05" },
+        { "M F",          "2025-01-06", "2025-02-05" },
+        { "W F",          "2025-01-27", "2025-02-02" },
+        { "T F",          "2025-01-30", "2025-01-30" },
+        { "S F",          "2024-08-30", "2024-08-30" },
+        { "1 M",          "2025-02-01", "2025-02-28" },
+        { "-1..0 Y",      "2024-01-01", "2025-12-31" },
+        { "-1..+1 Q",     "2024-10-01", "2025-06-30" },
+        { "A .. W",       "",           "2025-02-02" },
+        { "-1 Y .. M",    "2024-01-01", "2025-01-31" },
+        { "-1 Y, M",      "2024-01-01", "2025-01-31" },
+        { "-1 M, Q .. Y", "2024-12-01", "2025-01-31" },
+        { "W, -1..+1 Q",  "2024-10-28", "2025-05-04" },
+    };
+    for (int i = 0; i < static_cast<int>(sizeof(checking)/sizeof(checking[0])); ++i) {
+        wxString spec = checking[i].spec;
+        //wxLogDebug("checking[%d] [%s]", i, spec);
+        if (!dr.parseSpec(spec)) {
+            ok = false;
+            wxLogDebug("ERROR in checking[%d]: Cannot parse [%s]", i, spec);
+            continue;
+        }
+        wxString label = dr.getLabel();
+        if (label != spec)
+            wxLogDebug("checking[%d] [%s]: label=[%s]", i, spec, label);
+        wxString sc = dateISO(dr.checking_start());
+        if (sc != checking[i].sc) {
+            ok = false;
+            wxLogDebug("ERROR in checking[%d] [%s]: sc=[%s], expected [%s]",
+                i, spec, sc, checking[i].sc
+            );
+        }
+        wxString ec = dateISO(dr.checking_end());
+        if (ec != checking[i].ec) {
+            ok = false;
+            wxLogDebug("ERROR in checking[%d] [%s]: ec=[%s], expected [%s]",
+                i, spec, ec, checking[i].ec
+            );
+        }
+    }
+
+    wxLogDebug("}}}");
+    return ok;
+}
+#endif
diff -Naur a/src/daterange2.h b/src/daterange2.h
--- a/src/daterange2.h	1970-01-01 01:00:00.000000000 +0100
+++ b/src/daterange2.h	2025-07-09 01:46:59.632940413 +0200
@@ -0,0 +1,248 @@
+/*******************************************************
+ Copyright (C) 2025 George Ef (george.a.ef@gmail.com)
+
+ This program is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2 of the License, or
+ (at your option) any later version.
+
+ This program is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program; if not, write to the Free Software
+ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ ********************************************************/
+
+# pragma once
+
+#include <wx/datetime.h>
+#include <unordered_map>
+#include "primitive.h"
+
+// DateRange2 implements only date calculations, without time.
+// We use wxDateTime because wxWidgets does not have a type for date without time.
+// The time is set to noon (12:00), in order to avoid accidental rounding errors.
+
+class DateRange2
+{
+public:
+    enum PERIOD_ID
+    {
+        PERIOD_ID_A = 0, // all
+        PERIOD_ID_Y,     // year = 4 quarters = 12 months
+        PERIOD_ID_Q,     // quarter = 3 months
+        PERIOD_ID_M,     // month
+        PERIOD_ID_W,     // week = 7 days
+        PERIOD_ID_T,     // today
+        PERIOD_ID_S,     // statement date
+        PERIOD_ID_size,
+        PERIOD_ID_none = PERIOD_ID_size
+    };
+
+private:
+    typedef struct { PERIOD_ID id; wxString label; } PERIOD_INFO_t;
+    static const PERIOD_INFO_t PERIOD_INFO[];
+    typedef std::unordered_map<char, PERIOD_ID> PERIOD_LABEL_ID_t;
+    static PERIOD_LABEL_ID_t PERIOD_LABEL_ID;
+    static PERIOD_LABEL_ID_t make_period_label_id();
+
+public:
+    class Spec
+    {
+        friend class DateRange2;
+
+    protected:
+        int so1 = 0;                    // start offset of first subrange
+        int eo1 = 0;                    // end   offset of first subrange
+        PERIOD_ID sp1 = PERIOD_ID_A;    // start period of first subrange
+        PERIOD_ID ep1 = PERIOD_ID_A;    // end   period of first subrange
+        int so2 = 0;                    // start offset of second subrange
+        int eo2 = 0;                    // end   offset of second subrange
+        PERIOD_ID sp2 = PERIOD_ID_none; // start period of second subrange
+        PERIOD_ID ep2 = PERIOD_ID_none; // end   period of second subrange
+        int f = 0;                      // index in first*[] (0=calendar, 1=financial)
+        wxString name = "";             // specificaiton name
+
+    public:
+        Spec(
+            int so1_new = 0, PERIOD_ID sp1_new = PERIOD_ID_A,
+            int eo1_new = 0, PERIOD_ID ep1_new = PERIOD_ID_A,
+            int so2_new = 0, PERIOD_ID sp2_new = PERIOD_ID_none,
+            int eo2_new = 0, PERIOD_ID ep2_new = PERIOD_ID_none,
+            int f_new = 0, wxString name_new = ""
+        );
+
+    public:
+        bool parseLabel(StringIt &str_i, StringIt str_end);
+        void parseName(StringIt &str_i, StringIt str_end);
+        void setName(const wxString &name_new);
+        bool parseSpec(const wxString &str, const wxString &name_new = "");
+        bool hasPeriodS() const;
+        const wxString getLabel() const;
+        const wxString getName() const;
+        const wxString getLabelName() const;
+        const wxString checking_name() const;
+        const wxString checking_description() const;
+
+    private:
+        static void scanWhiteSpace(StringIt &str_i, StringIt str_end);
+        static char scanToken(StringIt &str_i, StringIt str_end, int &token_o, PERIOD_ID &token_p);
+        static const wxString offset_str(int offset, bool show_zero = false);
+        static const wxString offset_range_str(int so, int eo, bool show_zero = false);
+    };
+
+public:
+    DateRange2(wxDateTime date_s = wxInvalidDateTime, wxDateTime date_t = wxInvalidDateTime);
+
+protected:
+    int firstDay[2];                  // first day in PERIOD_ID_[YQM] (1..28)
+    wxDateTime::Month firstMonth[2];  // first month in PERIOD_ID_[YQ] (0..11)
+    wxDateTime::WeekDay firstWeekday; // first weekday in PERIOD_ID_W (0=Sun, 1=Mon)
+    wxDateTime date_t;                // the date of PERIOD_ID_T
+    wxDateTime date_s;                // the date of PERIOD_ID_S
+    Spec spec;                        // range specification
+
+public:
+    void setDateT(wxDateTime date = wxInvalidDateTime);
+    void setDateS(wxDateTime date = wxInvalidDateTime);
+    wxDateTime getDateT() const;
+    wxDateTime getDateS() const;
+    void setSpec(const Spec &spec_new);
+    bool parseSpec(const wxString &str, const wxString &name = "");
+    Spec getSpec() const;
+    const wxString getLabel() const;
+    const wxString getName() const;
+    const wxString getLabelName() const;
+    wxDateTime period_start(wxDateTime date, PERIOD_ID period) const;
+    wxDateTime period_end(wxDateTime date, PERIOD_ID period) const;
+    wxDateTime checking_start() const;
+    wxDateTime checking_end() const;
+    wxDateTime reporting_start() const;
+    wxDateTime reporting_end() const;
+    const wxString checking_start_str() const;
+    const wxString checking_end_str() const;
+    const wxString reporting_start_str() const;
+    const wxString reporting_end_str() const;
+    const wxString checking_tooltip() const;
+    const wxString reporting_tooltip() const;
+
+private:
+    static wxDateTime addOffset(wxDateTime date, int offset, PERIOD_ID period);
+
+#ifndef NDEBUG
+private:
+    DateRange2(
+        int firstDay_new_0, int firstDay_new_1,
+        wxDateTime::Month firstMonth_new_0, wxDateTime::Month firstMonth_new_1,
+        wxDateTime::WeekDay firstWeekday_new,
+        wxDateTime date_t_new = wxInvalidDateTime, wxDateTime date_s_new = wxInvalidDateTime
+    );
+public:
+    static bool debug();
+#endif
+};
+
+inline void DateRange2::Spec::setName(const wxString &name_new)
+{
+    name = name_new;
+}
+
+inline bool DateRange2::Spec::hasPeriodS() const
+{
+    return
+        sp1 == PERIOD_ID_S || ep1 == PERIOD_ID_S ||
+        sp2 == PERIOD_ID_S || ep2 == PERIOD_ID_S;
+}
+
+inline const wxString DateRange2::Spec::offset_str(int offset, bool show_zero)
+{
+    return (offset != 0) ? wxString::Format("%+d", offset) : show_zero ? "0" : "";
+}
+
+inline const wxString DateRange2::Spec::getName() const
+{
+    return name;
+}
+
+inline void DateRange2::setDateT(wxDateTime date)
+{
+    // wxInvalidDateTime means today
+    if (date == wxInvalidDateTime) {
+        // get the date of today, with time set to noon (12:00)
+        date = wxDateTime(12, 0, 0, 0);
+    }
+    else {
+        // set time to noon (12:00)
+        date.SetHour(12).SetMinute(0).SetSecond(0).SetMillisecond(0);
+    }
+    date_t = date;
+}
+
+inline void DateRange2::setDateS(wxDateTime date)
+{
+    // wxInvalidDateTime means not applicable
+    if (date != wxInvalidDateTime) {
+        // set time to noon (12:00)
+        date.SetHour(12).SetMinute(0).SetSecond(0).SetMillisecond(0);
+    }
+    date_s = date;
+}
+
+inline wxDateTime DateRange2::getDateT() const
+{
+    return date_t;
+}
+
+inline wxDateTime DateRange2::getDateS() const
+{
+    return date_s;
+}
+
+inline void DateRange2::setSpec(const DateRange2::Spec &spec_new)
+{
+    spec = spec_new;
+}
+
+inline DateRange2::Spec DateRange2::getSpec() const
+{
+    return spec;
+}
+
+inline const wxString DateRange2::getLabel() const
+{
+    return spec.getLabel();
+}
+
+inline const wxString DateRange2::getName() const
+{
+    return spec.getName();
+}
+
+inline const wxString DateRange2::getLabelName() const
+{
+    return spec.getLabelName();
+}
+
+inline const wxString DateRange2::checking_start_str() const
+{
+    return dateISOStart(checking_start());
+}
+
+inline const wxString DateRange2::checking_end_str() const
+{
+    return dateISOEnd(checking_end());
+}
+
+inline const wxString DateRange2::reporting_start_str() const
+{
+    return dateISOStart(reporting_start());
+}
+
+inline const wxString DateRange2::reporting_end_str() const
+{
+    return dateISOEnd(reporting_end());
+}
+
diff -Naur a/src/db/DB_Table_Accountlist_V1.h b/src/db/DB_Table_Accountlist_V1.h
--- a/src/db/DB_Table_Accountlist_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Accountlist_V1.h	2025-07-09 01:46:59.632940413 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -76,7 +76,7 @@
         {
             try
             {
-                db->ExecuteUpdate("CREATE TABLE ACCOUNTLIST_V1(ACCOUNTID integer primary key, ACCOUNTNAME TEXT COLLATE NOCASE NOT NULL UNIQUE, ACCOUNTTYPE TEXT NOT NULL /* Checking, Term, Investment, Credit Card */, ACCOUNTNUM TEXT, STATUS TEXT NOT NULL /* Open, Closed */, NOTES TEXT, HELDAT TEXT, WEBSITE TEXT, CONTACTINFO TEXT, ACCESSINFO TEXT, INITIALBAL numeric, INITIALDATE TEXT, FAVORITEACCT TEXT NOT NULL, CURRENCYID integer NOT NULL, STATEMENTLOCKED integer, STATEMENTDATE TEXT, MINIMUMBALANCE numeric, CREDITLIMIT numeric, INTERESTRATE numeric, PAYMENTDUEDATE text, MINIMUMPAYMENT numeric)");
+                db->ExecuteUpdate("CREATE TABLE ACCOUNTLIST_V1(ACCOUNTID integer primary key, ACCOUNTNAME TEXT COLLATE NOCASE NOT NULL UNIQUE, ACCOUNTTYPE TEXT NOT NULL /* Cash, Checking, Term, Investment, Credit Card, Loan, Asset, Shares */, ACCOUNTNUM TEXT, STATUS TEXT NOT NULL /* Open, Closed */, NOTES TEXT, HELDAT TEXT, WEBSITE TEXT, CONTACTINFO TEXT, ACCESSINFO TEXT, INITIALBAL numeric, INITIALDATE TEXT, FAVORITEACCT TEXT NOT NULL, CURRENCYID integer NOT NULL, STATEMENTLOCKED integer, STATEMENTDATE TEXT, MINIMUMBALANCE numeric, CREDITLIMIT numeric, INTERESTRATE numeric, PAYMENTDUEDATE text, MINIMUMPAYMENT numeric)");
                 this->ensure_data(db);
             }
             catch(const wxSQLite3Exception &e) 
@@ -363,14 +363,14 @@
             ACCOUNTID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -694,7 +694,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -703,7 +703,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -761,10 +761,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO ACCOUNTLIST_V1(ACCOUNTNAME, ACCOUNTTYPE, ACCOUNTNUM, STATUS, NOTES, HELDAT, WEBSITE, CONTACTINFO, ACCESSINFO, INITIALBAL, INITIALDATE, FAVORITEACCT, CURRENCYID, STATEMENTLOCKED, STATEMENTDATE, MINIMUMBALANCE, CREDITLIMIT, INTERESTRATE, PAYMENTDUEDATE, MINIMUMPAYMENT, ACCOUNTID) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
         }
@@ -879,9 +879,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -906,8 +905,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Assets_V1.h b/src/db/DB_Table_Assets_V1.h
--- a/src/db/DB_Table_Assets_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Assets_V1.h	2025-07-09 01:46:59.632940413 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -263,14 +263,14 @@
             ASSETID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -470,7 +470,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -479,7 +479,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -537,10 +537,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO ASSETS_V1(STARTDATE, ASSETNAME, ASSETSTATUS, CURRENCYID, VALUECHANGEMODE, VALUE, VALUECHANGE, NOTES, VALUECHANGERATE, ASSETTYPE, ASSETID) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
         }
@@ -645,9 +645,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -672,8 +671,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Attachment_V1.h b/src/db/DB_Table_Attachment_V1.h
--- a/src/db/DB_Table_Attachment_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Attachment_V1.h	2025-07-09 01:46:59.632940413 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -203,14 +203,14 @@
             ATTACHMENTID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -336,7 +336,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -345,7 +345,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -403,10 +403,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO ATTACHMENT_V1(REFTYPE, REFID, DESCRIPTION, FILENAME, ATTACHMENTID) VALUES(?, ?, ?, ?, ?)";
         }
@@ -505,9 +505,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -532,8 +531,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Billsdeposits_V1.h b/src/db/DB_Table_Billsdeposits_V1.h
--- a/src/db/DB_Table_Billsdeposits_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Billsdeposits_V1.h	2025-07-09 01:46:59.632940413 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -323,14 +323,14 @@
             BDID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -609,7 +609,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -618,7 +618,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -676,10 +676,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO BILLSDEPOSITS_V1(ACCOUNTID, TOACCOUNTID, PAYEEID, TRANSCODE, TRANSAMOUNT, STATUS, TRANSACTIONNUMBER, NOTES, CATEGID, TRANSDATE, FOLLOWUPID, TOTRANSAMOUNT, REPEATS, NEXTOCCURRENCEDATE, NUMOCCURRENCES, COLOR, BDID) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
         }
@@ -790,9 +790,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -817,8 +816,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Budgetsplittransactions_V1.h b/src/db/DB_Table_Budgetsplittransactions_V1.h
--- a/src/db/DB_Table_Budgetsplittransactions_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Budgetsplittransactions_V1.h	2025-07-09 01:46:59.632940413 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -203,14 +203,14 @@
             SPLITTRANSID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -338,7 +338,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -347,7 +347,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -405,10 +405,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO BUDGETSPLITTRANSACTIONS_V1(TRANSID, CATEGID, SPLITTRANSAMOUNT, NOTES, SPLITTRANSID) VALUES(?, ?, ?, ?, ?)";
         }
@@ -507,9 +507,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -534,8 +533,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Budgettable_V1.h b/src/db/DB_Table_Budgettable_V1.h
--- a/src/db/DB_Table_Budgettable_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Budgettable_V1.h	2025-07-09 01:46:59.632940413 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -223,14 +223,14 @@
             BUDGETENTRYID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -383,7 +383,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -392,7 +392,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -450,10 +450,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO BUDGETTABLE_V1(BUDGETYEARID, CATEGID, PERIOD, AMOUNT, NOTES, ACTIVE, BUDGETENTRYID) VALUES(?, ?, ?, ?, ?, ?, ?)";
         }
@@ -554,9 +554,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -581,8 +580,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Budgetyear_V1.h b/src/db/DB_Table_Budgetyear_V1.h
--- a/src/db/DB_Table_Budgetyear_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Budgetyear_V1.h	2025-07-09 01:46:59.632940413 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -173,14 +173,14 @@
             BUDGETYEARID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -269,7 +269,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -278,7 +278,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -336,10 +336,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO BUDGETYEAR_V1(BUDGETYEARNAME, BUDGETYEARID) VALUES(?, ?)";
         }
@@ -435,9 +435,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -462,8 +461,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Category_V1.h b/src/db/DB_Table_Category_V1.h
--- a/src/db/DB_Table_Category_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Category_V1.h	2025-07-09 01:46:59.632940413 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -167,6 +167,16 @@
         db->ExecuteUpdate(wxString::Format("INSERT INTO CATEGORY_V1 VALUES ('55', '%s', '1', '-1')", _("Other Income")));
         db->ExecuteUpdate(wxString::Format("INSERT INTO CATEGORY_V1 VALUES ('56', '%s', '1', '-1')", _("Other Expenses")));
         db->ExecuteUpdate(wxString::Format("INSERT INTO CATEGORY_V1 VALUES ('57', '%s', '1', '-1')", _("Transfer")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CATEGORY_V1 VALUES ('58', '%s', '1', '-1')", _("Investment")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CATEGORY_V1 VALUES ('59', '%s', '1', '58')", _("Purchase")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CATEGORY_V1 VALUES ('60', '%s', '1', '58')", _("Sale")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CATEGORY_V1 VALUES ('61', '%s', '1', '58')", _("Dividend")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CATEGORY_V1 VALUES ('62', '%s', '1', '58')", _("Capital Gains")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CATEGORY_V1 VALUES ('63', '%s', '1', '58')", _("Brokerage Fees")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CATEGORY_V1 VALUES ('64', '%s', '1', '58')", _("Interest")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CATEGORY_V1 VALUES ('65', '%s', '1', '58')", _("Taxes")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CATEGORY_V1 VALUES ('66', '%s', '1', '58')", _("Split")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CATEGORY_V1 VALUES ('67', '%s', '1', '58')", _("Merger")));
         db->Commit();
     }
     
@@ -251,14 +261,14 @@
             CATEGID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -373,7 +383,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -382,7 +392,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -440,10 +450,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO CATEGORY_V1(CATEGNAME, ACTIVE, PARENTID, CATEGID) VALUES(?, ?, ?, ?)";
         }
@@ -541,9 +551,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -568,8 +577,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Checkingaccount_V1.h b/src/db/DB_Table_Checkingaccount_V1.h
--- a/src/db/DB_Table_Checkingaccount_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Checkingaccount_V1.h	2025-07-09 01:46:59.632940413 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -314,14 +314,14 @@
             TRANSID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -586,7 +586,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -595,7 +595,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -653,10 +653,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO CHECKINGACCOUNT_V1(ACCOUNTID, TOACCOUNTID, PAYEEID, TRANSCODE, TRANSAMOUNT, STATUS, TRANSACTIONNUMBER, NOTES, CATEGID, TRANSDATE, LASTUPDATEDTIME, DELETEDTIME, FOLLOWUPID, TOTRANSAMOUNT, COLOR, TRANSID) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
         }
@@ -766,9 +766,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -793,8 +792,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Currencyformats_V1.h b/src/db/DB_Table_Currencyformats_V1.h
--- a/src/db/DB_Table_Currencyformats_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Currencyformats_V1.h	2025-07-09 01:46:59.632940413 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -109,174 +109,174 @@
     void ensure_data(wxSQLite3Database* db)
     {
         db->Begin();
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('1', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("US dollar"), L"$", L"", L".", L",", L"Dollar", L"Cent", L"USD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('2', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Euro"), L"€", L"", L".", L" ", L"", L"", L"EUR", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('3', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("British pound"), L"£", L"", L".", L" ", L"Pound", L"Pence", L"GBP", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('4', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Russian ruble"), L"", L"р", L",", L" ", L"руб.", L"коп.", L"RUB", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('5', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Ukrainian hryvnia"), L"₴", L"", L",", L" ", L"", L"", L"UAH", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('6', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Afghan afghani"), L"؋", L"", L".", L" ", L"", L"pul", L"AFN", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('7', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Albanian lek"), L"", L"L", L".", L" ", L"", L"", L"ALL", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('8', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Algerian dinar"), L"دج", L"", L".", L" ", L"", L"", L"DZD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('9', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Angolan kwanza"), L"", L"Kz", L".", L" ", L"", L"Céntimo", L"AOA", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('10', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("East Caribbean dollar"), L"EC$", L"", L".", L" ", L"", L"", L"XCD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('11', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Argentine peso"), L"AR$", L"", L",", L".", L"", L"centavo", L"ARS", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('12', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Armenian dram"), L"", L"", L".", L" ", L"", L"", L"AMD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('13', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Aruban florin"), L"ƒ", L"", L".", L" ", L"", L"", L"AWG", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('14', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Australian dollar"), L"$", L"", L".", L",", L"", L"", L"AUD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('15', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Azerbaijani manat"), L"", L"", L".", L" ", L"", L"", L"AZN", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('16', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Bahamian dollar"), L"B$", L"", L".", L" ", L"", L"", L"BSD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('17', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Bahraini dinar"), L"", L"", L".", L" ", L"", L"", L"BHD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('18', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Bangladeshi taka"), L"", L"", L".", L" ", L"", L"", L"BDT", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('19', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Barbadian dollar"), L"Bds$", L"", L".", L" ", L"", L"", L"BBD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('20', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Belarusian ruble (2000-2016)"), L"Br", L"", L",", L" ", L"", L"", L"BYR", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('21', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Belize dollar"), L"BZ$", L"", L".", L" ", L"", L"", L"BZD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('22', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("West African CFA franc"), L"CFA", L"", L".", L" ", L"", L"", L"XOF", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('23', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Bermudan dollar"), L"BD$", L"", L".", L" ", L"", L"", L"BMD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('24', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Bhutanese ngultrum"), L"Nu.", L"", L".", L" ", L"", L"", L"BTN", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('25', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Bolivian boliviano"), L"Bs.", L"", L".", L" ", L"", L"", L"BOB", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('26', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Bosnia-Herzegovina convertible mark"), L"KM", L"", L",", L".", L"", L"", L"BAM", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('27', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Botswanan pula"), L"P", L"", L".", L" ", L"", L"", L"BWP", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('28', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Brazilian real"), L"R$", L"", L".", L" ", L"", L"", L"BRL", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('29', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Brunei dollar"), L"B$", L"", L".", L" ", L"", L"", L"BND", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('30', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Bulgarian lev"), L"", L"", L".", L" ", L"", L"", L"BGN", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('31', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Burundian franc"), L"FBu", L"", L".", L" ", L"", L"", L"BIF", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('32', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Cambodian riel"), L"", L"", L".", L" ", L"", L"", L"KHR", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('33', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Central African CFA franc"), L"CFA", L"", L".", L" ", L"", L"", L"XAF", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('34', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Canadian dollar"), L"$", L"", L".", L" ", L"", L"", L"CAD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('35', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Cape Verdean escudo"), L"Esc", L"", L".", L" ", L"", L"", L"CVE", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('36', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Cayman Islands dollar"), L"KY$", L"", L".", L" ", L"", L"", L"KYD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('37', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Chilean peso"), L"$", L"", L".", L" ", L"", L"", L"CLP", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('38', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Chinese yuan"), L"¥", L"", L".", L" ", L"", L"", L"CNY", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('39', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Colombian peso"), L"Col$", L"", L".", L" ", L"", L"", L"COP", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('40', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Comorian franc"), L"", L"", L".", L" ", L"", L"", L"KMF", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('41', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Congolese franc"), L"F", L"", L".", L" ", L"", L"", L"CDF", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('42', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", L"Costa Rican colón", L"₡", L"", L".", L" ", L"", L"", L"CRC", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('43', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Croatian kuna"), L"kn", L"", L".", L" ", L"", L"", L"HRK", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('44', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Czech koruna"), L"Kč", L"", L".", L" ", L"", L"", L"CZK", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('45', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Danish krone"), L"Kr", L"", L".", L" ", L"", L"", L"DKK", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('46', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Djiboutian franc"), L"Fdj", L"", L".", L" ", L"", L"", L"DJF", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('47', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Dominican peso"), L"RD$", L"", L".", L" ", L"", L"", L"DOP", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('48', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Egyptian pound"), L"£", L"", L".", L" ", L"", L"", L"EGP", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('49', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Eritrean nakfa"), L"Nfa", L"", L".", L" ", L"", L"", L"ERN", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('50', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Ethiopian birr"), L"Br", L"", L".", L" ", L"", L"", L"ETB", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('51', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Falkland Islands pound"), L"£", L"", L".", L" ", L"", L"", L"FKP", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('52', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Fijian dollar"), L"FJ$", L"", L".", L" ", L"", L"", L"FJD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('53', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("CFP franc"), L"F", L"", L".", L" ", L"", L"", L"XPF", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('54', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Gambian dalasi"), L"D", L"", L".", L" ", L"", L"", L"GMD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('55', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Georgian lari"), L"", L"", L".", L" ", L"", L"", L"GEL", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('56', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Ghanaian cedi"), L"", L"", L".", L" ", L"", L"", L"GHS", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('57', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Gibraltar pound"), L"£", L"", L".", L" ", L"", L"", L"GIP", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('58', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Guatemalan quetzal"), L"Q", L"", L".", L" ", L"", L"", L"GTQ", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('59', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Guinean franc"), L"FG", L"", L".", L" ", L"", L"", L"GNF", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('60', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Guyanaese dollar"), L"GY$", L"", L".", L" ", L"", L"", L"GYD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('61', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Haitian gourde"), L"G", L"", L".", L" ", L"", L"", L"HTG", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('62', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Honduran lempira"), L"L", L"", L".", L" ", L"", L"", L"HNL", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('63', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Hong Kong dollar"), L"HK$", L"", L".", L" ", L"", L"", L"HKD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('64', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Hungarian forint"), L"Ft", L"", L".", L" ", L"", L"", L"HUF", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('65', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", L"Icelandic króna", L"kr", L"", L".", L" ", L"", L"", L"ISK", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('66', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Indian rupee"), L"₹", L"", L".", L" ", L"", L"", L"INR", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('67', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Indonesian rupiah"), L"Rp", L"", L".", L" ", L"", L"", L"IDR", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('68', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Special drawing rights"), L"SDR", L"", L".", L" ", L"", L"", L"XDR", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('69', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Iranian rial"), L"", L"", L".", L" ", L"", L"", L"IRR", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('70', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Iraqi dinar"), L"", L"", L".", L" ", L"", L"", L"IQD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('71', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Israeli new shekel"), L"₪", L"", L".", L" ", L"", L"", L"ILS", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('72', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Jamaican dollar"), L"J$", L"", L".", L" ", L"", L"", L"JMD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('73', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Japanese yen"), L"¥", L"", L".", L" ", L"", L"", L"JPY", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('74', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Jordanian dinar"), L"", L"", L".", L" ", L"", L"", L"JOD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('75', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Kazakhstani tenge"), L"T", L"", L".", L" ", L"", L"", L"KZT", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('76', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Kenyan shilling"), L"KSh", L"", L".", L" ", L"", L"", L"KES", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('77', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("North Korean won"), L"W", L"", L".", L" ", L"", L"", L"KPW", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('78', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("South Korean won"), L"W", L"", L".", L" ", L"", L"", L"KRW", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('79', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Kuwaiti dinar"), L"", L"", L".", L" ", L"", L"", L"KWD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('80', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Kyrgystani som"), L"", L"", L".", L" ", L"", L"", L"KGS", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('81', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Laotian kip"), L"KN", L"", L".", L" ", L"", L"", L"LAK", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('82', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Latvian lats"), L"Ls", L"", L".", L" ", L"", L"", L"LVL", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('83', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Lebanese pound"), L"", L"", L".", L" ", L"", L"", L"LBP", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('84', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Lesotho loti"), L"M", L"", L".", L" ", L"", L"", L"LSL", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('85', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Liberian dollar"), L"L$", L"", L".", L" ", L"", L"", L"LRD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('86', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Libyan dinar"), L"LD", L"", L".", L" ", L"", L"", L"LYD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('87', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Lithuanian litas"), L"Lt", L"", L".", L" ", L"", L"", L"LTL", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('88', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Macanese pataca"), L"P", L"", L".", L" ", L"", L"", L"MOP", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('89', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Macedonian denar"), L"", L"", L".", L" ", L"", L"", L"MKD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('90', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Malagasy ariary"), L"FMG", L"", L".", L" ", L"", L"", L"MGA", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('91', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Malawian kwacha"), L"MK", L"", L".", L" ", L"", L"", L"MWK", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('92', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Malaysian ringgit"), L"RM", L"", L".", L" ", L"", L"", L"MYR", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('93', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Maldivian rufiyaa"), L"Rf", L"", L".", L" ", L"", L"", L"MVR", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('94', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Mauritanian ouguiya (1973-2017)"), L"UM", L"", L".", L" ", L"", L"", L"MRO", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('95', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Mauritian rupee"), L"Rs", L"", L".", L" ", L"", L"", L"MUR", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('96', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Mexican peso"), L"$", L"", L".", L" ", L"", L"", L"MXN", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('97', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Moldovan leu"), L"", L"", L".", L" ", L"", L"", L"MDL", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('98', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Mongolian tugrik"), L"₮", L"", L".", L" ", L"", L"", L"MNT", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('99', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Moroccan dirham"), L"", L"", L".", L" ", L"", L"", L"MAD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('100', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Myanmar kyat"), L"K", L"", L".", L" ", L"", L"", L"MMK", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('101', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Namibian dollar"), L"N$", L"", L".", L" ", L"", L"", L"NAD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('102', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Nepalese rupee"), L"NRs", L"", L".", L" ", L"", L"", L"NPR", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('103', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Netherlands Antillean guilder"), L"NAƒ", L"", L".", L" ", L"", L"", L"ANG", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('104', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("New Zealand dollar"), L"NZ$", L"", L".", L" ", L"", L"", L"NZD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('105', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", L"Nicaraguan córdoba", L"C$", L"", L".", L" ", L"", L"", L"NIO", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('106', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Nigerian naira"), L"₦", L"", L".", L" ", L"", L"", L"NGN", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('107', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Norwegian krone"), L"kr", L"", L".", L" ", L"", L"", L"NOK", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('108', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Omani rial"), L"", L"", L".", L" ", L"", L"", L"OMR", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('109', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Pakistani rupee"), L"Rs.", L"", L".", L" ", L"", L"", L"PKR", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('110', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Panamanian balboa"), L"B./", L"", L".", L" ", L"", L"", L"PAB", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('111', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Papua New Guinean kina"), L"K", L"", L".", L" ", L"", L"", L"PGK", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('112', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Paraguayan guarani"), L"", L"", L".", L" ", L"", L"", L"PYG", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('113', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Peruvian sol"), L"S/.", L"", L".", L" ", L"", L"", L"PEN", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('114', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Philippine peso"), L"₱", L"", L".", L" ", L"", L"", L"PHP", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('115', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Polish zloty"), L"", L"zł", L",", L".", L"złoty", L"grosz", L"PLN", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('116', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Qatari riyal"), L"QR", L"", L".", L" ", L"", L"", L"QAR", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('117', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Romanian leu"), L"L", L"", L".", L" ", L"", L"", L"RON", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('118', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Rwandan franc"), L"RF", L"", L".", L" ", L"", L"", L"RWF", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('119', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", L"São Tomé & Príncipe dobra (1977-2017)", L"Db", L"", L".", L" ", L"", L"", L"STD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('120', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Saudi riyal"), L"SR", L"", L".", L" ", L"", L"", L"SAR", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('121', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Serbian dinar"), L"din.", L"", L".", L" ", L"", L"", L"RSD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('122', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Seychellois rupee"), L"SR", L"", L".", L" ", L"", L"", L"SCR", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('123', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Sierra Leonean leone (1964-2022)"), L"Le", L"", L".", L" ", L"", L"", L"SLL", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('124', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Singapore dollar"), L"S$", L"", L".", L" ", L"", L"", L"SGD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('125', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Solomon Islands dollar"), L"SI$", L"", L".", L" ", L"", L"", L"SBD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('126', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Somali shilling"), L"Sh.", L"", L".", L" ", L"", L"", L"SOS", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('127', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("South African rand"), L"R", L"", L".", L" ", L"", L"", L"ZAR", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('128', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Sri Lankan rupee"), L"Rs", L"", L".", L" ", L"", L"", L"LKR", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('129', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("St. Helena pound"), L"£", L"", L".", L" ", L"", L"", L"SHP", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('130', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Sudanese pound"), L"", L"", L".", L" ", L"", L"", L"SDG", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('131', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Surinamese dollar"), L"$", L"", L".", L" ", L"", L"", L"SRD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('132', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Swazi lilangeni"), L"E", L"", L".", L" ", L"", L"", L"SZL", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('133', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Swedish krona"), L"kr", L"", L".", L" ", L"", L"", L"SEK", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('134', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Swiss franc"), L"Fr.", L"", L".", L" ", L"", L"", L"CHF", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('135', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Syrian pound"), L"", L"", L".", L" ", L"", L"", L"SYP", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('136', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("New Taiwan dollar"), L"NT$", L"", L".", L" ", L"", L"", L"TWD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('137', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Tajikistani somoni"), L"", L"", L".", L" ", L"", L"", L"TJS", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('138', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Tanzanian shilling"), L"", L"", L".", L" ", L"", L"", L"TZS", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('139', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Thai baht"), L"฿", L"", L".", L" ", L"", L"", L"THB", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('140', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Trinidad & Tobago dollar"), L"TT$", L"", L".", L" ", L"", L"", L"TTD", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('141', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Tunisian dinar"), L"DT", L"", L".", L" ", L"", L"", L"TND", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('142', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Turkish lira"), L"₺", L"", L".", L" ", L"", L"", L"TRY", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('143', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Turkmenistani manat"), L"m", L"", L".", L" ", L"", L"", L"TMT", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('144', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Ugandan shilling"), L"USh", L"", L".", L" ", L"", L"", L"UGX", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('145', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("UAE dirham"), L"", L"", L".", L" ", L"", L"", L"AED", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('146', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Uruguayan peso"), L"$U", L"", L".", L" ", L"", L"", L"UYU", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('147', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Uzbekistani som"), L"", L"", L".", L" ", L"", L"", L"UZS", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('148', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Vanuatu vatu"), L"VT", L"", L".", L" ", L"", L"", L"VUV", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('149', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Vietnamese dong"), L"₫", L"", L".", L" ", L"", L"", L"VND", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('150', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Samoan tala"), L"WS$", L"", L".", L" ", L"", L"", L"WST", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('151', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '1', '1', '%s', '%s')", _("Yemeni rial"), L"", L"", L".", L" ", L"", L"", L"YER", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('152', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", L"Venezuelan bolívar (2008-2018)", L"Bs.", L"", L".", L",", L"bolívar", L"céntimos", L"VEF", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('153', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100000000', '1', '%s', '%s')", _("Bitcoin"), L"Ƀ", L"", L".", L",", L"", L"", L"BTC", L"Crypto"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('154', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Belarusian ruble"), L"BYN", L"", L".", L",", L"", L"", L"BYN", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('155', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Cuban convertible peso"), L"$", L"", L".", L",", L"", L"", L"CUC", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('156', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Cuban peso"), L"$", L"", L".", L",", L"", L"", L"CUP", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('157', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Mauritanian ouguiya"), L"MRU", L"", L".", L",", L"", L"", L"MRU", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('158', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Mozambican metical"), L"MZN", L"", L".", L",", L"", L"", L"MZN", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('159', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Sierra Leonean leone"), L"SLE", L"", L".", L",", L"", L"", L"SLE", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('160', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("South Sudanese pound"), L"£", L"", L".", L",", L"", L"", L"SSP", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('161', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", L"São Tomé & Príncipe dobra", L"Db", L"", L".", L",", L"", L"", L"STN", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('162', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", L"Salvadoran colón", L"SVC", L"", L".", L",", L"", L"", L"SVC", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('163', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", L"Tongan paʻanga", L"T$", L"", L".", L",", L"", L"", L"TOP", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('164', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '10000', '1', '%s', '%s')", _("Uruguayan nominal wage index unit"), L"UYW", L"", L".", L",", L"", L"", L"UYW", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('165', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", L"Bolívar soberano", L"VED", L"", L".", L",", L"", L"", L"VED", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('166', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", L"Venezuelan bolívar", L"VES", L"", L".", L",", L"", L"", L"VES", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('167', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Zambian kwacha"), L"ZK", L"", L".", L",", L"", L"", L"ZMW", L"Fiat"));
-        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('168', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '100', '1', '%s', '%s')", _("Zimbabwean dollar (2009)"), L"ZWL", L"", L".", L",", L"", L"", L"ZWL", L"Fiat"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('1', '%s', '$', '', '.', ',', 'Dollar', 'Cent', '100', '1', 'USD', 'Fiat')", _("US dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('2', '%s', '%s', '', '.', ' ', '', '', '100', '1', 'EUR', 'Fiat')", _("Euro"), L"€"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('3', '%s', '%s', '', '.', ' ', 'Pound', 'Pence', '100', '1', 'GBP', 'Fiat')", _("British pound"), L"£"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('4', '%s', '', '%s', ',', ' ', '%s', '%s', '100', '1', 'RUB', 'Fiat')", _("Russian ruble"), L"р", L"руб.", L"коп."));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('5', '%s', '%s', '', ',', ' ', '', '', '100', '1', 'UAH', 'Fiat')", _("Ukrainian hryvnia"), L"₴"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('6', '%s', '%s', '', '.', ' ', '', 'pul', '100', '1', 'AFN', 'Fiat')", _("Afghan afghani"), L"؋"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('7', '%s', '', 'L', '.', ' ', '', '', '1', '1', 'ALL', 'Fiat')", _("Albanian lek")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('8', '%s', '%s', '', '.', ' ', '', '', '100', '1', 'DZD', 'Fiat')", _("Algerian dinar"), L"دج"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('9', '%s', '', 'Kz', '.', ' ', '', '%s', '100', '1', 'AOA', 'Fiat')", _("Angolan kwanza"), L"Céntimo"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('10', '%s', 'EC$', '', '.', ' ', '', '', '100', '1', 'XCD', 'Fiat')", _("East Caribbean dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('11', '%s', 'AR$', '', ',', '.', '', 'centavo', '100', '1', 'ARS', 'Fiat')", _("Argentine peso")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('12', '%s', '', '', '.', ' ', '', '', '1', '1', 'AMD', 'Fiat')", _("Armenian dram")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('13', '%s', '%s', '', '.', ' ', '', '', '100', '1', 'AWG', 'Fiat')", _("Aruban florin"), L"ƒ"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('14', '%s', '$', '', '.', ',', '', '', '100', '1', 'AUD', 'Fiat')", _("Australian dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('15', '%s', '', '', '.', ' ', '', '', '100', '1', 'AZN', 'Fiat')", _("Azerbaijani manat")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('16', '%s', 'B$', '', '.', ' ', '', '', '100', '1', 'BSD', 'Fiat')", _("Bahamian dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('17', '%s', '', '', '.', ' ', '', '', '100', '1', 'BHD', 'Fiat')", _("Bahraini dinar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('18', '%s', '', '', '.', ' ', '', '', '100', '1', 'BDT', 'Fiat')", _("Bangladeshi taka")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('19', '%s', 'Bds$', '', '.', ' ', '', '', '100', '1', 'BBD', 'Fiat')", _("Barbadian dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('20', '%s', 'Br', '', ',', ' ', '', '', '1', '1', 'BYR', 'Fiat')", _("Belarusian ruble (2000-2016)")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('21', '%s', 'BZ$', '', '.', ' ', '', '', '100', '1', 'BZD', 'Fiat')", _("Belize dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('22', '%s', 'CFA', '', '.', ' ', '', '', '100', '1', 'XOF', 'Fiat')", _("West African CFA franc")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('23', '%s', 'BD$', '', '.', ' ', '', '', '100', '1', 'BMD', 'Fiat')", _("Bermudan dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('24', '%s', 'Nu.', '', '.', ' ', '', '', '100', '1', 'BTN', 'Fiat')", _("Bhutanese ngultrum")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('25', '%s', 'Bs.', '', '.', ' ', '', '', '100', '1', 'BOB', 'Fiat')", _("Bolivian boliviano")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('26', '%s', 'KM', '', ',', '.', '', '', '100', '1', 'BAM', 'Fiat')", _("Bosnia-Herzegovina convertible mark")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('27', '%s', 'P', '', '.', ' ', '', '', '100', '1', 'BWP', 'Fiat')", _("Botswanan pula")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('28', '%s', 'R$', '', '.', ' ', '', '', '100', '1', 'BRL', 'Fiat')", _("Brazilian real")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('29', '%s', 'B$', '', '.', ' ', '', '', '100', '1', 'BND', 'Fiat')", _("Brunei dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('30', '%s', '', '', '.', ' ', '', '', '100', '1', 'BGN', 'Fiat')", _("Bulgarian lev")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('31', '%s', 'FBu', '', '.', ' ', '', '', '1', '1', 'BIF', 'Fiat')", _("Burundian franc")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('32', '%s', '', '', '.', ' ', '', '', '100', '1', 'KHR', 'Fiat')", _("Cambodian riel")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('33', '%s', 'CFA', '', '.', ' ', '', '', '1', '1', 'XAF', 'Fiat')", _("Central African CFA franc")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('34', '%s', '$', '', '.', ' ', '', '', '100', '1', 'CAD', 'Fiat')", _("Canadian dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('35', '%s', 'Esc', '', '.', ' ', '', '', '100', '1', 'CVE', 'Fiat')", _("Cape Verdean escudo")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('36', '%s', 'KY$', '', '.', ' ', '', '', '100', '1', 'KYD', 'Fiat')", _("Cayman Islands dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('37', '%s', '$', '', '.', ' ', '', '', '1', '1', 'CLP', 'Fiat')", _("Chilean peso")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('38', '%s', '%s', '', '.', ' ', '', '', '100', '1', 'CNY', 'Fiat')", _("Chinese yuan"), L"¥"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('39', '%s', 'Col$', '', '.', ' ', '', '', '100', '1', 'COP', 'Fiat')", _("Colombian peso")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('40', '%s', '', '', '.', ' ', '', '', '1', '1', 'KMF', 'Fiat')", _("Comorian franc")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('41', '%s', 'F', '', '.', ' ', '', '', '100', '1', 'CDF', 'Fiat')", _("Congolese franc")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('42', '%s', '%s', '', '.', ' ', '', '', '1', '1', 'CRC', 'Fiat')", L"Costa Rican colón", L"₡"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('43', '%s', 'kn', '', '.', ' ', '', '', '100', '1', 'HRK', 'Fiat')", _("Croatian kuna")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('44', '%s', '%s', '', '.', ' ', '', '', '100', '1', 'CZK', 'Fiat')", _("Czech koruna"), L"Kč"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('45', '%s', 'Kr', '', '.', ' ', '', '', '100', '1', 'DKK', 'Fiat')", _("Danish krone")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('46', '%s', 'Fdj', '', '.', ' ', '', '', '1', '1', 'DJF', 'Fiat')", _("Djiboutian franc")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('47', '%s', 'RD$', '', '.', ' ', '', '', '100', '1', 'DOP', 'Fiat')", _("Dominican peso")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('48', '%s', '%s', '', '.', ' ', '', '', '100', '1', 'EGP', 'Fiat')", _("Egyptian pound"), L"£"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('49', '%s', 'Nfa', '', '.', ' ', '', '', '100', '1', 'ERN', 'Fiat')", _("Eritrean nakfa")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('50', '%s', 'Br', '', '.', ' ', '', '', '100', '1', 'ETB', 'Fiat')", _("Ethiopian birr")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('51', '%s', '%s', '', '.', ' ', '', '', '100', '1', 'FKP', 'Fiat')", _("Falkland Islands pound"), L"£"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('52', '%s', 'FJ$', '', '.', ' ', '', '', '100', '1', 'FJD', 'Fiat')", _("Fijian dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('53', '%s', 'F', '', '.', ' ', '', '', '100', '1', 'XPF', 'Fiat')", _("CFP franc")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('54', '%s', 'D', '', '.', ' ', '', '', '100', '1', 'GMD', 'Fiat')", _("Gambian dalasi")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('55', '%s', '', '', '.', ' ', '', '', '100', '1', 'GEL', 'Fiat')", _("Georgian lari")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('56', '%s', '', '', '.', ' ', '', '', '100', '1', 'GHS', 'Fiat')", _("Ghanaian cedi")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('57', '%s', '%s', '', '.', ' ', '', '', '100', '1', 'GIP', 'Fiat')", _("Gibraltar pound"), L"£"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('58', '%s', 'Q', '', '.', ' ', '', '', '100', '1', 'GTQ', 'Fiat')", _("Guatemalan quetzal")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('59', '%s', 'FG', '', '.', ' ', '', '', '1', '1', 'GNF', 'Fiat')", _("Guinean franc")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('60', '%s', 'GY$', '', '.', ' ', '', '', '100', '1', 'GYD', 'Fiat')", _("Guyanaese dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('61', '%s', 'G', '', '.', ' ', '', '', '100', '1', 'HTG', 'Fiat')", _("Haitian gourde")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('62', '%s', 'L', '', '.', ' ', '', '', '100', '1', 'HNL', 'Fiat')", _("Honduran lempira")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('63', '%s', 'HK$', '', '.', ' ', '', '', '100', '1', 'HKD', 'Fiat')", _("Hong Kong dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('64', '%s', 'Ft', '', '.', ' ', '', '', '1', '1', 'HUF', 'Fiat')", _("Hungarian forint")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('65', '%s', 'kr', '', '.', ' ', '', '', '1', '1', 'ISK', 'Fiat')", L"Icelandic króna"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('66', '%s', '%s', '', '.', ' ', '', '', '100', '1', 'INR', 'Fiat')", _("Indian rupee"), L"₹"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('67', '%s', 'Rp', '', '.', ' ', '', '', '1', '1', 'IDR', 'Fiat')", _("Indonesian rupiah")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('68', '%s', 'SDR', '', '.', ' ', '', '', '100', '1', 'XDR', 'Fiat')", _("Special drawing rights")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('69', '%s', '', '', '.', ' ', '', '', '1', '1', 'IRR', 'Fiat')", _("Iranian rial")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('70', '%s', '', '', '.', ' ', '', '', '1', '1', 'IQD', 'Fiat')", _("Iraqi dinar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('71', '%s', '%s', '', '.', ' ', '', '', '100', '1', 'ILS', 'Fiat')", _("Israeli new shekel"), L"₪"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('72', '%s', 'J$', '', '.', ' ', '', '', '100', '1', 'JMD', 'Fiat')", _("Jamaican dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('73', '%s', '%s', '', '.', ' ', '', '', '1', '1', 'JPY', 'Fiat')", _("Japanese yen"), L"¥"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('74', '%s', '', '', '.', ' ', '', '', '100', '1', 'JOD', 'Fiat')", _("Jordanian dinar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('75', '%s', 'T', '', '.', ' ', '', '', '100', '1', 'KZT', 'Fiat')", _("Kazakhstani tenge")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('76', '%s', 'KSh', '', '.', ' ', '', '', '100', '1', 'KES', 'Fiat')", _("Kenyan shilling")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('77', '%s', 'W', '', '.', ' ', '', '', '100', '1', 'KPW', 'Fiat')", _("North Korean won")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('78', '%s', 'W', '', '.', ' ', '', '', '1', '1', 'KRW', 'Fiat')", _("South Korean won")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('79', '%s', '', '', '.', ' ', '', '', '100', '1', 'KWD', 'Fiat')", _("Kuwaiti dinar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('80', '%s', '', '', '.', ' ', '', '', '100', '1', 'KGS', 'Fiat')", _("Kyrgystani som")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('81', '%s', 'KN', '', '.', ' ', '', '', '100', '1', 'LAK', 'Fiat')", _("Laotian kip")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('82', '%s', 'Ls', '', '.', ' ', '', '', '100', '1', 'LVL', 'Fiat')", _("Latvian lats")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('83', '%s', '', '', '.', ' ', '', '', '1', '1', 'LBP', 'Fiat')", _("Lebanese pound")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('84', '%s', 'M', '', '.', ' ', '', '', '100', '1', 'LSL', 'Fiat')", _("Lesotho loti")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('85', '%s', 'L$', '', '.', ' ', '', '', '100', '1', 'LRD', 'Fiat')", _("Liberian dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('86', '%s', 'LD', '', '.', ' ', '', '', '100', '1', 'LYD', 'Fiat')", _("Libyan dinar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('87', '%s', 'Lt', '', '.', ' ', '', '', '100', '1', 'LTL', 'Fiat')", _("Lithuanian litas")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('88', '%s', 'P', '', '.', ' ', '', '', '100', '1', 'MOP', 'Fiat')", _("Macanese pataca")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('89', '%s', '', '', '.', ' ', '', '', '100', '1', 'MKD', 'Fiat')", _("Macedonian denar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('90', '%s', 'FMG', '', '.', ' ', '', '', '100', '1', 'MGA', 'Fiat')", _("Malagasy ariary")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('91', '%s', 'MK', '', '.', ' ', '', '', '1', '1', 'MWK', 'Fiat')", _("Malawian kwacha")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('92', '%s', 'RM', '', '.', ' ', '', '', '100', '1', 'MYR', 'Fiat')", _("Malaysian ringgit")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('93', '%s', 'Rf', '', '.', ' ', '', '', '100', '1', 'MVR', 'Fiat')", _("Maldivian rufiyaa")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('94', '%s', 'UM', '', '.', ' ', '', '', '100', '1', 'MRO', 'Fiat')", _("Mauritanian ouguiya (1973-2017)")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('95', '%s', 'Rs', '', '.', ' ', '', '', '1', '1', 'MUR', 'Fiat')", _("Mauritian rupee")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('96', '%s', '$', '', '.', ' ', '', '', '100', '1', 'MXN', 'Fiat')", _("Mexican peso")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('97', '%s', '', '', '.', ' ', '', '', '100', '1', 'MDL', 'Fiat')", _("Moldovan leu")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('98', '%s', '%s', '', '.', ' ', '', '', '100', '1', 'MNT', 'Fiat')", _("Mongolian tugrik"), L"₮"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('99', '%s', '', '', '.', ' ', '', '', '100', '1', 'MAD', 'Fiat')", _("Moroccan dirham")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('100', '%s', 'K', '', '.', ' ', '', '', '1', '1', 'MMK', 'Fiat')", _("Myanmar kyat")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('101', '%s', 'N$', '', '.', ' ', '', '', '100', '1', 'NAD', 'Fiat')", _("Namibian dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('102', '%s', 'NRs', '', '.', ' ', '', '', '100', '1', 'NPR', 'Fiat')", _("Nepalese rupee")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('103', '%s', '%s', '', '.', ' ', '', '', '100', '1', 'ANG', 'Fiat')", _("Netherlands Antillean guilder"), L"NAƒ"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('104', '%s', 'NZ$', '', '.', ' ', '', '', '100', '1', 'NZD', 'Fiat')", _("New Zealand dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('105', '%s', 'C$', '', '.', ' ', '', '', '100', '1', 'NIO', 'Fiat')", L"Nicaraguan córdoba"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('106', '%s', '%s', '', '.', ' ', '', '', '100', '1', 'NGN', 'Fiat')", _("Nigerian naira"), L"₦"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('107', '%s', 'kr', '', '.', ' ', '', '', '100', '1', 'NOK', 'Fiat')", _("Norwegian krone")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('108', '%s', '', '', '.', ' ', '', '', '100', '1', 'OMR', 'Fiat')", _("Omani rial")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('109', '%s', 'Rs.', '', '.', ' ', '', '', '1', '1', 'PKR', 'Fiat')", _("Pakistani rupee")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('110', '%s', 'B./', '', '.', ' ', '', '', '100', '1', 'PAB', 'Fiat')", _("Panamanian balboa")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('111', '%s', 'K', '', '.', ' ', '', '', '100', '1', 'PGK', 'Fiat')", _("Papua New Guinean kina")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('112', '%s', '', '', '.', ' ', '', '', '1', '1', 'PYG', 'Fiat')", _("Paraguayan guarani")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('113', '%s', 'S/.', '', '.', ' ', '', '', '100', '1', 'PEN', 'Fiat')", _("Peruvian sol")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('114', '%s', '%s', '', '.', ' ', '', '', '100', '1', 'PHP', 'Fiat')", _("Philippine peso"), L"₱"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('115', '%s', '', '%s', ',', '.', '%s', 'grosz', '100', '1', 'PLN', 'Fiat')", _("Polish zloty"), L"zł", L"złoty"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('116', '%s', 'QR', '', '.', ' ', '', '', '100', '1', 'QAR', 'Fiat')", _("Qatari riyal")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('117', '%s', 'L', '', '.', ' ', '', '', '100', '1', 'RON', 'Fiat')", _("Romanian leu")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('118', '%s', 'RF', '', '.', ' ', '', '', '1', '1', 'RWF', 'Fiat')", _("Rwandan franc")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('119', '%s', 'Db', '', '.', ' ', '', '', '100', '1', 'STD', 'Fiat')", L"São Tomé & Príncipe dobra (1977-2017)"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('120', '%s', 'SR', '', '.', ' ', '', '', '100', '1', 'SAR', 'Fiat')", _("Saudi riyal")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('121', '%s', 'din.', '', '.', ' ', '', '', '1', '1', 'RSD', 'Fiat')", _("Serbian dinar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('122', '%s', 'SR', '', '.', ' ', '', '', '100', '1', 'SCR', 'Fiat')", _("Seychellois rupee")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('123', '%s', 'Le', '', '.', ' ', '', '', '100', '1', 'SLL', 'Fiat')", _("Sierra Leonean leone (1964-2022)")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('124', '%s', 'S$', '', '.', ' ', '', '', '100', '1', 'SGD', 'Fiat')", _("Singapore dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('125', '%s', 'SI$', '', '.', ' ', '', '', '100', '1', 'SBD', 'Fiat')", _("Solomon Islands dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('126', '%s', 'Sh.', '', '.', ' ', '', '', '1', '1', 'SOS', 'Fiat')", _("Somali shilling")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('127', '%s', 'R', '', '.', ' ', '', '', '100', '1', 'ZAR', 'Fiat')", _("South African rand")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('128', '%s', 'Rs', '', '.', ' ', '', '', '100', '1', 'LKR', 'Fiat')", _("Sri Lankan rupee")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('129', '%s', '%s', '', '.', ' ', '', '', '100', '1', 'SHP', 'Fiat')", _("St. Helena pound"), L"£"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('130', '%s', '', '', '.', ' ', '', '', '100', '1', 'SDG', 'Fiat')", _("Sudanese pound")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('131', '%s', '$', '', '.', ' ', '', '', '100', '1', 'SRD', 'Fiat')", _("Surinamese dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('132', '%s', 'E', '', '.', ' ', '', '', '100', '1', 'SZL', 'Fiat')", _("Swazi lilangeni")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('133', '%s', 'kr', '', '.', ' ', '', '', '100', '1', 'SEK', 'Fiat')", _("Swedish krona")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('134', '%s', 'Fr.', '', '.', ' ', '', '', '100', '1', 'CHF', 'Fiat')", _("Swiss franc")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('135', '%s', '', '', '.', ' ', '', '', '1', '1', 'SYP', 'Fiat')", _("Syrian pound")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('136', '%s', 'NT$', '', '.', ' ', '', '', '100', '1', 'TWD', 'Fiat')", _("New Taiwan dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('137', '%s', '', '', '.', ' ', '', '', '100', '1', 'TJS', 'Fiat')", _("Tajikistani somoni")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('138', '%s', '', '', '.', ' ', '', '', '1', '1', 'TZS', 'Fiat')", _("Tanzanian shilling")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('139', '%s', '%s', '', '.', ' ', '', '', '100', '1', 'THB', 'Fiat')", _("Thai baht"), L"฿"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('140', '%s', 'TT$', '', '.', ' ', '', '', '100', '1', 'TTD', 'Fiat')", _("Trinidad & Tobago dollar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('141', '%s', 'DT', '', '.', ' ', '', '', '100', '1', 'TND', 'Fiat')", _("Tunisian dinar")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('142', '%s', '%s', '', '.', ' ', '', '', '100', '1', 'TRY', 'Fiat')", _("Turkish lira"), L"₺"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('143', '%s', 'm', '', '.', ' ', '', '', '100', '1', 'TMT', 'Fiat')", _("Turkmenistani manat")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('144', '%s', 'USh', '', '.', ' ', '', '', '1', '1', 'UGX', 'Fiat')", _("Ugandan shilling")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('145', '%s', '', '', '.', ' ', '', '', '100', '1', 'AED', 'Fiat')", _("UAE dirham")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('146', '%s', '$U', '', '.', ' ', '', '', '100', '1', 'UYU', 'Fiat')", _("Uruguayan peso")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('147', '%s', '', '', '.', ' ', '', '', '1', '1', 'UZS', 'Fiat')", _("Uzbekistani som")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('148', '%s', 'VT', '', '.', ' ', '', '', '100', '1', 'VUV', 'Fiat')", _("Vanuatu vatu")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('149', '%s', '%s', '', '.', ' ', '', '', '1', '1', 'VND', 'Fiat')", _("Vietnamese dong"), L"₫"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('150', '%s', 'WS$', '', '.', ' ', '', '', '100', '1', 'WST', 'Fiat')", _("Samoan tala")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('151', '%s', '', '', '.', ' ', '', '', '1', '1', 'YER', 'Fiat')", _("Yemeni rial")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('152', '%s', 'Bs.', '', '.', ',', '%s', '%s', '100', '1', 'VEF', 'Fiat')", L"Venezuelan bolívar (2008-2018)", L"bolívar", L"céntimos"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('153', '%s', '%s', '', '.', ',', '', '', '100000000', '1', 'BTC', 'Crypto')", _("Bitcoin"), L"Ƀ"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('154', '%s', 'BYN', '', '.', ',', '', '', '100', '1', 'BYN', 'Fiat')", _("Belarusian ruble")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('155', '%s', '$', '', '.', ',', '', '', '100', '1', 'CUC', 'Fiat')", _("Cuban convertible peso")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('156', '%s', '$', '', '.', ',', '', '', '100', '1', 'CUP', 'Fiat')", _("Cuban peso")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('157', '%s', 'MRU', '', '.', ',', '', '', '100', '1', 'MRU', 'Fiat')", _("Mauritanian ouguiya")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('158', '%s', 'MZN', '', '.', ',', '', '', '100', '1', 'MZN', 'Fiat')", _("Mozambican metical")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('159', '%s', 'SLE', '', '.', ',', '', '', '100', '1', 'SLE', 'Fiat')", _("Sierra Leonean leone")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('160', '%s', '%s', '', '.', ',', '', '', '100', '1', 'SSP', 'Fiat')", _("South Sudanese pound"), L"£"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('161', '%s', 'Db', '', '.', ',', '', '', '100', '1', 'STN', 'Fiat')", L"São Tomé & Príncipe dobra"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('162', '%s', 'SVC', '', '.', ',', '', '', '100', '1', 'SVC', 'Fiat')", L"Salvadoran colón"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('163', '%s', 'T$', '', '.', ',', '', '', '100', '1', 'TOP', 'Fiat')", L"Tongan paʻanga"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('164', '%s', 'UYW', '', '.', ',', '', '', '10000', '1', 'UYW', 'Fiat')", _("Uruguayan nominal wage index unit")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('165', '%s', 'VED', '', '.', ',', '', '', '100', '1', 'VED', 'Fiat')", L"Bolívar soberano"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('166', '%s', 'VES', '', '.', ',', '', '', '100', '1', 'VES', 'Fiat')", L"Venezuelan bolívar"));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('167', '%s', 'ZK', '', '.', ',', '', '', '100', '1', 'ZMW', 'Fiat')", _("Zambian kwacha")));
+        db->ExecuteUpdate(wxString::Format("INSERT INTO CURRENCYFORMATS_V1 VALUES ('168', '%s', 'ZWL', '', '.', ',', '', '', '100', '1', 'ZWL', 'Fiat')", _("Zimbabwean dollar (2009)")));
         db->Commit();
     }
     
@@ -441,14 +441,14 @@
             CURRENCYID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -659,7 +659,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -668,7 +668,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -726,10 +726,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO CURRENCYFORMATS_V1(CURRENCYNAME, PFX_SYMBOL, SFX_SYMBOL, DECIMAL_POINT, GROUP_SEPARATOR, UNIT_NAME, CENT_NAME, SCALE, BASECONVRATE, CURRENCY_SYMBOL, CURRENCY_TYPE, CURRENCYID) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
         }
@@ -835,9 +835,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -862,8 +861,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Currencyhistory_V1.h b/src/db/DB_Table_Currencyhistory_V1.h
--- a/src/db/DB_Table_Currencyhistory_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Currencyhistory_V1.h	2025-07-09 01:46:59.632940413 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -203,14 +203,14 @@
             CURRHISTID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -338,7 +338,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -347,7 +347,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -405,10 +405,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO CURRENCYHISTORY_V1(CURRENCYID, CURRDATE, CURRVALUE, CURRUPDTYPE, CURRHISTID) VALUES(?, ?, ?, ?, ?)";
         }
@@ -507,9 +507,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -534,8 +533,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Customfielddata_V1.h b/src/db/DB_Table_Customfielddata_V1.h
--- a/src/db/DB_Table_Customfielddata_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Customfielddata_V1.h	2025-07-09 01:46:59.636940436 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -193,14 +193,14 @@
             FIELDATADID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -315,7 +315,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -324,7 +324,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -382,10 +382,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO CUSTOMFIELDDATA_V1(FIELDID, REFID, CONTENT, FIELDATADID) VALUES(?, ?, ?, ?)";
         }
@@ -483,9 +483,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -510,8 +509,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Customfield_V1.h b/src/db/DB_Table_Customfield_V1.h
--- a/src/db/DB_Table_Customfield_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Customfield_V1.h	2025-07-09 01:46:59.632940413 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -203,14 +203,14 @@
             FIELDID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -335,7 +335,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -344,7 +344,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -402,10 +402,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO CUSTOMFIELD_V1(REFTYPE, DESCRIPTION, TYPE, PROPERTIES, FIELDID) VALUES(?, ?, ?, ?, ?)";
         }
@@ -504,9 +504,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -531,8 +530,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table.h b/src/db/DB_Table.h
--- a/src/db/DB_Table.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table.h	2025-07-09 01:46:59.632940413 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -50,6 +50,8 @@
     {}
 };
 
+static int64 ticks_last_ = 0;
+    
 struct DB_Table
 {
     DB_Table(): hit_(0), miss_(0), skip_(0) {};
@@ -70,10 +72,14 @@
         db->ExecuteUpdate("DROP TABLE IF EXISTS " + this->name());
     }
 
-    static wxLongLong newId()
+    static int64 newId()
     {
-        // Get the current time in milliseconds as wxLongLong
-        wxLongLong ticks = wxDateTime::UNow().GetValue();
+        // Get the current time in milliseconds as wxLongLong/int64
+        int64 ticks = wxDateTime::UNow().GetValue();
+        // Ensure uniqueness from last generated value
+        if (ticks <= ticks_last_)
+            ticks = ticks_last_ + 1;
+        ticks_last_ = ticks;
         // Generate a random 3-digit number (0 to 999)
         std::random_device rd;
         std::mt19937 gen(rd());
@@ -169,10 +175,7 @@
 template<class DATA, typename Arg1, typename... Args>
 bool match(const DATA* data, const Arg1& arg1, const Args&... args)
 {
-    if (data->match(arg1)) 
-        return match(data, args...);
-    else
-        return false; // Short-circuit evaluation
+    return (data->match(arg1) && ... && data->match(args));
 }
 
 struct SorterByACCESSINFO
diff -Naur a/src/db/DB_Table_Infotable_V1.h b/src/db/DB_Table_Infotable_V1.h
--- a/src/db/DB_Table_Infotable_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Infotable_V1.h	2025-07-09 01:46:59.636940436 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -109,7 +109,7 @@
     void ensure_data(wxSQLite3Database* db)
     {
         db->Begin();
-        db->ExecuteUpdate(wxString::Format("INSERT INTO INFOTABLE_V1 VALUES ('1', '%s', '%s')", L"DATAVERSION", L"3"));
+        db->ExecuteUpdate("INSERT INTO INFOTABLE_V1 VALUES ('1', 'DATAVERSION', '3')");
         db->Commit();
     }
     
@@ -184,14 +184,14 @@
             INFOID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -292,7 +292,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -301,7 +301,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -359,10 +359,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO INFOTABLE_V1(INFONAME, INFOVALUE, INFOID) VALUES(?, ?, ?)";
         }
@@ -459,9 +459,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -486,8 +485,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Payee_V1.h b/src/db/DB_Table_Payee_V1.h
--- a/src/db/DB_Table_Payee_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Payee_V1.h	2025-07-09 01:46:59.636940436 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -233,14 +233,14 @@
             PAYEEID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -403,7 +403,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -412,7 +412,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -470,10 +470,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO PAYEE_V1(PAYEENAME, CATEGID, NUMBER, WEBSITE, NOTES, ACTIVE, PATTERN, PAYEEID) VALUES(?, ?, ?, ?, ?, ?, ?, ?)";
         }
@@ -575,9 +575,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -602,8 +601,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Report_V1.h b/src/db/DB_Table_Report_V1.h
--- a/src/db/DB_Table_Report_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Report_V1.h	2025-07-09 01:46:59.636940436 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -233,14 +233,14 @@
             REPORTID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -402,7 +402,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -411,7 +411,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -469,10 +469,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO REPORT_V1(REPORTNAME, GROUPNAME, ACTIVE, SQLCONTENT, LUACONTENT, TEMPLATECONTENT, DESCRIPTION, REPORTID) VALUES(?, ?, ?, ?, ?, ?, ?, ?)";
         }
@@ -574,9 +574,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -601,8 +600,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Setting_V1.h b/src/db/DB_Table_Setting_V1.h
--- a/src/db/DB_Table_Setting_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Setting_V1.h	2025-07-09 01:46:59.636940436 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -183,14 +183,14 @@
             SETTINGID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -291,7 +291,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -300,7 +300,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -358,10 +358,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO SETTING_V1(SETTINGNAME, SETTINGVALUE, SETTINGID) VALUES(?, ?, ?)";
         }
@@ -458,9 +458,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -485,8 +484,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Shareinfo_V1.h b/src/db/DB_Table_Shareinfo_V1.h
--- a/src/db/DB_Table_Shareinfo_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Shareinfo_V1.h	2025-07-09 01:46:59.636940436 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -213,14 +213,14 @@
             SHAREINFOID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -361,7 +361,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -370,7 +370,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -428,10 +428,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO SHAREINFO_V1(CHECKINGACCOUNTID, SHARENUMBER, SHAREPRICE, SHARECOMMISSION, SHARELOT, SHAREINFOID) VALUES(?, ?, ?, ?, ?, ?)";
         }
@@ -531,9 +531,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -558,8 +557,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Splittransactions_V1.h b/src/db/DB_Table_Splittransactions_V1.h
--- a/src/db/DB_Table_Splittransactions_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Splittransactions_V1.h	2025-07-09 01:46:59.636940436 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -203,14 +203,14 @@
             SPLITTRANSID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -338,7 +338,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -347,7 +347,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -405,10 +405,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO SPLITTRANSACTIONS_V1(TRANSID, CATEGID, SPLITTRANSAMOUNT, NOTES, SPLITTRANSID) VALUES(?, ?, ?, ?, ?)";
         }
@@ -507,9 +507,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -534,8 +533,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Stockhistory_V1.h b/src/db/DB_Table_Stockhistory_V1.h
--- a/src/db/DB_Table_Stockhistory_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Stockhistory_V1.h	2025-07-09 01:46:59.636940436 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -203,14 +203,14 @@
             HISTID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -337,7 +337,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -346,7 +346,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -404,10 +404,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO STOCKHISTORY_V1(SYMBOL, DATE, VALUE, UPDTYPE, HISTID) VALUES(?, ?, ?, ?, ?)";
         }
@@ -506,9 +506,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -533,8 +532,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Stock_V1.h b/src/db/DB_Table_Stock_V1.h
--- a/src/db/DB_Table_Stock_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Stock_V1.h	2025-07-09 01:46:59.636940436 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -263,14 +263,14 @@
             STOCKID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -473,7 +473,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -482,7 +482,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -540,10 +540,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO STOCK_V1(HELDAT, PURCHASEDATE, STOCKNAME, SYMBOL, NUMSHARES, PURCHASEPRICE, NOTES, CURRENTPRICE, VALUE, COMMISSION, STOCKID) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
         }
@@ -648,9 +648,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -675,8 +674,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Taglink_V1.h b/src/db/DB_Table_Taglink_V1.h
--- a/src/db/DB_Table_Taglink_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Taglink_V1.h	2025-07-09 01:46:59.636940436 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -193,14 +193,14 @@
             TAGLINKID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -315,7 +315,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -324,7 +324,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -382,10 +382,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO TAGLINK_V1(REFTYPE, REFID, TAGID, TAGLINKID) VALUES(?, ?, ?, ?)";
         }
@@ -483,9 +483,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -510,8 +509,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Tag_V1.h b/src/db/DB_Table_Tag_V1.h
--- a/src/db/DB_Table_Tag_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Tag_V1.h	2025-07-09 01:46:59.636940436 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -183,14 +183,14 @@
             TAGID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -292,7 +292,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -301,7 +301,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -359,10 +359,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO TAG_V1(TAGNAME, ACTIVE, TAGID) VALUES(?, ?, ?)";
         }
@@ -459,9 +459,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -486,8 +485,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Translink_V1.h b/src/db/DB_Table_Translink_V1.h
--- a/src/db/DB_Table_Translink_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Translink_V1.h	2025-07-09 01:46:59.636940436 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -194,14 +194,14 @@
             TRANSLINKID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -316,7 +316,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -325,7 +325,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -383,10 +383,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO TRANSLINK_V1(CHECKINGACCOUNTID, LINKTYPE, LINKRECORDID, TRANSLINKID) VALUES(?, ?, ?, ?)";
         }
@@ -484,9 +484,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -511,8 +510,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/DB_Table_Usage_V1.h b/src/db/DB_Table_Usage_V1.h
--- a/src/db/DB_Table_Usage_V1.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/DB_Table_Usage_V1.h	2025-07-09 01:46:59.636940436 +0200
@@ -12,7 +12,7 @@
  *      @brief
  *
  *      Revision History:
- *          AUTO GENERATED at 2025-02-04 16:22:14.834591.
+ *          AUTO GENERATED at 2025-05-08 09:16:56.228434.
  *          DO NOT EDIT!
  */
 //=============================================================================
@@ -183,14 +183,14 @@
             USAGEID = id;
         }
 
-        bool operator < (const Data& r) const
+        auto operator < (const Data& other) const
         {
-            return this->id() < r.id();
+            return this->id() < other.id();
         }
-        
-        bool operator < (const Data* r) const
+
+        auto operator < (const Data* other) const
         {
-            return this->id() < r->id();
+            return this->id() < other->id();
         }
 
         bool equals(const Data* r) const
@@ -291,7 +291,7 @@
         }
 
         /** Save the record instance in memory to the database. */
-        bool save(wxSQLite3Database* db)
+        bool save(wxSQLite3Database* db, bool force_insert = false)
         {
             if (db && db->IsReadOnly()) return false;
             if (!table_ || !db) 
@@ -300,7 +300,7 @@
                 return false;
             }
 
-            return table_->save(this, db);
+            return table_->save(this, db, force_insert);
         }
 
         /** Remove the record instance from memory and the database. */
@@ -358,10 +358,10 @@
     * Either create a new record or update the existing record.
     * Remove old record from the memory table (cache)
     */
-    bool save(Self::Data* entity, wxSQLite3Database* db)
+    bool save(Self::Data* entity, wxSQLite3Database* db, bool force_insert = false)
     {
         wxString sql = wxEmptyString;
-        if (entity->id() <= 0) //  new & insert
+        if (entity->id() <= 0 || force_insert) //  new & insert
         {
             sql = "INSERT INTO USAGE_V1(USAGEDATE, JSONCONTENT, USAGEID) VALUES(?, ?, ?)";
         }
@@ -458,9 +458,8 @@
     template<typename... Args>
     Self::Data* get_one(const Args& ... args)
     {
-        for (Index_By_Id::iterator it = index_by_id_.begin(); it != index_by_id_.end(); ++ it)
+        for (auto& [_, item] : index_by_id_)
         {
-            Self::Data* item = it->second;
             if (item->id() > 0 && match(item, args...)) 
             {
                 ++ hit_;
@@ -485,8 +484,7 @@
             return nullptr;
         }
 
-        Index_By_Id::iterator it = index_by_id_.find(id);
-        if (it != index_by_id_.end())
+        if (auto it = index_by_id_.find(id); it != index_by_id_.end())
         {
             ++ hit_;
             return it->second;
diff -Naur a/src/db/sql_tables.sql b/src/db/sql_tables.sql
--- a/src/db/sql_tables.sql	2025-02-07 16:12:06.000000000 +0100
+++ b/src/db/sql_tables.sql	2025-07-09 01:46:59.636940436 +0200
@@ -7,7 +7,7 @@
 CREATE TABLE ACCOUNTLIST_V1(
 ACCOUNTID integer primary key
 , ACCOUNTNAME TEXT COLLATE NOCASE NOT NULL UNIQUE
-, ACCOUNTTYPE TEXT NOT NULL /* Checking, Term, Investment, Credit Card */
+, ACCOUNTTYPE TEXT NOT NULL /* Cash, Checking, Term, Investment, Credit Card, Loan, Asset, Shares */
 , ACCOUNTNUM TEXT
 , STATUS TEXT NOT NULL /* Open, Closed */
 , NOTES TEXT
@@ -167,6 +167,16 @@
 INSERT INTO CATEGORY_V1 VALUES(55,'Other Income',1,-1);
 INSERT INTO CATEGORY_V1 VALUES(56,'Other Expenses',1,-1);
 INSERT INTO CATEGORY_V1 VALUES(57,'Transfer',1,-1);
+INSERT INTO CATEGORY_V1 VALUES(58, 'Investment', 1, -1);
+INSERT INTO CATEGORY_V1 VALUES(59, 'Purchase', 1, 58);           -- Buying
+INSERT INTO CATEGORY_V1 VALUES(60, 'Sale', 1, 58);               -- Selling
+INSERT INTO CATEGORY_V1 VALUES(61, 'Dividend', 1, 58);           -- Dividend
+INSERT INTO CATEGORY_V1 VALUES(62, 'Capital Gains', 1, 58);      -- Capital gains
+INSERT INTO CATEGORY_V1 VALUES(63, 'Brokerage Fees', 1, 58);     -- Brokerage fees
+INSERT INTO CATEGORY_V1 VALUES(64, 'Interest', 1, 58);           -- Investment interest
+INSERT INTO CATEGORY_V1 VALUES(65, 'Taxes', 1, 58);              -- Investment taxes
+INSERT INTO CATEGORY_V1 VALUES(66, 'Split', 1, 58);              -- Stock split
+INSERT INTO CATEGORY_V1 VALUES(67, 'Merger', 1, 58);             -- Stock merger
 
 -- Describe CHECKINGACCOUNT_V1
 CREATE TABLE CHECKINGACCOUNT_V1(
@@ -547,4 +557,4 @@
 , FOREIGN KEY (TAGID) REFERENCES TAG_V1 (TAGID)
 , UNIQUE(REFTYPE, REFID, TAGID)
 );
-CREATE INDEX IDX_TAGLINK ON TAGLINK_V1 (REFTYPE, REFID, TAGID);
\ Nincs új sor a fájl végén
+CREATE INDEX IDX_TAGLINK ON TAGLINK_V1 (REFTYPE, REFID, TAGID);
diff -Naur a/src/dbupgrade.cpp b/src/dbupgrade.cpp
--- a/src/dbupgrade.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/dbupgrade.cpp	2025-07-09 01:46:59.636940436 +0200
@@ -70,9 +70,9 @@
         }
         catch (const wxSQLite3Exception& e)
         {
-            wxMessageBox(wxString::Format(_("MMEX database upgrade to version %i failed!"), version) + "\n\n"
-                + _("Please restore DB from autocreated pre-upgrade backup and retry or contact MMEX support") + "\n\n"
-                + e.GetMessage(), _("MMEX database upgrade"), wxOK | wxICON_ERROR);
+            wxMessageBox(wxString::Format(_t("MMEX database upgrade to version %i failed!"), version) + "\n\n"
+                + _t("Please restore DB from autocreated pre-upgrade backup and retry or contact MMEX support") + "\n\n"
+                + e.GetMessage(), _t("MMEX database upgrade"), wxOK | wxICON_ERROR);
             db->Rollback("MMEX_Upgrade");
             return false;
         }
@@ -104,9 +104,9 @@
 
     if (ver == -1 || ver > dbLatestVersion)
     {
-        wxMessageBox(_("MMEX database error!") + "\n\n"
-            + wxString::Format(_("MMEX database version %i doesn't work with this MMEX version.\nPlease upgrade MMEX to newer version."), ver)
-            , _("MMEX database upgrade"), wxOK | wxICON_ERROR);
+        wxMessageBox(_t("MMEX database error!") + "\n\n"
+            + wxString::Format(_t("MMEX database version %i doesn't work with this MMEX version.\nPlease upgrade MMEX to newer version."), ver)
+            , _t("MMEX database upgrade"), wxOK | wxICON_ERROR);
         return false;
     }
 
@@ -117,9 +117,9 @@
             return false;
     }
 
-    wxMessageBox(wxString::Format(_("MMEX database succesfully upgraded to version %i"), ver) + "\n\n"
-        + _u("We suggest a database optimization under Tools → Database → Optimize")
-            , _("MMEX database upgrade"), wxOK | wxICON_INFORMATION);
+    wxMessageBox(wxString::Format(_t("MMEX database succesfully upgraded to version %i"), ver) + "\n\n"
+        + _tu("It is recommended to optimize the database with Tools → Database → Optimize Database…")
+            , _t("MMEX database upgrade"), wxOK | wxICON_INFORMATION);
 
     return true;
 }
@@ -180,14 +180,14 @@
 
 void dbUpgrade::SqlFileDebug(wxSQLite3Database * db)
 {
-    wxFileDialog fileDlgLoad(nullptr,_("Load debug file"),"","","MMDBG Files(*.mmdbg)|*.mmdbg", wxFD_OPEN | wxFD_FILE_MUST_EXIST);
+    wxFileDialog fileDlgLoad(nullptr,_t("Load debug file"),"","","MMDBG Files(*.mmdbg)|*.mmdbg", wxFD_OPEN | wxFD_FILE_MUST_EXIST);
     if (fileDlgLoad.ShowModal() != wxID_OK)
         return;
 
     wxString filePath = fileDlgLoad.GetPath();
     if (wxFileName(filePath).GetExt().MakeLower() != "mmdbg")
     {
-        wxMessageBox(_("Wrong file type!"), _("MMEX debug error"), wxOK | wxICON_ERROR);
+        wxMessageBox(_t("Wrong file type!"), _t("MMEX debug error"), wxOK | wxICON_ERROR);
         return;
     }
 
@@ -224,25 +224,25 @@
                 }
                 catch (const wxSQLite3Exception& e)
                 {
-                    wxMessageBox(_("Query error, please contact MMEX support!") + "\n\n" + e.GetMessage(), _("MMEX debug error"), wxOK | wxICON_ERROR);
+                    wxMessageBox(_t("Query error, please contact MMEX support!") + "\n\n" + e.GetMessage(), _t("MMEX debug error"), wxOK | wxICON_ERROR);
                     return;
                 }
                 
             }
             else
             {
-                wxMessageBox(_("Invalid file content, please contact MMEX support!"), _("MMEX debug error"), wxOK | wxICON_ERROR);
+                wxMessageBox(_t("Invalid file content, please contact MMEX support!"), _t("MMEX debug error"), wxOK | wxICON_ERROR);
                 return;
             }
         }
 
         txtLog << wxTextFile::GetEOL() << wxTextFile::GetEOL() << wxTextFile::GetEOL() << getProgramDescription();
 
-        wxTextEntryDialog dlg(nullptr, _("Send this log to MMEX support team:\npress OK to save to file or Cancel to exit"),
-            _("MMEX debug"), txtLog, wxOK | wxCANCEL | wxCENTRE | wxTE_MULTILINE);
+        wxTextEntryDialog dlg(nullptr, _t("Send this log to MMEX support team:\npress OK to save to file or Cancel to exit"),
+            _t("MMEX debug"), txtLog, wxOK | wxCANCEL | wxCENTRE | wxTE_MULTILINE);
         if (dlg.ShowModal() == wxID_OK)
         {
-            wxFileDialog fileDlgSave(nullptr, _("Save debug file"), "", "", "*.txt", wxFD_SAVE | wxFD_OVERWRITE_PROMPT);
+            wxFileDialog fileDlgSave(nullptr, _t("Save debug file"), "", "", "*.txt", wxFD_SAVE | wxFD_OVERWRITE_PROMPT);
             if (fileDlgSave.ShowModal() == wxID_OK)
             {
                 wxFile file(fileDlgSave.GetPath(), wxFile::write);
@@ -275,18 +275,18 @@
                 }
                 catch (const wxSQLite3Exception& e)
                 {
-                    wxMessageBox(_("Query error, please contact MMEX support!") + "\n\n" + e.GetMessage(), _("MMEX debug error"), wxOK | wxICON_ERROR);
+                    wxMessageBox(_t("Query error, please contact MMEX support!") + "\n\n" + e.GetMessage(), _t("MMEX debug error"), wxOK | wxICON_ERROR);
                     db->Rollback("MMEX_Debug");
                     return;
                 }
             }
         }
         db->ReleaseSavepoint("MMEX_Debug");
-        wxMessageBox(_("DB maintenance completed, please close and re-open MMEX!"), _("MMEX debug"), wxOK | wxICON_INFORMATION);
+        wxMessageBox(_t("DB maintenance completed, please close and re-open MMEX!"), _t("MMEX debug"), wxOK | wxICON_INFORMATION);
     }
     else
     {
-        wxMessageBox(_("Invalid file content, please contact MMEX support!"), _("MMEX debug error"), wxOK | wxICON_ERROR);
+        wxMessageBox(_t("Invalid file content, please contact MMEX support!"), _t("MMEX debug error"), wxOK | wxICON_ERROR);
         return;
     }
 }
diff -Naur a/src/dbwrapper.cpp b/src/dbwrapper.cpp
--- a/src/dbwrapper.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/dbwrapper.cpp	2025-07-09 01:46:59.636940436 +0200
@@ -59,7 +59,7 @@
             db->ExecuteQuery("select * from INFOTABLE_V1;");
         }
     }
-    catch (const wxSQLite3Exception)
+    catch (const wxSQLite3Exception&)
     {
         
         // Check if database is encrypted with legacy AES128 cipher used prior to 1.8.1
@@ -75,9 +75,9 @@
                 db->ExecuteQuery("select * from INFOTABLE_V1;");
             }
 
-            wxMessageDialog msgDlg(nullptr, _("The default cipher algorithm has changed from AES-128 to AES-256 for compatibility with the MMEX mobile apps.")
-                + "\n\n" + _("Rekeying with the new cipher will prevent opening this database in older versions of MMEX.")
-                + "\n\n" + _("Do you want to update the database?"), _("Opening MMEX Database – Warning"), wxYES_NO | wxICON_WARNING);
+            wxMessageDialog msgDlg(nullptr, _t("The default cipher algorithm has changed from AES-128 to AES-256 for compatibility with the MMEX mobile apps.")
+                + "\n\n" + _t("Rekeying with the new cipher will prevent opening this database in older versions of MMEX.")
+                + "\n\n" + _t("Do you want to update the database?"), _t("Opening MMEX Database – Warning"), wxYES_NO | wxICON_WARNING);
             if (msgDlg.ShowModal() == wxID_YES)
             {
                 if (db->ExecuteQuery("PRAGMA page_size;").GetInt(0) < 4096)
@@ -107,22 +107,22 @@
     db->Close();
     db.reset();
 
-    wxString s = _("When database file opening:");
+    wxString s = _t("When database file opening:");
     s << "\n" << wxString::Format("\n%s\n\n", dbpath);
     if (err == SQLITE_CANTOPEN)
     {
-        s << _("Unable to open file") << "\n" << _("You must specify path to another database file") << "\n";
+        s << _t("Unable to open file") << "\n" << _t("Path required to be specified to another database file.") << "\n";
     }
     else if (err == SQLITE_NOTADB)
     {
-        s << _("An incorrect password given for an encrypted file\nor\nattempt to open a File that is not a database file \n");
+        s << _t("An incorrect password was provided for an encrypted file,\nor\nan attempt was made to open a file that is not a database file.") << "\n";
     }
     else
     {
-        s << wxString::Format(_("Error: %s"), wxString() << err << "\n" << errStr << "\n");
+        s << wxString::Format(_t("Error: %s"), wxString() << err << "\n" << errStr << "\n");
     }
 
-    wxMessageDialog msgDlg(nullptr, s, _("Opening MMEX Database – Error"), wxOK | wxICON_ERROR);
+    wxMessageDialog msgDlg(nullptr, s, _t("Opening MMEX Database – Error"), wxOK | wxICON_ERROR);
     msgDlg.ShowModal();
 
     return db; // return a nullptr database pointer
diff -Naur a/src/defs.h b/src/defs.h
--- a/src/defs.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/defs.h	2025-07-09 01:46:59.636940436 +0200
@@ -69,8 +69,11 @@
 #pragma warning (disable:4100)
 #endif
 
+#define _n(string) wxString(wxTRANSLATE(string))
+#define _t(string) _(string)
+#define _nu(string_utf8) wxString::FromUTF8(wxTRANSLATE(string_utf8))
+#define _tu(string_utf8) wxGetTranslation(wxString::FromUTF8(wxTRANSLATE(string_utf8)))
 #define wxPLURAL_U8(singular, plural, n) wxPLURAL(wxString::FromUTF8(singular), wxString::FromUTF8(plural), n)
-#define _u(unicode_string) wxGetTranslation(wxString::FromUTF8(wxTRANSLATE(unicode_string)))
 
 #endif // MM_EX_DEFS_H_
 
diff -Naur a/src/diagnostics.cpp b/src/diagnostics.cpp
--- a/src/diagnostics.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/diagnostics.cpp	2025-07-09 01:46:59.640940460 +0200
@@ -48,7 +48,7 @@
     , m_is_max(is_maximized)
 {
 
-    createWindow(parent, _("Diagnostics"));
+    createWindow(parent, _t("Diagnostics"));
 }
 
 bool mmDiagnosticsDialog::createWindow(wxWindow* parent
@@ -85,7 +85,7 @@
     bSizer0->Add(bSizer01, g_flagsExpand);
 
     wxBoxSizer* bSizer02 = new wxBoxSizer(wxHORIZONTAL);
-    m_okButton = new wxButton(this, wxID_OK, _("&Close"));
+    m_okButton = new wxButton(this, wxID_OK, _t("&Close"));
     bSizer02->Add(m_okButton, 0, wxALL, 5);
     bSizer0->Add(bSizer02, g_flagsCenter);
 
@@ -98,7 +98,7 @@
     wxString html;
 
     html << "<p><b>";
-    html << _("Developers may ask you to provide information presented here in order to help diagnose issues you may report with the program.");
+    html << _t("Developers may ask you to provide information presented here in order to help diagnose issues you may report with the program.");
     html << "</b></p>";
 
     html << "<p>";
@@ -106,11 +106,11 @@
     html << "<br>";
 
     // Saved dimensions
-    int valX = Model_Setting::instance().GetIntSetting("ORIGINX", -1);
-    int valY = Model_Setting::instance().GetIntSetting("ORIGINY", -1);
-    int valW = Model_Setting::instance().GetIntSetting("SIZEW", -1);
-    int valH = Model_Setting::instance().GetIntSetting("SIZEH", -1);
-    bool is_max = Model_Setting::instance().GetBoolSetting("ISMAXIMIZED", "?");
+    int valX = Model_Setting::instance().getInt("ORIGINX", -1);
+    int valY = Model_Setting::instance().getInt("ORIGINY", -1);
+    int valW = Model_Setting::instance().getInt("SIZEW", -1);
+    int valH = Model_Setting::instance().getInt("SIZEH", -1);
+    bool is_max = Model_Setting::instance().getBool("ISMAXIMIZED", "?");
     html << wxString::Format("saved dimensions : x:%i, y:%i, w:%i, h:%i, maximized:%s"
         , valX, valY, valW, valH
         , is_max ? "true" : "false");
diff -Naur a/src/filtertrans.cpp b/src/filtertrans.cpp
--- a/src/filtertrans.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/filtertrans.cpp	2025-07-09 01:46:59.640940460 +0200
@@ -126,7 +126,7 @@
     mmHTMLBuilder hb;
     m_trans.clear();
     const auto splits = Model_Splittransaction::instance().get_all();
-    const auto tags = Model_Taglink::instance().get_all(Model_Attachment::REFTYPE_STR_TRANSACTION);
+    const auto tags = Model_Taglink::instance().get_all(Model_Checking::refTypeName);
     for (const auto& tran : Model_Checking::instance().all()) //TODO: find should be faster
     {
         if (!mmIsRecordMatches(tran, splits)) continue;
@@ -184,27 +184,27 @@
 )";
 
     hb.init(false, extra_style);
-    hb.addReportHeader(_("Transaction Details"), 1, false);
+    hb.addReportHeader(_t("Transaction Details"), 1, false);
 
-    const wxString& AttRefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+    const wxString& AttRefType = Model_Checking::refTypeName;
     hb.addDivContainer();
-    hb.addTableCellLink("back:",wxString::Format("<< %s", _("Back")));
+    hb.addTableCellLink("back:",wxString::Format("<< %s", _t("Back")));
     hb.endDiv();
     hb.addDivContainer("shadow");
     hb.startSortTable();
     hb.startThead();
     hb.startTableRow();
-    hb.addTableHeaderCell(_("ID"), "ID text-right");
-    hb.addTableHeaderCell(_("Color"), "Color text-center");
-    hb.addTableHeaderCell(_("Date"), "Date");
-    hb.addTableHeaderCell(_("Number"), "Number");
-    hb.addTableHeaderCell(_("Account"), "Account");
-    hb.addTableHeaderCell(_("Payee"), "Payee");
-    hb.addTableHeaderCell(_("Status"), "Status text-center");
-    hb.addTableHeaderCell(_("Category"), "Category");
-    hb.addTableHeaderCell(_("Type"), "Type");
-    hb.addTableHeaderCell(_("Amount"), "Amount text-right");
-    hb.addTableHeaderCell(_("Notes"), "Notes");
+    hb.addTableHeaderCell(_t("ID"), "ID text-right");
+    hb.addTableHeaderCell(_t("Color"), "Color text-center");
+    hb.addTableHeaderCell(_t("Date"), "Date");
+    hb.addTableHeaderCell(_t("Number"), "Number");
+    hb.addTableHeaderCell(_t("Account"), "Account");
+    hb.addTableHeaderCell(_t("Payee"), "Payee");
+    hb.addTableHeaderCell(_t("Status"), "Status text-center");
+    hb.addTableHeaderCell(_t("Category"), "Category");
+    hb.addTableHeaderCell(_t("Type"), "Type");
+    hb.addTableHeaderCell(_t("Amount"), "Amount text-right");
+    hb.addTableHeaderCell(_t("Notes"), "Notes");
     hb.endTableRow();
     hb.endThead();
     hb.startTbody();
diff -Naur a/src/filtertransdialog.cpp b/src/filtertransdialog.cpp
--- a/src/filtertransdialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/filtertransdialog.cpp	2025-07-09 01:46:59.640940460 +0200
@@ -44,15 +44,23 @@
 static const wxString COLUMN_NAMES[] = { "ID", "Color", "Date", "Number", "Account", "Payee", "Status", "Category", "Type", "Amount",
                                          "Notes", "UDFC01", "UDFC02", "UDFC03", "UDFC04", "UDFC05", "Tags", "FX Rate", "Time" };
 
-static const wxString TRANSACTION_STATUSES[] = { wxTRANSLATE("Unreconciled"), wxTRANSLATE("Reconciled"), wxTRANSLATE("Void"),
-                                                 wxTRANSLATE("Follow Up"),    wxTRANSLATE("Duplicate"),  wxTRANSLATE("All Except Reconciled") };
-
-static const wxString GROUPBY_OPTIONS[] = { wxTRANSLATE("Account"), wxTRANSLATE("Payee"), wxTRANSLATE("Category"), wxTRANSLATE("Type"),
-                                            wxTRANSLATE("Day"),     wxTRANSLATE("Month"), wxTRANSLATE("Year") };
-
-static const wxString CHART_OPTIONS[] = { wxTRANSLATE("Bar"), wxTRANSLATE("Line"), wxTRANSLATE("Line DateTime"),
-                                            wxTRANSLATE("Pie"),    wxTRANSLATE("Donut"), wxTRANSLATE("Radar"),
-                                            wxTRANSLATE("Bar Line"), wxTRANSLATE("Stacked Bar Line"), wxTRANSLATE("Stacked Area")};
+static const wxString TRANSACTION_STATUSES[] = {
+    _n("Unreconciled"),
+    _n("Reconciled"),
+    _n("Void"),
+    _n("Follow Up"),
+    _n("Duplicate"),
+    _n("All Except Reconciled")
+};
+
+static const wxString GROUPBY_OPTIONS[] = {
+    _n("Account"), _n("Payee"), _n("Category"), _n("Type"), _n("Day"), _n("Month"), _n("Year")
+};
+
+static const wxString CHART_OPTIONS[] = {
+    _n("Bar"), _n("Line"), _n("Line DateTime"), _n("Pie"), _n("Donut"), _n("Radar"),
+    _n("Bar Line"), _n("Stacked Bar Line"), _n("Stacked Area")
+};
 // Keep options aligned with HtmlBuilder GraphData::type
 
 // Used to determine if we need to refresh the tag text ctrl after
@@ -82,7 +90,7 @@
 {
     wxLogDebug("~mmFilterTransactionsDialog");
     if (isReportMode_)
-        Model_Infotable::instance().Set("TRANSACTION_FILTER_SIZE", GetSize());
+        Model_Infotable::instance().setSize("TRANSACTION_FILTER_SIZE", GetSize());
 }
 
 mmFilterTransactionsDialog::mmFilterTransactionsDialog(wxWindow* parent, int64 accountID, bool isReport, wxString selected)
@@ -121,7 +129,7 @@
     m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmLast12Months()));
     m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmCurrentYear()));
     m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmCurrentYearToDate()));
-    m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmLastYear()));
+    m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmLastYearBefore()));
     m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmCurrentFinancialYear()));
     m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmCurrentFinancialYearToDate()));
     m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmLastFinancialYear()));
@@ -135,7 +143,7 @@
 
     m_accounts_name.clear();
     const auto accounts = Model_Account::instance().find(
-        Model_Account::ACCOUNTTYPE(Model_Account::TYPE_STR_INVESTMENT, NOT_EQUAL));
+        Model_Account::ACCOUNTTYPE(Model_Account::TYPE_NAME_INVESTMENT, NOT_EQUAL));
     for (const auto& acc : accounts)
     {
         m_accounts_name.push_back(acc.ACCOUNTNAME);
@@ -210,7 +218,7 @@
         // If no accounts are explicitly selected, turn off the Account filter and set selection to "All"
         if (m_selected_accounts_id.empty())
         {
-            bSelectedAccounts_->SetLabelText(_("All"));
+            bSelectedAccounts_->SetLabelText(_t("All"));
             accountCheckBox_->SetValue(false);
             bSelectedAccounts_->Disable();
         }
@@ -265,7 +273,7 @@
     Value& j_category = GetValueByPointerWithDefault(j_doc, "/CATEGORY", "");
     wxString s_category = j_category.IsString() ? wxString::FromUTF8(j_category.GetString()) : "";
 
-    const wxString& delimiter = Model_Infotable::instance().GetStringInfo("CATEG_DELIMITER", ":");
+    const wxString& delimiter = Model_Infotable::instance().getString("CATEG_DELIMITER", ":");
     if (delimiter != ":" && s_category.Contains(":"))
     {
         for (const auto& category : Model_Category::all_categories())
@@ -378,7 +386,7 @@
             }
         }
         tagTextCtrl_->SetText(s_tag);
-        tagTextCtrl_->Validate();
+        tagTextCtrl_->ValidateTagText();
         tagCheckBox_->SetValue(true);
     }
     else
@@ -414,20 +422,22 @@
 
     // Custom Fields
     bool is_custom_found = false;
-    const wxString RefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+    const wxString RefType = Model_Checking::refTypeName;
+    int field_index = 0;
     for (const auto& i : Model_CustomField::instance().find(Model_CustomField::DB_Table_CUSTOMFIELD_V1::REFTYPE(RefType)))
     {
         const auto entry = wxString::Format("CUSTOM%lld", i.FIELDID);
         if (j_doc.HasMember(entry.c_str()))
         {
             const auto value = j_doc[const_cast<char*>(static_cast<const char*>(entry.mb_str()))].GetString();
-            m_custom_fields->SetStringValue(i.FIELDID, value, true);
+            m_custom_fields->SetStringValue(field_index, value, true);
             is_custom_found = true;
         }
         else
         {
-            m_custom_fields->SetStringValue(i.FIELDID, "");
+            m_custom_fields->SetStringValue(field_index, "");
         }
+        field_index++;
     }
 
     /*******************************************************
@@ -502,8 +512,8 @@
         // Add a blank setting at the beginning. This clears all selections if the user chooses it.
         m_setting_name->Append("", new wxStringClientData("{}"));
         // Add the 'Last Used' setting which was the last setting used that wasn't saved
-        m_setting_name->Append(_("Last Unsaved Filter"), new wxStringClientData(Model_Infotable::instance().GetStringInfo(m_filter_key + "_LAST_USED", "")));
-        wxArrayString filter_settings = Model_Infotable::instance().GetArrayStringSetting(m_filter_key, true);
+        m_setting_name->Append(_t("Last Unsaved Filter"), new wxStringClientData(Model_Infotable::instance().getString(m_filter_key + "_LAST_USED", "")));
+        wxArrayString filter_settings = Model_Infotable::instance().getArrayString(m_filter_key, true);
         for (const auto& data : filter_settings)
         {
             Document j_doc;
@@ -549,7 +559,7 @@
     /******************************************************************************
      Items Panel
     *******************************************************************************/
-    wxStaticBox* static_box_sizer = new wxStaticBox(this, wxID_ANY, _("Specify"));
+    wxStaticBox* static_box_sizer = new wxStaticBox(this, wxID_ANY, _t("Specify"));
     wxStaticBoxSizer* itemStaticBoxSizer4 = new wxStaticBoxSizer(static_box_sizer, wxVERTICAL);
     box_sizer2->Add(itemStaticBoxSizer4, g_flagsExpand);
 
@@ -566,16 +576,16 @@
     itemPanelSizer->AddGrowableCol(1, 1);
 
     // Account
-    accountCheckBox_ = new wxCheckBox(itemPanel, ID_ACCOUNT_CB, _("Account"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    accountCheckBox_ = new wxCheckBox(itemPanel, ID_ACCOUNT_CB, _t("Account"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     itemPanelSizer->Add(accountCheckBox_, g_flagsH);
 
-    bSelectedAccounts_ = new wxButton(itemPanel, wxID_STATIC, _("All"));
+    bSelectedAccounts_ = new wxButton(itemPanel, wxID_STATIC, _t("All"));
     bSelectedAccounts_->SetMinSize(wxSize(180, -1));
     bSelectedAccounts_->Connect(wxID_ANY, wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(mmFilterTransactionsDialog::OnAccountsButton), nullptr, this);
     itemPanelSizer->Add(bSelectedAccounts_, g_flagsExpand);
 
     // Period Range
-    datesCheckBox_ = new wxCheckBox(itemPanel, ID_PERIOD_CB, _("Period Range"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    datesCheckBox_ = new wxCheckBox(itemPanel, ID_PERIOD_CB, _t("Period Range"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     itemPanelSizer->Add(datesCheckBox_, g_flagsH);
 
     rangeChoice_ = new wxChoice(itemPanel, ID_DATE_RANGE);
@@ -587,7 +597,7 @@
     itemPanelSizer->Add(rangeChoice_, g_flagsExpand);
 
     // Date Range
-    dateRangeCheckBox_ = new wxCheckBox(itemPanel, ID_DATE_RANGE_CB, _("Date Range"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    dateRangeCheckBox_ = new wxCheckBox(itemPanel, ID_DATE_RANGE_CB, _t("Date Range"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     itemPanelSizer->Add(dateRangeCheckBox_, g_flagsH);
 
     fromDateCtrl_ = new mmDatePickerCtrl(itemPanel, wxID_FIRST, wxDefaultDateTime, wxDefaultPosition, wxDefaultSize, wxDP_DROPDOWN);
@@ -600,7 +610,7 @@
     itemPanelSizer->Add(dateSizer, wxSizerFlags(g_flagsExpand).Border(0));
 
     // Payee
-    payeeCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _("Payee"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    payeeCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _t("Payee"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     itemPanelSizer->Add(payeeCheckBox_, g_flagsH);
 
     cbPayee_ = new mmComboBoxPayee(itemPanel, mmID_PAYEE);
@@ -609,7 +619,7 @@
     itemPanelSizer->Add(cbPayee_, g_flagsExpand);
 
     // Category
-    categoryCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _("Category"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    categoryCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _t("Category"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     itemPanelSizer->Add(categoryCheckBox_, g_flagsH);
 
     categoryComboBox_ = new mmComboBoxCategory(itemPanel, mmID_CATEGORY);
@@ -618,21 +628,21 @@
     itemPanelSizer->Add(categoryComboBox_, g_flagsExpand);
 
     // Category sub-category checkbox
-    categorySubCatCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _("Include all subcategories"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    categorySubCatCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _t("Include all subcategories"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     categorySubCatCheckBox_->Bind(wxEVT_CHECKBOX, &mmFilterTransactionsDialog::OnCategoryChange, this);
 
     itemPanelSizer->AddSpacer(1);
     itemPanelSizer->Add(categorySubCatCheckBox_, g_flagsExpand);
 
     // Tags
-    tagCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _("Tags"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    tagCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _t("Tags"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     itemPanelSizer->Add(tagCheckBox_, g_flagsH);
 
     tagTextCtrl_ = new mmTagTextCtrl(itemPanel, wxID_ANY, true);
     itemPanelSizer->Add(tagTextCtrl_, g_flagsExpand);
 
     // Status
-    statusCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _("Status"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    statusCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _t("Status"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     itemPanelSizer->Add(statusCheckBox_, g_flagsH);
 
     choiceStatus_ = new wxChoice(itemPanel, wxID_ANY);
@@ -641,18 +651,18 @@
         choiceStatus_->Append(wxGetTranslation(i), new wxStringClientData(i));
 
     itemPanelSizer->Add(choiceStatus_, g_flagsExpand);
-    mmToolTip(choiceStatus_, _("Specify the status for the transaction"));
+    mmToolTip(choiceStatus_, _t("Specify the status for the transaction"));
 
     // Type
-    typeCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _("Type"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    typeCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _t("Type"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
 
     wxFlexGridSizer* typeSizer = new wxFlexGridSizer(0, 2, 0, 0);
     typeSizer->AddGrowableCol(0, 1);
     typeSizer->AddGrowableCol(1, 1);
-    cbTypeWithdrawal_ = new wxCheckBox(itemPanel, wxID_ANY, _("Withdrawal"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    cbTypeDeposit_ = new wxCheckBox(itemPanel, wxID_ANY, _("Deposit"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    cbTypeTransferTo_ = new wxCheckBox(itemPanel, wxID_ANY, _("Transfer Out"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    cbTypeTransferFrom_ = new wxCheckBox(itemPanel, wxID_ANY, _("Transfer In"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    cbTypeWithdrawal_ = new wxCheckBox(itemPanel, wxID_ANY, _t("Withdrawal"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    cbTypeDeposit_ = new wxCheckBox(itemPanel, wxID_ANY, _t("Deposit"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    cbTypeTransferTo_ = new wxCheckBox(itemPanel, wxID_ANY, _t("Transfer Out"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    cbTypeTransferFrom_ = new wxCheckBox(itemPanel, wxID_ANY, _t("Transfer In"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
 
     itemPanelSizer->Add(typeCheckBox_, g_flagsH);
     itemPanelSizer->Add(typeSizer, g_flagsExpand);
@@ -663,7 +673,7 @@
     typeSizer->AddSpacer(2);
 
     // Amount
-    amountRangeCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _("Amount Range"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    amountRangeCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _t("Amount Range"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     itemPanelSizer->Add(amountRangeCheckBox_, g_flagsH);
 
     amountMinEdit_ = new mmTextCtrl(itemPanel, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT | wxTE_PROCESS_ENTER, mmCalcValidator());
@@ -676,27 +686,27 @@
     itemPanelSizer->Add(amountSizer, wxSizerFlags(g_flagsExpand).Border(0));
 
     // Number
-    transNumberCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _("Number"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    transNumberCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _t("Number"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     itemPanelSizer->Add(transNumberCheckBox_, g_flagsH);
 
     transNumberEdit_ = new wxTextCtrl(itemPanel, wxID_ANY);
     itemPanelSizer->Add(transNumberEdit_, g_flagsExpand);
 
     // Notes
-    notesCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _("Notes"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    notesCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _t("Notes"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     itemPanelSizer->Add(notesCheckBox_, g_flagsH);
 
     notesEdit_ = new wxTextCtrl(itemPanel, wxID_ANY);
     itemPanelSizer->Add(notesEdit_, g_flagsExpand);
-    mmToolTip(notesEdit_, _("Enter any string to find it in transaction notes") + "\n\n" +
-                              _("Tips: You can use wildcard characters - question mark (?), asterisk (*) - in your search criteria.") + "\n" +
-                              _("Use the question mark (?) to find any single character - for example, s?t finds 'sat' and 'set'.") + "\n" +
-                              _("Use the asterisk (*) to find any number of characters - for example, s*d finds 'sad' and 'started'.") + "\n" +
-                              _("Use the asterisk (*) in the begin to find any string in the middle of the sentence.") + "\n" +
-                              _("Use regex: to match using regular expressions."));
+    mmToolTip(notesEdit_, _t("Enter any string to find it in transaction notes") + "\n\n" +
+        _tu("Tips: Wildcard characters—question mark (?), asterisk (*)—can be used in search criteria.") + "\n" +
+        _tu("Use the question mark (?) to find any single character—for example, “s?t” finds “sat” and “set”.") + "\n" +
+        _tu("Use the asterisk (*) to find any number of characters—for example, “s*d” finds “sad” and “started”.") + "\n" +
+        _tu("Use the asterisk (*) at the beginning to find any string in the middle of the sentence.") + "\n" +
+        _t("Use regex: to match using regular expressions."));
 
     // Colour
-    colorCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _("Color"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    colorCheckBox_ = new wxCheckBox(itemPanel, wxID_ANY, _t("Color"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     itemPanelSizer->Add(colorCheckBox_, g_flagsH);
 
     colorButton_ = new mmColorButton(itemPanel, wxID_HIGHEST);
@@ -715,7 +725,7 @@
     wxPanel* presPanel = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
     if (isReportMode_)
     {
-        wxStaticBox* static_box_sizer_pres = new wxStaticBox(this, wxID_ANY, _("Presentation Options"));
+        wxStaticBox* static_box_sizer_pres = new wxStaticBox(this, wxID_ANY, _t("Presentation Options"));
         wxStaticBoxSizer* itemStaticBoxSizer_pres = new wxStaticBoxSizer(static_box_sizer_pres, wxVERTICAL);
         box_sizer2->Add(itemStaticBoxSizer_pres, wxSizerFlags(g_flagsExpand).Proportion(0));
         itemStaticBoxSizer_pres->Add(presPanel, g_flagsExpand);
@@ -729,7 +739,7 @@
     presBoxSizer->Add(presPanelSizer, g_flagsExpand);
 
     // Hide columns
-    showColumnsCheckBox_ = new wxCheckBox(presPanel, wxID_ANY, _("Hide Columns"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    showColumnsCheckBox_ = new wxCheckBox(presPanel, wxID_ANY, _t("Hide Columns"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     presPanelSizer->Add(showColumnsCheckBox_, g_flagsH);
 
     bHideColumns_ = new wxButton(presPanel, ID_DIALOG_COLUMNS, "");
@@ -738,7 +748,7 @@
     presPanelSizer->Add(bHideColumns_, g_flagsExpand);
 
     // Group By
-    groupByCheckBox_ = new wxCheckBox(presPanel, wxID_ANY, _("Group By"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    groupByCheckBox_ = new wxCheckBox(presPanel, wxID_ANY, _t("Group By"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     presPanelSizer->Add(groupByCheckBox_, g_flagsH);
 
     bGroupBy_ = new wxChoice(presPanel, wxID_ANY);
@@ -747,10 +757,10 @@
         bGroupBy_->Append(wxGetTranslation(i), new wxStringClientData(i));
     }
     presPanelSizer->Add(bGroupBy_, g_flagsExpand);
-    mmToolTip(bGroupBy_, _("Specify how the report should be grouped"));
+    mmToolTip(bGroupBy_, _t("Specify how the report should be grouped"));
 
     // Chart
-    chartCheckBox_ = new wxCheckBox(presPanel, wxID_ANY, _("Chart"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    chartCheckBox_ = new wxCheckBox(presPanel, wxID_ANY, _t("Chart"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     presPanelSizer->Add(chartCheckBox_, g_flagsH);
 
     bChart_ = new wxChoice(presPanel, wxID_ANY);
@@ -759,13 +769,13 @@
         bChart_->Append(wxGetTranslation(i), new wxStringClientData(i));
     }
     presPanelSizer->Add(bChart_, g_flagsExpand);
-    mmToolTip(bChart_, _("Specify which chart will be included in the report"));
+    mmToolTip(bChart_, _t("Specify which chart will be included in the report"));
 
     // Compress Splits
-    combineSplitsCheckBox_ = new wxCheckBox(presPanel, wxID_ANY, _("Combine Splits"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    combineSplitsCheckBox_ = new wxCheckBox(presPanel, wxID_ANY, _t("Combine Splits"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     combineSplitsCheckBox_->SetMinSize(wxSize(-1, bGroupBy_->GetSize().GetHeight()));
     presPanelSizer->Add(combineSplitsCheckBox_, g_flagsH);
-    mmToolTip(combineSplitsCheckBox_, _("Display split transactions as a single row"));
+    mmToolTip(combineSplitsCheckBox_, _t("Display split transactions as a single row"));
 
     // Settings
     wxBoxSizer* settings_box_sizer = new wxBoxSizer(wxHORIZONTAL);
@@ -774,7 +784,7 @@
 
     if (isMultiAccount_)
     {
-        wxStaticText* settings = new wxStaticText(this, wxID_ANY, _("Settings"));
+        wxStaticText* settings = new wxStaticText(this, wxID_ANY, _t("Settings"));
         settings_box_sizer->Add(settings, g_flagsH);
         settings_box_sizer->AddSpacer(5);
     }
@@ -787,11 +797,11 @@
     settings_box_sizer->AddSpacer(5);
     m_btnSaveAs = new wxBitmapButton(this, wxID_SAVEAS, mmBitmapBundle(png::SAVE, mmBitmapButtonSize));
     settings_box_sizer->Add(m_btnSaveAs, g_flagsH);
-    mmToolTip(m_btnSaveAs, _("Save active values into current Preset selection"));
+    mmToolTip(m_btnSaveAs, _t("Save active values into current Preset selection"));
     m_btnSaveAs->Connect(wxID_SAVEAS, wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(mmFilterTransactionsDialog::OnSaveSettings), nullptr, this);
 
     m_itemButtonClear = new wxBitmapButton(this, wxID_CLEAR, mmBitmapBundle(png::CLEAR, mmBitmapButtonSize));
-    mmToolTip(m_itemButtonClear, _("Delete current Preset selection"));
+    mmToolTip(m_itemButtonClear, _t("Delete current Preset selection"));
     settings_box_sizer->Add(m_itemButtonClear, g_flagsH);
 
     box_sizer2->Add(settings_sizer, wxSizerFlags(g_flagsExpand).Border(wxALL, 0).Proportion(0));
@@ -805,13 +815,13 @@
     wxBoxSizer* button_sizer = new wxBoxSizer(wxHORIZONTAL);
     button_panel->SetSizer(button_sizer);
 
-    wxButton* button_ok = new wxButton(button_panel, wxID_OK, _("&OK "));
+    wxButton* button_ok = new wxButton(button_panel, wxID_OK, _t("&OK "));
 
     wxButton* button_cancel = new wxButton(button_panel, wxID_CANCEL, wxGetTranslation(g_CancelLabel));
     button_cancel->SetFocus();
 
     wxBitmapButton* button_hide = new wxBitmapButton(button_panel, ID_BTN_CUSTOMFIELDS, mmBitmapBundle(png::RIGHTARROW, mmBitmapButtonSize));
-    mmToolTip(button_hide, _("Show/Hide custom fields window"));
+    mmToolTip(button_hide, _t("Show/Hide custom fields window"));
     if (m_custom_fields->GetCustomFieldsCount() == 0)
     {
         button_hide->Hide();
@@ -878,17 +888,17 @@
     {
         cbTypeTransferFrom_->Show();
         cbTypeTransferFrom_->Enable();
-        cbTypeTransferTo_->SetLabel(_("Transfer Out"));
+        cbTypeTransferTo_->SetLabel(_t("Transfer Out"));
         Layout();
         bSelectedAccounts_->Enable(accountCheckBox_->IsEnabled());
     }
     else
     {
         m_selected_accounts_id.clear();
-        bSelectedAccounts_->SetLabelText(_("All"));
+        bSelectedAccounts_->SetLabelText(_t("All"));
         cbTypeTransferFrom_->Hide();
         cbTypeTransferFrom_->Disable();
-        cbTypeTransferTo_->SetLabel(_("Transfer"));
+        cbTypeTransferTo_->SetLabel(_t("Transfer"));
         Layout();
         bSelectedAccounts_->Disable();
     }
@@ -947,7 +957,7 @@
 {
     if (accountCheckBox_->IsChecked() && m_selected_accounts_id.empty())
     {
-        mmErrorDialogs::ToolTip4Object(bSelectedAccounts_, _("Account"), _("Invalid value"), wxICON_ERROR);
+        mmErrorDialogs::ToolTip4Object(bSelectedAccounts_, _t("Account"), _t("Invalid value"), wxICON_ERROR);
         return false;
     }
 
@@ -957,14 +967,14 @@
         {
             const auto today = wxDate::Today().FormatISOCombined();
             int id = m_begin_date >= today ? fromDateCtrl_->GetId() : toDateControl_->GetId();
-            mmErrorDialogs::ToolTip4Object(FindWindow(id), _("Date"), _("Invalid value"), wxICON_ERROR);
+            mmErrorDialogs::ToolTip4Object(FindWindow(id), _t("Date"), _t("Invalid value"), wxICON_ERROR);
             return false;
         }
     }
 
     if (datesCheckBox_->IsChecked() && rangeChoice_->GetSelection() == wxNOT_FOUND)
     {
-        mmErrorDialogs::ToolTip4Object(rangeChoice_, _("Date"), _("Invalid value"), wxICON_ERROR);
+        mmErrorDialogs::ToolTip4Object(rangeChoice_, _t("Date"), _t("Invalid value"), wxICON_ERROR);
         return false;
     }
 
@@ -975,7 +985,7 @@
 
         if (value.empty())
         {
-            mmErrorDialogs::ToolTip4Object(categoryComboBox_, _("Empty value"), _("Payee"), wxICON_ERROR);
+            mmErrorDialogs::ToolTip4Object(categoryComboBox_, _t("Empty value"), _t("Payee"), wxICON_ERROR);
             return false;
         }
 
@@ -994,10 +1004,10 @@
             }
             if (ok == false)
             {
-                if (wxMessageBox(wxString::Format(_("This name does not currently match any payees.\n"
+                if (wxMessageBox(wxString::Format(_t("This name does not currently match any payees.\n"
                                                     "Do you want to continue to use it?\n%s"),
                                                   value),
-                                 _("Invalid value"), wxYES_NO | wxICON_INFORMATION) == wxNO)
+                                 _t("Invalid value"), wxYES_NO | wxICON_INFORMATION) == wxNO)
                 {
                     return false;
                 }
@@ -1012,26 +1022,26 @@
         const auto& value = categoryComboBox_->mmGetPattern();
         if (value.empty())
         {
-            mmErrorDialogs::ToolTip4Object(categoryComboBox_, _("Empty value"), _("Category"), wxICON_ERROR);
+            mmErrorDialogs::ToolTip4Object(categoryComboBox_, _t("Empty value"), _t("Category"), wxICON_ERROR);
             return false;
         }
         wxRegEx pattern(value, wxRE_ADVANCED);
         if (!pattern.IsValid() || m_selected_categories_id.empty())
         {
-            mmErrorDialogs::ToolTip4Object(categoryComboBox_, _("Invalid value"), _("Category"), wxICON_ERROR);
+            mmErrorDialogs::ToolTip4Object(categoryComboBox_, _t("Invalid value"), _t("Category"), wxICON_ERROR);
             return false;
         }
     }
 
     if (mmIsStatusChecked() && choiceStatus_->GetSelection() == wxNOT_FOUND)
     {
-        mmErrorDialogs::ToolTip4Object(choiceStatus_, _("Invalid value"), _("Status"), wxICON_ERROR);
+        mmErrorDialogs::ToolTip4Object(choiceStatus_, _t("Invalid value"), _t("Status"), wxICON_ERROR);
         return false;
     }
 
     if (mmIsTypeChecked() && mmGetTypes().empty())
     {
-        mmErrorDialogs::ToolTip4Object(cbTypeWithdrawal_, _("Invalid value"), _("Type"), wxICON_ERROR);
+        mmErrorDialogs::ToolTip4Object(cbTypeWithdrawal_, _t("Invalid value"), _t("Type"), wxICON_ERROR);
         return false;
     }
 
@@ -1039,12 +1049,12 @@
     {
         if (!tagTextCtrl_->IsValid())
         {
-            mmErrorDialogs::ToolTip4Object(tagTextCtrl_, _("Invalid value"), _("Tags"), wxICON_ERROR);
+            mmErrorDialogs::ToolTip4Object(tagTextCtrl_, _t("Invalid value"), _t("Tags"), wxICON_ERROR);
             return false;
         }
         else if (tagTextCtrl_->GetTagIDs().empty())
         {
-            mmErrorDialogs::ToolTip4Object(tagTextCtrl_, _("Empty value"), _("Tags"), wxICON_ERROR);
+            mmErrorDialogs::ToolTip4Object(tagTextCtrl_, _t("Empty value"), _t("Tags"), wxICON_ERROR);
             return false;
         }
     }
@@ -1058,7 +1068,7 @@
         if (!amountMinEdit_->Calculate(currency_precision))
         {
             amountMinEdit_->GetDouble(min_amount);
-            mmErrorDialogs::ToolTip4Object(amountMinEdit_, _("Invalid value"), _("Amount"), wxICON_ERROR);
+            mmErrorDialogs::ToolTip4Object(amountMinEdit_, _t("Invalid value"), _t("Amount"), wxICON_ERROR);
             return false;
         }
 
@@ -1068,7 +1078,7 @@
             amountMaxEdit_->GetDouble(max_amount);
             if (max_amount < min_amount)
             {
-                mmErrorDialogs::ToolTip4Object(amountMaxEdit_, _("Invalid value"), _("Amount"), wxICON_ERROR);
+                mmErrorDialogs::ToolTip4Object(amountMaxEdit_, _t("Invalid value"), _t("Amount"), wxICON_ERROR);
                 return false;
             }
         }
@@ -1078,7 +1088,7 @@
     {
         if (m_color_value < 1 || m_color_value > 7)
         {
-            mmErrorDialogs::ToolTip4Object(colorButton_, _("Invalid value"), _("Color"), wxICON_ERROR);
+            mmErrorDialogs::ToolTip4Object(colorButton_, _t("Invalid value"), _t("Color"), wxICON_ERROR);
             return false;
         }
     }
@@ -1087,20 +1097,20 @@
     {
         if (m_selected_columns_id.empty())
         {
-            mmErrorDialogs::ToolTip4Object(bHideColumns_, _("Invalid value"), _("Hide Columns"), wxICON_ERROR);
+            mmErrorDialogs::ToolTip4Object(bHideColumns_, _t("Invalid value"), _t("Hide Columns"), wxICON_ERROR);
             return false;
         }
     }
 
     if (groupByCheckBox_->IsChecked() && bGroupBy_->GetSelection() == wxNOT_FOUND)
     {
-        mmErrorDialogs::ToolTip4Object(bGroupBy_, _("Invalid value"), _("Group By"), wxICON_ERROR);
+        mmErrorDialogs::ToolTip4Object(bGroupBy_, _t("Invalid value"), _t("Group By"), wxICON_ERROR);
         return false;
     }
 
     if (chartCheckBox_->IsChecked() && bChart_->GetSelection() == wxNOT_FOUND)
     {
-        mmErrorDialogs::ToolTip4Object(bChart_, _("Invalid value"), _("Chart"), wxICON_ERROR);
+        mmErrorDialogs::ToolTip4Object(bChart_, _t("Invalid value"), _t("Chart"), wxICON_ERROR);
         return false;
     }
 
@@ -1168,7 +1178,7 @@
         }
     }
 
-    mmMultiChoiceDialog s_col(this, _("Hide Report Columns"), "", column_names);
+    mmMultiChoiceDialog s_col(this, _t("Hide Report Columns"), "", column_names);
     s_col.SetSelections(hiddenCols);
 
     wxString baloon = "";
@@ -1242,21 +1252,21 @@
 bool mmFilterTransactionsDialog::mmIsTypeMaches(const wxString& typeState, int64 accountid, int64 toaccountid) const
 {
     bool result = false;
-    if (typeState == Model_Checking::TYPE_STR_TRANSFER && cbTypeTransferTo_->GetValue() &&
+    if (typeState == Model_Checking::TYPE_NAME_TRANSFER && cbTypeTransferTo_->GetValue() &&
         (!mmIsAccountChecked() || std::find(m_selected_accounts_id.begin(), m_selected_accounts_id.end(), accountid) != m_selected_accounts_id.end()))
     {
         result = true;
     }
-    else if (typeState == Model_Checking::TYPE_STR_TRANSFER && cbTypeTransferFrom_->GetValue() &&
+    else if (typeState == Model_Checking::TYPE_NAME_TRANSFER && cbTypeTransferFrom_->GetValue() &&
              (!mmIsAccountChecked() || std::find(m_selected_accounts_id.begin(), m_selected_accounts_id.end(), toaccountid) != m_selected_accounts_id.end()))
     {
         result = true;
     }
-    else if (typeState == Model_Checking::TYPE_STR_WITHDRAWAL && cbTypeWithdrawal_->IsChecked())
+    else if (typeState == Model_Checking::TYPE_NAME_WITHDRAWAL && cbTypeWithdrawal_->IsChecked())
     {
         result = true;
     }
-    else if (typeState == Model_Checking::TYPE_STR_DEPOSIT && cbTypeDeposit_->IsChecked())
+    else if (typeState == Model_Checking::TYPE_NAME_DEPOSIT && cbTypeDeposit_->IsChecked())
     {
         result = true;
     }
@@ -1294,15 +1304,15 @@
     int size = m_setting_name->GetCount();
     if (sel >= 0 && size > 0)
     {
-        if (wxMessageBox(_("The selected item will be deleted") + "\n\n" + _("Do you wish to continue?"), _("Settings item deletion"),
+        if (wxMessageBox(_t("The selected item will be deleted") + "\n\n" + _t("Do you want to continue?"), _t("Settings item deletion"),
                          wxYES_NO | wxICON_WARNING) == wxNO)
         {
             return;
         }
 
-        int sel_json = Model_Infotable::instance().FindLabelInJSON(m_filter_key, mmGetLabelString());
+        int sel_json = Model_Infotable::instance().findArrayItem(m_filter_key, mmGetLabelString());
         if (sel_json != wxNOT_FOUND)
-            Model_Infotable::instance().Erase(m_filter_key, sel_json);
+            Model_Infotable::instance().eraseArrayItem(m_filter_key, sel_json);
 
         m_setting_name->Delete(sel--);
         m_settings_json.clear();
@@ -1361,11 +1371,11 @@
     // If we have a split, merge the transaciton tags so that an AND condition captures cases
     // where one tag is on the base txn and the other is on the split
     std::map<wxString, int64> txnTagnames;
-    if (refType == Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT)
-        txnTagnames = Model_Taglink::instance().get(Model_Attachment::REFTYPE_STR_TRANSACTION,
+    if (refType == Model_Splittransaction::refTypeName)
+        txnTagnames = Model_Taglink::instance().get(Model_Checking::refTypeName,
                                                     Model_Splittransaction::instance().get(refId)->TRANSID);
-    else if (refType == Model_Attachment::REFTYPE_STR_BILLSDEPOSITSPLIT)
-        txnTagnames = Model_Taglink::instance().get(Model_Attachment::REFTYPE_STR_BILLSDEPOSIT,
+    else if (refType == Model_Budgetsplittransaction::refTypeName)
+        txnTagnames = Model_Taglink::instance().get(Model_Billsdeposits::refTypeName,
                                                     Model_Budgetsplittransaction::instance().get(refId)->TRANSID);
 
     if (mergeSplitTags)
@@ -1373,23 +1383,23 @@
         // Merge transaction tags and split tags. This is necessary when checking
         // if a split record matches the filter since we are using mmIsRecordMatches
         // to validate the split which gives it the wrong refType & refId
-        if (refType == Model_Attachment::REFTYPE_STR_TRANSACTION)
+        if (refType == Model_Checking::refTypeName)
         {
             // Loop through checking splits and merge tags for each SPLITTRANSID
             for (const auto& split : Model_Splittransaction::instance().find(Model_Splittransaction::TRANSID(refId)))
             {
                 std::map<wxString, int64> splitTagnames =
-                    Model_Taglink::instance().get(Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT, split.SPLITTRANSID);
+                    Model_Taglink::instance().get(Model_Splittransaction::refTypeName, split.SPLITTRANSID);
                 txnTagnames.insert(splitTagnames.begin(), splitTagnames.end());
             }
         }
-        else if (refType == Model_Attachment::REFTYPE_STR_BILLSDEPOSIT)
+        else if (refType == Model_Billsdeposits::refTypeName)
         {
             // Loop through scheduled txn splits and merge tags for each SPLITTRANSID
             for (const auto& split : Model_Budgetsplittransaction::instance().find(Model_Budgetsplittransaction::TRANSID(refId)))
             {
                 std::map<wxString, int64> splitTagnames =
-                    Model_Taglink::instance().get(Model_Attachment::REFTYPE_STR_BILLSDEPOSITSPLIT, split.SPLITTRANSID);
+                    Model_Taglink::instance().get(Model_Budgetsplittransaction::refTypeName, split.SPLITTRANSID);
                 txnTagnames.insert(splitTagnames.begin(), splitTagnames.end());
             }
         }
@@ -1404,7 +1414,6 @@
     wxArrayString tags = tagTextCtrl_->GetTagStrings();
     for (int i = 0; i < static_cast<int>(tags.GetCount()); i++)
     {
-        wxString tag = tags.Item(i);
         // if the tag is the "OR" operator, fetch the next tag and compare with OR
         if (tags.Item(i) == "|" && i++ < static_cast<int>(tags.GetCount()) - 1)
             match |= tagnames.find(tags.Item(i)) != tagnames.end();
@@ -1454,9 +1463,9 @@
         wxString refType;
         // Check the Data type to determine the tag RefType
         if (typeid(tran).hash_code() == typeid(Model_Checking::Data).hash_code())
-            refType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+            refType = Model_Checking::refTypeName;
         else if (typeid(tran).hash_code() == typeid(Model_Billsdeposits::Data).hash_code())
-            refType = Model_Attachment::REFTYPE_STR_BILLSDEPOSIT;
+            refType = Model_Billsdeposits::refTypeName;
         if (!mmIsTagMatches(refType, tran.id(), mergeSplitTags))
             ok = false;
     }
@@ -1469,11 +1478,11 @@
 
     if (typeid(split).hash_code() == typeid(Model_Splittransaction::Data).hash_code())
     {
-        refType = Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT;
+        refType = Model_Splittransaction::refTypeName;
     }
     else if (typeid(split).hash_code() == typeid(Model_Budgetsplittransaction::Data).hash_code())
     {
-        refType = Model_Attachment::REFTYPE_STR_BILLSDEPOSITSPLIT;
+        refType = Model_Budgetsplittransaction::refTypeName;
     }
 
     if (mmIsTagsChecked() && !mmIsTagMatches(refType, split.SPLITTRANSID))
@@ -1532,7 +1541,7 @@
 const wxString mmFilterTransactionsDialog::mmGetDescriptionToolTip() const
 {
     wxString buffer;
-    wxString data = mmGetJsonSetings(true);
+    wxString data = mmGetJsonSettings(true);
     Document j_doc;
     if (j_doc.Parse(data.utf8_str()).HasParseError())
     {
@@ -1562,20 +1571,19 @@
             {
                 wxString temp;
                 if (value.Contains("W"))
-                    temp += (temp.empty() ? "" : ", ") + _("Withdrawal");
+                    temp += (temp.empty() ? "" : ", ") + _t("Withdrawal");
                 if (value.Contains("D"))
-                    temp += (temp.empty() ? "" : ", ") + _("Deposit");
+                    temp += (temp.empty() ? "" : ", ") + _t("Deposit");
                 if (value.Contains("F"))
-                    temp += (temp.empty() ? "" : ", ") + _("Transfer In");
+                    temp += (temp.empty() ? "" : ", ") + _t("Transfer In");
                 if (value.Contains("T"))
-                    temp += (temp.empty() ? "" : ", ") + (mmGetAccountsID().empty() ? _("Transfer") : _("Transfer Out"));
+                    temp += (temp.empty() ? "" : ", ") + (mmGetAccountsID().empty() ? _t("Transfer") : _t("Transfer Out"));
                 value = temp;
             }
             break;
         }
         case kNumberType:
         {
-            wxString temp;
             double d = itr->value.GetDouble();
             if (static_cast<int>(d) == d)
                 value = wxString::Format("%i", static_cast<int>(d));
@@ -1620,7 +1628,7 @@
             break;
         }
         if (value.IsEmpty())
-            value = _("Empty value");
+            value = _t("Empty value");
         buffer += value.Append("\n");
     }
 
@@ -1629,9 +1637,9 @@
 
 void mmFilterTransactionsDialog::mmGetDescription(mmHTMLBuilder& hb)
 {
-    hb.addHeader(4, _("Filtering Details: "));
+    hb.addHeader(4, _t("Filtering Details: "));
     // Extract the parameters from the transaction dialog and add them to the report.
-    wxString data = mmGetJsonSetings(true);
+    wxString data = mmGetJsonSettings(true);
     Document j_doc;
     if (j_doc.Parse(data.utf8_str()).HasParseError())
     {
@@ -1663,13 +1671,13 @@
             {
                 wxString temp;
                 if (value.Contains("W"))
-                    temp += (temp.empty() ? "" : ", ") + _("Withdrawal");
+                    temp += (temp.empty() ? "" : ", ") + _t("Withdrawal");
                 if (value.Contains("D"))
-                    temp += (temp.empty() ? "" : ", ") + _("Deposit");
+                    temp += (temp.empty() ? "" : ", ") + _t("Deposit");
                 if (value.Contains("F"))
-                    temp += (temp.empty() ? "" : ", ") + _("Transfer In");
+                    temp += (temp.empty() ? "" : ", ") + _t("Transfer In");
                 if (value.Contains("T"))
-                    temp += (temp.empty() ? "" : ", ") + (mmGetAccountsID().empty() ? _("Transfer") : _("Transfer Out"));
+                    temp += (temp.empty() ? "" : ", ") + (mmGetAccountsID().empty() ? _t("Transfer") : _t("Transfer Out"));
                 value = temp;
             }
             buffer += wxString::Format("<kbd><samp><b>%s:</b> %s</samp></kbd>\n", name, wxGetTranslation(value));
@@ -1697,7 +1705,7 @@
                     // wxLogDebug("%s", wxString::FromUTF8(itr->name.GetString()));
                     if (wxGetTranslation("Tags").IsSameAs(name))
                     {
-                        temp += (temp.empty() ? "" : (appendOperator ? " & " : " ")) + Model_Tag::instance().get(int64(a.GetInt()))->TAGNAME;
+                        temp += (temp.empty() ? "" : (appendOperator ? " & " : " ")) + Model_Tag::instance().get(int64(a.GetInt64()))->TAGNAME;
                         appendOperator = true;
                     }
                     else if (wxGetTranslation("Hide Columns").IsSameAs(name) &&
@@ -1744,7 +1752,7 @@
     return type;
 }
 
-const wxString mmFilterTransactionsDialog::mmGetJsonSetings(bool i18n) const
+const wxString mmFilterTransactionsDialog::mmGetJsonSettings(bool i18n) const
 {
     StringBuffer json_buffer;
     PrettyWriter<StringBuffer> json_writer(json_buffer);
@@ -1759,14 +1767,14 @@
 
     if (!label.empty())
     {
-        json_writer.Key((i18n ? _("Label") : "LABEL").utf8_str());
+        json_writer.Key((i18n ? _t("Label") : "LABEL").utf8_str());
         json_writer.String(label.utf8_str());
     }
 
     // Account
     if (accountCheckBox_->IsChecked() && !m_selected_accounts_id.empty())
     {
-        json_writer.Key((i18n ? _("Account") : "ACCOUNT").utf8_str());
+        json_writer.Key((i18n ? _t("Account") : "ACCOUNT").utf8_str());
         json_writer.StartArray();
         for (const auto& acc : m_selected_accounts_id)
         {
@@ -1790,9 +1798,9 @@
             from_date = fromDateCtrl_->GetValue().FormatISODate();
             to_date = toDateControl_->GetValue().FormatISODate();
         }
-        json_writer.Key((i18n ? _("Since") : "DATE1").utf8_str());
+        json_writer.Key((i18n ? _t("Since") : "DATE1").utf8_str());
         json_writer.String(from_date.utf8_str());
-        json_writer.Key((i18n ? _("Before") : "DATE2").utf8_str());
+        json_writer.Key((i18n ? _t("Before") : "DATE2").utf8_str());
         json_writer.String(to_date.utf8_str());
     }
 
@@ -1805,7 +1813,7 @@
             const wxSharedPtr<mmDateRange> date_range = m_all_date_ranges.at(sel);
             if (date_range)
             {
-                json_writer.Key((i18n ? _("Period") : "PERIOD").utf8_str());
+                json_writer.Key((i18n ? _t("Period") : "PERIOD").utf8_str());
                 json_writer.String(date_range->title().utf8_str());
             }
         }
@@ -1814,14 +1822,14 @@
     // Payee
     if (payeeCheckBox_->IsChecked())
     {
-        json_writer.Key((i18n ? _("Payee") : "PAYEE").utf8_str());
+        json_writer.Key((i18n ? _t("Payee") : "PAYEE").utf8_str());
         json_writer.String(cbPayee_->GetValue().utf8_str());
     }
 
     // Category
     if (categoryCheckBox_->IsChecked())
     {
-        json_writer.Key((i18n ? _("Category") : "CATEGORY").utf8_str());
+        json_writer.Key((i18n ? _t("Category") : "CATEGORY").utf8_str());
         if (categoryComboBox_->mmIsValid())
         {
             int64 categ = categoryComboBox_->mmGetCategoryId();
@@ -1837,22 +1845,22 @@
     // Sub Category inclusion
     if (categoryCheckBox_->IsChecked())
     {
-        json_writer.Key((i18n ? _("Include all subcategories") : "SUBCATEGORYINCLUDE").utf8_str());
+        json_writer.Key((i18n ? _t("Include all subcategories") : "SUBCATEGORYINCLUDE").utf8_str());
         json_writer.Bool(categorySubCatCheckBox_->GetValue());
     }
 
     // Status
     if (statusCheckBox_->IsChecked())
     {
-        wxArrayString s = Model_Checking::STATUS_STR;
-        s.Add(wxTRANSLATE("All Except Reconciled"));
         int item = choiceStatus_->GetSelection();
         wxString status;
-        if (0 <= item && static_cast<size_t>(item) < s.size())
-            status = s[item];
+        if (0 <= item && item < Model_Checking::STATUS_ID_size)
+            status = Model_Checking::status_name(item);
+        else if (item == Model_Checking::STATUS_ID_size)
+            status = _n("All Except Reconciled");
         if (!status.empty())
         {
-            json_writer.Key((i18n ? _("Status") : "STATUS").utf8_str());
+            json_writer.Key((i18n ? _t("Status") : "STATUS").utf8_str());
             json_writer.String((i18n ? wxGetTranslation(status) : status).utf8_str());
         }
     }
@@ -1863,7 +1871,7 @@
         wxString type = mmGetTypes();
         if (!type.empty())
         {
-            json_writer.Key((i18n ? _("Type") : "TYPE").utf8_str());
+            json_writer.Key((i18n ? _t("Type") : "TYPE").utf8_str());
             json_writer.String(type.utf8_str());
         }
     }
@@ -1875,7 +1883,7 @@
         {
             double amount_min;
             amountMinEdit_->GetDouble(amount_min);
-            json_writer.Key((i18n ? _("Amount Min.") : "AMOUNT_MIN").utf8_str());
+            json_writer.Key((i18n ? _t("Amount Min.") : "AMOUNT_MIN").utf8_str());
             json_writer.Double(amount_min);
         }
 
@@ -1883,7 +1891,7 @@
         {
             double amount_max;
             amountMaxEdit_->GetDouble(amount_max);
-            json_writer.Key((i18n ? _("Amount Max.") : "AMOUNT_MAX").utf8_str());
+            json_writer.Key((i18n ? _t("Amount Max.") : "AMOUNT_MAX").utf8_str());
             json_writer.Double(amount_max);
         }
     }
@@ -1892,14 +1900,14 @@
     if (transNumberCheckBox_->IsChecked())
     {
         const wxString num = transNumberEdit_->GetValue();
-        json_writer.Key((i18n ? _("Number") : "NUMBER").utf8_str());
+        json_writer.Key((i18n ? _t("Number") : "NUMBER").utf8_str());
         json_writer.String(num.utf8_str());
     }
 
     // Tags
     if (tagCheckBox_->IsChecked() && !tagTextCtrl_->IsEmpty())
     {
-        json_writer.Key((i18n ? _("Tags") : "TAGS").utf8_str());
+        json_writer.Key((i18n ? _t("Tags") : "TAGS").utf8_str());
         json_writer.StartArray();
 
         for (const auto& tag : tagTextCtrl_->GetTagStrings())
@@ -1917,14 +1925,14 @@
     if (notesCheckBox_->IsChecked())
     {
         wxString notes = notesEdit_->GetValue();
-        json_writer.Key((i18n ? _("Notes") : "NOTES").utf8_str());
+        json_writer.Key((i18n ? _t("Notes") : "NOTES").utf8_str());
         json_writer.String(notes.utf8_str());
     }
 
     // Colour
     if (colorCheckBox_->IsChecked())
     {
-        json_writer.Key((i18n ? _("Color") : "COLOR").utf8_str());
+        json_writer.Key((i18n ? _t("Color") : "COLOR").utf8_str());
         json_writer.Int(m_color_value);
     }
 
@@ -1950,7 +1958,7 @@
     // Hide Columns
     if (showColumnsCheckBox_->IsChecked() && !m_selected_columns_id.empty())
     {
-        json_writer.Key((i18n ? _("Hide Columns") : "COLUMN").utf8_str());
+        json_writer.Key((i18n ? _t("Hide Columns") : "COLUMN").utf8_str());
         json_writer.StartArray();
         for (const auto& acc : m_selected_columns_id)
             json_writer.Int(acc);
@@ -1963,7 +1971,7 @@
         const wxString groupBy = bGroupBy_->GetStringSelection();
         if (!groupBy.empty())
         {
-            json_writer.Key((i18n ? _("Group By") : "GROUPBY").utf8_str());
+            json_writer.Key((i18n ? _t("Group By") : "GROUPBY").utf8_str());
             json_writer.String(groupBy.utf8_str());
         }
     }
@@ -1974,7 +1982,7 @@
         const wxString chart = bChart_->GetStringSelection();
         if (!chart.empty())
         {
-            json_writer.Key((i18n ? _("Chart") : "CHART").utf8_str());
+            json_writer.Key((i18n ? _t("Chart") : "CHART").utf8_str());
             json_writer.String(chart.utf8_str());
         }
     }
@@ -1983,7 +1991,7 @@
     const bool combineSplits = combineSplitsCheckBox_->IsChecked();
     if (combineSplits)
     {
-        json_writer.Key((i18n ? _("Combine Splits") : "COMBINE_SPLITS").utf8_str());
+        json_writer.Key((i18n ? _t("Combine Splits") : "COMBINE_SPLITS").utf8_str());
         json_writer.Bool(combineSplits);
     }
 
@@ -2108,22 +2116,18 @@
 
 void mmFilterTransactionsDialog::mmDoUpdateSettings()
 {
-    if (isMultiAccount_)
-    {
-        int sel = m_setting_name->GetSelection();
-        if (sel != wxNOT_FOUND)
-        {
-            sel = Model_Infotable::instance().FindLabelInJSON(m_filter_key, mmGetLabelString());
-            if (sel != wxNOT_FOUND)
-            {
-                m_settings_json = mmGetJsonSetings();
-                Model_Infotable::instance().Update(m_filter_key, sel, m_settings_json);
-            }
+    if (isMultiAccount_ && m_setting_name->GetSelection() != wxNOT_FOUND) {
+        int i = Model_Infotable::instance().findArrayItem(m_filter_key, mmGetLabelString());
+        if (i != wxNOT_FOUND) {
+            m_settings_json = mmGetJsonSettings();
+            Model_Infotable::instance().updateArrayItem(m_filter_key, i, m_settings_json);
         }
     }
-    if (!isReportMode_)
-    {
-        Model_Infotable::instance().Set(wxString::Format("CHECK_FILTER_ID_ADV_%lld", accountID_), mmGetJsonSetings());
+    if (!isReportMode_) {
+        Model_Infotable::instance().setString(
+            wxString::Format("CHECK_FILTER_ID_ADV_%lld", accountID_),
+            mmGetJsonSettings()
+        );
     }
 }
 
@@ -2134,7 +2138,7 @@
 
     if (is_user_request)
     {
-        user_label = wxGetTextFromUser(_("Setting Name"), _("Please Enter"), label);
+        user_label = wxGetTextFromUser(_t("Setting Name"), _t("Please Enter"), label);
 
         if (user_label.empty())
             return;
@@ -2149,8 +2153,8 @@
         {
             m_setting_name->Append(user_label);
             m_setting_name->SetStringSelection(user_label);
-            m_settings_json = mmGetJsonSetings();
-            Model_Infotable::instance().Prepend(m_filter_key, m_settings_json, -1);
+            m_settings_json = mmGetJsonSettings();
+            Model_Infotable::instance().prependArrayItem(m_filter_key, m_settings_json, -1);
         }
         else if (label == user_label)
         {
@@ -2158,7 +2162,7 @@
         }
         else
         {
-            if (wxMessageBox(_("The entered name is already in use"), _("Warning"), wxOK | wxICON_WARNING) == wxOK)
+            if (wxMessageBox(_t("The entered name is already in use"), _t("Warning"), wxOK | wxICON_WARNING) == wxOK)
             {
             }
         }
@@ -2174,20 +2178,20 @@
             // Named filters are updated automatically in the "All Transactions" panel
             if (m_setting_name->GetStringSelection() == "")
             {
-                m_settings_json = mmGetJsonSetings();
+                m_settings_json = mmGetJsonSettings();
                 updateLastUsed = true;
             }
         }
         else
         {
-            const auto& filter_settings = Model_Infotable::instance().GetArrayStringSetting(m_filter_key);
+            const auto& filter_settings = Model_Infotable::instance().getArrayString(m_filter_key);
             const auto& l = mmGetLabelString();
-            int sel_json = Model_Infotable::instance().FindLabelInJSON(m_filter_key, l);
+            int sel_json = Model_Infotable::instance().findArrayItem(m_filter_key, l);
             const auto& json = sel_json != wxNOT_FOUND ? filter_settings[sel_json] : "";
-            m_settings_json = mmGetJsonSetings();
+            m_settings_json = mmGetJsonSettings();
             if (isMultiAccount_ && json != m_settings_json && !label.empty())
             {
-                if (wxMessageBox(_("Filter settings have changed") + "\n" + _("Do you want to save them before continuing?") + "\n\n", _("Please confirm"),
+                if (wxMessageBox(_t("Filter settings have changed") + "\n" + _t("Do you want to save them before continuing?") + "\n\n", _t("Please confirm"),
                                  wxYES_NO | wxICON_WARNING) == wxYES)
                 {
                     mmDoUpdateSettings();
@@ -2216,12 +2220,15 @@
             StringBuffer buffer;
             Writer<StringBuffer> writer(buffer);
             j_doc.Accept(writer);
-            Model_Infotable::instance().Set(m_filter_key + "_LAST_USED", wxString::FromUTF8(buffer.GetString()));
+            Model_Infotable::instance().setString(
+                m_filter_key + "_LAST_USED",
+                wxString::FromUTF8(buffer.GetString())
+            );
             // Update the settings list with the new data
             mmDoInitSettingNameChoice();
         }
     }
-    Model_Infotable::instance().Set("TRANSACTIONS_FILTER_LAST_USED", m_settings_json);
+    Model_Infotable::instance().setString("TRANSACTIONS_FILTER_LAST_USED", m_settings_json);
 }
 
 void mmFilterTransactionsDialog::OnSaveSettings(wxCommandEvent& WXUNUSED(event))
@@ -2234,7 +2241,7 @@
 
 void mmFilterTransactionsDialog::OnAccountsButton(wxCommandEvent& WXUNUSED(event))
 {
-    mmMultiChoiceDialog s_acc(this, _("Choose Accounts"), "", m_accounts_name);
+    mmMultiChoiceDialog s_acc(this, _t("Choose Accounts"), "", m_accounts_name);
 
     wxString baloon = "";
     wxArrayInt selected_items;
@@ -2266,7 +2273,7 @@
 
     if (m_selected_accounts_id.empty())
     {
-        bSelectedAccounts_->SetLabelText(_("All"));
+        bSelectedAccounts_->SetLabelText(_t("All"));
         accountCheckBox_->SetValue(false);
         bSelectedAccounts_->Disable();
     }
diff -Naur a/src/filtertransdialog.h b/src/filtertransdialog.h
--- a/src/filtertransdialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/filtertransdialog.h	2025-07-09 01:46:59.640940460 +0200
@@ -118,7 +118,7 @@
     const wxString mmGetEndDate() const;
     int mmGetStartDay() const;
     bool mmIsFutureIgnored() const;
-    const wxString mmGetJsonSetings(bool i18n = false) const;
+    const wxString mmGetJsonSettings(bool i18n = false) const;
     const wxString mmGetLabelString() const;
 
 private:
@@ -162,7 +162,7 @@
     /// Creation
     bool Create(wxWindow* parent
         , wxWindowID id = wxID_ANY
-        , const wxString& caption = _("Customize Transaction Report")
+        , const wxString& caption = _t("Customize Transaction Report")
         , const wxPoint& pos = wxDefaultPosition
         , const wxSize& size = wxDefaultSize
         , long style = wxCAPTION | wxSYSTEM_MENU | wxCLOSE_BOX
diff -Naur a/src/fusedtransaction.h b/src/fusedtransaction.h
--- a/src/fusedtransaction.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/fusedtransaction.h	2025-07-09 01:46:59.640940460 +0200
@@ -16,8 +16,8 @@
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  ********************************************************/
 
-#ifndef FUSEDTRANSACTION_H
-#define FUSEDTRANSACTION_H
+#ifndef MM_EX_FUSED_TRANSACTION_H_
+#define MM_EX_FUSED_TRANSACTION_H_
 
 #include "Model.h"
 #include "Model_Checking.h"
diff -Naur a/src/general_report_manager.cpp b/src/general_report_manager.cpp
--- a/src/general_report_manager.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/general_report_manager.cpp	2025-07-09 01:46:59.640940460 +0200
@@ -30,15 +30,44 @@
 #include "option.h"
 #include "reports/reportbase.h"
 
+#include "rapidjson/error/en.h"
+
 #include "model/Model_Infotable.h"
 #include "model/Model_Report.h"
 
 #include <memory>
+#include <wx/thread.h>
 #include <wx/richtooltip.h>
 #include <wx/sstream.h>
 #include <wx/zipstrm.h>
 #include <wx/wxsqlite3.h>
 
+using namespace rapidjson;
+
+class mmGeneralReportManager;
+class SyncReportThread : public wxThread
+{
+public:
+    SyncReportThread(int64 id, mmGeneralReportManager* manager)
+        : wxThread(wxTHREAD_DETACHED), m_id(id), m_manager(manager) {}
+
+protected:
+    virtual ExitCode Entry() override
+    {
+        m_manager->syncReport(m_id);
+        // Notify UI thread
+        wxQueueEvent(
+            wxTheApp->GetTopWindow(),
+            new wxCommandEvent(wxEVT_COMMAND_BUTTON_CLICKED)
+        );
+        return static_cast<ExitCode>(0);
+    }
+
+private:
+    int64 m_id;
+    mmGeneralReportManager* m_manager;
+};
+
 static const wxString SAMPLE_ASSETS_LUA =
 R"(local total_balance = 0
 function handle_record(record)
@@ -224,6 +253,8 @@
     EVT_TREE_SEL_CHANGED(ID_REPORT_LIST, mmGeneralReportManager::OnSelChanged)
     EVT_TREE_ITEM_MENU(ID_REPORT_LIST, mmGeneralReportManager::OnItemRightClick)
     EVT_MENU(wxID_ANY, mmGeneralReportManager::OnMenuSelected)
+    EVT_BUTTON(ID_GITHUB_SYNC, mmGeneralReportManager::OnSyncFromGitHub)
+    EVT_BUTTON(wxID_ANY, mmGeneralReportManager::OnSyncReportComplete)  // Handle button click event
 wxEND_EVENT_TABLE()
 
 sqlListCtrl::sqlListCtrl(mmGeneralReportManager* grm, wxWindow *parent, wxWindowID winid)
@@ -244,7 +275,7 @@
 mmGeneralReportManager::~mmGeneralReportManager()
 {
     clearVFprintedFiles("grm");
-    Model_Infotable::instance().Set("GRM_DIALOG_SIZE", GetSize());
+    Model_Infotable::instance().setSize("GRM_DIALOG_SIZE", GetSize());
 }
 
 bool mmGeneralReportManager::Create(wxWindow* parent
@@ -281,7 +312,7 @@
     viewControls(false);
     SetEvtHandlerEnabled(false);
     m_treeCtrl->DeleteAllItems();
-    m_rootItem = m_treeCtrl->AddRoot(_("Reports"));
+    m_rootItem = m_treeCtrl->AddRoot(_t("Reports"));
     m_selectedItemID = m_rootItem;
     m_treeCtrl->SetItemBold(m_rootItem, true);
     auto records = Model_Report::instance().all();
@@ -379,26 +410,33 @@
     button_panel->SetSizer(buttonPanelSizer);
 
     //
-    m_buttonOpen = new wxButton(button_panel, wxID_OPEN, _("&Import"));
+    m_buttonOpen = new wxButton(button_panel, wxID_OPEN, _t("&Import"));
     buttonPanelSizer->Add(m_buttonOpen, g_flagsH);
-    mmToolTip(m_buttonOpen, _("Locate and load a report file."));
+    mmToolTip(m_buttonOpen, _t("Locate and load a report file."));
 
-    m_buttonSaveAs = new wxButton(button_panel, wxID_SAVEAS, _("&Export"));
+    m_buttonSaveAs = new wxButton(button_panel, wxID_SAVEAS, _t("&Export"));
     buttonPanelSizer->Add(m_buttonSaveAs, g_flagsH);
-    mmToolTip(m_buttonSaveAs, _("Export the report to a new file."));
+    mmToolTip(m_buttonSaveAs, _t("Export the report to a new file."));
     buttonPanelSizer->AddSpacer(50);
 
-    m_buttonSave = new wxButton(button_panel, wxID_SAVE, _("&Save "));
+/*
+    m_buttonSync = new wxButton(button_panel, ID_GITHUB_SYNC, _("&Sync from GitHub"));
+    buttonPanelSizer->Add(m_buttonSync, g_flagsH);
+    mmToolTip(m_buttonSync, _("Fetch latest reports from GitHub repository"));
+    buttonPanelSizer->AddSpacer(50);
+*/
+
+    m_buttonSave = new wxButton(button_panel, wxID_SAVE, _t("&Save "));
     buttonPanelSizer->Add(m_buttonSave, g_flagsH);
-    mmToolTip(m_buttonSave, _("Save changes."));
+    mmToolTip(m_buttonSave, _t("Save changes."));
 
-    m_buttonRun = new wxButton(button_panel, wxID_EXECUTE, _("&Run"));
+    m_buttonRun = new wxButton(button_panel, wxID_EXECUTE, _t("&Run"));
     buttonPanelSizer->Add(m_buttonRun, g_flagsH);
-    mmToolTip(m_buttonRun, _("Run selected report."));
+    mmToolTip(m_buttonRun, _t("Run selected report."));
 
     wxButton* button_Close = new wxButton(button_panel, wxID_CLOSE, wxGetTranslation(g_CloseLabel));
     buttonPanelSizer->Add(button_Close, g_flagsH);
-    //mmToolTip(button_Close, _("Save changes before closing. Changes without Save will be lost."));
+    //mmToolTip(button_Close, _t("Save changes before closing. Changes without Save will be lost."));
 
 }
 
@@ -406,7 +444,7 @@
 {
     //Output
     wxPanel* out_tab = new wxPanel(editors_notebook, wxID_ANY);
-    editors_notebook->InsertPage(type, out_tab, _("Output"));
+    editors_notebook->InsertPage(type, out_tab, _t("Output"));
     wxBoxSizer* out_sizer = new wxBoxSizer(wxVERTICAL);
     out_tab->SetSizer(out_sizer);
 
@@ -429,10 +467,10 @@
 {
     wxString label;
     switch (type) {
-    case ID_SQL_CONTENT: label = _("SQL"); break;
-    case ID_LUA_CONTENT: label = _("Lua");  break;
-    case ID_TEMPLATE: label = _("Template");  break;
-    case ID_DESCRIPTION: label = _("Description"); break;
+    case ID_SQL_CONTENT: label = _t("SQL"); break;
+    case ID_LUA_CONTENT: label = _t("Lua");  break;
+    case ID_TEMPLATE: label = _t("Template");  break;
+    case ID_DESCRIPTION: label = _t("Description"); break;
     //default: ;
     }
     if (FindWindow(type + MAGIC_NUM)) return;
@@ -484,8 +522,8 @@
         pnl2->SetSizer(bSizerp2);
 
         wxBoxSizer *box_sizer2 = new wxBoxSizer(wxHORIZONTAL);
-        wxButton* buttonPlay = new wxButton(pnl2, ID_TEST, _("&Test"));
-        wxButton* buttonNewTemplate = new wxButton(pnl2, wxID_NEW, _("Create Template"));
+        wxButton* buttonPlay = new wxButton(pnl2, ID_TEST, _t("&Test"));
+        wxButton* buttonNewTemplate = new wxButton(pnl2, wxID_NEW, _t("Create Template"));
         wxStaticText *info = new wxStaticText(pnl2, wxID_INFO, "");
         buttonNewTemplate->Enable(false);
         box_sizer2->Add(buttonPlay);
@@ -564,7 +602,7 @@
     }
     else
     {
-        info->SetLabelText(_("SQL Syntax Error") + " (" + SqlError + ")");
+        info->SetLabelText(_t("SQL Syntax Error") + " (" + SqlError + ")");
     }
 }
 
@@ -595,9 +633,9 @@
 
 void mmGeneralReportManager::importReport()
 {
-    const wxString reportFileName = wxFileSelector(_("Load report file:")
+    const wxString reportFileName = wxFileSelector(_t("Load report file:")
         , mmex::getPathResource(mmex::REPORTS), wxEmptyString, wxEmptyString
-        , _("General Report Manager files (*.grm)")+"|*.grm|"+_("ZIP files (*.zip)")+"|*.zip"
+        , _t("General Report Manager files (*.grm)")+"|*.grm|"+_t("ZIP files (*.zip)")+"|*.zip"
         , wxFD_FILE_MUST_EXIST);
 
     if (reportFileName.empty()) return;
@@ -661,8 +699,8 @@
         }
         else
         {
-            wxString msg = wxString() << _("Unable to open file:") << "\n" << "'" << reportFileName << "'" << "\n" << "\n";
-            wxMessageBox(msg, _("General Report Manager"), wxOK | wxICON_ERROR);
+            wxString msg = wxString() << _t("Unable to open file:") << "\n" << "'" << reportFileName << "'" << "\n" << "\n";
+            wxMessageBox(msg, _t("General Report Manager"), wxOK | wxICON_ERROR);
             return false;
         }
     }
@@ -729,26 +767,29 @@
     Model_Report::Data *report = Model_Report::instance().get(report_id);
 
     wxMenu* samplesMenu = new wxMenu;
-    samplesMenu->Append(ID_NEW_SAMPLE_ASSETS, _u("Assets…"));
+    samplesMenu->Append(ID_NEW_SAMPLE_ASSETS, _tu("Assets…"));
 
     wxMenu customReportMenu;
-    customReportMenu.Append(ID_NEW_EMPTY, _u("New Empty Report…"));
-    customReportMenu.Append(wxID_ANY, _("New Sample Report"), samplesMenu);
+    customReportMenu.Append(ID_NEW_EMPTY, _tu("New Empty Report…"));
+    customReportMenu.Append(wxID_ANY, _t("New Sample Report"), samplesMenu);
     customReportMenu.AppendSeparator();
     if (report)
-        customReportMenu.Append(ID_GROUP, _u("Change Group…"));
+        customReportMenu.Append(ID_GROUP, _tu("Change Group…"));
     else
-        customReportMenu.Append(ID_GROUP, _u("Rename Group…"));
-    customReportMenu.Append(ID_UNGROUP, _("UnGroup"));
-    customReportMenu.Append(ID_RENAME, _u("Rename Report…"));
+        customReportMenu.Append(ID_GROUP, _tu("Rename Group…"));
+    customReportMenu.Append(ID_UNGROUP, _t("UnGroup"));
+    customReportMenu.Append(ID_RENAME, _tu("Rename Report…"));
     customReportMenu.AppendSeparator();
 
     wxMenuItem* menuItemActive = new wxMenuItem(&customReportMenu, ID_ACTIVE,
-        _("Active"), _("Show/Hide report in Navigator"), wxITEM_CHECK);
+        _t("Active"), _t("Show/Hide report in Navigator"), wxITEM_CHECK);
     customReportMenu.Append(menuItemActive);
 
     customReportMenu.AppendSeparator();
-    customReportMenu.Append(ID_DELETE, _u("Delete Report…"));
+    customReportMenu.Append(ID_DELETE, _tu("Delete Report…"));
+
+    customReportMenu.AppendSeparator();
+    customReportMenu.Append(ID_SYNC, _tu("Sync Report…"));
 
     if (report)
     {
@@ -762,8 +803,9 @@
 
         customReportMenu.Enable(ID_UNGROUP, false);
         customReportMenu.Enable(ID_RENAME, false);
-        customReportMenu.Enable(ID_DELETE, false);
         customReportMenu.Enable(ID_ACTIVE, false);
+        customReportMenu.Enable(ID_DELETE, false);
+        customReportMenu.Enable(ID_SYNC, false);
     }
     PopupMenu(&customReportMenu);
 }
@@ -845,8 +887,8 @@
     Model_Report::Data * report = Model_Report::instance().get(id);
     if (report)
     {
-        wxString label = wxGetTextFromUser(_("Enter the name for the report")
-            , _("General Report Manager"), report->REPORTNAME);
+        wxString label = wxGetTextFromUser(_t("Enter the name for the report")
+            , _t("General Report Manager"), report->REPORTNAME);
         label.Trim();
 
         if (Model_Report::instance().find(Model_Report::REPORTNAME(label)).empty()
@@ -859,12 +901,31 @@
     }
 }
 
-bool mmGeneralReportManager::DeleteReport(int64 id)
+bool mmGeneralReportManager::syncReport(int64 id)
 {
     Model_Report::Data * report = Model_Report::instance().get(id);
     if (report)
     {
-        wxString msg = wxString() << _("Delete the Report Title:")
+        wxString msg = wxString() << _("Pull Report Title:")
+            << "\n"
+            << report->REPORTNAME;
+        int iError = wxMessageBox(msg, "General Reports Manager", wxYES_NO | wxICON_ERROR);
+        if (iError == wxYES)
+        {
+            DownloadAndStoreReport(report->GROUPNAME, report->REPORTNAME, "");
+            fillControls();
+            return true;
+        }
+    }
+    return false;
+}
+
+bool mmGeneralReportManager::deleteReport(int64 id)
+{
+    Model_Report::Data * report = Model_Report::instance().get(id);
+    if (report)
+    {
+        wxString msg = wxString() << _t("Delete the Report Title:")
             << "\n\n"
             << report->REPORTNAME;
         int iError = wxMessageBox(msg, "General Reports Manager", wxYES_NO | wxICON_ERROR);
@@ -903,8 +964,8 @@
         }
         else
         {
-            mmDialogComboBoxAutocomplete dlg(this, _("Enter or choose name for the new report group"),
-                _("Change report group"), report->GROUPNAME, Model_Report::instance().allGroupNames());
+            mmDialogComboBoxAutocomplete dlg(this, _t("Enter or choose name for the new report group"),
+                _t("Change report group"), report->GROUPNAME, Model_Report::instance().allGroupNames());
 
             if (dlg.ShowModal() == wxID_OK)
             {
@@ -920,8 +981,8 @@
 
 bool mmGeneralReportManager::renameReportGroup(const wxString& GroupName)
 {
-    mmDialogComboBoxAutocomplete dlg(this, _("Enter or choose name for the new group"),
-        _("Rename Group"), GroupName, Model_Report::instance().allGroupNames());
+    mmDialogComboBoxAutocomplete dlg(this, _t("Enter or choose name for the new group"),
+        _t("Rename Group"), GroupName, Model_Report::instance().allGroupNames());
 
     if (dlg.ShowModal() == wxID_OK)
     {
@@ -960,7 +1021,16 @@
                 this->renameReport(report_id);
                 break;
             case ID_DELETE:
-                this->DeleteReport(report_id);
+                this->deleteReport(report_id);
+                break;
+            case ID_SYNC:
+                this->syncReport(report_id);
+                // Create and start sync thread
+                {
+                    // SyncReportThread* thread = new SyncReportThread(report_id, this);
+                    // thread->Create();
+                    // thread->Run();
+                }
                 break;
             case ID_GROUP:
                 this->changeReportGroup(report_id, false);
@@ -987,8 +1057,8 @@
     wxString group_name;
     if (m_selectedItemID == m_rootItem)
     {
-        mmDialogComboBoxAutocomplete dlg(this, _("Enter or choose name for the new report group")
-            , _("Add Report Group"), "", Model_Report::instance().allGroupNames());
+        mmDialogComboBoxAutocomplete dlg(this, _t("Enter or choose name for the new report group")
+            , _t("Add Report Group"), "", Model_Report::instance().allGroupNames());
         if (dlg.ShowModal() == wxID_OK)
             group_name = dlg.getText();
         else
@@ -1001,33 +1071,33 @@
 
 
     const wxDateTime now = wxDateTime::Now();
-    wxString report_name = wxString::Format(_("New Report %s"), now.Format("%Y%m%d%H%M%S"));
+    wxString report_name = wxString::Format(_t("New Report %s"), now.Format("%Y%m%d%H%M%S"));
 
     int max_attempts = 3;
     for (int i = 0; i < max_attempts; i++)
     {
-        report_name = wxGetTextFromUser(_("Enter the name for the report")
-            , _("General Report Manager"), report_name);
+        report_name = wxGetTextFromUser(_t("Enter the name for the report")
+            , _t("General Report Manager"), report_name);
 
         if (report_name.empty())
             return; //Canceled by user
         if (!report_name.empty() && Model_Report::instance().find(Model_Report::REPORTNAME(report_name)).empty())
             break;
         if (i == max_attempts - 1)
-            return mmErrorDialogs::MessageError(this, _("A report with this name already exists"), _("New Report"));
+            return mmErrorDialogs::MessageError(this, _t("A report with this name already exists"), _t("New Report"));
     }
 
     wxString sqlContent, luaContent, httContent, description;
     switch (sample) {
     case ID_NEW_EMPTY:
         sqlContent = ""; luaContent = ""; httContent = "";
-        description = _("New Report");
+        description = _t("New Report");
         break;
     case ID_NEW_SAMPLE_ASSETS:
         sqlContent = SAMPLE_ASSETS_SQL;
         luaContent = SAMPLE_ASSETS_LUA;
         httContent = SAMPLE_ASSETS_HTT;
-        description = _("Assets");
+        description = _t("Assets");
         break;
     }
 
@@ -1053,10 +1123,10 @@
     {
         wxString file_name = report->REPORTNAME + ".grm";
         wxFileDialog dlg(this
-            , _("Choose file to Save As Report")
+            , _t("Choose file to Save As Report")
             , wxEmptyString
             , file_name
-            , _("General Report Manager files (*.grm)")+"|*.grm|"+_("ZIP files (*.zip)")+"|*.zip"
+            , _t("General Report Manager files (*.grm)")+"|*.grm|"+_t("ZIP files (*.zip)")+"|*.zip"
             , wxFD_SAVE | wxFD_OVERWRITE_PROMPT
             );
 
@@ -1085,14 +1155,14 @@
     browser_->LoadURL(url);
 }
 
-wxString mmGeneralReportManager::OnGetItemText(long item, long column) const
+wxString mmGeneralReportManager::OnGetItemText(long item, long col_nr) const
 {
-    return m_sqlQueryData.at(item).at(column);
+    return m_sqlQueryData.at(item).at(col_nr);
 }
 
-wxString sqlListCtrl::OnGetItemText(long item, long column) const
+wxString sqlListCtrl::OnGetItemText(long item, long col_nr) const
 {
-    return m_grm->OnGetItemText(item, column);
+    return m_grm->OnGetItemText(item, col_nr);
 }
 
 void mmGeneralReportManager::OnClose(wxCommandEvent& WXUNUSED(event))
@@ -1120,11 +1190,7 @@
 
     for (int i = 0; i < columnCount; ++i)
     {
-        std::pair<wxString, int> col_and_type;
-        col_and_type.second = q.GetColumnType(i);
-        col_and_type.first = q.GetColumnName(i);
-
-        colHeaders.push_back(col_and_type);
+        colHeaders.emplace_back(q.GetColumnName(i), q.GetColumnType(i));
     }
     return true;
 }
@@ -1153,7 +1219,7 @@
                 while (qColumns.NextRow())
                     column_names.push_back(qColumns.GetAsString(1));
 
-                sqlTableInfo.push_back(std::make_pair(table_name, column_names));
+                sqlTableInfo.emplace_back(table_name, column_names);
             }
             catch (const wxSQLite3Exception &e)
             {
@@ -1195,8 +1261,8 @@
     {
         std::vector<wxString> row;
         for (int i = 0; i < columnCount; ++i)
-            row.push_back(q.GetAsString(i));
-        sqlQueryData.push_back(row);
+            row.emplace_back(q.GetAsString(i));
+        sqlQueryData.emplace_back(row);
     }
     return true;
 }
@@ -1231,7 +1297,7 @@
             body += wxString::Format("        <td><TMPL_VAR \"%s\"></td>\n", col.first);
     }
 
-    wxString params = rep_params.empty() ? "" : _("Parameters:");
+    wxString params = rep_params.empty() ? "" : _t("Parameters:");
     for (const auto& entry : rep_params)
     {
         for (const auto & item : Model_Report::getParamNames()) {
@@ -1270,3 +1336,110 @@
 
     evt.Skip();
 }
+
+// Event handler implementation
+void mmGeneralReportManager::OnSyncReportComplete(wxCommandEvent& WXUNUSED(event))
+{
+    wxMessageBox("Report sync completed successfully.", "Sync Complete", wxOK | wxICON_INFORMATION);
+}
+
+void mmGeneralReportManager::OnSyncFromGitHub(wxCommandEvent& WXUNUSED(event))
+{
+    wxString url = mmex::weblink::GeneralReport + "/v1/reports.json";
+
+    wxString json_data;
+    if (http_get_data(url, json_data) != CURLE_OK)
+    {
+        wxLogError("Failed to fetch data from %s", url);
+        return;
+    }
+
+    // Parse JSON data using rapidjson
+    rapidjson::Document document;
+    if (document.Parse(json_data.ToStdString().c_str()).HasParseError()) {
+        wxLogError("Failed to parse JSON: %s", GetParseError_En(document.GetParseError()));
+        return;
+    }
+
+    // Ensure the document has the expected structure
+    if (!document.IsObject() || !document.HasMember("reportGroups") || !document["reportGroups"].IsArray()) {
+        wxLogError("Invalid JSON format: Missing or malformed 'reportGroups' array.");
+        return;
+    }
+
+    // Process each report group
+    const rapidjson::Value& reportGroups = document["reportGroups"];
+    for (rapidjson::SizeType i = 0; i < reportGroups.Size(); ++i) {
+        const rapidjson::Value& reportGroup = reportGroups[i];
+
+        // Extract report group details
+        if (reportGroup.HasMember("name") && reportGroup.HasMember("reports") && reportGroup["reports"].IsArray()) {
+            wxString groupName = wxString::FromUTF8(reportGroup["name"].GetString());
+            const rapidjson::Value& reports = reportGroup["reports"];
+
+            // Process each report within the report group
+            for (rapidjson::SizeType j = 0; j < reports.Size(); ++j) {
+                const rapidjson::Value& report = reports[j];
+
+                if (report.HasMember("name") && report.HasMember("path")) {
+                    wxString reportName = wxString::FromUTF8(report["name"].GetString());
+                    wxString reportPath = wxString::FromUTF8(report["path"].GetString());
+
+                    // Download the SQL content and store the report
+                    DownloadAndStoreReport(groupName, reportName, reportPath);
+                } else {
+                    wxLogError("Missing required fields in report JSON");
+                }
+            }
+        } else {
+            wxLogError("Invalid report group format: Missing or malformed 'reports' array.");
+        }
+    }
+
+    wxMessageBox("Reports have been successfully synchronized and stored.", "Sync Successful", wxOK | wxICON_INFORMATION);
+}
+
+void mmGeneralReportManager::DownloadAndStoreReport(const wxString& groupName, const wxString& reportName, [[maybe_unused]] const wxString& reportPath)
+{
+    wxString sql, lua, htt, txt;
+
+    // Construct the full URL to fetch the SQL content
+    wxString sqlUrl = mmex::weblink::GeneralReport + "/" + "packages" + "/" + groupName + "/" + reportName + "/" + "sqlcontent.sql" ;
+    if (http_get_data(wxURI(sqlUrl).BuildURI(), sql) != CURLE_OK) {
+        wxLogError("Failed to fetch SQL data from %s", sqlUrl);
+        return;
+    }
+
+    wxString luaUrl = mmex::weblink::GeneralReport + "/" + "packages" + "/" + groupName + "/" + reportName + "/" + "luacontent.lua";
+    wxLogDebug(luaUrl);
+    if (http_get_data(wxURI(luaUrl).BuildURI(), lua) != CURLE_OK) {
+        wxLogError("Failed to fetch SQL data from %s", luaUrl);
+        return;
+    }
+
+    wxString httUrl = mmex::weblink::GeneralReport +  "/" + "packages" + "/" + groupName + "/" + reportName + "/" + "template.htt";
+    if (http_get_data(wxURI(httUrl).BuildURI(), htt) != CURLE_OK) {
+        wxLogError("Failed to fetch SQL data from %s", httUrl);
+        return;
+    }
+
+    wxString txtUrl = mmex::weblink::GeneralReport + "/" + "packages" + "/" + groupName + "/" + reportName + "/" + "description.txt";
+    if (http_get_data(wxURI(txtUrl).BuildURI(), txt) != CURLE_OK) {
+        wxLogError("Failed to fetch SQL data from %s", txtUrl);
+        return;
+    }
+
+    Model_Report::Data *report = Model_Report::instance().get(reportName);
+
+    if (!report) report = Model_Report::instance().create();
+    report->GROUPNAME = groupName;
+    report->REPORTNAME = reportName;
+    report->SQLCONTENT = sql;
+    report->LUACONTENT = lua;
+    report->TEMPLATECONTENT = htt;
+    report->DESCRIPTION = txt;
+    report->ACTIVE = 1;
+
+    m_selectedReportID = Model_Report::instance().save(report);
+}
+
diff -Naur a/src/general_report_manager.h b/src/general_report_manager.h
--- a/src/general_report_manager.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/general_report_manager.h	2025-07-09 01:46:59.640940460 +0200
@@ -38,9 +38,8 @@
     wxDECLARE_NO_COPY_CLASS(sqlListCtrl);
 public:
 
-    sqlListCtrl(mmGeneralReportManager *grm, wxWindow *parent
-        , const wxWindowID id);
-    virtual wxString OnGetItemText(long item, long column) const;
+    sqlListCtrl(mmGeneralReportManager *grm, wxWindow *parent, const wxWindowID id);
+    virtual wxString OnGetItemText(long item, long col_nr) const;
 private:
     mmGeneralReportManager* m_grm;
 };
@@ -56,12 +55,13 @@
     ~mmGeneralReportManager();
 
     mmGeneralReportManager(wxWindow* parent, wxSQLite3Database* db);
-    wxString OnGetItemText(long item, long column) const;
+    wxString OnGetItemText(long item, long col_nr) const;
 
+    bool syncReport(int64 id);
 private:
     bool Create(wxWindow* parent
         , wxWindowID id = wxID_ANY
-        , const wxString& caption = _("General Report Manager")
+        , const wxString& caption = _t("General Report Manager")
         , const wxString& name = "General Reports Manager"
         , const wxPoint& pos = wxDefaultPosition
         , const wxSize& size = wxDefaultSize
@@ -82,10 +82,11 @@
     void OnItemRightClick(wxTreeEvent& event);
     void OnRightClick(wxMouseEvent& event);
     void OnSelChanged(wxTreeEvent& event);
+    void OnSyncReportComplete(wxCommandEvent&);
     //void OnLabelChanged(wxTreeEvent& event);
     void viewControls(bool enable);
     void renameReport(int64 id);
-    bool DeleteReport(int64 id);
+    bool deleteReport(int64 id);
     bool changeReportGroup(int64 id, bool ungroup);
     void changeReportState(int64 id);
     bool renameReportGroup(const wxString& GroupName);
@@ -101,12 +102,16 @@
     const wxString getTemplate(wxString& sql);
     void OnNewWindow(wxWebViewEvent& evt);
 
+    void OnSyncFromGitHub(wxCommandEvent& WXUNUSED(event));
+    void DownloadAndStoreReport(const wxString& groupName, const wxString& reportName, const wxString& reportPath);
+
     std::vector <std::vector <wxString> > m_sqlQueryData;
 
     wxSQLite3Database* m_db = nullptr;
     wxWebView* browser_ = nullptr;
 
     wxButton* m_buttonOpen = nullptr;
+    //wxButton* m_buttonSync = nullptr;
     wxButton* m_buttonSave = nullptr;
     wxButton* m_buttonSaveAs = nullptr;
     wxButton* m_buttonRun = nullptr;
@@ -134,6 +139,7 @@
         ID_NEW_SAMPLE_STOCKS,
         ID_NEW_SAMPLE_STATS,
         ID_DELETE,
+        ID_SYNC,
         ID_RENAME,
         ID_GROUP,
         ID_UNGROUP,
@@ -145,6 +151,7 @@
         ID_TEMPLATE,
         ID_DESCRIPTION,
         ID_REPORT_LIST,
+        ID_GITHUB_SYNC,
         ID_ACTIVE
     };
 
diff -Naur a/src/images_list.cpp b/src/images_list.cpp
--- a/src/images_list.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/images_list.cpp	2025-07-09 01:46:59.640940460 +0200
@@ -270,25 +270,26 @@
 bool processThemes(wxString themeDir, wxString myTheme, bool metaPhase)
 {
     wxDir directory(themeDir);
-    wxLogDebug("-- Metadata Phase?: %s", metaPhase ? "YES" : "NO");
-    wxLogDebug ("Scanning [%s] for Theme [%s]", themeDir, myTheme);
-    if ( !directory.IsOpened() ) return false;  
+    wxLogDebug("{{{ processThemes(metaPhase=%s)", metaPhase ? "YES" : "NO");
+    wxLogDebug("Scanning [%s] for Theme [%s]", themeDir, myTheme);
+    if (!directory.IsOpened()) {
+        wxLogDebug("}}}");
+        return false;  
+    }
 
     bool themeMatched = false;
     wxString filename;
 
     bool cont = directory.GetFirst(&filename, "*.mmextheme", wxDIR_FILES);
-    while (cont)
-    {
+    while (cont) {
         wxFileName themeFile(themeDir, filename);
         const wxString thisTheme = themeFile.GetName();
-        wxLogDebug ("Found theme [%s]", thisTheme);
+        wxLogDebug("Found theme [%s]", thisTheme);
 
         wxFileInputStream themeZip(themeFile.GetFullPath());
         wxASSERT(themeZip.IsOk());   // Make sure we can open find the Zip
 
-        if (!thisTheme.Cmp(myTheme))
-        {
+        if (!thisTheme.Cmp(myTheme)) {
             themeMatched = true;
             wxZipInputStream themeStream(themeZip);
             std::unique_ptr<wxZipEntry> themeEntry;
@@ -300,8 +301,7 @@
             else
                 bgStringConv = bgStringConv * 256 + 255;  // Need to add Alpha
 
-            while (themeEntry.reset(themeStream.GetNextEntry()), themeEntry) // != nullptr
-            {
+            while (themeEntry.reset(themeStream.GetNextEntry()), themeEntry) { // != nullptr
                 wxASSERT(themeZip.CanRead()); // Make sure we can read the Zip Entry
 
                 const wxFileName fileEntryName = wxFileName(themeEntry->GetName());
@@ -313,21 +313,23 @@
                 if (fileEntryName.IsDir())
                     continue;   // We can skip directories
                 
-                if (metaPhase)  // For this phase we are only interested in the metadata and checking if theme has dark-mode components
-                {
-                    if (fileName == "_theme.json")
-                    {
+                if (metaPhase) {
+                    // For this phase we are only interested in the metadata and checking
+                    // if theme has dark-mode components
+                    if (fileName == "_theme.json") {
                         wxMemoryOutputStream memOut(nullptr);
                         themeStream.Read(memOut);
                         const wxStreamBuffer* buffer = memOut.GetOutputStreamBuffer();
                         wxString metaData(static_cast<char *>(buffer->GetBufferStart()), buffer->GetBufferSize());
-                        if (metaData_doc.Parse(metaData.utf8_str()).HasParseError())
-                        {
-                            wxMessageBox(wxString::Format(_("Metadata JSON in Theme '%s' cannot be parsed and looks badly constructed, please correct.")
-                                , thisTheme), _("Warning"), wxOK | wxICON_WARNING);
+                        if (metaData_doc.Parse(metaData.utf8_str()).HasParseError()) {
+                            wxMessageBox(
+                                wxString::Format(_t("Metadata JSON in Theme '%s' cannot be parsed and looks badly constructed, please correct."), thisTheme),
+                                _t("Warning"),
+                                wxOK | wxICON_WARNING
+                            );
                         }
-                    } else
-                    {
+                    }
+                    else {
                         if (!darkFound && fileNameString.StartsWith("dark-"))
                             darkFound = true;
                     }
@@ -335,8 +337,7 @@
                 }
 
                 // Only process dark mode files when in theme and needed
-                if (darkFound)
-                {
+                if (darkFound) {
                     if (darkMode && !fileNameString.StartsWith("dark-"))
                         continue;
                     else if (!darkMode && fileNameString.StartsWith("dark-"))
@@ -348,8 +349,7 @@
                     fileName = fileName.substr(5);
 
                 // If the file does not match an icon file then just load into VFS / tmp
-                if (!iconName2enum.count(fileName))
-                {                                        
+                if (!iconName2enum.count(fileName)) {                                        
 #if defined(__WXMSW__) || defined(__WXMAC__)
                     wxMemoryOutputStream memOut(nullptr);
                     themeStream.Read(memOut);
@@ -357,8 +357,9 @@
 
                     if (wxNOT_FOUND != filesInVFS->Index(fileName)) // If already loaded then remove and replace
                         wxMemoryFSHandler::RemoveFile(fileName);
-                    wxMemoryFSHandler::AddFile(fileName, buffer->GetBufferStart()
-                        , buffer->GetBufferSize());
+                    wxMemoryFSHandler::AddFile(
+                        fileName, buffer->GetBufferStart(), buffer->GetBufferSize()
+                    );
                     wxLogDebug("Theme: '%s' File: '%s' has been copied to VFS", thisTheme, fileName);
 #else                    
                     const wxString theme_file = mmex::getTempFolder() + fileName;
@@ -382,21 +383,22 @@
                 const wxStreamBuffer* buffer = memOut.GetOutputStreamBuffer();
 
                 int svgEnum = iconName2enum.find(fileName)->second.first;
-                for(const auto &sizePair : sizes)
-                {
+                for(const auto &sizePair : sizes) {
                     const unsigned int icon_size = sizePair.second;
                     programIconBundles[sizePair.first][svgEnum] = new wxBitmapBundle(
-                                         wxBitmapBundle::FromSVG(
-                                               static_cast<wxByte*>(buffer->GetBufferStart()), buffer->GetBufferSize(),
-                                                                    wxSize( icon_size, icon_size )
-                                                                )
-                                                  );
+                        wxBitmapBundle::FromSVG(
+                            static_cast<wxByte*>(buffer->GetBufferStart()),
+                            buffer->GetBufferSize(),
+                            wxSize(icon_size, icon_size)
+                        )
+                    );
                 }
             }
         }
         cont = directory.GetNext(&filename);
     }
-    return (themeMatched);
+    wxLogDebug("}}}");
+    return themeMatched;
 }
 
 // Check that the loaded theme contains all the minimal files needed
@@ -411,8 +413,8 @@
     {
         const wxString realName = (darkFound && darkMode) ? neededFiles[i].AfterLast('-') : neededFiles[i];
         if (wxNOT_FOUND == filesinTheme->Index(realName)) {
-            wxMessageBox(wxString::Format(_("File '%1$s' missing or invalid in chosen theme '%2$s'")
-                , neededFiles[i], Model_Setting::instance().Theme()), _("Warning"), wxOK | wxICON_WARNING);
+            wxMessageBox(wxString::Format(_t("File '%1$s' missing or invalid in chosen theme '%2$s'")
+                , neededFiles[i], Model_Setting::instance().getTheme()), _t("Warning"), wxOK | wxICON_WARNING);
             success = false;
         }
     }
@@ -422,8 +424,8 @@
     {
         if (std::get<2>(it.second) && mmThemeMetaString(it.first).IsEmpty())
         {
-            wxMessageBox(wxString::Format(_("Metadata '%1$s' missing in chosen theme '%2$s'")
-                , std::get<0>(it.second), Model_Setting::instance().Theme()), _("Warning"), wxOK | wxICON_WARNING);
+            wxMessageBox(wxString::Format(_t("Metadata '%1$s' missing in chosen theme '%2$s'")
+                , std::get<0>(it.second), Model_Setting::instance().getTheme()), _t("Warning"), wxOK | wxICON_WARNING);
             success = false;
         }
     }
@@ -455,20 +457,20 @@
     {
         missingIcons.RemoveLast(2);
         if (erroredIcons > maxCutOff) {
-            missingIcons << " " << _u("and more…");
+            missingIcons << " " << _tu("and more…");
         }
-        wxMessageBox(wxString::Format(_("There are %1$d missing or invalid icons in chosen theme '%2$s': %3$s")
-            , erroredIcons, Model_Setting::instance().Theme(), missingIcons), _("Warning"), wxOK | wxICON_WARNING);
+        wxMessageBox(wxString::Format(_t("There are %1$d missing or invalid icons in chosen theme '%2$s': %3$s")
+            , erroredIcons, Model_Setting::instance().getTheme(), missingIcons), _t("Warning"), wxOK | wxICON_WARNING);
     }
     return success;
 }
 
 void reverttoDefaultTheme()
 {
-    Model_Setting::instance().SetTheme("default");
+    Model_Setting::instance().setTheme("default");
     darkFound = false;
-    processThemes(mmex::getPathResource(mmex::THEMESDIR), Model_Setting::instance().Theme(), true);
-    processThemes(mmex::getPathResource(mmex::THEMESDIR), Model_Setting::instance().Theme(), false);  
+    processThemes(mmex::getPathResource(mmex::THEMESDIR), Model_Setting::instance().getTheme(), true);
+    processThemes(mmex::getPathResource(mmex::THEMESDIR), Model_Setting::instance().getTheme(), false);  
 }
 
 void LoadTheme()
@@ -479,27 +481,27 @@
 
     // Scan first for metadata then for the icons and other files
     darkFound = false;
-    if (processThemes(mmex::getPathResource(mmex::THEMESDIR), Model_Setting::instance().Theme(), true))
-        processThemes(mmex::getPathResource(mmex::THEMESDIR), Model_Setting::instance().Theme(), false);
+    if (processThemes(mmex::getPathResource(mmex::THEMESDIR), Model_Setting::instance().getTheme(), true))
+        processThemes(mmex::getPathResource(mmex::THEMESDIR), Model_Setting::instance().getTheme(), false);
     else
-        if (processThemes(mmex::getPathUser(mmex::USERTHEMEDIR), Model_Setting::instance().Theme(), true))
-            processThemes(mmex::getPathUser(mmex::USERTHEMEDIR), Model_Setting::instance().Theme(), false);
+        if (processThemes(mmex::getPathUser(mmex::USERTHEMEDIR), Model_Setting::instance().getTheme(), true))
+            processThemes(mmex::getPathUser(mmex::USERTHEMEDIR), Model_Setting::instance().getTheme(), false);
         else
         {
-            wxMessageBox(wxString::Format(_("Theme %s not found, it may no longer be supported. Reverting to default theme")
-                , Model_Setting::instance().Theme()), _("Warning"), wxOK | wxICON_WARNING);
+            wxMessageBox(wxString::Format(_t("Theme %s not found; it may no longer be supported. Reverting to the default theme.")
+                , Model_Setting::instance().getTheme()), _t("Warning"), wxOK | wxICON_WARNING);
             reverttoDefaultTheme();
         }
     
     if (!checkThemeContents(filesInVFS.get()))
     {
-        wxMessageBox(wxString::Format(_("Theme %s has missing items and is incompatible. Reverting to default theme"), Model_Setting::instance().Theme()), _("Warning"), wxOK | wxICON_WARNING);
+        wxMessageBox(wxString::Format(_t("Theme %s has missing items and is incompatible. Reverting to default theme"), Model_Setting::instance().getTheme()), _t("Warning"), wxOK | wxICON_WARNING);
         reverttoDefaultTheme();
         if (!checkThemeContents(filesInVFS.get()))
         {
             // Time to give up as we couldn't find a workable theme
-            wxMessageBox(_("No workable theme found, the installation may be corrupt")
-                , _("Error"), wxOK | wxICON_ERROR);
+            wxMessageBox(_t("No workable theme found, the installation may be corrupt")
+                , _t("Error"), wxOK | wxICON_ERROR);
             exit(EXIT_FAILURE);
         }
     } 
diff -Naur a/src/import_export/export.cpp b/src/import_export/export.cpp
--- a/src/import_export/export.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/import_export/export.cpp	2025-07-09 01:46:59.640940460 +0200
@@ -29,7 +29,7 @@
 #include "model/Model_Payee.h"
 #include "model/Model_CustomFieldData.h"
 #include "model/Model_CustomField.h"
-
+#include "model/Model_Tag.h"
 
 mmExportTransaction::mmExportTransaction()
 {}
@@ -42,7 +42,7 @@
 {
     wxString buffer = "";
     bool is_transfer = Model_Checking::is_transfer(full_tran.TRANSCODE);
-    const wxString delimiter = Model_Infotable::instance().GetStringInfo("DELIMITER", mmex::DEFDELIMTER);
+    const wxString delimiter = Model_Infotable::instance().getString("DELIMITER", mmex::DEFDELIMTER);
 
     wxString categ = full_tran.m_splits.empty() ? Model_Category::full_name(full_tran.CATEGID, ":") : "";
     wxString transNum = full_tran.TRANSACTIONNUMBER;
@@ -183,7 +183,7 @@
         buffer << "M" << notes << "\n";
     }
 
-    wxString reftype = Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT;
+    wxString reftype = Model_Splittransaction::refTypeName;
     for (const auto &split_entry : full_tran.m_splits)
     {
         double valueSplit = split_entry.SPLITTRANSAMOUNT;
@@ -277,11 +277,10 @@
 
 const wxString mmExportTransaction::qif_acc_type(const wxString& mmex_type)
 {
+    int mmex_typeId = Model_Account::type_id(mmex_type, -1);
     wxString qif_acc_type = m_QIFaccountTypes.begin()->first;
-    for (const auto &item : m_QIFaccountTypes)
-    {
-        if (item.second == Model_Account::TYPE_STR.Index(mmex_type))
-        {
+    for (const auto &item : m_QIFaccountTypes) {
+        if (item.second == mmex_typeId) {
             qif_acc_type = item.first;
             break;
         }
@@ -291,12 +290,12 @@
 
 const wxString mmExportTransaction::mm_acc_type(const wxString& qif_type)
 {
-    wxString mm_acc_type = Model_Account::TYPE_STR_CASH;
+    wxString mm_acc_type = Model_Account::TYPE_NAME_CASH;
     for (const auto &item : m_QIFaccountTypes)
     {
         if (item.first == qif_type)
         {
-            mm_acc_type = Model_Account::TYPE_STR[item.second];
+            mm_acc_type = Model_Account::type_name(item.second);
             break;
         }
     }
@@ -435,7 +434,7 @@
             json_writer.Double(valueSplit);
             json_writer.Key("TAGS");
             json_writer.StartArray();
-            for (const auto& tag : Model_Taglink::instance().get(Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT, split_entry.SPLITTRANSID))
+            for (const auto& tag : Model_Taglink::instance().get(Model_Splittransaction::refTypeName, split_entry.SPLITTRANSID))
                 json_writer.Int64(tag.second.GetValue());
             json_writer.EndArray();
             json_writer.EndObject();
@@ -444,12 +443,12 @@
         json_writer.EndArray();
     }
 
-    const wxString RefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+    const wxString RefType = Model_Checking::refTypeName;
     Model_Attachment::Data_Set attachments = Model_Attachment::instance().FilterAttachments(RefType, full_tran.id());
 
     if (!attachments.empty())
     {
-        const wxString folder = Model_Infotable::instance().GetStringInfo("ATTACHMENTSFOLDER:" + mmPlatformType(), "");
+        const wxString folder = Model_Infotable::instance().getString("ATTACHMENTSFOLDER:" + mmPlatformType(), "");
         json_writer.Key("ATTACHMENTS");
         json_writer.StartArray();
         for (const auto &entry : attachments) {
@@ -486,8 +485,8 @@
 
     if (!allAttachment4Export.empty())
     {
-        const wxString RefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
-        const wxString folder = Model_Infotable::instance().GetStringInfo("ATTACHMENTSFOLDER:" + mmPlatformType(), "");
+        const wxString RefType = Model_Checking::refTypeName;
+        const wxString folder = Model_Infotable::instance().getString("ATTACHMENTSFOLDER:" + mmPlatformType(), "");
         const wxString AttachmentsFolder = mmex::getPathAttachment(folder);
 
         json_writer.Key("ATTACHMENTS");
@@ -523,7 +522,7 @@
 
     if (!allCustomFields4Export.empty())
     {
-        const wxString RefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+        const wxString RefType = Model_Checking::refTypeName;
 
         json_writer.Key("CUSTOM_FIELDS");
         json_writer.StartObject();
diff -Naur a/src/import_export/parsers.cpp b/src/import_export/parsers.cpp
--- a/src/import_export/parsers.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/import_export/parsers.cpp	2025-07-09 01:46:59.644940484 +0200
@@ -43,7 +43,7 @@
     wxTextFile txtFile(fileName);
     if (!txtFile.Open(encoding_))
     {
-        mmErrorDialogs::MessageError(pParentWindow_, _("Unable to open file."), _("Universal CSV Import"));
+        mmErrorDialogs::MessageError(pParentWindow_, _t("Unable to open file."), _t("Universal CSV Import"));
         return false;
     }
 
@@ -97,7 +97,7 @@
     wxTextFile txtFile(fileName);
     if (!txtFile.Create())
     {
-        mmErrorDialogs::MessageError(pParentWindow_, _("Unable to create file."), _("Universal CSV Import"));
+        mmErrorDialogs::MessageError(pParentWindow_, _t("Unable to create file."), _t("Universal CSV Import"));
         return false;
     }
 
@@ -117,7 +117,7 @@
     // Save the file.
     if (!txtFile.Write(wxTextFileType_None, encoding_))
     {
-        mmErrorDialogs::MessageError(pParentWindow_, _("Unable to save file."), _("Export error"));
+        mmErrorDialogs::MessageError(pParentWindow_, _t("Unable to save file."), _t("Export error"));
         return false;
     }
     txtFile.Close();
@@ -143,7 +143,7 @@
     if (!xmlFile.Load(fileName, encoding_))
     {
         mmErrorDialogs::MessageError(pParentWindow_
-            , _("File is not in Excel XML Spreadsheet 2003 format."), _("Parsing error"));
+            , _t("File is not in Excel XML Spreadsheet 2003 format."), _t("Parsing error"));
         return false;
     }
 
@@ -152,7 +152,7 @@
     if (workbookElement->GetName().Cmp("Workbook") != 0
         || workbookElement->GetAttribute("xmlns").Cmp("urn:schemas-microsoft-com:office:spreadsheet") != 0)
     {
-        mmErrorDialogs::MessageError(pParentWindow_, _("File is not in Excel XML Spreadsheet 2003 format."), _("Parsing error"));
+        mmErrorDialogs::MessageError(pParentWindow_, _t("File is not in Excel XML Spreadsheet 2003 format."), _t("Parsing error"));
         return false;
     }
 
@@ -166,15 +166,15 @@
 
     if (nullptr == worksheetElement)
     {
-        mmErrorDialogs::MessageError(pParentWindow_, _("Unable to find Worksheet."), _("Parsing error"));
+        mmErrorDialogs::MessageError(pParentWindow_, _t("Unable to find Worksheet."), _t("Parsing error"));
         return false;
     }
 
     // Table
     wxXmlNode *tableElement = worksheetElement->GetChildren();
-    if (tableElement->GetName() != _("Table"))
+    if (tableElement->GetName() != _t("Table"))
     {
-        mmErrorDialogs::MessageError(pParentWindow_, _("Unable to find Table."), _("Parsing error"));
+        mmErrorDialogs::MessageError(pParentWindow_, _t("Unable to find Table."), _t("Parsing error"));
         return false;
     }
 
@@ -225,7 +225,7 @@
 
     // Worksheet
     wxXmlNode* worksheetElement = new wxXmlNode(workbookElement, wxXML_ELEMENT_NODE, "Worksheet");
-    worksheetElement->AddAttribute("ss:Name", _("Transactions")); //TODO: account name may be used here
+    worksheetElement->AddAttribute("ss:Name", _t("Transactions")); //TODO: account name may be used here
     // workbookElement->AddAttribute("ss:RightToLeft", "1");
 
      // Table
@@ -257,7 +257,7 @@
     // Save the file.
     if (!xmlFile.Save(fileName))
     {
-        mmErrorDialogs::MessageError(pParentWindow_, _("Unable to save file."), _("Export error"));
+        mmErrorDialogs::MessageError(pParentWindow_, _t("Unable to save file."), _t("Export error"));
         return false;
     }
 
diff -Naur a/src/import_export/qif_export.cpp b/src/import_export/qif_export.cpp
--- a/src/import_export/qif_export.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/import_export/qif_export.cpp	2025-07-09 01:46:59.644940484 +0200
@@ -46,9 +46,9 @@
     wxString type_name;
     switch (type)
     {
-    case (QIF): type_name = _("Export as QIF file"); break;
-    case (JSON): type_name = _("Export as JSON file"); break;
-    case (CSV): type_name = _("Export as CSV file"); break;
+    case (QIF): type_name = _t("Export as QIF file"); break;
+    case (JSON): type_name = _t("Export as JSON file"); break;
+    case (CSV): type_name = _t("Export as CSV file"); break;
     }
     Create(parent, type_name);
 
@@ -72,15 +72,15 @@
 
 void mmQIFExportDialog::fillControls()
 {
-    bSelectedAccounts_->SetLabelText(_("All"));
-    mmToolTip(bSelectedAccounts_, _("All"));
+    bSelectedAccounts_->SetLabelText(_t("All"));
+    mmToolTip(bSelectedAccounts_, _t("All"));
 
     m_accounts_name.clear();
     selected_accounts_id_.clear();
     accounts_id_.clear();
 
     Model_Account::Data_Set all_accounts = Model_Account::instance().find(
-            Model_Account::ACCOUNTTYPE(Model_Account::TYPE_STR_INVESTMENT, NOT_EQUAL)
+            Model_Account::ACCOUNTTYPE(Model_Account::TYPE_NAME_INVESTMENT, NOT_EQUAL)
     );
 
     for (const auto& a : all_accounts)
@@ -116,12 +116,12 @@
     wxNotebook* export_notebook = new wxNotebook(this
         , wxID_ANY, wxDefaultPosition, wxDefaultSize, wxNB_MULTILINE );
     wxPanel* main_tab = new wxPanel(export_notebook, wxID_ANY);
-    export_notebook->AddPage(main_tab, _("Parameters"));
+    export_notebook->AddPage(main_tab, _t("Parameters"));
     wxBoxSizer *tab1_sizer = new wxBoxSizer(wxVERTICAL);
     main_tab->SetSizer(tab1_sizer);
 
     wxPanel* log_tab = new wxPanel(export_notebook, wxID_ANY);
-    export_notebook->AddPage(log_tab, _("Log"));
+    export_notebook->AddPage(log_tab, _t("Log"));
     wxBoxSizer *tab2_sizer = new wxBoxSizer(wxVERTICAL);
     log_tab->SetSizer(tab2_sizer);
 
@@ -131,11 +131,11 @@
     tab1_sizer->Add(flex_sizer, wxSizerFlags(g_flagsV).Left());
 
     // Type -------------------------------------------------
-    wxStaticText* type = new wxStaticText(main_tab, wxID_STATIC, _("Type"));
+    wxStaticText* type = new wxStaticText(main_tab, wxID_STATIC, _t("Type"));
     wxChoice* typeCheckBox = new wxChoice(main_tab, wxID_ANY);
-    typeCheckBox->AppendString(_("CSV"));
-    typeCheckBox->AppendString(_("JSON"));
-    typeCheckBox->AppendString(_("QIF"));
+    typeCheckBox->AppendString(_t("CSV"));
+    typeCheckBox->AppendString(_t("JSON"));
+    typeCheckBox->AppendString(_t("QIF"));
     typeCheckBox->SetSelection(m_type);
     typeCheckBox->SetMinSize(min_size);
     flex_sizer->Add(type, g_flagsH);
@@ -143,15 +143,15 @@
 
     // Categories -------------------------------------------------
     cCategs_ = new wxCheckBox(main_tab, wxID_ANY
-        , _("Categories"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+        , _t("Categories"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     cCategs_->SetValue(FALSE);
     flex_sizer->Add(cCategs_, g_flagsH);
     flex_sizer->AddSpacer(1);
 
     // Accounts --------------------------------------------
-    accountsCheckBox_ = new wxCheckBox( main_tab, wxID_ANY, _("Accounts")
+    accountsCheckBox_ = new wxCheckBox( main_tab, wxID_ANY, _t("Accounts")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE );
-    bSelectedAccounts_ = new wxButton(main_tab, wxID_STATIC, _("All"));
+    bSelectedAccounts_ = new wxButton(main_tab, wxID_STATIC, _t("All"));
     bSelectedAccounts_->SetMinSize(min_size);
     bSelectedAccounts_->Connect(wxID_ANY, wxEVT_COMMAND_BUTTON_CLICKED
         , wxCommandEventHandler(mmQIFExportDialog::OnAccountsButton), nullptr, this);
@@ -160,7 +160,7 @@
     flex_sizer->Add(bSelectedAccounts_, g_flagsH);
 
     // From Date --------------------------------------------
-    dateFromCheckBox_ = new wxCheckBox(main_tab, wxID_ANY, _("From Date")
+    dateFromCheckBox_ = new wxCheckBox(main_tab, wxID_ANY, _t("From Date")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE );
     fromDateCtrl_ = new mmDatePickerCtrl(main_tab, wxID_STATIC, wxDefaultDateTime
         , wxDefaultPosition, wxDefaultSize, wxDP_DROPDOWN);
@@ -170,7 +170,7 @@
     flex_sizer->Add(fromDateCtrl_, g_flagsH);
 
     // To Date --------------------------------------------
-    dateToCheckBox_ = new wxCheckBox(main_tab, wxID_ANY, _("To Date")
+    dateToCheckBox_ = new wxCheckBox(main_tab, wxID_ANY, _t("To Date")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE );
     toDateCtrl_ = new mmDatePickerCtrl(main_tab, wxID_STATIC, wxDefaultDateTime
         , wxDefaultPosition, wxDefaultSize, wxDP_DROPDOWN);
@@ -184,7 +184,7 @@
     // Date Format Settings --------------------------------
     wxString dateFormatStr = Option::instance().getDateFormat();
 
-    choiceDateFormat_label_ = new wxStaticText(main_tab, wxID_STATIC, _("Date Format"));
+    choiceDateFormat_label_ = new wxStaticText(main_tab, wxID_STATIC, _t("Date Format"));
     m_choiceDateFormat = new wxComboBox(main_tab, wxID_ANY);
     for (const auto& i : g_date_formats_map())
     {
@@ -196,11 +196,11 @@
     flex_sizer->Add(m_choiceDateFormat, g_flagsH);
 
     // File Name --------------------------------------------
-    toFileCheckBox_ = new wxCheckBox(main_tab, wxID_ANY, _("Write to File")
+    toFileCheckBox_ = new wxCheckBox(main_tab, wxID_ANY, _t("Write to File")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE );
     toFileCheckBox_->SetValue(true);
-    file_name_label_ = new wxStaticText(main_tab, wxID_ANY, _("File Name:"));
-    button_search_ = new wxButton(main_tab, wxID_SAVE, _u("&Browse…"));
+    file_name_label_ = new wxStaticText(main_tab, wxID_ANY, _t("File Name:"));
+    button_search_ = new wxButton(main_tab, wxID_SAVE, _tu("&Browse…"));
     button_search_->Connect(wxID_SAVE, wxEVT_COMMAND_BUTTON_CLICKED
         , wxCommandEventHandler(mmQIFExportDialog::OnFileSearch), nullptr, this);
 
@@ -222,7 +222,7 @@
         , wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE | wxHSCROLL);
     tab2_sizer->Add(log_field_, 1, wxGROW|wxALL, border);
 
-    wxButton* itemClearButton = new wxButton(log_tab, wxID_CLEAR, _("Clear"));
+    wxButton* itemClearButton = new wxButton(log_tab, wxID_CLEAR, _t("Clear"));
     tab2_sizer->Add(itemClearButton, wxSizerFlags(g_flagsV).Center());
     itemClearButton->Connect(wxID_CLEAR, wxEVT_COMMAND_BUTTON_CLICKED
         , wxCommandEventHandler(mmQIFExportDialog::OnButtonClear), nullptr, this);
@@ -236,7 +236,7 @@
     wxStdDialogButtonSizer*  buttons_sizer = new wxStdDialogButtonSizer;
     buttons_panel->SetSizer(buttons_sizer);
 
-    wxButton* itemButtonOK = new wxButton(buttons_panel, wxID_OK, _("&OK "));
+    wxButton* itemButtonOK = new wxButton(buttons_panel, wxID_OK, _t("&OK "));
     wxButton* itemButtonCancel_ = new wxButton(buttons_panel, wxID_CANCEL, wxGetTranslation(g_CancelLabel));
     itemButtonOK->Connect(wxID_OK, wxEVT_COMMAND_BUTTON_CLICKED
         , wxCommandEventHandler(mmQIFExportDialog::OnOk), nullptr, this);
@@ -255,13 +255,13 @@
 void mmQIFExportDialog::OnAccountsButton(wxCommandEvent& WXUNUSED(event))
 {
     bSelectedAccounts_->UnsetToolTip();
-    mmMultiChoiceDialog s_acc(this, _("Choose Account to Export from:")
-        , _("QIF Export"), m_accounts_name);
+    mmMultiChoiceDialog s_acc(this, _t("Choose Account to Export from:")
+        , _t("QIF Export"), m_accounts_name);
 
     int i = 0;
     wxArrayInt s;
     Model_Account::Data_Set all_accounts = Model_Account::instance().find(
-        Model_Account::ACCOUNTTYPE(Model_Account::TYPE_STR_INVESTMENT, NOT_EQUAL)
+        Model_Account::ACCOUNTTYPE(Model_Account::TYPE_NAME_INVESTMENT, NOT_EQUAL)
     );
 
     for (const auto& a : all_accounts)
@@ -315,25 +315,25 @@
     switch (m_type)
     {
     case QIF:
-        fileName = wxFileSelector(_("Choose QIF data file to Export")
+        fileName = wxFileSelector(_t("Choose QIF data file to Export")
             , wxEmptyString, fileName, wxEmptyString
-            , _("QIF Files (*.qif)") + "|*.qif;*.QIF"
+            , _t("QIF Files (*.qif)") + "|*.qif;*.QIF"
             , wxFD_SAVE | wxFD_OVERWRITE_PROMPT);
         if (!fileName.IsEmpty())
             correctEmptyFileExt("qif", fileName);
         break;
     case JSON:
-        fileName = wxFileSelector(_("Choose JSON data file to Export")
+        fileName = wxFileSelector(_t("Choose JSON data file to Export")
             , wxEmptyString, fileName, wxEmptyString
-            , _("JSON Files (*.json)") + "|*.json;*.JSON"
+            , _t("JSON Files (*.json)") + "|*.json;*.JSON"
             , wxFD_SAVE | wxFD_OVERWRITE_PROMPT);
         if (!fileName.IsEmpty())
             correctEmptyFileExt("json", fileName);
         break;
     case CSV:
-        fileName = wxFileSelector(_("Choose CSV data file to Export")
+        fileName = wxFileSelector(_t("Choose CSV data file to Export")
             , wxEmptyString, fileName, wxEmptyString
-            , _("CSV Files (*.csv)") + "|*.csv;*.CSV"
+            , _t("CSV Files (*.csv)") + "|*.csv;*.CSV"
             , wxFD_SAVE | wxFD_OVERWRITE_PROMPT);
         if (!fileName.IsEmpty())
             correctEmptyFileExt("csv", fileName);
@@ -351,18 +351,18 @@
     bool bCorrect = false;
     wxString sErrorMsg = "";
     if (Model_Account::instance().all().empty() && accountsCheckBox_->IsChecked())
-        sErrorMsg =_("No Account available for export");
+        sErrorMsg =_t("No Account available for export");
     else if (selected_accounts_id_.size() < 1 && accountsCheckBox_->IsChecked())
-        sErrorMsg =_("No Accounts selected for export");
+        sErrorMsg =_t("No Accounts selected for export");
     else if (dateToCheckBox_->IsChecked() && dateFromCheckBox_->IsChecked() && fromDateCtrl_->GetValue() > toDateCtrl_->GetValue())
-        sErrorMsg =_("To Date less than From Date");
+        sErrorMsg =_t("To Date less than From Date");
     else
         bCorrect = true;
 
     if (bCorrect)
         mmExportQIF();
     else
-        wxMessageBox(sErrorMsg, _("QIF Export"), wxOK|wxICON_WARNING);
+        wxMessageBox(sErrorMsg, _t("QIF Export"), wxOK|wxICON_WARNING);
 }
 
 void mmQIFExportDialog::OnCancel(wxCommandEvent& WXUNUSED(event))
@@ -433,7 +433,7 @@
     bool exp_categ = cCategs_->IsChecked();
     bool exp_transactions = (accountsCheckBox_->IsChecked() && selected_accounts_id_.size() > 0);
 
-    const wxString delimiter = Model_Infotable::instance().GetStringInfo("DELIMITER", mmex::DEFDELIMTER);
+    const wxString delimiter = Model_Infotable::instance().getString("DELIMITER", mmex::DEFDELIMTER);
 
     wxString sErrorMsg;
     size_t numRecords = 0, numCategories = 0;
@@ -451,7 +451,7 @@
     {
         buffer << mmExportTransaction::getCategoriesQIF();
         numCategories = Model_Category::instance().all().size();
-        sErrorMsg << _("Categories exported") << "\n";
+        sErrorMsg << _t("Categories exported") << "\n";
     }
     else if (m_type == JSON)
     {
@@ -462,12 +462,12 @@
         else {
             mmExportTransaction::getUsedCategoriesJSON(json_writer);
         }
-        sErrorMsg << _("Categories exported") << "\n";
+        sErrorMsg << _t("Categories exported") << "\n";
     }
 
     std::map<int64 /*account ID*/, wxString> allAccounts4Export;
     wxArrayInt64 allPayees4Export;
-    const wxString RefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+    const wxString RefType = Model_Checking::refTypeName;
     wxArrayInt64 allAttachments4Export;
     wxArrayInt64 allCustomFields4Export;
     wxArrayInt64 allTags4Export;
@@ -482,11 +482,11 @@
         /* Array to store QIF tarts for selected accounts */
         std::map<int64 /*account ID*/, wxString> extraTransfers;
 
-        wxProgressDialog progressDlg(_("Please wait"), _("Exporting")
+        wxProgressDialog progressDlg(_tu("Please wait…"), _t("Exporting")
             , 100, this, wxPD_APP_MODAL | wxPD_CAN_ABORT);
 
         const auto splits = Model_Splittransaction::instance().get_all();
-        const auto tags = Model_Taglink::instance().get_all(Model_Attachment::REFTYPE_STR_TRANSACTION);
+        const auto tags = Model_Taglink::instance().get_all(Model_Checking::refTypeName);
 
         const wxString begin_date = fromDateCtrl_->GetValue().FormatISODate();
         const wxString end_date = toDateCtrl_->GetValue().FormatISODate();
@@ -510,7 +510,7 @@
             //
 
             // if Cancel clicked
-            if (!progressDlg.Pulse(wxString::Format(_("Exporting transaction %zu"), ++numRecords)))
+            if (!progressDlg.Pulse(wxString::Format(_t("Exporting transaction %zu"), ++numRecords)))
                 break; // abort processing
 
             bool is_reverce = false;
@@ -524,7 +524,7 @@
                 mmExportTransaction::getTransactionJSON(json_writer, full_tran);
                 allAccounts4Export[account_id] = "";
                 if (std::find(allPayees4Export.begin(), allPayees4Export.begin(), full_tran.PAYEEID) == allPayees4Export.end()
-                    && full_tran.TRANSCODE != Model_Checking::TYPE_STR_TRANSFER) {
+                    && full_tran.TRANSCODE != Model_Checking::TYPE_NAME_TRANSFER) {
                     allPayees4Export.push_back(full_tran.PAYEEID);
                 }
 
@@ -549,7 +549,7 @@
                 // store tags from the splits
                 for (const auto& split : full_tran.m_splits)
                 {
-                    for (const auto& taglink : Model_Taglink::instance().get(Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT, split.SPLITTRANSID))
+                    for (const auto& taglink : Model_Taglink::instance().get(Model_Splittransaction::refTypeName, split.SPLITTRANSID))
                     {
                         if (std::find(allTags4Export.begin(), allTags4Export.end(), taglink.second) == allTags4Export.end())
                             allTags4Export.push_back(taglink.second);
@@ -622,17 +622,17 @@
 
         case CSV:
             buffer
-                << _("ID") << delimiter
-                << _("Date") << delimiter
-                << _("Status") << delimiter
-                << _("Type") << delimiter
-                << _("Account") << delimiter
-                << _("Payee") << delimiter
-                << _("Category") << delimiter
-                << _("Amount") << delimiter
-                << _("Currency") << delimiter
-                << _("Number") << delimiter
-                << _("Notes")
+                << _t("ID") << delimiter
+                << _t("Date") << delimiter
+                << _t("Status") << delimiter
+                << _t("Type") << delimiter
+                << _t("Account") << delimiter
+                << _t("Payee") << delimiter
+                << _t("Category") << delimiter
+                << _t("Amount") << delimiter
+                << _t("Currency") << delimiter
+                << _t("Number") << delimiter
+                << _t("Notes")
                 << "\n";
 
             //Export accounts
@@ -672,12 +672,12 @@
 
     wxString msg = "";
     if (numCategories > 0) {
-        msg += wxString::Format(_("Number of categories exported: %zu \n"), numCategories);
+        msg += wxString::Format(_t("Number of categories exported: %zu \n"), numCategories);
     }
-    msg += wxString::Format(_("Number of transactions exported: %zu \n"), numRecords);
-    msg += wxString::Format(_("Number of accounts exported: %zu"), allAccounts4Export.size());
+    msg += wxString::Format(_t("Number of transactions exported: %zu \n"), numRecords);
+    msg += wxString::Format(_t("Number of accounts exported: %zu"), allAccounts4Export.size());
 
-    wxMessageDialog msgDlg(this, msg, _("Export as QIF file"), wxOK | wxICON_INFORMATION);
+    wxMessageDialog msgDlg(this, msg, _t("Export as QIF file"), wxOK | wxICON_INFORMATION);
 
     msgDlg.ShowModal();
 }
diff -Naur a/src/import_export/qif_import_gui.cpp b/src/import_export/qif_import_gui.cpp
--- a/src/import_export/qif_import_gui.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/import_export/qif_import_gui.cpp	2025-07-09 01:46:59.644940484 +0200
@@ -17,6 +17,9 @@
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ********************************************************/
 
+#include <wx/progdlg.h>
+#include <wx/dataview.h>
+
 #include "qif_import_gui.h"
 #include "qif_import.h"
 #include "export.h"
@@ -29,11 +32,10 @@
 #include "payeedialog.h"
 #include "categdialog.h"
 
+#include "model/Model_Setting.h"
 #include "model/Model_Category.h"
 #include "model/Model_Payee.h"
-
-#include <wx/progdlg.h>
-#include <wx/dataview.h>
+#include "model/Model_Tag.h"
 
 enum tab_id {
     LOG_TAB = 1,
@@ -81,16 +83,16 @@
     SetExtraStyle(GetExtraStyle() | wxWS_EX_BLOCK_EVENTS);
     wxDialog::Create(parent, id, caption, pos, size, style);
 
-    ColName_[COL_ID] = "#";
-    ColName_[COL_ACCOUNT] = _("Account");
-    ColName_[COL_DATE] = _("Date");
-    ColName_[COL_NUMBER] = _("Number");
-    ColName_[COL_PAYEE] = _("Payee");
-    ColName_[COL_TYPE] = _("Type");
-    ColName_[COL_CATEGORY] = _("Category");
-    ColName_[COL_TAGS] = _("Tags");
-    ColName_[COL_VALUE] = _("Value");
-    ColName_[COL_NOTES] = _("Notes");
+    ColName_[LIST_ID_ID] = "#";
+    ColName_[LIST_ID_ACCOUNT] = _t("Account");
+    ColName_[LIST_ID_DATE] = _t("Date");
+    ColName_[LIST_ID_NUMBER] = _t("Number");
+    ColName_[LIST_ID_PAYEE] = _t("Payee");
+    ColName_[LIST_ID_TYPE] = _t("Type");
+    ColName_[LIST_ID_CATEGORY] = _t("Category");
+    ColName_[LIST_ID_TAGS] = _t("Tags");
+    ColName_[LIST_ID_VALUE] = _t("Value");
+    ColName_[LIST_ID_NOTES] = _t("Notes");
 
     CreateControls();
     if (m_FileNameStr != wxEmptyString)
@@ -120,10 +122,10 @@
     wxBoxSizer* itemBoxSizer7 = new wxBoxSizer(wxHORIZONTAL);
     file_panel->SetSizer(itemBoxSizer7);
 
-    wxStaticText* file_name_label = new wxStaticText(file_panel, wxID_ANY, _("File Name:"));
+    wxStaticText* file_name_label = new wxStaticText(file_panel, wxID_ANY, _t("File Name:"));
     itemBoxSizer7->Add(file_name_label, g_flagsH);
 
-    wxArrayString files = Model_Setting::instance().GetArrayStringSetting("RECENT_QIF_FILES");
+    wxArrayString files = Model_Setting::instance().getArrayString("RECENT_QIF_FILES");
     file_name_ctrl_ = new  wxComboBox(file_panel, wxID_FILE, m_FileNameStr, wxDefaultPosition, wxDefaultSize, files, wxTE_PROCESS_ENTER);
     file_name_ctrl_->SetMinSize(wxSize(300, -1));
     itemBoxSizer7->Add(file_name_ctrl_, 1, wxALL | wxGROW, 5);
@@ -132,7 +134,7 @@
     file_name_ctrl_->Connect(wxID_FILE
         , wxEVT_COMMAND_TEXT_ENTER, wxCommandEventHandler(mmQIFImportDialog::OnFileNameChanged), nullptr, this);
 
-    button_search_ = new wxButton(file_panel, wxID_OPEN, _u("&Browse…"));
+    button_search_ = new wxButton(file_panel, wxID_OPEN, _tu("&Browse…"));
     itemBoxSizer7->Add(button_search_, g_flagsH);
     button_search_->Connect(wxID_OPEN, wxEVT_COMMAND_BUTTON_CLICKED
         , wxCommandEventHandler(mmQIFImportDialog::OnFileSearch), nullptr, this);
@@ -142,7 +144,7 @@
     left_sizer->Add(flex_sizer, g_flagsExpand);
 
     //Encoding
-    wxStaticText* itemStaticText88 = new wxStaticText(this, wxID_STATIC, wxString(_("Encoding:")));
+    wxStaticText* itemStaticText88 = new wxStaticText(this, wxID_STATIC, wxString(_t("Encoding:")));
     //itemStaticText88->SetFont(staticBoxFontSetting);
     flex_sizer->Add(itemStaticText88, g_flagsH);
 
@@ -154,7 +156,7 @@
     flex_sizer->Add(m_choiceEncoding, g_flagsH);
 
     //Account
-    accountCheckBox_ = new wxCheckBox(this, wxID_FILE5, _("Account")
+    accountCheckBox_ = new wxCheckBox(this, wxID_FILE5, _t("Account")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     accountDropDown_ = new wxChoice(this, ID_ACCOUNT);
     accountDropDown_->SetMinSize(wxSize(180, -1));
@@ -177,13 +179,13 @@
     flex_sizer->Add(accountDropDown_, g_flagsH);
 
     //Filtering Details --------------------------------------------
-    wxStaticBox* static_box = new wxStaticBox(this, wxID_ANY, _("Filtering Details:"));
+    wxStaticBox* static_box = new wxStaticBox(this, wxID_ANY, _t("Filtering Details:"));
     wxStaticBoxSizer* filter_sizer = new wxStaticBoxSizer(static_box, wxVERTICAL);
     wxFlexGridSizer* flex_sizer2 = new wxFlexGridSizer(0, 2, 0, 0);
     filter_sizer->Add(flex_sizer2, g_flagsExpand);
 
     // From Date
-    dateFromCheckBox_ = new wxCheckBox(static_box, wxID_FILE8, _("From Date")
+    dateFromCheckBox_ = new wxCheckBox(static_box, wxID_FILE8, _t("From Date")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     fromDateCtrl_ = new mmDatePickerCtrl(static_box, wxID_STATIC, wxDefaultDateTime
         , wxDefaultPosition, wxDefaultSize, wxDP_DROPDOWN);
@@ -193,7 +195,7 @@
     flex_sizer2->Add(fromDateCtrl_, g_flagsH);
 
     // To Date
-    dateToCheckBox_ = new wxCheckBox(static_box, wxID_FILE9, _("To Date")
+    dateToCheckBox_ = new wxCheckBox(static_box, wxID_FILE9, _t("To Date")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     toDateCtrl_ = new mmDatePickerCtrl(static_box, wxID_STATIC, wxDefaultDateTime
         , wxDefaultPosition, wxSize(150, -1), wxDP_DROPDOWN);
@@ -206,7 +208,7 @@
         , wxID_FILE9, wxDefaultPosition, wxDefaultSize, wxNB_MULTILINE);
 
     wxPanel* log_tab = new wxPanel(qif_notebook, wxID_ANY);
-    qif_notebook->AddPage(log_tab, _("Log"));
+    qif_notebook->AddPage(log_tab, _t("Log"));
     wxBoxSizer* log_sizer = new wxBoxSizer(wxVERTICAL);
     log_tab->SetSizer(log_sizer);
 
@@ -216,56 +218,56 @@
     log_sizer->Add(log_field_, g_flagsExpand);
 
     wxPanel* data_tab = new wxPanel(qif_notebook, wxID_ANY);
-    qif_notebook->AddPage(data_tab, _("Data"));
+    qif_notebook->AddPage(data_tab, _t("Data"));
     wxBoxSizer* data_sizer = new wxBoxSizer(wxVERTICAL);
     data_tab->SetSizer(data_sizer);
 
     dataListBox_ = new wxDataViewListCtrl(data_tab, wxID_ANY);
     dataListBox_->SetMinSize(wxSize(100, 200));
-    dataListBox_->AppendTextColumn(ColName_[COL_ID], wxDATAVIEW_CELL_INERT, 40, wxALIGN_RIGHT);
-    dataListBox_->AppendTextColumn(ColName_[COL_ACCOUNT], wxDATAVIEW_CELL_INERT, 120, wxALIGN_LEFT);
-    dataListBox_->AppendTextColumn(ColName_[COL_DATE], wxDATAVIEW_CELL_INERT, 90, wxALIGN_RIGHT);
-    dataListBox_->AppendTextColumn(ColName_[COL_NUMBER], wxDATAVIEW_CELL_INERT, 80, wxALIGN_RIGHT);
-    dataListBox_->AppendTextColumn(ColName_[COL_PAYEE], wxDATAVIEW_CELL_INERT, 120, wxALIGN_LEFT);
-    dataListBox_->AppendTextColumn(ColName_[COL_TYPE], wxDATAVIEW_CELL_INERT, 60, wxALIGN_LEFT);
-    dataListBox_->AppendTextColumn(ColName_[COL_CATEGORY], wxDATAVIEW_CELL_INERT, 140, wxALIGN_LEFT);
-    dataListBox_->AppendTextColumn(ColName_[COL_TAGS], wxDATAVIEW_CELL_INERT, 140, wxALIGN_LEFT);
-    dataListBox_->AppendTextColumn(ColName_[COL_VALUE], wxDATAVIEW_CELL_INERT, 100, wxALIGN_RIGHT);
-    dataListBox_->AppendTextColumn(ColName_[COL_NOTES], wxDATAVIEW_CELL_INERT, 300, wxALIGN_LEFT);
+    dataListBox_->AppendTextColumn(ColName_[LIST_ID_ID], wxDATAVIEW_CELL_INERT, 40, wxALIGN_RIGHT);
+    dataListBox_->AppendTextColumn(ColName_[LIST_ID_ACCOUNT], wxDATAVIEW_CELL_INERT, 120, wxALIGN_LEFT);
+    dataListBox_->AppendTextColumn(ColName_[LIST_ID_DATE], wxDATAVIEW_CELL_INERT, 90, wxALIGN_RIGHT);
+    dataListBox_->AppendTextColumn(ColName_[LIST_ID_NUMBER], wxDATAVIEW_CELL_INERT, 80, wxALIGN_RIGHT);
+    dataListBox_->AppendTextColumn(ColName_[LIST_ID_PAYEE], wxDATAVIEW_CELL_INERT, 120, wxALIGN_LEFT);
+    dataListBox_->AppendTextColumn(ColName_[LIST_ID_TYPE], wxDATAVIEW_CELL_INERT, 60, wxALIGN_LEFT);
+    dataListBox_->AppendTextColumn(ColName_[LIST_ID_CATEGORY], wxDATAVIEW_CELL_INERT, 140, wxALIGN_LEFT);
+    dataListBox_->AppendTextColumn(ColName_[LIST_ID_TAGS], wxDATAVIEW_CELL_INERT, 140, wxALIGN_LEFT);
+    dataListBox_->AppendTextColumn(ColName_[LIST_ID_VALUE], wxDATAVIEW_CELL_INERT, 100, wxALIGN_RIGHT);
+    dataListBox_->AppendTextColumn(ColName_[LIST_ID_NOTES], wxDATAVIEW_CELL_INERT, 300, wxALIGN_LEFT);
     data_sizer->Add(dataListBox_, g_flagsExpand);
 
     //Accounts
     wxPanel* acc_tab = new wxPanel(qif_notebook, wxID_ANY);
-    qif_notebook->AddPage(acc_tab, _("Account"));
+    qif_notebook->AddPage(acc_tab, _t("Account"));
     wxBoxSizer* acc_sizer = new wxBoxSizer(wxHORIZONTAL);
     acc_tab->SetSizer(acc_sizer);
 
     accListBox_ = new wxDataViewListCtrl(acc_tab, wxID_ANY);
-    accListBox_->AppendTextColumn(_("Name"), wxDATAVIEW_CELL_INERT, 250, wxALIGN_LEFT);
-    accListBox_->AppendTextColumn(_("Type"), wxDATAVIEW_CELL_INERT, 50, wxALIGN_LEFT);
-    accListBox_->AppendTextColumn(_("Currency"), wxDATAVIEW_CELL_INERT, 50, wxALIGN_LEFT);
-    accListBox_->AppendTextColumn(_("Status"), wxDATAVIEW_CELL_INERT, 150, wxALIGN_LEFT);
+    accListBox_->AppendTextColumn(_t("Name"), wxDATAVIEW_CELL_INERT, 250, wxALIGN_LEFT);
+    accListBox_->AppendTextColumn(_t("Type"), wxDATAVIEW_CELL_INERT, 50, wxALIGN_LEFT);
+    accListBox_->AppendTextColumn(_t("Currency"), wxDATAVIEW_CELL_INERT, 50, wxALIGN_LEFT);
+    accListBox_->AppendTextColumn(_t("Status"), wxDATAVIEW_CELL_INERT, 150, wxALIGN_LEFT);
     acc_sizer->Add(accListBox_, g_flagsExpand);
 
     //Payees
     wxPanel* payee_tab = new wxPanel(qif_notebook, wxID_ANY);
-    qif_notebook->AddPage(payee_tab, _("Payee"));
+    qif_notebook->AddPage(payee_tab, _t("Payee"));
     wxBoxSizer* payee_sizer = new wxBoxSizer(wxHORIZONTAL);
     payee_tab->SetSizer(payee_sizer);
 
     payeeListBox_ = new wxDataViewListCtrl(payee_tab, wxID_ANY);
-    payeeListBox_->AppendTextColumn(_("Name"), wxDATAVIEW_CELL_INERT, 250, wxALIGN_LEFT);
-    payeeListBox_->AppendTextColumn(_("Status"), wxDATAVIEW_CELL_INERT, 150, wxALIGN_LEFT);
+    payeeListBox_->AppendTextColumn(_t("Name"), wxDATAVIEW_CELL_INERT, 250, wxALIGN_LEFT);
+    payeeListBox_->AppendTextColumn(_t("Status"), wxDATAVIEW_CELL_INERT, 150, wxALIGN_LEFT);
     payee_sizer->Add(payeeListBox_, g_flagsExpand);
 
     //Category
     wxPanel* categ_tab = new wxPanel(qif_notebook, wxID_ANY);
-    qif_notebook->AddPage(categ_tab, _("Category"));
+    qif_notebook->AddPage(categ_tab, _t("Category"));
     wxBoxSizer* category_sizer = new wxBoxSizer(wxHORIZONTAL);
     categ_tab->SetSizer(category_sizer);
     categoryListBox_ = new wxDataViewListCtrl(categ_tab, wxID_ANY);
-    categoryListBox_->AppendTextColumn(_("Name"), wxDATAVIEW_CELL_INERT, 250, wxALIGN_LEFT);
-    categoryListBox_->AppendTextColumn(_("Status"), wxDATAVIEW_CELL_INERT, 150, wxALIGN_LEFT);
+    categoryListBox_->AppendTextColumn(_t("Name"), wxDATAVIEW_CELL_INERT, 250, wxALIGN_LEFT);
+    categoryListBox_->AppendTextColumn(_t("Status"), wxDATAVIEW_CELL_INERT, 150, wxALIGN_LEFT);
     category_sizer->Add(categoryListBox_, g_flagsExpand);
 
     payeeListBox_->GetMainWindow()->Bind(wxEVT_LEFT_DCLICK, &mmQIFImportDialog::OnShowPayeeDialog, this);
@@ -277,20 +279,20 @@
     top_sizer->Add(filter_sizer, g_flagsH);
 
     //Use account number instead of account name :
-    accountNumberCheckBox_ = new wxCheckBox(this, wxID_FILE6, _("Use account number instead of account name")
+    accountNumberCheckBox_ = new wxCheckBox(this, wxID_FILE6, _t("Use account number instead of account name")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
 
     //Use payee as desc :
-    payeeIsNotesCheckBox_ = new wxCheckBox(this, wxID_FILE7, _("Include payee field in notes")
+    payeeIsNotesCheckBox_ = new wxCheckBox(this, wxID_FILE7, _t("Include payee field in notes")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
 
     //Pattern match Payees :
-    payeeMatchCheckBox_ = new wxCheckBox(this, mmID_PAYEE, _("Pattern match Payees")
+    payeeMatchCheckBox_ = new wxCheckBox(this, mmID_PAYEE, _t("Pattern match Payees")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     payeeRegExInitialized_ = false;
 
     //Append payee match info to notes :
-    payeeMatchAddNotes_ = new wxCheckBox(this, wxID_ANY, _("Add match details to Notes")
+    payeeMatchAddNotes_ = new wxCheckBox(this, wxID_ANY, _t("Add match details to Notes")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     payeeMatchAddNotes_->Disable();
 
@@ -298,7 +300,7 @@
     // Date Format Settings
     m_dateFormatStr = Option::instance().getDateFormat();
 
-    wxStaticText* dateFormat = new wxStaticText(this, wxID_STATIC, _("Date Format"));
+    wxStaticText* dateFormat = new wxStaticText(this, wxID_STATIC, _t("Date Format"));
     choiceDateFormat_ = new wxComboBox(this, wxID_ANY);
     wxArrayString auto_fills;
     for (const auto& i : g_date_formats_map())
@@ -325,7 +327,7 @@
     flex_sizer_b->Add(date_sizer, g_flagsH);
 
 
-    wxStaticText* decamalCharText = new wxStaticText(this, wxID_STATIC, _("Decimal Char"));
+    wxStaticText* decamalCharText = new wxStaticText(this, wxID_STATIC, _t("Decimal Char"));
     m_choiceDecimalSeparator = new mmChoiceAmountMask(this, wxID_ANY);
     wxBoxSizer* decamalCharSizer = new wxBoxSizer(wxHORIZONTAL);
     decamalCharSizer->Add(decamalCharText, g_flagsBorder1H);
@@ -337,7 +339,7 @@
     flex_sizer_b->Add(decamalCharSizer, g_flagsH);
     //
 
-    colorCheckBox_ = new wxCheckBox(this, wxID_PASTE, _("Color")
+    colorCheckBox_ = new wxCheckBox(this, wxID_PASTE, _t("Color")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     mmColorBtn_ = new mmColorButton(this, wxID_HIGHEST
         , wxSize(m_choiceDecimalSeparator->GetSize().GetY(), m_choiceDecimalSeparator->GetSize().GetY()));
@@ -363,7 +365,7 @@
     wxStdDialogButtonSizer*  buttons_sizer = new wxStdDialogButtonSizer;
     buttons_panel->SetSizer(buttons_sizer);
 
-    btnOK_ = new wxButton(buttons_panel, wxID_OK, _("&OK "));
+    btnOK_ = new wxButton(buttons_panel, wxID_OK, _t("&OK "));
     wxButton* itemButtonCancel_ = new wxButton(buttons_panel, wxID_CANCEL, wxGetTranslation(g_CloseLabel));
     btnOK_->Connect(wxID_OK, wxEVT_COMMAND_BUTTON_CLICKED
         , wxCommandEventHandler(mmQIFImportDialog::OnOk), nullptr, this);
@@ -388,17 +390,17 @@
     m_QIFaccounts.clear();
     m_accountNameStr.clear();
     m_QIFcategoryNames.clear();
-    m_QIFcategoryNames[_("Unknown")] = -1;
+    m_QIFcategoryNames[_t("Unknown")] = -1;
     m_QIFpayeeNames.clear();
     m_payee_names.clear();
-    m_payee_names.Add(_("Unknown"));
-    wxString catDelimiter = Model_Infotable::instance().GetStringInfo("CATEG_DELIMITER", ":");
+    m_payee_names.Add(_t("Unknown"));
+    wxString catDelimiter = Model_Infotable::instance().getString("CATEG_DELIMITER", ":");
 
     wxFileInputStream input(m_FileNameStr);
     wxConvAuto conv = g_encoding.at(m_choiceEncoding->GetSelection()).first;
     wxTextInputStream text(input, "\x09", conv);
 
-    wxProgressDialog progressDlg(_("Please wait"), _("Scanning")
+    wxProgressDialog progressDlg(_tu("Please wait…"), _t("Scanning")
         , 0, this, wxPD_APP_MODAL | wxPD_CAN_ABORT);
 
     wxLongLong start = wxGetUTCTimeMillis();
@@ -427,13 +429,13 @@
         if (numLines % 100 == 0)
         {
             interval = wxGetUTCTimeMillis() - start;
-            if (!progressDlg.Pulse(wxString::Format(_("Reading line %zu, %lld ms")
+            if (!progressDlg.Pulse(wxString::Format(_t("Reading line %zu, %lld ms")
                 , numLines, interval)))
                 break;
         }
         if (numLines <= 50)
         {
-            *log_field_ << wxString::Format(_("Line %zu \t %s\n"), numLines, lineStr);
+            *log_field_ << wxString::Format(_t("Line %zu \t %s\n"), numLines, lineStr);
             if (numLines == 50)
                 *log_field_ << "-------------------------------------- 8< --------------------------------------\n";
         }
@@ -466,14 +468,14 @@
         if (lineType == CategorySplit || lineType == Category)
         {
             if (data.empty())
-                data = _("Unknown");
+                data = _t("Unknown");
             wxRegEx regex(" ?: ?");
             regex.Replace(&data, catDelimiter);
             wxString catStr = data.BeforeFirst('/');
             if (!catStr.IsEmpty())
             {
                 if (catStr.Left(1) == "[" && catStr.Last() == ']')
-                    catStr = _("Transfer");
+                    catStr = _t("Transfer");
                 m_QIFcategoryNames[catStr] = -1;
             }
         }
@@ -533,22 +535,22 @@
     progressDlg.Destroy();
 
     interval = wxGetUTCTimeMillis() - start;
-    wxString sMsg = wxString::Format(_("Number of lines read from QIF file: %zu in %lld ms")
+    wxString sMsg = wxString::Format(_t("Number of lines read from QIF file: %zu in %lld ms")
         , numLines, interval);
     *log_field_ << sMsg << "\n";
 
     if (!m_QIFaccounts.empty()) {
-        sMsg = _("Accounts:");
+        sMsg = _t("Accounts:");
         for (const auto& i : m_QIFaccounts) {
             sMsg += ("\n" + i.first);
         }
         *log_field_ << sMsg << "\n";
     }
 
-    sMsg = _("Date Format: ") + "\n" + choiceDateFormat_->GetValue();
+    sMsg = _t("Date Format: ") + "\n" + choiceDateFormat_->GetValue();
     *log_field_ << sMsg << "\n";
 
-    sMsg = wxString::Format(_("Press OK Button to continue"));
+    sMsg = wxString::Format(_t("Press OK Button to continue"));
     *log_field_ << sMsg << "\n";
 
     return true;
@@ -603,8 +605,8 @@
             else
             {
                 isTransfer = true;
-                trx[Category] = _("Transfer") + (!tags.IsEmpty() ? "/" + tags : "");
-                trx[TrxType] = Model_Checking::TYPE_STR_TRANSFER;
+                trx[Category] = _t("Transfer") + (!tags.IsEmpty() ? "/" + tags : "");
+                trx[TrxType] = Model_Checking::TYPE_NAME_TRANSFER;
                 trx[ToAccountName] = toAccName;
                 trx[Memo] += (trx[Memo].empty() ? "" : "\n") + trx[Payee];
                 if (m_QIFaccounts.find(toAccName) == m_QIFaccounts.end())
@@ -623,7 +625,7 @@
         wxString payee_name = trx.find(Payee) != trx.end() ? trx[Payee] : "";
         if (payee_name.empty() && trx[AcctType] != "Account" )
         {
-            payee_name = trx.find(AccountName) != trx.end() ? trx[AccountName] : _("Unknown");
+            payee_name = trx.find(AccountName) != trx.end() ? trx[AccountName] : _t("Unknown");
             trx[Payee] = payee_name;
         }
 
@@ -650,9 +652,9 @@
     wxString amtStr = (trx.find(Amount) == trx.end() ? "" : trx[Amount]);
     if (!isTransfer) {
         if (amtStr.Mid(0, 1) == "-")
-            trx[TrxType] = Model_Checking::TYPE_STR_WITHDRAWAL;
+            trx[TrxType] = Model_Checking::TYPE_NAME_WITHDRAWAL;
         else if (!amtStr.empty())
-            trx[TrxType] = Model_Checking::TYPE_STR_DEPOSIT;
+            trx[TrxType] = Model_Checking::TYPE_NAME_DEPOSIT;
     }
 
     return !amtStr.empty();
@@ -663,7 +665,6 @@
     int num = 0;
     if (tabs & TRX_TAB)
     {
-        wxString acc;
         dataListBox_->DeleteAllItems();
         for (const auto& trx : vQIF_trxs_)
         {
@@ -697,7 +698,7 @@
             data.push_back(wxVariant(dateStr));
             data.push_back(wxVariant(trx.find(TransNumber) != trx.end() ? trx.at(TransNumber) : ""));
             const wxString type = (trx.find(TrxType) != trx.end() ? trx.at(TrxType) : "");
-            if (type == Model_Checking::TYPE_STR_TRANSFER)
+            if (type == Model_Checking::TYPE_NAME_TRANSFER)
                 data.push_back(wxVariant(trx.find(ToAccountName) != trx.end() ? trx.at(ToAccountName) : ""));
             else
                 data.push_back(wxVariant(trx.find(Payee) != trx.end() ? trx.at(Payee) : ""));
@@ -757,17 +758,17 @@
             {
                 Model_Currency::Data *curr = Model_Currency::instance().get(account->CURRENCYID);
                 if (curr && curr->CURRENCY_SYMBOL == currencySymbol)
-                    status = _("OK");
+                    status = _t("OK");
                 else
-                    status = _("Warning");
+                    status = _t("Warning");
                 if (account->ACCOUNTTYPE != mmExportTransaction::mm_acc_type(type))
                 {
-                    status = _("Warning");
+                    status = _t("Warning");
                 }
                 data.push_back(wxVariant(account->ACCOUNTNAME));
             }
             else {
-                status = _("Missing");
+                status = _t("Missing");
                 data.push_back(wxVariant(acc.first));
             }
 
@@ -787,18 +788,18 @@
         {
             wxVector<wxVariant> data;
             data.push_back(wxVariant(payee));
-            if (payee == _("Unknown") || (m_QIFpayeeNames.find(payee) != m_QIFpayeeNames.end() && std::get<0>(m_QIFpayeeNames[payee]) != -1))
+            if (payee == _t("Unknown") || (m_QIFpayeeNames.find(payee) != m_QIFpayeeNames.end() && std::get<0>(m_QIFpayeeNames[payee]) != -1))
             {
                 if (std::get<2>(m_QIFpayeeNames[payee]) == wxEmptyString)
-                    data.push_back(wxVariant(_("OK")));
+                    data.push_back(wxVariant(_t("OK")));
                 else
-                    data.push_back(wxVariant(wxString::Format(_("Matched to %1$s by pattern %2$s"),
+                    data.push_back(wxVariant(wxString::Format(_t("Matched to %1$s by pattern %2$s"),
                         std::get<1>(m_QIFpayeeNames[payee]),
                         std::get<2>(m_QIFpayeeNames[payee])
                     )));
             }
             else
-                data.push_back(wxVariant(_("Missing")));
+                data.push_back(wxVariant(_t("Missing")));
             payeeListBox_->AppendItem(data, static_cast<wxUIntPtr>(num++));
         }
     }
@@ -816,7 +817,7 @@
                 !(categ.first.Left(1) == '[' && categ.first.Last() == ']'))
                 data.push_back(wxVariant("Missing"));
             else
-                data.push_back(wxVariant(_("OK")));
+                data.push_back(wxVariant(_t("OK")));
             categoryListBox_->AppendItem(data, static_cast<wxUIntPtr>(num++));
         }
     }
@@ -871,9 +872,9 @@
 {
     m_FileNameStr = file_name_ctrl_->GetValue();
 
-    m_FileNameStr = wxFileSelector(_("Choose QIF data file to Import")
+    m_FileNameStr = wxFileSelector(_t("Choose QIF data file to Import")
         , wxEmptyString, m_FileNameStr, wxEmptyString
-        , _("QIF Files (*.qif)") + "|*.qif;*.QIF"
+        , _t("QIF Files (*.qif)") + "|*.qif;*.QIF"
         , wxFD_OPEN | wxFD_CHANGE_DIR | wxFD_FILE_MUST_EXIST, this); //TODO: Remove UI Blinking
 
     if (m_FileNameStr.IsEmpty()) {
@@ -895,7 +896,7 @@
     if (data && m_dateFormatStr != data->GetData()) {
         m_dateFormatStr = data->GetData();
         m_userDefinedDateMask = true;
-        wxString sMsg = _("Date Format: ") + "\n" + choiceDateFormat_->GetValue();
+        wxString sMsg = _t("Date Format: ") + "\n" + choiceDateFormat_->GetValue();
         *log_field_ << sMsg << "\n";
     }
     refreshTabs(TRX_TAB);
@@ -1042,24 +1043,24 @@
     }
 
     wxString sMsg;
-    wxMessageDialog msgDlg(this, _("Do you want to import all transaction?")
-        + "\n" + _("All missing account, payees and categories will be created.")
-        , _("Confirm Import")
+    wxMessageDialog msgDlg(this, _t("Do you want to import all transaction?")
+        + "\n" + _t("All missing account, payees and categories will be created.")
+        , _t("Confirm Import")
         , wxYES_NO | wxNO_DEFAULT | wxICON_QUESTION);
     if (msgDlg.ShowModal() == wxID_YES)
     {
         getOrCreateAccounts();
         int nTransactions = vQIF_trxs_.size();
-        wxProgressDialog progressDlg(_("Please wait"), _("Importing")
+        wxProgressDialog progressDlg(_tu("Please wait…"), _t("Importing")
             , nTransactions + 1, this, wxPD_APP_MODAL | wxPD_CAN_ABORT | wxPD_AUTO_HIDE);
-        progressDlg.Update(1, _("Importing Accounts"));
+        progressDlg.Update(1, _t("Importing Accounts"));
         bool is_webbapp_enabled = mmWebApp::MMEX_WebApp_UpdateAccount();
 
-        progressDlg.Update(1, _("Importing Payees"));
+        progressDlg.Update(1, _t("Importing Payees"));
         getOrCreatePayees();
         if (is_webbapp_enabled)
             is_webbapp_enabled = mmWebApp::MMEX_WebApp_UpdatePayee();
-        progressDlg.Update(1, _("Importing Categories"));
+        progressDlg.Update(1, _t("Importing Categories"));
         getOrCreateCategories();
         if (is_webbapp_enabled)
             mmWebApp::MMEX_WebApp_UpdateCategory();
@@ -1068,7 +1069,7 @@
         Model_Checking::Cache transfer_to_data_set;
         Model_Checking::Cache transfer_from_data_set;
         int count = 0;
-        const wxString& transferStr = Model_Checking::TYPE_STR_TRANSFER;
+        const wxString& transferStr = Model_Checking::TYPE_NAME_TRANSFER;
 
         const auto begin_date = toDateCtrl_->GetValue().FormatISODate();
         const auto end_date = fromDateCtrl_->GetValue().FormatISODate();
@@ -1081,7 +1082,7 @@
             if (count % 100 == 0 || count == nTransactions)
             {
                 if (!progressDlg.Update(count
-                    , wxString::Format(_("Importing transaction %1$i of %2$i"), count, nTransactions))) // if cancel clicked
+                    , wxString::Format(_t("Importing transaction %1$i of %2$i"), count, nTransactions))) // if cancel clicked
                     break; // abort processing
             }
             //
@@ -1114,7 +1115,7 @@
                 Model_Taglink::Cache taglinks;
                 if (!tagStr.IsEmpty())
                 {
-                    wxString reftype = Model_Attachment::REFTYPE_STR_TRANSACTION;
+                    wxString reftype = Model_Checking::refTypeName;
                     wxStringTokenizer tagTokens = wxStringTokenizer(tagStr, ":");
                     while (tagTokens.HasMoreTokens())
                     {
@@ -1160,7 +1161,7 @@
             }
             else
             {
-                *log_field_ << wxString::Format(_("Error: %s"), msg);
+                *log_field_ << wxString::Format(_t("Error: %s"), msg);
 
                 wxString t = "";
                 for (const auto&i : entry)
@@ -1171,7 +1172,7 @@
             ++count;
         }
 
-        progressDlg.Update(count, _("Importing Transfers"));
+        progressDlg.Update(count, _t("Importing Transfers"));
         mergeTransferPair(transfer_to_data_set, transfer_from_data_set);
         appendTransfers(trx_data_set, transfer_to_data_set);
 
@@ -1211,11 +1212,11 @@
         }
         Model_Taglink::instance().ReleaseSavepoint();
         Model_Checking::instance().save(trx_data_set);
-        progressDlg.Update(count, _("Importing Split transactions"));
+        progressDlg.Update(count, _t("Importing Split transactions"));
         joinSplit(trx_data_set, m_splitDataSets);
         saveSplit();
 
-        sMsg = _("Import finished successfully") + "\n" + wxString::Format(_("Total Imported: %zu"), trx_data_set.size());
+        sMsg = _t("Import finished successfully") + "\n" + wxString::Format(_t("Total Imported: %zu"), trx_data_set.size());
         trx_data_set.clear();
         vQIF_trxs_.clear();
         btnOK_->Enable(false);
@@ -1225,9 +1226,9 @@
     }
     else
     {
-        sMsg = _("Imported transactions discarded by user!"); //TODO: strange message may be _("Import has discarded by user!")
+        sMsg = _t("Imported transactions discarded by user!"); //TODO: strange message may be _t("Import has discarded by user!")
     }
-    wxMessageDialog(this, sMsg, _("Import from QIF file"), wxOK | wxICON_WARNING).ShowModal();
+    wxMessageDialog(this, sMsg, _t("Import from QIF file"), wxOK | wxICON_WARNING).ShowModal();
     *log_field_ << sMsg << "\n";
 
     refreshTabs(ACC_TAB | PAYEE_TAB | CAT_TAB);
@@ -1335,7 +1336,7 @@
     trx->TRANSCODE = (t.find(TrxType) != t.end() ? t[TrxType] : "");
     if (trx->TRANSCODE.empty())
     {
-        msg = _("Transaction code is missing");
+        msg = _t("Transaction code is missing");
         return false;
     }
     bool transfer = Model_Checking::is_transfer(trx->TRANSCODE);
@@ -1349,7 +1350,7 @@
                 trx->PAYEEID = std::get<0>(m_QIFpayeeNames[payee_name]);
                 // NOTES haven't been filled yet, so we can just direct assign match details if necessary
                 if (payeeMatchAddNotes_->IsChecked() && !std::get<2>(m_QIFpayeeNames[payee_name]).IsEmpty()) {
-                    trx->NOTES =  wxString::Format(_("%1$s matched by %2$s"), payee_name, std::get<2>(m_QIFpayeeNames[payee_name]));
+                    trx->NOTES =  wxString::Format(_t("%1$s matched by %2$s"), payee_name, std::get<2>(m_QIFpayeeNames[payee_name]));
                 }
             } else trx->PAYEEID = -1;
         }
@@ -1361,7 +1362,7 @@
 
     if (trx->PAYEEID == -1 && !transfer)
     {
-        msg = _("Transaction Payee is missing or incorrect");
+        msg = _t("Transaction Payee is missing or incorrect");
         return false;
     }
 
@@ -1373,7 +1374,7 @@
         trx->TRANSDATE = dtdt.FormatISOCombined();
     else
     {
-        *log_field_ << _("Date format or date mask is incorrect") << "\n";
+        *log_field_ << _t("Date format or date mask is incorrect") << "\n";
         return false;
     }
 
@@ -1385,7 +1386,7 @@
     accountID = (m_QIFaccountsID.find(accountName) != m_QIFaccountsID.end() ? m_QIFaccountsID.at(accountName) : -1);
     if (accountID < 1)
     {
-        msg = _("Transaction Account is incorrect");
+        msg = _t("Transaction Account is incorrect");
         return false;
     }
     trx->ACCOUNTID = accountID;
@@ -1394,7 +1395,7 @@
             ? m_QIFaccountsID[t[ToAccountName]] : -1) : -1);
     if (trx->ACCOUNTID == trx->TOACCOUNTID && transfer)
     {
-        msg = _("Transaction Account for transfer is incorrect");
+        msg = _t("Transaction Account for transfer is incorrect");
         return false;
     }
 
@@ -1423,7 +1424,7 @@
     const wxString value = mmTrimAmount(t.find(Amount) != t.end() ? t[Amount] : "", decimal_, ".");
     if (value.empty())
     {
-        msg = _("Transaction Amount is incorrect");
+        msg = _t("Transaction Amount is incorrect");
         return false;
     }
 
@@ -1449,7 +1450,7 @@
             int64 categID = m_QIFcategoryNames[c];
             if (categID <= 0)
             {
-                msg = _("Transaction Category is incorrect");
+                msg = _t("Transaction Category is incorrect");
                 return false;
             }
             Model_Splittransaction::Data* s = Model_Splittransaction::instance().create();
@@ -1481,7 +1482,7 @@
             if (!tagStr.IsEmpty())
             {
                 Model_Taglink::Cache splitTaglinks;
-                wxString reftype = Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT;
+                wxString reftype = Model_Splittransaction::refTypeName;
                 wxStringTokenizer tagTokens = wxStringTokenizer(tagStr, ":");
                 while (tagTokens.HasMoreTokens())
                 {
@@ -1525,7 +1526,7 @@
 
             if (categStr.empty())
             {
-                trx->CATEGID = (m_QIFcategoryNames[_("Unknown")]);
+                trx->CATEGID = (m_QIFcategoryNames[_t("Unknown")]);
             }
         }
         else
@@ -1563,11 +1564,11 @@
             Model_Account::Data *account = Model_Account::instance().create();
 
             account->FAVORITEACCT = "TRUE";
-            account->STATUS = Model_Account::STATUS_STR_OPEN;
+            account->STATUS = Model_Account::STATUS_NAME_OPEN;
 
             const auto type = item.second.find(AccountType) != item.second.end() ? item.second.at(AccountType) : "";
             account->ACCOUNTTYPE = mmExportTransaction::mm_acc_type(type);
-            //Model_Account::TYPE_STR_CHECKING;
+            //Model_Account::TYPE_NAME_CHECKING;
             account->ACCOUNTNAME = item.first;
             account->INITIALBAL = 0;
             account->INITIALDATE = wxDate::Today().FormatISODate();
@@ -1583,7 +1584,7 @@
             }
 
             accountID = Model_Account::instance().save(account);
-            wxString sMsg = wxString::Format(_("Added account: %s"), item.first);
+            wxString sMsg = wxString::Format(_t("Added account: %s"), item.first);
             *log_field_ << sMsg << "\n";
         }
         else
@@ -1614,7 +1615,7 @@
         p->PAYEENAME = item;
         p->ACTIVE = 1;
         p->CATEGID = -1;
-        wxString sMsg = wxString::Format(_("Added payee: %s"), item);
+        wxString sMsg = wxString::Format(_t("Added payee: %s"), item);
         log_field_->AppendText(wxString() << sMsg << "\n");
         m_QIFpayeeNames[item] = std::make_tuple(Model_Payee::instance().save(p), p->PAYEENAME, "");
         
@@ -1689,11 +1690,11 @@
 {
     wxFileName file(m_FileNameStr);
     if (file.FileExists()) {
-        Model_Setting::instance().Prepend("RECENT_QIF_FILES", m_FileNameStr, 10);
+        Model_Setting::instance().prependArrayItem("RECENT_QIF_FILES", m_FileNameStr, 10);
     }
 }
 
-void mmQIFImportDialog::OnMenuSelected(wxCommandEvent& event)
+void mmQIFImportDialog::OnMenuSelected(wxCommandEvent& WXUNUSED(event))
 {
     mmColorBtn_->Enable(false);
     colorCheckBox_->SetValue(false);
diff -Naur a/src/import_export/qif_import_gui.h b/src/import_export/qif_import_gui.h
--- a/src/import_export/qif_import_gui.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/import_export/qif_import_gui.h	2025-07-09 01:46:59.644940484 +0200
@@ -42,7 +42,7 @@
     }
     mmQIFImportDialog(wxWindow* parent, int64 account_id, const wxString& file_path = wxEmptyString);
 
-    bool Create(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& caption = _("Import from QIF file"), const wxPoint& pos = wxDefaultPosition,
+    bool Create(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& caption = _t("Import from QIF file"), const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize, long style = wxCAPTION | wxRESIZE_BORDER | wxSYSTEM_MENU | wxCLOSE_BOX);
 
     wxString OnGetItemText(long item, long column) const;
@@ -127,19 +127,19 @@
     std::map<std::pair <int64, wxString>, std::map<int, std::pair<wxString, wxRegEx>> > payeeMatchPatterns_;
     bool payeeRegExInitialized_ = false;
 
-    enum EColumn
+    enum LIST_ID
     {
-        COL_ID = 0,
-        COL_ACCOUNT,
-        COL_DATE,
-        COL_NUMBER,
-        COL_PAYEE,
-        COL_TYPE,
-        COL_CATEGORY,
-        COL_TAGS,
-        COL_VALUE,
-        COL_NOTES,
-        COL_MAX, // number of columns
+        LIST_ID_ID = 0,
+        LIST_ID_ACCOUNT,
+        LIST_ID_DATE,
+        LIST_ID_NUMBER,
+        LIST_ID_PAYEE,
+        LIST_ID_TYPE,
+        LIST_ID_CATEGORY,
+        LIST_ID_TAGS,
+        LIST_ID_VALUE,
+        LIST_ID_NOTES,
+        LIST_ID_size, // number of columns
     };
     enum {
         ID_ACCOUNT = wxID_HIGHEST + 1
diff -Naur a/src/import_export/univcsvdialog.cpp b/src/import_export/univcsvdialog.cpp
--- a/src/import_export/univcsvdialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/import_export/univcsvdialog.cpp	2025-07-09 01:46:59.644940484 +0200
@@ -20,6 +20,16 @@
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  ********************************************************/
 
+#include <algorithm>
+#include <cctype>
+#include <string>
+#include <memory>
+#include <regex>
+
+#include <wx/xml/xml.h>
+#include <wx/spinctrl.h>
+#include <wx/display.h>
+
 #include "univcsvdialog.h"
 
 #include "images_list.h"
@@ -35,20 +45,12 @@
 #include "payeedialog.h"
 #include "categdialog.h"
 
-#include "Model_Setting.h"
-#include "Model_Payee.h"
-#include "Model_Category.h"
-#include "Model_Infotable.h"
-
-#include <algorithm>
-#include <cctype>
-#include <string>
-#include <memory>
-#include <regex>
-
-#include <wx/xml/xml.h>
-#include <wx/spinctrl.h>
-#include <wx/display.h>
+#include "model/Model_Setting.h"
+#include "model/Model_Infotable.h"
+#include "model/Model_Payee.h"
+#include "model/Model_Category.h"
+#include "model/Model_CustomFieldData.h"
+#include "model/Model_Tag.h"
 
 enum tab_id {
     DATA_TAB = 1,
@@ -95,40 +97,40 @@
     m_account_id(account_id),
     m_file_path(file_path),
     decimal_(Model_Currency::GetBaseCurrency()->DECIMAL_POINT),
-    depositType_(Model_Checking::TYPE_STR_DEPOSIT)
+    depositType_(Model_Checking::TYPE_NAME_DEPOSIT)
 {
-    CSVFieldName_[UNIV_CSV_ID] = wxTRANSLATE("ID");
-    CSVFieldName_[UNIV_CSV_DATE] = wxTRANSLATE("Date");
-    CSVFieldName_[UNIV_CSV_STATUS] = wxTRANSLATE("Status");
-    CSVFieldName_[UNIV_CSV_TYPE] = wxTRANSLATE("Type");
-    CSVFieldName_[UNIV_CSV_ACCOUNT] = wxTRANSLATE("Account");
-    CSVFieldName_[UNIV_CSV_PAYEE] = wxTRANSLATE("Payee");
-    CSVFieldName_[UNIV_CSV_AMOUNT] = wxTRANSLATE("Amount");
-    CSVFieldName_[UNIV_CSV_CURRENCY] = wxTRANSLATE("Currency");
-    CSVFieldName_[UNIV_CSV_CATEGORY] = wxTRANSLATE("Category");
-    CSVFieldName_[UNIV_CSV_SUBCATEGORY] = wxTRANSLATE("SubCategory");
-    CSVFieldName_[UNIV_CSV_TAGS] = wxTRANSLATE("Tags");
-    CSVFieldName_[UNIV_CSV_TRANSNUM] = wxTRANSLATE("Number");
-    CSVFieldName_[UNIV_CSV_NOTES] = wxTRANSLATE("Notes");
-    CSVFieldName_[UNIV_CSV_DONTCARE] = wxTRANSLATE("Don't Care");
-    CSVFieldName_[UNIV_CSV_WITHDRAWAL] = wxTRANSLATE("Withdrawal");
-    CSVFieldName_[UNIV_CSV_DEPOSIT] = wxTRANSLATE("Deposit");
-    CSVFieldName_[UNIV_CSV_BALANCE] = wxTRANSLATE("Balance");   
+    CSVFieldName_[UNIV_CSV_ID]          = _n("ID");
+    CSVFieldName_[UNIV_CSV_DATE]        = _n("Date");
+    CSVFieldName_[UNIV_CSV_STATUS]      = _n("Status");
+    CSVFieldName_[UNIV_CSV_TYPE]        = _n("Type");
+    CSVFieldName_[UNIV_CSV_ACCOUNT]     = _n("Account");
+    CSVFieldName_[UNIV_CSV_PAYEE]       = _n("Payee");
+    CSVFieldName_[UNIV_CSV_AMOUNT]      = _n("Amount");
+    CSVFieldName_[UNIV_CSV_CURRENCY]    = _n("Currency");
+    CSVFieldName_[UNIV_CSV_CATEGORY]    = _n("Category");
+    CSVFieldName_[UNIV_CSV_SUBCATEGORY] = _n("SubCategory");
+    CSVFieldName_[UNIV_CSV_TAGS]        = _n("Tags");
+    CSVFieldName_[UNIV_CSV_TRANSNUM]    = _n("Number");
+    CSVFieldName_[UNIV_CSV_NOTES]       = _n("Notes");
+    CSVFieldName_[UNIV_CSV_DONTCARE]    = _n("Don't Care");
+    CSVFieldName_[UNIV_CSV_WITHDRAWAL]  = _n("Withdrawal");
+    CSVFieldName_[UNIV_CSV_DEPOSIT]     = _n("Deposit");
+    CSVFieldName_[UNIV_CSV_BALANCE]     = _n("Balance");   
 
     wxString header;
     switch (dialogType_)
     {
     case DIALOG_TYPE_IMPORT_CSV:
-        header = _("Import from CSV file");
+        header = _t("Import from CSV file");
         break;
     case DIALOG_TYPE_EXPORT_CSV:
-        header = _("Export as CSV file");
+        header = _t("Export as CSV file");
         break;
     case DIALOG_TYPE_IMPORT_XML:
-        header = _("Import from XML file");
+        header = _t("Import from XML file");
         break;
     case DIALOG_TYPE_EXPORT_XML:
-        header = _("Export as XML file");
+        header = _t("Export as XML file");
         break;
     default:
         break;
@@ -185,7 +187,7 @@
     wxBoxSizer* itemBoxSizer7 = new wxBoxSizer(wxHORIZONTAL);
     itemPanel6->SetSizer(itemBoxSizer7);
 
-    wxStaticText* itemStaticText5 = new wxStaticText(itemPanel6, wxID_ANY, _("File Name:"));
+    wxStaticText* itemStaticText5 = new wxStaticText(itemPanel6, wxID_ANY, _t("File Name:"));
     itemBoxSizer7->Add(itemStaticText5, g_flagsH);
     itemStaticText5->SetFont(staticBoxFontSetting);
 
@@ -198,14 +200,14 @@
     m_text_ctrl_->Connect(ID_FILE_NAME
         , wxEVT_COMMAND_TEXT_ENTER, wxCommandEventHandler(mmUnivCSVDialog::OnFileNameEntered), nullptr, this);
 
-    const wxString file_button_label = _u("&Browse…");
+    const wxString file_button_label = _tu("&Browse…");
     wxButton* button_browse = new wxButton(itemPanel6, wxID_BROWSE, file_button_label);
     itemBoxSizer7->Add(button_browse, g_flagsH);
 
     // Account to import/export
     wxFlexGridSizer* preset_flex_sizer = new wxFlexGridSizer(0,3,0,0);
 
-    wxStaticText* itemStaticText6 = new wxStaticText(scrolledWindow, wxID_ANY, _("Account: "), wxDefaultPosition, itemStaticText5->GetSize());
+    wxStaticText* itemStaticText6 = new wxStaticText(scrolledWindow, wxID_ANY, _t("Account: "), wxDefaultPosition, itemStaticText5->GetSize());
     preset_flex_sizer->Add(itemStaticText6, g_flagsH);
     itemStaticText6->SetFont(staticBoxFontSetting);
 
@@ -215,11 +217,11 @@
     preset_flex_sizer->AddSpacer(0);
 
     // Predefined settings
-    wxStaticText* preset_label = new wxStaticText(scrolledWindow, wxID_ANY, _("Preset:"), wxDefaultPosition, itemStaticText5->GetSize());
+    wxStaticText* preset_label = new wxStaticText(scrolledWindow, wxID_ANY, _t("Preset:"), wxDefaultPosition, itemStaticText5->GetSize());
     preset_flex_sizer->Add(preset_label, g_flagsH);
 
     Document account_default_presets;
-    if (!account_default_presets.Parse(Model_Infotable::instance().GetStringInfo((IsCSV() ? "CSV_ACCOUNT_PRESETS" : "XML_ACCOUNT_PRESETS"), "{}").utf8_str()).HasParseError())
+    if (!account_default_presets.Parse(Model_Infotable::instance().getString((IsCSV() ? "CSV_ACCOUNT_PRESETS" : "XML_ACCOUNT_PRESETS"), "{}").utf8_str()).HasParseError())
     {
         for (const auto& member : account_default_presets.GetObject()) {
             m_acct_default_preset[std::stoll(member.name.GetString())] = member.value.GetString();
@@ -262,14 +264,14 @@
     preset_box_sizer->Add(itemButtonClear, g_flagsH);
 
     preset_flex_sizer->Add(preset_box_sizer, wxSizerFlags(g_flagsExpand).Border(0).Proportion(0));
-    m_checkbox_preset_default = new wxCheckBox(scrolledWindow, wxID_DEFAULT, wxString::Format(_("Load this Preset when Account is:\n%s"), wxEmptyString));
+    m_checkbox_preset_default = new wxCheckBox(scrolledWindow, wxID_DEFAULT, wxString::Format(_t("Load this Preset when Account is:\n%s"), wxEmptyString));
     m_checkbox_preset_default->Enable(m_account_id > -1 && !init_preset_name.IsEmpty());
     preset_flex_sizer->Add(m_checkbox_preset_default, g_flagsH);
     itemBoxSizer2->Add(preset_flex_sizer, wxSizerFlags(g_flagsExpand).Border(wxALL, 0).Proportion(0));
 
     //
     wxStaticText* itemStaticText3 = new wxStaticText(scrolledWindow, wxID_STATIC
-        , _("Specify the order of fields in the file"));
+        , _t("Specify the order of fields in the file"));
     itemBoxSizer2->Add(itemStaticText3, g_flagsV);
     itemStaticText3->SetFont(staticBoxFontSetting);
 
@@ -284,7 +286,7 @@
         csvFieldCandicate_->Append(wxGetTranslation(it.second), new mmListBoxItem(it.first, it.second));
 
     //Custom Fields
-    Model_CustomField::Data_Set fields = Model_CustomField::instance().find(Model_CustomField::REFTYPE(Model_Attachment::REFTYPE_STR_TRANSACTION));
+    Model_CustomField::Data_Set fields = Model_CustomField::instance().find(Model_CustomField::REFTYPE(Model_Checking::refTypeName));
     if (!fields.empty())
     {
         std::sort(fields.begin(), fields.end(), SorterByDESCRIPTION());
@@ -307,15 +309,15 @@
     itemPanel_AddRemove->SetSizer(itemBoxSizer_AddRemove);
 
     //Add button
-    m_button_add_ = new wxButton(itemPanel_AddRemove, wxID_ADD, _("&Add "));
+    m_button_add_ = new wxButton(itemPanel_AddRemove, wxID_ADD, _t("&Add "));
     itemBoxSizer_AddRemove->Add(m_button_add_, g_flagsV);
 
     //Remove button
-    m_button_remove_ = new wxButton(itemPanel_AddRemove, wxID_REMOVE, _("&Remove "));
+    m_button_remove_ = new wxButton(itemPanel_AddRemove, wxID_REMOVE, _t("&Remove "));
     itemBoxSizer_AddRemove->Add(m_button_remove_, g_flagsV);
 
     //Standard MMEX CSV
-    wxButton* itemButton_standard = new wxButton(itemPanel_AddRemove, wxID_STANDARD, _("&MMEX format"));
+    wxButton* itemButton_standard = new wxButton(itemPanel_AddRemove, wxID_STANDARD, _t("&MMEX format"));
     itemBoxSizer_AddRemove->Add(itemButton_standard, g_flagsV);
 
     //ListBox of attribute order
@@ -332,11 +334,11 @@
     itemPanel_Arranger->SetSizer(itemBoxSizer_Arranger);
 
     //Move Up button
-    wxButton* itemButton_MoveUp = new wxButton(itemPanel_Arranger, wxID_UP, _("&Up"));
+    wxButton* itemButton_MoveUp = new wxButton(itemPanel_Arranger, wxID_UP, _t("&Up"));
     itemBoxSizer_Arranger->Add(itemButton_MoveUp, g_flagsV);
 
     //Move down button
-    wxButton* itemButton_MoveDown = new wxButton(itemPanel_Arranger, wxID_DOWN, _("&Down"));
+    wxButton* itemButton_MoveDown = new wxButton(itemPanel_Arranger, wxID_DOWN, _t("&Down"));
     itemBoxSizer_Arranger->Add(itemButton_MoveDown, g_flagsV);
 
     wxStaticLine* m_staticline1 = new wxStaticLine(scrolledWindow
@@ -354,7 +356,7 @@
         , wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL);
     itemBoxSizer2->Add(m_staticline2, flagsExpand);
 
-    wxStaticText* itemStaticText66 = new wxStaticText(itemPanel7, wxID_STATIC, wxString(_("Date Format: ")));
+    wxStaticText* itemStaticText66 = new wxStaticText(itemPanel7, wxID_STATIC, wxString(_t("Date Format: ")));
     flex_sizer->Add(itemStaticText66, g_flagsH);
     itemStaticText66->SetFont(staticBoxFontSetting);
 
@@ -369,7 +371,7 @@
     // CSV Delimiter
     if (IsCSV())
     {
-        wxStaticText* itemStaticText77 = new wxStaticText(itemPanel7, wxID_STATIC, wxString(_("CSV Delimiter:")));
+        wxStaticText* itemStaticText77 = new wxStaticText(itemPanel7, wxID_STATIC, wxString(_t("CSV Delimiter:")));
         itemStaticText77->SetFont(staticBoxFontSetting);
         flex_sizer->Add(itemStaticText77, g_flagsH);
 
@@ -382,7 +384,7 @@
     }
 
     //Encoding
-    wxStaticText* itemStaticText88 = new wxStaticText(itemPanel7, wxID_STATIC, wxString(_("Encoding:")));
+    wxStaticText* itemStaticText88 = new wxStaticText(itemPanel7, wxID_STATIC, wxString(_t("Encoding:")));
     itemStaticText88->SetFont(staticBoxFontSetting);
     flex_sizer->Add(itemStaticText88, g_flagsH);
 
@@ -396,7 +398,7 @@
     // Option to add column titles to exported files.
     if (!IsImporter())
     {
-        m_checkBoxExportTitles = new wxCheckBox(itemPanel7, wxID_ANY, _("Export column titles"));
+        m_checkBoxExportTitles = new wxCheckBox(itemPanel7, wxID_ANY, _t("Export column titles"));
         flex_sizer->Add(m_checkBoxExportTitles, g_flagsH);
     }
 
@@ -405,18 +407,18 @@
     if (IsImporter())
     {
         // Text title.
-        wxStaticText* itemStaticTextAmount = new wxStaticText(itemPanel7, wxID_ANY, _("Amount:"));
+        wxStaticText* itemStaticTextAmount = new wxStaticText(itemPanel7, wxID_ANY, _t("Amount:"));
         flex_sizer->Add(itemStaticTextAmount, g_flagsH);
         itemStaticTextAmount->SetFont(staticBoxFontSetting);
 
         // Choice selection.
         m_choiceAmountFieldSign = new wxChoice(itemPanel7, wxID_REPLACE);
-        m_choiceAmountFieldSign->Append(_("Positive values are deposits"));
-        m_choiceAmountFieldSign->Append(_("Positive values are withdrawals"));
+        m_choiceAmountFieldSign->Append(_t("Positive values are deposits"));
+        m_choiceAmountFieldSign->Append(_t("Positive values are withdrawals"));
         m_choiceAmountFieldSign->SetSelection(PositiveIsDeposit);
         flex_sizer->Add(m_choiceAmountFieldSign, g_flagsH);
 
-        wxStaticText* itemStaticTextDigits = new wxStaticText(itemPanel7, wxID_ANY, _("Decimal Char"));
+        wxStaticText* itemStaticTextDigits = new wxStaticText(itemPanel7, wxID_ANY, _t("Decimal Char"));
         flex_sizer->Add(itemStaticTextDigits, g_flagsH);
         m_choiceDecimalSeparator = new mmChoiceAmountMask(itemPanel7, ID_UD_DECIMAL);
         flex_sizer->Add(m_choiceDecimalSeparator, g_flagsH);
@@ -429,14 +431,14 @@
 
         // Select rows to import (not relevant for export)
         // Container.
-        wxStaticBox* rowSelectionStaticBox = new wxStaticBox(scrolledWindow, wxID_ANY, _("Rows to ignore"));
+        wxStaticBox* rowSelectionStaticBox = new wxStaticBox(scrolledWindow, wxID_ANY, _t("Rows to ignore"));
         rowSelectionStaticBox->SetFont(staticBoxFontSetting);
         wxStaticBoxSizer* rowSelectionStaticBoxSizer = new wxStaticBoxSizer(rowSelectionStaticBox, wxHORIZONTAL);
         itemBoxSizer111->Add(rowSelectionStaticBoxSizer, 0, wxALL | wxEXPAND, 5);
 
         // "Ignore first" title, spin and event handler.
         wxStaticText* itemStaticText7 = new wxStaticText(rowSelectionStaticBoxSizer->GetStaticBox()
-            , wxID_ANY, _("From start: "));
+            , wxID_ANY, _t("From start: "));
         rowSelectionStaticBoxSizer->Add(itemStaticText7, g_flagsH);
         m_spinIgnoreFirstRows_ = new wxSpinCtrl(rowSelectionStaticBoxSizer->GetStaticBox(), ID_FIRST_ROW
             , wxEmptyString, wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS);
@@ -448,7 +450,7 @@
         rowSelectionStaticBoxSizer->AddSpacer(30);
 
         // Colour
-        colorCheckBox_ = new wxCheckBox(scrolledWindow, mmID_COLOR, _("Color")
+        colorCheckBox_ = new wxCheckBox(scrolledWindow, mmID_COLOR, _t("Color")
             , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
         itemBoxSizer111->Add(colorCheckBox_, wxSizerFlags(g_flagsH).Border(wxLEFT | wxTOP | wxBOTTOM, 5));
         colorButton_ = new mmColorButton(scrolledWindow, wxID_HIGHEST, wxSize(itemButton_Save->GetSize().GetY(), itemButton_Save->GetSize().GetY()));
@@ -457,13 +459,13 @@
 
         // Payee Match
         wxBoxSizer* payeeMatchSizer = new wxBoxSizer(wxVERTICAL);
-        payeeMatchCheckBox_ = new wxCheckBox(scrolledWindow, mmID_PAYEE, _("Pattern match Payees")
+        payeeMatchCheckBox_ = new wxCheckBox(scrolledWindow, mmID_PAYEE, _t("Pattern match Payees")
             , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
         payeeMatchSizer->Add(payeeMatchCheckBox_, g_flagsV);
         payeeMatchCheckBox_->Disable();
         payeeRegExInitialized_ = false;
 
-        payeeMatchAddNotes_ = new wxCheckBox(scrolledWindow, wxID_ANY, _("Add match details to Notes")
+        payeeMatchAddNotes_ = new wxCheckBox(scrolledWindow, wxID_ANY, _t("Add match details to Notes")
             , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
         payeeMatchSizer->Add(payeeMatchAddNotes_, g_flagsV);
         payeeMatchAddNotes_->Disable();
@@ -471,7 +473,7 @@
 
         // "Ignore last" title, spin and event handler.
         wxStaticText* itemStaticText8 = new wxStaticText(rowSelectionStaticBoxSizer->GetStaticBox()
-            , wxID_ANY, _("From end: "));
+            , wxID_ANY, _t("From end: "));
         rowSelectionStaticBoxSizer->Add(itemStaticText8, g_flagsH);
         m_spinIgnoreLastRows_ = new wxSpinCtrl(rowSelectionStaticBoxSizer->GetStaticBox()
             , ID_LAST_ROW, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 0, 0);
@@ -483,14 +485,14 @@
 
     // Preview
     wxStaticBoxSizer* m_staticbox = new wxStaticBoxSizer(new wxStaticBox(scrolledWindow
-        , wxID_STATIC, _("Preview")), wxVERTICAL);
+        , wxID_STATIC, _t("Preview")), wxVERTICAL);
 
     m_preview_notebook = new wxNotebook(scrolledWindow
         , wxID_PREVIEW, wxDefaultPosition, wxDefaultSize, wxNB_MULTILINE);
     m_staticbox->Add(m_preview_notebook, g_flagsExpand);
 
     wxPanel* data_tab = new wxPanel(m_preview_notebook, wxID_ANY);
-    m_preview_notebook->AddPage(data_tab, _("Data"));
+    m_preview_notebook->AddPage(data_tab, _t("Data"));
     wxBoxSizer* data_sizer = new wxBoxSizer(wxVERTICAL);
     data_tab->SetSizer(data_sizer);
 
@@ -502,23 +504,23 @@
     {
         //Payees
         wxPanel* payee_tab = new wxPanel(m_preview_notebook, wxID_ANY);
-        m_preview_notebook->AddPage(payee_tab, _("Payee"));
+        m_preview_notebook->AddPage(payee_tab, _t("Payee"));
         wxBoxSizer* payee_sizer = new wxBoxSizer(wxHORIZONTAL);
         payee_tab->SetSizer(payee_sizer);
 
         payeeListBox_ = new wxDataViewListCtrl(payee_tab, wxID_FILE1);
-        payeeListBox_->AppendTextColumn(_("Name"), wxDATAVIEW_CELL_INERT, 250, wxALIGN_LEFT);
-        payeeListBox_->AppendTextColumn(_("Status"), wxDATAVIEW_CELL_INERT, 150, wxALIGN_LEFT);
+        payeeListBox_->AppendTextColumn(_t("Name"), wxDATAVIEW_CELL_INERT, 250, wxALIGN_LEFT);
+        payeeListBox_->AppendTextColumn(_t("Status"), wxDATAVIEW_CELL_INERT, 150, wxALIGN_LEFT);
         payee_sizer->Add(payeeListBox_, g_flagsExpand);
 
         //Category
         wxPanel* categ_tab = new wxPanel(m_preview_notebook, wxID_ANY);
-        m_preview_notebook->AddPage(categ_tab, _("Category"));
+        m_preview_notebook->AddPage(categ_tab, _t("Category"));
         wxBoxSizer* category_sizer = new wxBoxSizer(wxHORIZONTAL);
         categ_tab->SetSizer(category_sizer);
         categoryListBox_ = new wxDataViewListCtrl(categ_tab, wxID_FILE2);
-        categoryListBox_->AppendTextColumn(_("Name"), wxDATAVIEW_CELL_INERT, 250, wxALIGN_LEFT);
-        categoryListBox_->AppendTextColumn(_("Status"), wxDATAVIEW_CELL_INERT, 150, wxALIGN_LEFT);
+        categoryListBox_->AppendTextColumn(_t("Name"), wxDATAVIEW_CELL_INERT, 250, wxALIGN_LEFT);
+        categoryListBox_->AppendTextColumn(_t("Status"), wxDATAVIEW_CELL_INERT, 150, wxALIGN_LEFT);
         category_sizer->Add(categoryListBox_, g_flagsExpand);
 
         payeeListBox_->GetMainWindow()->Bind(wxEVT_LEFT_DCLICK, &mmUnivCSVDialog::OnShowPayeeDialog, this);
@@ -533,9 +535,9 @@
     itemPanel5->SetSizer(itemBoxSizer6);
 
     if (IsImporter()) {
-        bImport_ = new wxButton(itemPanel5, ID_UNIVCSVBUTTON_IMPORT, _("&Import"));
+        bImport_ = new wxButton(itemPanel5, ID_UNIVCSVBUTTON_IMPORT, _t("&Import"));
     } else {
-        bImport_ = new wxButton(itemPanel5, ID_UNIVCSVBUTTON_EXPORT, _("&Export"));
+        bImport_ = new wxButton(itemPanel5, ID_UNIVCSVBUTTON_EXPORT, _t("&Export"));
     }
     itemBoxSizer6->Add(bImport_, 0, wxALIGN_CENTER | wxALL, 5);
 
@@ -552,25 +554,25 @@
         , wxID_STATIC, "", wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE | wxHSCROLL | wxTE_READONLY);
     itemBoxSizer22->Add(log_field_, 1, wxGROW | wxALL, 5);
 
-    wxButton* itemClearButton = new wxButton(scrolledWindow, wxID_CLEAR, _("Clear"));
+    wxButton* itemClearButton = new wxButton(scrolledWindow, wxID_CLEAR, _t("Clear"));
     itemBoxSizer22->Add(itemClearButton, 0, wxALIGN_CENTER | wxALL, 5);
     itemClearButton->Connect(wxID_CLEAR, wxEVT_COMMAND_BUTTON_CLICKED
         , wxCommandEventHandler(mmUnivCSVDialog::OnButtonClear), nullptr, this);
 
     const wxString file_tooltip = IsImporter()
-        ? (IsXML() ? _("Choose XML data file to Import") : _("Choose CSV data file to Import"))
-        : (IsXML() ? _("Choose XML data file to Export") : _("Choose CSV data file to Export"));
+        ? (IsXML() ? _t("Choose XML data file to Import") : _t("Choose CSV data file to Import"))
+        : (IsXML() ? _t("Choose XML data file to Export") : _t("Choose CSV data file to Export"));
     mmToolTip(button_browse, file_tooltip);
 
-    mmToolTip(m_choice_preset_name, _("Preset name"));
-    mmToolTip(itemButton_Save, _("Save current settings as a Preset"));
-    mmToolTip(itemButtonClear, _("Delete Preset"));
-    mmToolTip(itemButton_standard, _("MMEX standard format"));
-    mmToolTip(itemButton_MoveUp, _("Move Up"));
-    mmToolTip(itemButton_MoveDown, _("Move Down"));
-    if (IsCSV()) mmToolTip(m_textDelimiter, _("Specify the delimiter to use when importing/exporting CSV files"));
-    if (IsImporter()) mmToolTip(bImport_, _("Import File"));
-    if (!IsImporter()) mmToolTip(bImport_, _("Export File"));
+    mmToolTip(m_choice_preset_name, _t("Preset name"));
+    mmToolTip(itemButton_Save, _t("Save current settings as a Preset"));
+    mmToolTip(itemButtonClear, _t("Delete Preset"));
+    mmToolTip(itemButton_standard, _t("MMEX standard format"));
+    mmToolTip(itemButton_MoveUp, _t("Move Up"));
+    mmToolTip(itemButton_MoveDown, _t("Move Down"));
+    if (IsCSV()) mmToolTip(m_textDelimiter, _t("Specify the delimiter to use when importing/exporting CSV files"));
+    if (IsImporter()) mmToolTip(bImport_, _t("Import File"));
+    if (!IsImporter()) mmToolTip(bImport_, _t("Export File"));
 
     m_text_ctrl_->SetFocus();
 
@@ -579,11 +581,11 @@
     if (m_choice_account_->GetSelection() >= 0)
     {
         wxString acct_name = m_choice_account_->GetStringSelection();
-        m_checkbox_preset_default->SetLabelText(wxString::Format(_("Load this Preset when Account is:\n%s"), acct_name));
-        *log_field_ << _("Currency:") << " " <<
+        m_checkbox_preset_default->SetLabelText(wxString::Format(_t("Load this Preset when Account is:\n%s"), acct_name));
+        *log_field_ << _t("Currency:") << " " <<
             wxGetTranslation(Model_Account::currency(Model_Account::instance().get(acct_name))->CURRENCYNAME) << "\n";
         if (!init_preset_name.IsEmpty())
-            *log_field_ << wxString::Format(_("Preset '%1$s' loaded because Account '%2$s' selected"), init_preset_name, acct_name) << "\n";
+            *log_field_ << wxString::Format(_t("Preset '%1$s' loaded because Account '%2$s' selected"), init_preset_name, acct_name) << "\n";
     }
 
     scrolledWindow->SetScrollRate(10, 10);
@@ -607,7 +609,7 @@
 void mmUnivCSVDialog::initDelimiter()
 {
     if (delimit_.empty()) {
-        delimit_ = Model_Infotable::instance().GetStringInfo("DELIMITER", mmex::DEFDELIMTER);
+        delimit_ = Model_Infotable::instance().getString("DELIMITER", mmex::DEFDELIMTER);
     }
     m_textDelimiter->ChangeValue(delimit_ == "\t" ? "\\t" : delimit_);
 
@@ -674,7 +676,7 @@
 {
     if (id < 0) return wxEmptyString;
     const wxString& setting_id = m_preset_id.at(m_choice_preset_name->GetString(id));
-    const wxString& settings_string = Model_Setting::instance().GetStringSetting(setting_id, "");
+    const wxString& settings_string = Model_Setting::instance().getString(setting_id, "");
     wxLogDebug("%s \n %s", setting_id, settings_string);
     return settings_string;
 }
@@ -743,9 +745,9 @@
         int itemIndex = m_choice_account_->FindString(an);
         if (wxNOT_FOUND == itemIndex)
             mmErrorDialogs::MessageError(m_choice_account_
-                , wxString::Format(_("Default account '%s' for this template does not exist.\n"
+                , wxString::Format(_t("Default account '%s' for this template does not exist.\n"
                     "Please select a new account."), an)
-                , _("Account does not exist"));
+                , _t("Account does not exist"));
         else
         {
             m_choice_account_->Select(itemIndex);
@@ -763,7 +765,7 @@
     {
         Value& v_delimiter = GetValueByPointerWithDefault(json_doc, "/DELIMITER", "");
         const wxString& de = wxString::FromUTF8(v_delimiter.IsString() ? v_delimiter.GetString() : "");
-        const wxString& def_delimiter = Model_Infotable::instance().GetStringInfo("DELIMITER", mmex::DEFDELIMTER);
+        const wxString& def_delimiter = Model_Infotable::instance().getString("DELIMITER", mmex::DEFDELIMTER);
         delimit_ = (de.empty() ? def_delimiter : de);
         initDelimiter();
     }
@@ -947,7 +949,7 @@
         if (IsImporter())
         {
             if (i->getIndex() == UNIV_CSV_TYPE) {
-                m_choiceAmountFieldSign->Append(wxString::Format(_("Positive if type has '%s'"), depositType_));
+                m_choiceAmountFieldSign->Append(wxString::Format(_t("Positive if type has '%s'"), depositType_));
                 m_choiceAmountFieldSign->Select(DefindByType);
                 wxCommandEvent evt(wxEVT_CHOICE, wxID_ANY);
                 evt.SetId(wxID_REPLACE);
@@ -1042,7 +1044,7 @@
             if (entry.first == UNIV_CSV_TYPE) {
                 unsigned int i = m_choiceAmountFieldSign->GetCount();
                 if (i <= DefindByType) {
-                    m_choiceAmountFieldSign->AppendString(wxString::Format(_("Positive if type has '%s'"), depositType_));
+                    m_choiceAmountFieldSign->AppendString(wxString::Format(_t("Positive if type has '%s'"), depositType_));
                 }
                 m_choiceAmountFieldSign->SetSelection(DefindByType);
             }
@@ -1069,7 +1071,7 @@
 {
     const wxString label = m_choice_preset_name->GetStringSelection();
 
-    wxString user_label = wxGetTextFromUser(_("Preset Name"), _("Save Preset"), label);
+    wxString user_label = wxGetTextFromUser(_t("Preset Name"), _t("Save Preset"), label);
 
     if (user_label.empty())
         return;
@@ -1091,14 +1093,14 @@
         for (; i < std::max({ static_cast<int>(m_choice_preset_name->GetCount()), 10 }); i++)
         {
             setting_id = wxString::Format(GetSettingsPrfix(), i);
-            if (!Model_Setting::instance().ContainsSetting(setting_id))
+            if (!Model_Setting::instance().contains(setting_id))
                 break;
         }
         m_preset_id[user_label] = setting_id;
     }
     else if (label != user_label)
     {
-        if (wxMessageBox(_("The entered name is already in use"), _("Warning"), wxOK | wxICON_WARNING) == wxOK)
+        if (wxMessageBox(_t("The entered name is already in use"), _t("Warning"), wxOK | wxICON_WARNING) == wxOK)
         {
         }
     }
@@ -1214,7 +1216,7 @@
 
     const wxString json_data = wxString::FromUTF8(json_buffer.GetString());
 
-    Model_Setting::instance().Set(setting_id, json_data);
+    Model_Setting::instance().setString(setting_id, json_data);
 }
 
 void mmUnivCSVDialog::saveAccountPresets()
@@ -1230,7 +1232,10 @@
     }
     json_writer.EndObject();
 
-    Model_Infotable::instance().Set((IsCSV() ? "CSV_ACCOUNT_PRESETS" : "XML_ACCOUNT_PRESETS"), wxString::FromUTF8(json_buffer.GetString()));
+    Model_Infotable::instance().setString(
+        (IsCSV() ? "CSV_ACCOUNT_PRESETS" : "XML_ACCOUNT_PRESETS"),
+        wxString::FromUTF8(json_buffer.GetString())
+    );
 }
 
 bool mmUnivCSVDialog::validateData(tran_holder & holder, wxString& message)
@@ -1238,9 +1243,9 @@
     bool is_valid = true;
     if (!holder.valid) {
         is_valid = false;
-        if (!holder.Date.IsValid()) message << " " << _("Invalid Date.");
-        if (!holder.Amount) message << " " << _("Invalid Amount.");
-        if (holder.Type.Trim().IsEmpty()) message << " " << _("Type (withdrawal/deposit) unknown.");
+        if (!holder.Date.IsValid()) message << " " << _t("Invalid Date.");
+        if (!holder.Amount) message << " " << _t("Invalid Amount.");
+        if (holder.Type.Trim().IsEmpty()) message << " " << _t("Type (withdrawal/deposit) unknown.");
     }
 
     // If we are importing any custom field data test for validity
@@ -1251,14 +1256,14 @@
     Model_Payee::Data* payee = Model_Payee::instance().get(holder.PayeeID);
     if (!payee)
     {
-        Model_Payee::Data* u = Model_Payee::instance().get(_("Unknown"));
+        Model_Payee::Data* u = Model_Payee::instance().get(_t("Unknown"));
         if (!u) {
             Model_Payee::Data *p = Model_Payee::instance().create();
-            p->PAYEENAME = _("Unknown");
+            p->PAYEENAME = _t("Unknown");
             p->ACTIVE = 1;
             p->CATEGID = -1;
             holder.PayeeID = Model_Payee::instance().save(p);
-            const wxString& sMsg = wxString::Format(_("Added payee: %s"), p->PAYEENAME);
+            const wxString& sMsg = wxString::Format(_t("Added payee: %s"), p->PAYEENAME);
             log_field_->AppendText(wxString() << sMsg << "\n");
         }
         else {
@@ -1274,14 +1279,14 @@
 
     if (holder.CategoryID == -1) //The category name is missing in SCV file and not assigned for the payee
     {
-        Model_Category::Data* categ = Model_Category::instance().get(_("Unknown"), int64(-1));
+        Model_Category::Data* categ = Model_Category::instance().get(_t("Unknown"), int64(-1));
         if (categ) {
             holder.CategoryID = categ->CATEGID;
         }
         else
         {
             Model_Category::Data *c = Model_Category::instance().create();
-            c->CATEGNAME = _("Unknown");
+            c->CATEGNAME = _t("Unknown");
             c->ACTIVE = 1;
             c->PARENTID = -1;
             holder.CategoryID = Model_Category::instance().save(c);
@@ -1300,10 +1305,10 @@
             && isIndexPresent(UNIV_CSV_DEPOSIT));
     if (!datefield || !amountfields)
         return mmErrorDialogs::ToolTip4Object(csvListBox_
-            , _("Incorrect fields specified for import!")
-            + (!datefield ? "\n" + _("Date field is required.") : "")
-            + (!amountfields ? "\n" + _("Amount field or both Withdrawal and Deposit fields are required.") : "")
-            , _("Import"), wxICON_WARNING);
+            , _t("Incorrect fields specified for import!")
+            + (!datefield ? "\n" + _t("Date field is required.") : "")
+            + (!amountfields ? "\n" + _t("Amount field or both Withdrawal and Deposit fields are required.") : "")
+            , _t("Import"), wxICON_WARNING);
 
     bool is_canceled = false;
     long nImportedLines = 0;
@@ -1343,14 +1348,14 @@
     long countEmptyLines = 0;
     int color_id = colorCheckBox_->IsChecked() ? colorButton_->GetColorId() : -1;
     if (colorCheckBox_->IsChecked() && (color_id < 0 || color_id > 7) ) {
-        return mmErrorDialogs::ToolTip4Object(colorButton_, _("Color"), _("Invalid value"), wxICON_ERROR);
+        return mmErrorDialogs::ToolTip4Object(colorButton_, _t("Color"), _t("Invalid value"), wxICON_ERROR);
     }
 
     Model_Checking::instance().Begin();
     Model_Checking::instance().Savepoint("IMP");
     Model_CustomFieldData::instance().Savepoint("IMP");
 
-    wxProgressDialog progressDlg(_("Universal CSV Import")
+    wxProgressDialog progressDlg(_t("Universal CSV Import")
         , wxEmptyString, linesToImport
         , nullptr, wxPD_AUTO_HIDE | wxPD_APP_MODAL | wxPD_SMOOTH | wxPD_CAN_ABORT
         | wxPD_ELAPSED_TIME | wxPD_REMAINING_TIME
@@ -1360,10 +1365,10 @@
     m_reverce_sign = m_choiceAmountFieldSign->GetCurrentSelection() == PositiveIsWithdrawal;
     // A place to store all rejected rows to display after import
     wxString rejectedRows;
-    wxString reftype = Model_Attachment::REFTYPE_STR_TRANSACTION;
+    wxString reftype = Model_Checking::refTypeName;
     for (long nLines = firstRow; nLines < lastRow; nLines++)
     {
-        const wxString& progressMsg = wxString::Format(_("Transactions imported to account %s: %ld")
+        const wxString& progressMsg = wxString::Format(_t("Transactions imported to account %s: %ld")
             , "'" + acctName + "'", nImportedLines);
         if (!progressDlg.Update(nLines - firstRow, progressMsg))
         {
@@ -1389,7 +1394,7 @@
         // if the line had no field separators or all fields were blank (",,,,,")
         if (numTokens == 0 || blankTokenCount == numTokens)
         {
-            wxString msg = wxString::Format(_("Line %ld: Empty"), nLines + 1);
+            wxString msg = wxString::Format(_t("Line %ld: Empty"), nLines + 1);
             log << msg << endl;
             *log_field_ << msg << "\n";
             countEmptyLines++;
@@ -1400,7 +1405,7 @@
         // validate data and store any error messages
         if (!validateData(holder, message))
         {
-            wxString msg = wxString::Format(_("Line %ld: Error:"), nLines + 1);
+            wxString msg = wxString::Format(_t("Line %ld: Error:"), nLines + 1);
             msg << " " << message;
             log << msg << endl;
             *log_field_ << msg << "\n";
@@ -1415,8 +1420,8 @@
         if ((trxDate < account2->INITIALDATE) ||
             (toAccount && (trxDate < toAccount->INITIALDATE)))
         {
-            wxString msg = wxString::Format(_("Line %ld: %s"), nLines + 1,
-                _("The opening date for the account is later than the date of this transaction"));
+            wxString msg = wxString::Format(_t("Line %ld: %s"), nLines + 1,
+                _t("The opening date for the account is later than the date of this transaction"));
             log << msg << endl;
             *log_field_ << msg << "\n";
             // row was rejected so save it to rejectedRows
@@ -1469,7 +1474,7 @@
         }
 
         nImportedLines++;
-        wxString msg = wxString::Format(_("Line %ld: OK, imported."), nLines + 1);
+        wxString msg = wxString::Format(_t("Line %ld: OK, imported."), nLines + 1);
         log << msg << endl;
         *log_field_ << msg << "\n";
     }
@@ -1478,27 +1483,27 @@
     // so that users can easily copy/paste errored records for reimport
     if (!rejectedRows.IsEmpty())
     {
-        *log_field_ << "\n" << _("Rejected rows:") << "\n" << rejectedRows;
+        *log_field_ << "\n" << _t("Rejected rows:") << "\n" << rejectedRows;
         log << "\nRejected rows:\n" << rejectedRows;
     }
     progressDlg.Update(linesToImport);
 
-    wxString msg = wxString::Format(_("Total Lines: %ld"), totalLines);
+    wxString msg = wxString::Format(_t("Total Lines: %ld"), totalLines);
     msg << "\n";
-    msg << wxString::Format(_("Lines Selected to Import: %ld"), linesToImport);
+    msg << wxString::Format(_t("Lines Selected to Import: %ld"), linesToImport);
     msg << "\n\n";
-    msg << wxString::Format(_("Empty Lines: %ld"), countEmptyLines);
+    msg << wxString::Format(_t("Empty Lines: %ld"), countEmptyLines);
     msg << "\n";
-    msg << wxString::Format(_("Imported: %ld"), nImportedLines);
+    msg << wxString::Format(_t("Imported: %ld"), nImportedLines);
     msg << "\n";
-    msg << wxString::Format(_("Errored: %ld")
+    msg << wxString::Format(_t("Errored: %ld")
         , linesToImport - countEmptyLines - nImportedLines);
     msg << "\n\n";
-    msg << wxString::Format(_("Log file written to: %s"), logFile.GetFullPath());
+    msg << wxString::Format(_t("Log file written to: %s"), logFile.GetFullPath());
 
     if (!is_canceled && wxMessageBox(
-        msg + (nImportedLines > 0 ? "\n\n" + _("Please confirm saving") : "")
-        , _("Import")
+        msg + (nImportedLines > 0 ? "\n\n" + _t("Please confirm saving") : "")
+        , _t("Import")
         , wxOK | (nImportedLines > 0 ? wxCANCEL : 0)
         | (nImportedLines == 0 ? wxICON_ERROR :
             nImportedLines < linesToImport - countEmptyLines - m_spinIgnoreFirstRows_->GetValue() - m_spinIgnoreLastRows_->GetValue()
@@ -1523,15 +1528,15 @@
         importSuccessful_ = true;
         // TODO: user cannot see following messages because dialog
         // will be closed (?)
-        // msg << _("Imported transactions have been flagged so you can review them.") << "\n";
-        // msg << wxString::Format(_("Transactions saved to database in account: %s"), acctName);
+        // msg << _t("Imported transactions have been flagged so you can review them.") << "\n";
+        // msg << wxString::Format(_t("Transactions saved to database in account: %s"), acctName);
     }
     else
     {
         // discard the database changes.
         Model_Checking::instance().Rollback("");
-        if (is_canceled) msg << _("Imported transactions discarded by user!");
-        else msg << _("No imported transactions!");
+        if (is_canceled) msg << _t("Imported transactions discarded by user!");
+        else msg << _t("No imported transactions!");
         msg << "\n\n";
     }
 
@@ -1553,8 +1558,8 @@
         && (!isIndexPresent(UNIV_CSV_WITHDRAWAL) || !isIndexPresent(UNIV_CSV_DEPOSIT))))
     {
         return mmErrorDialogs::MessageWarning(this
-            , _("Incorrect fields specified for export! Requires at least Date and Amount.")
-            , _("Export"));
+            , _t("Incorrect fields specified for export! Requires at least Date and Amount.")
+            , _t("Export"));
     }
 
     const wxString& fileName = m_text_ctrl_->GetValue();
@@ -1564,14 +1569,14 @@
     wxFileName out_file(fileName);
     if (out_file.Exists())
     {
-        if (wxMessageBox(_("Overwrite existing file?"), _("File exists"), wxYES_NO | wxICON_WARNING) != wxYES)
+        if (wxMessageBox(_t("Overwrite existing file?"), _t("File exists"), wxYES_NO | wxICON_WARNING) != wxYES)
             return;
 
         if (!wxRemoveFile(fileName))
         {
             return mmErrorDialogs::MessageWarning(this,
-                _("An error occurred while deleting the existing file. File may be locked by another program."),
-                _("Destination file error"));
+                _t("An error occurred while deleting the existing file. File may be locked by another program."),
+                _t("Destination file error"));
         }
     }
 
@@ -1579,10 +1584,10 @@
     Model_Account::Data* from_account = Model_Account::instance().get(acctName);
 
     if (!from_account)
-        return mmErrorDialogs::ToolTip4Object(m_choice_account_, _("Invalid Account"), _("Error"));
+        return mmErrorDialogs::ToolTip4Object(m_choice_account_, _t("Invalid Account"), _t("Error"));
 
     const auto split = Model_Splittransaction::instance().get_all();
-    const auto tags = Model_Taglink::instance().get_all(Model_Attachment::REFTYPE_STR_TRANSACTION);
+    const auto tags = Model_Taglink::instance().get_all(Model_Checking::refTypeName);
     int64 fromAccountID = from_account->ACCOUNTID;
 
     long numRecords = 0;
@@ -1678,7 +1683,7 @@
                 case UNIV_CSV_TAGS:
                 {
                     wxString splitTags;
-                    for (const auto& tag : Model_Taglink::instance().get(Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT, splt.SPLITTRANSID))
+                    for (const auto& tag : Model_Taglink::instance().get(Model_Splittransaction::refTypeName, splt.SPLITTRANSID))
                         splitTags.Append((splitTags.IsEmpty() ? "" : " ") + tag.first);
                     entry = tran.TAGNAMES;
                     if (!splitTags.IsEmpty())
@@ -1705,7 +1710,7 @@
                     itemType = ITransactionsFile::TYPE_NUMBER;
                     break;
                 case UNIV_CSV_TYPE:
-                    entry = Model_Checking::TYPE_STR[Model_Checking::type_id(pBankTransaction)];
+                    entry = Model_Checking::type_name(Model_Checking::type_id(pBankTransaction));
                     break;
                 case UNIV_CSV_ID:
                     entry = wxString::Format("%lld", tran.TRANSID);
@@ -1734,8 +1739,8 @@
     }
 
     pTxFile->Save(fileName);
-    const wxString& msg = wxString::Format(_("Transactions exported: %ld"), numRecords);
-    mmErrorDialogs::MessageWarning(this, msg, _("Export"));
+    const wxString& msg = wxString::Format(_t("Transactions exported: %ld"), numRecords);
+    mmErrorDialogs::MessageWarning(this, msg, _t("Export"));
 
 }
 
@@ -1831,10 +1836,10 @@
                     {
                         if (m_payee_names.Index(content, false) == wxNOT_FOUND)
                             m_payee_names.Add(content);
-                    } else if (m_payee_names.Index(_("Unknown"), false) == wxNOT_FOUND)
+                    } else if (m_payee_names.Index(_t("Unknown"), false) == wxNOT_FOUND)
                     {
-                        m_payee_names.Add(_("Unknown"));
-                        m_CSVpayeeNames[_("Unknown")] = std::make_tuple(-1, "", "");
+                        m_payee_names.Add(_t("Unknown"));
+                        m_CSVpayeeNames[_t("Unknown")] = std::make_tuple(-1, "", "");
                     }
                 }
 
@@ -1849,7 +1854,7 @@
                         m_CSVcategoryNames[content] = -1;
                         categ_name = content;
                     } else
-                        m_CSVcategoryNames[_("Unknown")] = -1;
+                        m_CSVcategoryNames[_t("Unknown")] = -1;
                 }                    
 
                 if (row >= firstRow
@@ -1903,7 +1908,7 @@
         if (from_account)
         {
             const auto split = Model_Splittransaction::instance().get_all();
-            const auto tags = Model_Taglink::instance().get_all(Model_Attachment::REFTYPE_STR_TRANSACTION);
+            const auto tags = Model_Taglink::instance().get_all(Model_Checking::refTypeName);
             int64 fromAccountID = from_account->ACCOUNTID;
             size_t count = 0;
             int row = 0;
@@ -1998,7 +2003,7 @@
                         {
                             wxString splitTags;
                             for (const auto& tag :
-                                 Model_Taglink::instance().get(Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT, splt.SPLITTRANSID))
+                                 Model_Taglink::instance().get(Model_Splittransaction::refTypeName, splt.SPLITTRANSID))
                                 splitTags.Append((splitTags.IsEmpty() ? "" : " ") + tag.first);
                             text << inQuotes(tran.TAGNAMES + (tran.TAGNAMES.IsEmpty() ? "" : " ") + splitTags, delimit);
                             break;
@@ -2077,18 +2082,18 @@
         {
             wxVector<wxVariant> data;
             data.push_back(wxVariant(payee));
-            if (payee == _("Unknown") || (m_CSVpayeeNames.find(payee) != m_CSVpayeeNames.end() && std::get<0>(m_CSVpayeeNames[payee]) != -1))
+            if (payee == _t("Unknown") || (m_CSVpayeeNames.find(payee) != m_CSVpayeeNames.end() && std::get<0>(m_CSVpayeeNames[payee]) != -1))
             {
                 if (std::get<2>(m_CSVpayeeNames[payee]) == wxEmptyString)
-                    data.push_back(wxVariant(_("OK")));
+                    data.push_back(wxVariant(_t("OK")));
                 else
-                    data.push_back(wxVariant(wxString::Format(_("Matched to %1$s by pattern %2$s"),
+                    data.push_back(wxVariant(wxString::Format(_t("Matched to %1$s by pattern %2$s"),
                         std::get<1>(m_CSVpayeeNames[payee]),
                         std::get<2>(m_CSVpayeeNames[payee])
                     )));
             }
             else
-                data.push_back(wxVariant(_("Missing")));
+                data.push_back(wxVariant(_t("Missing")));
             payeeListBox_->AppendItem(data, static_cast<wxUIntPtr>(num++));
         }
     }
@@ -2102,9 +2107,9 @@
             wxVector<wxVariant> data;
             data.push_back(wxVariant(categ.first));
             if (categ.second == -1)
-                data.push_back(wxVariant(_("Missing")));
+                data.push_back(wxVariant(_t("Missing")));
             else
-                data.push_back(wxVariant(_("OK")));
+                data.push_back(wxVariant(_t("OK")));
             categoryListBox_->AppendItem(data, static_cast<wxUIntPtr>(num++));
         }
     }
@@ -2178,9 +2183,9 @@
     {
         wxString preset_name = m_choice_preset_name->GetStringSelection();
         if (wxMessageBox(
-            wxString::Format(_("Preset '%s' will be deleted"), preset_name) + "\n\n" +
-            _("Do you wish to continue?")
-            , _("Delete Preset"), wxYES_NO | wxICON_WARNING) == wxNO)
+            wxString::Format(_t("Preset '%s' will be deleted"), preset_name) + "\n\n" +
+            _t("Do you want to continue?")
+            , _t("Delete Preset"), wxYES_NO | wxICON_WARNING) == wxNO)
         {
             return;
         }
@@ -2211,16 +2216,16 @@
     switch (dialogType_)
     {
     case DIALOG_TYPE_IMPORT_CSV:
-        header = _("Choose CSV data file to import");
+        header = _t("Choose CSV data file to import");
         break;
     case DIALOG_TYPE_EXPORT_CSV:
-        header = _("Choose CSV data file to export");
+        header = _t("Choose CSV data file to export");
         break;
     case DIALOG_TYPE_IMPORT_XML:
-        header = _("Choose XML data file to import");
+        header = _t("Choose XML data file to import");
         break;
     case DIALOG_TYPE_EXPORT_XML:
-        header = _("Choose XML data file to export");
+        header = _t("Choose XML data file to export");
         break;
     default:
         break;
@@ -2228,8 +2233,8 @@
 
     long flags = IsImporter() ? wxFD_FILE_MUST_EXIST | wxFD_OPEN : wxFD_SAVE;
     const wxString defaultWildcard = IsXML()
-        ? wxString() << _("XML Files (*.xml)") << "|*.xml;*.XML|" << _("All Files") << "|" << wxFileSelectorDefaultWildcardStr
-        : wxString() << _("CSV Files (*.csv)") << "|*.csv;*.CSV";
+        ? wxString() << _t("XML Files (*.xml)") << "|*.xml;*.XML|" << _t("All Files") << "|" << wxFileSelectorDefaultWildcardStr
+        : wxString() << _t("CSV Files (*.csv)") << "|*.csv;*.CSV";
     const wxString chooseExt = IsXML() ? "*.xml" : "*.csv";
 
     if (!IsImporter()) correctEmptyFileExt("csv", fileName);
@@ -2245,7 +2250,7 @@
             wxTextFile tFile(fileName);
             if (!tFile.Open())
             {
-                *log_field_ << _("Unable to open file.") << "\n";
+                *log_field_ << _t("Unable to open file.") << "\n";
                 return;
             }
 
@@ -2420,7 +2425,7 @@
             holder.PayeeID = std::get<0>(m_CSVpayeeNames[token]);
             if (payeeMatchAddNotes_->IsChecked() && !std::get<2>(m_CSVpayeeNames[token]).IsEmpty())
             {
-                holder.PayeeMatchNotes = wxString::Format(_("%1$s matched by %2$s"), token, std::get<2>(m_CSVpayeeNames[token]));
+                holder.PayeeMatchNotes = wxString::Format(_t("%1$s matched by %2$s"), token, std::get<2>(m_CSVpayeeNames[token]));
             }
         }
         else
@@ -2438,7 +2443,7 @@
 
         if (find_if(csvFieldOrder_.begin(), csvFieldOrder_.end(), [](const std::pair<int, int>& element) {return element.first == UNIV_CSV_TYPE; }) == csvFieldOrder_.end()) {
             if ((amount > 0.0 && !m_reverce_sign) || (amount <= 0.0 && m_reverce_sign)) {
-                holder.Type = Model_Checking::TYPE_STR_DEPOSIT;
+                holder.Type = Model_Checking::TYPE_NAME_DEPOSIT;
             }
         }
 
@@ -2551,7 +2556,7 @@
             break;
 
         holder.Amount = fabs(amount);
-        holder.Type = Model_Checking::TYPE_STR_WITHDRAWAL;
+        holder.Type = Model_Checking::TYPE_NAME_WITHDRAWAL;
         break;
 
     case UNIV_CSV_DEPOSIT:
@@ -2569,7 +2574,7 @@
             break;
 
         holder.Amount = fabs(amount);
-        holder.Type = Model_Checking::TYPE_STR_DEPOSIT;
+        holder.Type = Model_Checking::TYPE_NAME_DEPOSIT;
         break;
 
         // A number of type options are supported to make amount positive 
@@ -2579,7 +2584,7 @@
         {
             if (depositType_.CmpNoCase(token) == 0)
             {
-                holder.Type = Model_Checking::TYPE_STR_DEPOSIT;
+                holder.Type = Model_Checking::TYPE_NAME_DEPOSIT;
                 break;
             }
         }
@@ -2587,7 +2592,7 @@
         {
             for (const wxString entry : { "debit", "deposit", "+" }) {
                 if (entry.CmpNoCase(token) == 0) {
-                    holder.Type = Model_Checking::TYPE_STR_DEPOSIT;
+                    holder.Type = Model_Checking::TYPE_NAME_DEPOSIT;
                     break;
                 }
             }
@@ -2654,18 +2659,18 @@
         Model_Account::Data* account = Model_Account::instance().get(acctName);
         m_account_id = account->ACCOUNTID;
         Model_Currency::Data* currency = Model_Account::currency(account);
-        *log_field_ << _("Currency:") << " " << wxGetTranslation(currency->CURRENCYNAME) << "\n";
+        *log_field_ << _t("Currency:") << " " << wxGetTranslation(currency->CURRENCYNAME) << "\n";
 
         m_checkbox_preset_default->Enable(m_choice_preset_name->GetSelection() >= 0);
         m_checkbox_preset_default->SetValue(false);
-        m_checkbox_preset_default->SetLabelText(wxString::Format(_("Load this Preset when Account is:\n%s"), acctName));
+        m_checkbox_preset_default->SetLabelText(wxString::Format(_t("Load this Preset when Account is:\n%s"), acctName));
         Fit();
         for (const auto& preset : m_preset_id)
             if (preset.second == m_acct_default_preset[m_account_id])
             {
                 m_choice_preset_name->SetStringSelection(preset.first);
                 SetSettings(GetStoredSettings(m_choice_preset_name->GetSelection()));
-                *log_field_ << wxString::Format(_("Preset '%1$s' loaded because Account '%2$s' selected"), preset.first, acctName) << "\n";
+                *log_field_ << wxString::Format(_t("Preset '%1$s' loaded because Account '%2$s' selected"), preset.first, acctName) << "\n";
                 break;
             }
     }
@@ -2676,18 +2681,18 @@
     else if (i == wxID_REPLACE)
     {
         if (m_choiceAmountFieldSign->GetSelection() == DefindByType) {
-            wxString depositType = wxGetTextFromUser(_("Please, type the word indicating positive values in your CSV file, e.g. 'credit'"), _("Enter a value"), depositType_);
+            wxString depositType = wxGetTextFromUser(_t("Please, type the word indicating positive values in the CSV file, e.g., 'credit'."), _t("Enter a value"), depositType_);
             if (!depositType.empty()) {
                 depositType_ = depositType;
             }
-            m_choiceAmountFieldSign->SetString(DefindByType, wxString::Format(_("Positive if type has '%s'"), depositType_));
+            m_choiceAmountFieldSign->SetString(DefindByType, wxString::Format(_t("Positive if type has '%s'"), depositType_));
             m_choiceAmountFieldSign->SetSelection(DefindByType);
         }
         else if (std::find_if(csvFieldOrder_.begin(), csvFieldOrder_.end(), [](const std::pair<int, int>& element) {return element.first == UNIV_CSV_TYPE; }) != csvFieldOrder_.end()) {
             m_choiceAmountFieldSign->Select(DefindByType);
             mmErrorDialogs::ToolTip4Object(m_choiceAmountFieldSign
-                , _("Amount sign must be defined by type when 'Type' is selected for import")
-                , _("Invalid Entry"), wxICON_WARNING);
+                , _t("Amount sign must be defined by type when 'Type' is selected for import")
+                , _t("Invalid Entry"), wxICON_WARNING);
         }
     }
     m_userDefinedDateMask = true;
@@ -2799,7 +2804,7 @@
     if (!value.IsEmpty())
     {
         const Model_CustomField::Data* data = Model_CustomField::instance().get(fieldId);
-        wxString type_string = Model_CustomField::TYPE_STR[Model_CustomField::type_id(data)];
+        wxString type_string = Model_CustomField::type_name(Model_CustomField::type_id(data));
         switch (Model_CustomField::type_id(data))
         {
             // Check if string can be read as an integer. Will fail if passed a double.
@@ -2807,7 +2812,7 @@
             value = cleanseNumberString(value, true);
             if (!value.ToCLong(&int_val))
             {
-                message << " " << wxString::Format(_("Value %1$s for custom field '%2$s' is not type %3$s."), value, data->DESCRIPTION, type_string);
+                message << " " << wxString::Format(_t("Value %1$s for custom field '%2$s' is not type %3$s."), value, data->DESCRIPTION, type_string);
                 is_valid = false;
             }
             else value = wxString::Format("%i", int_val);
@@ -2818,7 +2823,7 @@
             value = cleanseNumberString(value, true);
             if (!value.ToCDouble(&double_val))
             {
-                message << " " << wxString::Format(_("Value %1$s for custom field '%2$s' is not type %3$s."), value, data->DESCRIPTION, type_string);
+                message << " " << wxString::Format(_t("Value %1$s for custom field '%2$s' is not type %3$s."), value, data->DESCRIPTION, type_string);
                 is_valid = false;
             }
             else
@@ -2834,7 +2839,7 @@
             if (bool_true_array.Index(value, false) == wxNOT_FOUND)
                 if (bool_false_array.Index(value, false) == wxNOT_FOUND)
                 {
-                    message << " " << wxString::Format(_("Value %1$s for custom field '%2$s' is not type %3$s."), value, data->DESCRIPTION, type_string);
+                    message << " " << wxString::Format(_t("Value %1$s for custom field '%2$s' is not type %3$s."), value, data->DESCRIPTION, type_string);
                     is_valid = false;
                 }
                 else value = "FALSE";
@@ -2847,7 +2852,7 @@
             index = choices.Index(value, false);
             if (index == wxNOT_FOUND)
             {
-                message << " " << wxString::Format(_("Value %1$s for %2$s custom field '%3$s' is not a valid selection."), value, type_string, data->DESCRIPTION);
+                message << " " << wxString::Format(_t("Value %1$s for %2$s custom field '%3$s' is not a valid selection."), value, type_string, data->DESCRIPTION);
                 is_valid = false;
             }
             else value = choices[index];
@@ -2868,7 +2873,7 @@
                     if (tokenizer.HasMoreTokens()) value.Append(";");
                 }
                 else {
-                    message << " " << wxString::Format(_("Value %1$s for %2$s custom field '%3$s' is not a valid selection."), token, type_string, data->DESCRIPTION);
+                    message << " " << wxString::Format(_t("Value %1$s for %2$s custom field '%3$s' is not a valid selection."), token, type_string, data->DESCRIPTION);
                     is_valid = false;
                 }
             }
@@ -2878,8 +2883,8 @@
         case Model_CustomField::TYPE_ID_DATE:
             if (!mmParseDisplayStringToDate(date, value, date_format_))
             {
-                message << " " << wxString::Format(_("Value %1$s for custom field '%2$s' is not type %3$s."), value, data->DESCRIPTION, type_string) <<
-                    " " << wxString::Format(_("Confirm format matches selection %s."), date_format_);
+                message << " " << wxString::Format(_t("Value %1$s for custom field '%2$s' is not type %3$s."), value, data->DESCRIPTION, type_string) <<
+                    " " << wxString::Format(_t("Confirm format matches selection %s."), date_format_);
                 is_valid = false;
             }
             else value = date.FormatISODate();
@@ -2889,7 +2894,7 @@
         case Model_CustomField::TYPE_ID_TIME:
             if (!time.ParseTime(value))
             {
-                message << " " << wxString::Format(_("Value %1$s for custom field '%2$s' is not type %3$s."), value, data->DESCRIPTION, type_string);
+                message << " " << wxString::Format(_t("Value %1$s for custom field '%2$s' is not type %3$s."), value, data->DESCRIPTION, type_string);
                 is_valid = false;
             }
             else value = time.FormatISOTime();
@@ -2906,7 +2911,7 @@
 
             if (!regEx.Matches(value))
             {
-                message << " " << wxString::Format(_("Value %1$s does not match regex %2$s for custom field '%3$s'."), value, regExStr, data->DESCRIPTION);
+                message << " " << wxString::Format(_t("Value %1$s does not match regex %2$s for custom field '%3$s'."), value, regExStr, data->DESCRIPTION);
                 is_valid = false;
             }
         }
diff -Naur a/src/import_export/univcsvdialog.h b/src/import_export/univcsvdialog.h
--- a/src/import_export/univcsvdialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/import_export/univcsvdialog.h	2025-07-09 01:46:59.644940484 +0200
@@ -130,7 +130,7 @@
     struct tran_holder
     {
         wxDateTime Date;
-        wxString Type = Model_Checking::TYPE_STR_WITHDRAWAL;
+        wxString Type = Model_Checking::TYPE_NAME_WITHDRAWAL;
         wxString Status = "";
         int64 ToAccountID = -1;
         double ToAmount = 0.0;
diff -Naur a/src/maincurrencydialog.cpp b/src/maincurrencydialog.cpp
--- a/src/maincurrencydialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/maincurrencydialog.cpp	2025-07-09 01:46:59.644940484 +0200
@@ -58,7 +58,7 @@
 
 mmMainCurrencyDialog::~mmMainCurrencyDialog()
 {
-    Model_Infotable::instance().Set("CURRENCY_DIALOG_SIZE", GetSize());
+    Model_Infotable::instance().setSize("CURRENCY_DIALOG_SIZE", GetSize());
 }
 
 mmMainCurrencyDialog::mmMainCurrencyDialog(
@@ -69,12 +69,12 @@
     bEnableSelect_(bEnableSelect)
     , m_maskStr("")
 {
-    bHistoryEnabled_ = Option::instance().getCurrencyHistoryEnabled();
+    bHistoryEnabled_ = Option::instance().getUseCurrencyHistory();
 
     ColName_[CURR_BASE]   = " ";
-    ColName_[CURR_SYMBOL] = _("Code");
-    ColName_[CURR_NAME]   = _("Name");
-    ColName_[BASE_RATE]   = bHistoryEnabled_ ? _("Last Rate") : _("Fixed Rate");
+    ColName_[CURR_SYMBOL] = _t("Code");
+    ColName_[CURR_NAME]   = _t("Name");
+    ColName_[BASE_RATE]   = bHistoryEnabled_ ? _t("Last Rate") : _t("Fixed Rate");
 
     m_currency_id = currencyID == -1 ? Option::instance().getBaseCurrencyID() : currencyID;
     this->SetFont(parent->GetFont());
@@ -113,7 +113,7 @@
     int selected_index = currencyListBox_->GetSelectedRow();
     currencyListBox_->DeleteAllItems();
 
-    cbShowAll_->SetValue(Model_Infotable::instance().GetBoolInfo("SHOW_HIDDEN_CURRENCIES", true));
+    cbShowAll_->SetValue(Model_Infotable::instance().getBool("SHOW_HIDDEN_CURRENCIES", true));
 
     int64 base_currency_id = -1;
     if (Model_Currency::GetBaseCurrency()) {
@@ -134,7 +134,7 @@
         }
         wxString amount;
         if (-1 == base_currency_id) // Not yet set
-            amount = _("N/A");
+            amount = _t("N/A");
         else
             amount = bHistoryEnabled_
             ? Model_Currency::toString(Model_CurrencyHistory::getLastRate(currencyID), nullptr, 4)
@@ -177,14 +177,14 @@
     itemBoxSizer22->Add(update_button, g_flagsH);
     update_button->Connect(wxID_EXECUTE, wxEVT_COMMAND_BUTTON_CLICKED
         , wxCommandEventHandler(mmMainCurrencyDialog::OnOnlineUpdateCurRate), nullptr, this);
-    mmToolTip(update_button, _("Online update currency rate"));
+    mmToolTip(update_button, _t("Online update currency rate"));
     itemBoxSizer22->AddSpacer(4);
 
-    itemBoxSizer22->Add(new wxStaticText(this, wxID_STATIC, _("Online Update")), g_flagsH);
+    itemBoxSizer22->Add(new wxStaticText(this, wxID_STATIC, _t("Online Update")), g_flagsH);
 
     itemBoxSizer22->AddSpacer(15);
-    cbShowAll_ = new wxCheckBox(this, wxID_SELECTALL, _("&Show All"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    mmToolTip(cbShowAll_, _("Show all even the unused currencies"));
+    cbShowAll_ = new wxCheckBox(this, wxID_SELECTALL, _t("&Show All"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    mmToolTip(cbShowAll_, _t("Show all even the unused currencies"));
     cbShowAll_->Connect(wxID_SELECTALL, wxEVT_COMMAND_CHECKBOX_CLICKED
         , wxCommandEventHandler(mmMainCurrencyDialog::OnShowHiddenChbClick), nullptr, this);
 
@@ -206,7 +206,7 @@
 
     wxBoxSizer* itemBoxSizerS = new wxBoxSizer(wxHORIZONTAL);
     itemBoxSizer2->Add(itemBoxSizerS, wxSizerFlags(g_flagsExpand).Proportion(0));
-    itemBoxSizerS->Add(new wxStaticText(this, wxID_STATIC, _("Search")), g_flagsH);
+    itemBoxSizerS->Add(new wxStaticText(this, wxID_STATIC, _t("Search")), g_flagsH);
     m_maskTextCtrl = new wxSearchCtrl(this, wxID_FIND);
     m_maskTextCtrl->SetFocus();
     itemBoxSizerS->Add(m_maskTextCtrl, g_flagsExpand);
@@ -222,9 +222,9 @@
     wxStdDialogButtonSizer* itemBoxSizer9 = new wxStdDialogButtonSizer;
     buttonsSizer->Add(itemBoxSizer9, wxSizerFlags(g_flagsExpand).Border(wxALL, 0));
 
-    m_select_btn = new wxButton(buttonsPanel, wxID_SELECTALL, _("&Select"));
+    m_select_btn = new wxButton(buttonsPanel, wxID_SELECTALL, _t("&Select"));
     itemBoxSizer9->Add(m_select_btn, wxSizerFlags(g_flagsExpand).Proportion(4));
-    //mmToolTip(itemButtonSelect, _("Select the currently selected currency as the selected currency for the account"));
+    //mmToolTip(itemButtonSelect, _t("Select the currently selected currency as the selected currency for the account"));
 
     if (!bEnableSelect_)
         m_select_btn->Disable();
@@ -238,7 +238,7 @@
     wxBoxSizer* rightBoxSizer = new wxBoxSizer(wxVERTICAL);
     mainBoxSizer->Add(rightBoxSizer, g_flagsExpand);
 
-    historyStaticBox_ = new wxStaticBox(this, wxID_ANY, _("Historical Currency Options"));
+    historyStaticBox_ = new wxStaticBox(this, wxID_ANY, _t("Historical Currency Options"));
     if (bEnableSelect_) historyStaticBox_->Hide();
 
     wxStaticBoxSizer* historyStaticBox_Sizer = new wxStaticBoxSizer(historyStaticBox_, wxVERTICAL);
@@ -250,41 +250,41 @@
     wxListItem col0, col1, col2;
     // Add first column
     col0.SetId(0);
-    col0.SetText(_("Date"));
+    col0.SetText(_t("Date"));
     valueListBox_->InsertColumn(0, col0);
 
     // Add second column
     col1.SetId(1);
-    col1.SetText(_("Price"));
+    col1.SetText(_t("Price"));
     valueListBox_->InsertColumn(1, col1);
 
     // Add third column
     col2.SetId(2);
-    col2.SetText(_("Type"));
+    col2.SetText(_t("Type"));
     valueListBox_->InsertColumn(2, col2);
 
     //History Buttons
     wxBoxSizer* itemBoxSizerD = new wxBoxSizer(wxHORIZONTAL);
     historyStaticBox_Sizer->Add(itemBoxSizerD, wxSizerFlags(g_flagsExpand).Proportion(0));
 
-    wxStaticText* datePickerLabel = new wxStaticText(this, wxID_STATIC, _("Date"));
+    wxStaticText* datePickerLabel = new wxStaticText(this, wxID_STATIC, _t("Date"));
     itemBoxSizerD->Add(datePickerLabel, g_flagsH);
 
     valueDatePicker_ = new mmDatePickerCtrl(this, wxID_ANY, wxDefaultDateTime
         , wxDefaultPosition, wxDefaultSize, wxDP_DROPDOWN | wxDP_SHOWCENTURY);
     valueDatePicker_->SetMinSize(wxSize(120, -1));
     itemBoxSizerD->Add(valueDatePicker_, g_flagsExpand);
-    mmToolTip(valueDatePicker_, _("Specify the date of currency value"));
+    mmToolTip(valueDatePicker_, _t("Specify the date of currency value"));
     valueDatePicker_->Disable();
 
-    wxStaticText* textBoxLabel = new wxStaticText(this, wxID_STATIC, _("Value"));
+    wxStaticText* textBoxLabel = new wxStaticText(this, wxID_STATIC, _t("Value"));
     itemBoxSizerD->Add(textBoxLabel, g_flagsH);
 
     valueTextBox_ = new mmTextCtrl(this, wxID_ANY, wxGetEmptyString()
         , wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT | wxTE_PROCESS_ENTER, mmCalcValidator());
     valueTextBox_->SetAltPrecision(6);
     valueTextBox_->SetMinSize(wxSize(120, -1));
-    mmToolTip(valueTextBox_, _("Enter the currency value"));
+    mmToolTip(valueTextBox_, _t("Enter the currency value"));
     itemBoxSizerD->Add(valueTextBox_, g_flagsExpand);
     valueTextBox_->Disable();
 
@@ -294,19 +294,19 @@
     buttons_panel->SetSizer(buttons_sizer);
 
     buttonDownloadHistory_ = new wxBitmapButton(buttons_panel, HISTORY_UPDATE, mmBitmapBundle(png::CURRATES, mmBitmapButtonSize));
-    mmToolTip(buttonDownloadHistory_, _("Download Currency Values history"));
+    mmToolTip(buttonDownloadHistory_, _t("Download Currency Values history"));
     buttonDownloadHistory_->Disable();
 
-    historyButtonAdd_ = new wxButton(buttons_panel, HISTORY_ADD, _("Add/&Update "), wxDefaultPosition, wxSize(-1, buttonDownloadHistory_->GetSize().GetY()));
-    mmToolTip(historyButtonAdd_, _("Add Currency Values to history"));
+    historyButtonAdd_ = new wxButton(buttons_panel, HISTORY_ADD, _t("Add/&Update "), wxDefaultPosition, wxSize(-1, buttonDownloadHistory_->GetSize().GetY()));
+    mmToolTip(historyButtonAdd_, _t("Add Currency Values to history"));
     historyButtonAdd_->Disable();
 
-    historyButtonDelete_ = new wxButton(buttons_panel, HISTORY_DELETE, _("&Delete "), wxDefaultPosition, wxSize(-1, buttonDownloadHistory_->GetSize().GetY()));
-    mmToolTip(historyButtonDelete_, _("Delete selected Currency Values"));
+    historyButtonDelete_ = new wxButton(buttons_panel, HISTORY_DELETE, _t("&Delete "), wxDefaultPosition, wxSize(-1, buttonDownloadHistory_->GetSize().GetY()));
+    mmToolTip(historyButtonDelete_, _t("Delete selected Currency Values"));
     historyButtonDelete_->Disable();
 
     buttonDelUnusedHistory_ = new wxBitmapButton(buttons_panel, HISTORY_DELUNUSED, mmBitmapBundle(png::VOID_STAT, mmBitmapButtonSize));
-    mmToolTip(buttonDelUnusedHistory_, _("Delete Historical Currency Values for unused currencies and days"));
+    mmToolTip(buttonDelUnusedHistory_, _t("Delete Historical Currency Values for unused currencies and days"));
     buttonDelUnusedHistory_->Disable();
 
     buttons_sizer->Add(buttonDownloadHistory_, g_flagsH);
@@ -362,8 +362,8 @@
 
     Model_Currency::Data* currency = Model_Currency::instance().get(m_currency_id);
     if (!currency) return;
-    if (wxMessageBox(_("Do you really want to delete the selected Currency?")
-        , _("Currency Manager")
+    if (wxMessageBox(_t("Do you want to delete the selected currency?")
+        , _t("Currency Manager")
         , wxYES_NO | wxNO_DEFAULT | wxICON_ERROR) == wxYES)
     {
         Model_Currency::instance().remove(m_currency_id);
@@ -391,7 +391,7 @@
 {
     mmMainCurrencyDialog dlg(nullptr, currencyID);
     dlg.m_static_dialog = true;
-    dlg.SetTitle(_("Base Currency Selection"));
+    dlg.SetTitle(_t("Base Currency Selection"));
     dlg.valueListBox_->Enable(false);
     dlg.valueTextBox_->Enable(false);
     dlg.valueDatePicker_->Enable(false);
@@ -431,10 +431,10 @@
                 }
                 else if (Model_CurrencyHistory::instance().find(Model_CurrencyHistory::CURRENCYID(m_currency_id)).size() > 0)
                 {
-                    if (wxMessageBox(wxString::Format(_(
+                    if (wxMessageBox(wxString::Format(_t(
                         "Historical rates for %1$s found, but “Use historical currency” in options is disabled:\n"
                         "click No and enable it or click Yes to remove all historical rates for %2$s"),
-                        currency->CURRENCY_SYMBOL, currency->CURRENCY_SYMBOL), _("Currency Manager")
+                        currency->CURRENCY_SYMBOL, currency->CURRENCY_SYMBOL), _t("Currency Manager")
                         , wxYES_NO | wxNO_DEFAULT | wxICON_WARNING) == wxYES)
                     {
                         Model_CurrencyHistory::instance().Savepoint();
@@ -444,7 +444,7 @@
                     }
                 }
             }
-            historyStaticBox_->SetLabel(wxString::Format(_("Currency History Options: %s"), currency->CURRENCYNAME));
+            historyStaticBox_->SetLabel(wxString::Format(_t("Currency History Options: %s"), currency->CURRENCYNAME));
         }
     }
 
@@ -471,7 +471,7 @@
     {
         if (!hide)
         {
-            wxMessageDialog msgDlg(this, msg, _("Online update currency rate"));
+            wxMessageDialog msgDlg(this, msg, _t("Online update currency rate"));
             msgDlg.ShowModal();
         }
         fillControls();
@@ -479,7 +479,7 @@
     }
     else
     {
-        wxMessageDialog msgDlg(this, msg, _("Error"), wxOK | wxICON_ERROR);
+        wxMessageDialog msgDlg(this, msg, _t("Error"), wxOK | wxICON_ERROR);
         msgDlg.ShowModal();
     }
     return ok;
@@ -500,8 +500,8 @@
         case MENU_ITEM1:
             if (!SetBaseCurrency(m_currency_id))
                 mmErrorDialogs::MessageError(this
-                    , _("Unable to update historical currency rates. Please update them manually!")
-                    , _("Historical currency error"));
+                    , _t("Unable to update historical currency rates. Please update them manually!")
+                    , _t("Historical currency error"));
 
             fillControls();
             ShowCurrencyHistory();
@@ -533,12 +533,12 @@
 
     wxMenu* mainMenu = new wxMenu;
 
-    mainMenu->Append(new wxMenuItem(mainMenu, MENU_ITEM1, _("Set as Base Currency")));
-    mainMenu->Append(new wxMenuItem(mainMenu, MENU_ITEM2, _("Online Update Currency Rate")));
+    mainMenu->Append(new wxMenuItem(mainMenu, MENU_ITEM1, _t("Set as Base Currency")));
+    mainMenu->Append(new wxMenuItem(mainMenu, MENU_ITEM2, _t("Online Update Currency Rate")));
     mainMenu->AppendSeparator();
-    mainMenu->Append(new wxMenuItem(mainMenu, wxID_ADD, _("&Add ")));
-    mainMenu->Append(new wxMenuItem(mainMenu, wxID_EDIT, _("&Edit ")));
-    mainMenu->Append(new wxMenuItem(mainMenu, wxID_REMOVE, _("&Remove ")));
+    mainMenu->Append(new wxMenuItem(mainMenu, wxID_ADD, _t("&Add ")));
+    mainMenu->Append(new wxMenuItem(mainMenu, wxID_EDIT, _t("&Edit ")));
+    mainMenu->Append(new wxMenuItem(mainMenu, wxID_REMOVE, _t("&Remove ")));
 
     bool is_selected = currencyListBox_->GetSelectedRow() > -1;
     m_select_btn->Enable(is_selected);
@@ -558,7 +558,7 @@
 
 void mmMainCurrencyDialog::OnShowHiddenChbClick(wxCommandEvent& WXUNUSED(event))
 {
-    Model_Infotable::instance().Set("SHOW_HIDDEN_CURRENCIES", cbShowAll_->IsChecked());
+    Model_Infotable::instance().setBool("SHOW_HIDDEN_CURRENCIES", cbShowAll_->IsChecked());
     fillControls();
 }
 
@@ -597,7 +597,7 @@
         {
             wxListItem item;
             item.SetId(idx);
-            item.SetData(d.CURRHISTID.GetValue());
+            item.SetData(reinterpret_cast<void*>(d.CURRHISTID.GetValue()));
             valueListBox_->InsertItem(item);
             const wxString dispAmount = Model_Currency::toString(d.CURRVALUE, currency, 6);
             valueListBox_->SetItem(idx, 0, mmGetDateTimeForDisplay(d.CURRDATE));
@@ -618,12 +618,10 @@
 {
     if (m_currency_id <= 0) return;
 
-    wxString listStr;
-    wxDateTime dt;
     double dPrice = 0.0;
     wxString currentPriceStr = valueTextBox_->GetValue().Trim();
     if (!Model_Currency::fromString(currentPriceStr, dPrice, Model_Currency::instance().get(m_currency_id)) || (dPrice < 0.0))
-        return mmErrorDialogs::ToolTip4Object(valueTextBox_, _("Invalid Entry"), _("Amount"));
+        return mmErrorDialogs::ToolTip4Object(valueTextBox_, _t("Invalid Entry"), _t("Amount"));
     Model_CurrencyHistory::instance().addUpdate(m_currency_id, valueDatePicker_->GetValue(), dPrice, Model_CurrencyHistory::MANUAL);
 
     fillControls();
@@ -654,14 +652,14 @@
     Model_Currency::Data* CurrentCurrency = Model_Currency::instance().get(m_currency_id);
     if (!CurrentCurrency)
     {
-        return mmErrorDialogs::MessageError(this, _("No currency selected!"), _("Currency history error"));
+        return mmErrorDialogs::MessageError(this, _t("No currency selected!"), _t("Currency history error"));
     }
 
     wxString base_currency_symbol;
     wxASSERT_MSG(Model_Currency::GetBaseCurrencySymbol(base_currency_symbol), "Unable to find base currency symbol");
 
-    int msgResult = wxMessageBox(_("Do you want to add also dates without any transaction?")
-        , _("Currency Manager")
+    int msgResult = wxMessageBox(_t("Do you want to add dates without any details?")
+        , _t("Currency Manager")
         , wxYES_NO | wxNO_DEFAULT | wxICON_WARNING);
     bool isCheckDate = msgResult == wxNO;
 
@@ -687,9 +685,9 @@
     if (!isUpdStatus)
     {
         return mmErrorDialogs::MessageError(this
-            , wxString::Format(_("Unable to download %s currency rates")
+            , wxString::Format(_t("Unable to download %s currency rates")
                 , CurrentCurrency->CURRENCY_SYMBOL)
-            , _("Historical currency error"));
+            , _t("Historical currency error"));
     }
 
     bool isFound = !historical_rates.empty();
@@ -723,9 +721,9 @@
     }
     else
         mmErrorDialogs::MessageError(this
-            , wxString::Format(_("Unable to download history for symbol %s. Historical rates unavailable!")
+            , wxString::Format(_t("Unable to download history for symbol %s. Historical rates unavailable!")
                 , CurrentCurrency->CURRENCY_SYMBOL)
-            , _("Historical currency error"));
+            , _t("Historical currency error"));
 }
 
 void mmMainCurrencyDialog::OnHistoryDeleteUnused(wxCommandEvent& WXUNUSED(event))
@@ -761,7 +759,7 @@
 void mmMainCurrencyDialog::OnHistorySelected(wxListEvent& event)
 {
     long selectedIndex = event.GetIndex();
-    long histId = valueListBox_->GetItemData(selectedIndex);
+    int64 histId = valueListBox_->GetItemData(selectedIndex);
     Model_CurrencyHistory::Data *histData = Model_CurrencyHistory::instance().get(histId);
 
     if (histData->CURRHISTID > 0)
@@ -785,13 +783,13 @@
 
     if (bHistoryEnabled_)
     {
-        if (wxMessageBox(_("Changing base currency will delete all historical rates, proceed?")
-            , _("Currency Manager")
+        if (wxMessageBox(_t("Changing base currency will delete all historical rates, proceed?")
+            , _t("Currency Manager")
             , wxYES_NO | wxYES_DEFAULT | wxICON_WARNING) != wxYES)
             return true;
     }
 
-    Option::instance().setBaseCurrency(baseCurrencyID);
+    Option::instance().setBaseCurrencyID(baseCurrencyID);
 
     //Update baseconvrate
     Model_Currency::instance().Savepoint();
@@ -809,8 +807,8 @@
         Model_CurrencyHistory::instance().remove(r.id());
     Model_CurrencyHistory::instance().ReleaseSavepoint();
 
-    if (wxMessageBox(_("Do you want to update today currency rates?")
-            , _("Currency Manager")
+    if (wxMessageBox(_t("Do you want to update the currency rates?")
+            , _t("Currency Manager")
             , wxYES_NO | wxYES_DEFAULT | wxICON_QUESTION) != wxYES)
         return true;
     OnlineUpdateCurRate();
@@ -830,8 +828,8 @@
     if (BaseRatesList.size() == 0)
     {
         mmErrorDialogs::MessageError(this
-            , wxString::Format(_("Unable to download history for base symbol %s. Historical rates unavailable!"), BaseCurrencySymbol)
-            , _("Currency history error"));
+            , wxString::Format(_t("Unable to download history for base symbol %s. Historical rates unavailable!"), BaseCurrencySymbol)
+            , _t("Currency history error"));
         return false;
     }
 
@@ -873,7 +871,7 @@
 {
     wxString base_currency_symbol;
     if (!Model_Currency::GetBaseCurrencySymbol(base_currency_symbol)) {
-        msg = _("Unable to find base currency symbol!");
+        msg = _t("Unable to find base currency symbol!");
         return false;
     }
 
diff -Naur a/src/maincurrencydialog.h b/src/maincurrencydialog.h
--- a/src/maincurrencydialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/maincurrencydialog.h	2025-07-09 01:46:59.648940508 +0200
@@ -75,7 +75,7 @@
 
     bool Create(wxWindow* parent
         , wxWindowID id = wxID_ANY
-        , const wxString& caption = wxTRANSLATE("Currency Manager")
+        , const wxString& caption = _n("Currency Manager")
         , const wxString& name = "Organize Currencies"
         , const wxPoint& pos = wxDefaultPosition
         , const wxSize& size = wxDefaultSize
diff -Naur a/src/mmchecking_list.cpp b/src/mmchecking_list.cpp
--- a/src/mmchecking_list.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmchecking_list.cpp	2025-07-09 01:46:59.648940508 +0200
@@ -18,6 +18,10 @@
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  ********************************************************/
 
+#include <wx/clipbrd.h>
+#include <algorithm>
+#include <wx/sound.h>
+
 #include "assetdialog.h"
 #include "attachmentdialog.h"
 #include "billsdepositsdialog.h"
@@ -33,192 +37,87 @@
 #include "transactionsupdatedialog.h"
 #include "transdialog.h"
 #include "util.h"
-#include <wx/clipbrd.h>
+#include "model/Model_Setting.h"
 
-#include <wx/srchctrl.h>
-#include <algorithm>
-#include <wx/sound.h>
 //----------------------------------------------------------------------------
 
 wxBEGIN_EVENT_TABLE(TransactionListCtrl, mmListCtrl)
-    EVT_LIST_ITEM_ACTIVATED(wxID_ANY, TransactionListCtrl::OnListItemActivated)
-    EVT_LIST_ITEM_SELECTED(wxID_ANY, TransactionListCtrl::OnListItemSelected)
-    EVT_LIST_ITEM_DESELECTED(wxID_ANY, TransactionListCtrl::OnListItemDeSelected)
-    EVT_LIST_ITEM_FOCUSED(wxID_ANY, TransactionListCtrl::OnListItemFocused)
-    EVT_RIGHT_DOWN(TransactionListCtrl::OnMouseRightClick)
-    EVT_LEFT_DOWN(TransactionListCtrl::OnListLeftClick)
-    EVT_LIST_KEY_DOWN(wxID_ANY, TransactionListCtrl::OnListKeyDown)
-    
-    EVT_MENU_RANGE(MENU_TREEPOPUP_MARKRECONCILED
-        , MENU_TREEPOPUP_MARKDELETE, TransactionListCtrl::OnMarkTransaction)
-
-    EVT_MENU(MENU_TREEPOPUP_WITHDRAWAL, TransactionListCtrl::OnNewTransaction)
-    EVT_MENU(MENU_TREEPOPUP_DEPOSIT, TransactionListCtrl::OnNewTransaction)
-    EVT_MENU(MENU_TREEPOPUP_TRANSFER, TransactionListCtrl::OnNewTransaction)
-    EVT_MENU(MENU_TREEPOPUP_DELETE2, TransactionListCtrl::OnDeleteTransaction)
-    EVT_MENU(MENU_TREEPOPUP_RESTORE, TransactionListCtrl::OnRestoreTransaction)
-    EVT_MENU(MENU_TREEPOPUP_RESTORE_VIEWED, TransactionListCtrl::OnRestoreViewedTransaction)
-    EVT_MENU_RANGE(MENU_TREEPOPUP_DELETE_VIEWED, MENU_TREEPOPUP_DELETE_UNRECONCILED, TransactionListCtrl::OnDeleteViewedTransaction)
-    EVT_MENU(MENU_TREEPOPUP_EDIT2, TransactionListCtrl::OnEditTransaction)
-    EVT_MENU(MENU_TREEPOPUP_MOVE2, TransactionListCtrl::OnMoveTransaction)
-
-    EVT_MENU(MENU_ON_SELECT_ALL, TransactionListCtrl::OnSelectAll)
-    EVT_MENU(MENU_ON_COPY_TRANSACTION, TransactionListCtrl::OnCopy)
-    EVT_MENU(MENU_ON_PASTE_TRANSACTION, TransactionListCtrl::OnPaste)
-    EVT_MENU(MENU_ON_NEW_TRANSACTION, TransactionListCtrl::OnNewTransaction)
-    EVT_MENU(MENU_ON_DUPLICATE_TRANSACTION, TransactionListCtrl::OnDuplicateTransaction)
-    EVT_MENU(MENU_ON_ENTER_SCHEDULED, TransactionListCtrl::OnEnterScheduled)
-    EVT_MENU(MENU_ON_SKIP_SCHEDULED, TransactionListCtrl::OnSkipScheduled)
-    EVT_MENU_RANGE(MENU_ON_SET_UDC0, MENU_ON_SET_UDC7, TransactionListCtrl::OnSetUserColour)
-
-    EVT_MENU(MENU_TREEPOPUP_VIEW_OTHER_ACCOUNT, TransactionListCtrl::OnViewOtherAccount)
-    EVT_MENU(MENU_TREEPOPUP_VIEW_SPLIT_CATEGORIES, TransactionListCtrl::OnViewSplitTransaction)
-    EVT_MENU(MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS, TransactionListCtrl::OnOrganizeAttachments)
-    EVT_MENU(MENU_TREEPOPUP_CREATE_REOCCURANCE, TransactionListCtrl::OnCreateReoccurance)
-    EVT_MENU(MENU_TREEPOPUP_FIND, TransactionListCtrl::findInAllTransactions)
-    EVT_MENU(MENU_TREEPOPUP_COPYTEXT, TransactionListCtrl::OnCopyText)
-    EVT_CHAR(TransactionListCtrl::OnChar)
+    EVT_CHAR(TransactionListCtrl::onChar)
+    EVT_LEFT_DOWN(TransactionListCtrl::onListLeftClick)
+    EVT_RIGHT_DOWN(TransactionListCtrl::onMouseRightClick)
+
+    EVT_LIST_ITEM_ACTIVATED(wxID_ANY,  TransactionListCtrl::onListItemActivated)
+    EVT_LIST_ITEM_SELECTED(wxID_ANY,   TransactionListCtrl::onListItemSelected)
+    EVT_LIST_ITEM_DESELECTED(wxID_ANY, TransactionListCtrl::onListItemDeSelected)
+    EVT_LIST_ITEM_FOCUSED(wxID_ANY,    TransactionListCtrl::onListItemFocused)
+    EVT_LIST_KEY_DOWN(wxID_ANY,        TransactionListCtrl::onListKeyDown)
+
+    EVT_MENU(MENU_TREEPOPUP_WITHDRAWAL,            TransactionListCtrl::onNewTransaction)
+    EVT_MENU(MENU_TREEPOPUP_DEPOSIT,               TransactionListCtrl::onNewTransaction)
+    EVT_MENU(MENU_TREEPOPUP_TRANSFER,              TransactionListCtrl::onNewTransaction)
+    EVT_MENU(MENU_TREEPOPUP_DELETE2,               TransactionListCtrl::onDeleteTransaction)
+    EVT_MENU(MENU_TREEPOPUP_RESTORE,               TransactionListCtrl::onRestoreTransaction)
+    EVT_MENU(MENU_TREEPOPUP_RESTORE_VIEWED,        TransactionListCtrl::onRestoreViewedTransaction)
+    EVT_MENU(MENU_TREEPOPUP_EDIT2,                 TransactionListCtrl::onEditTransaction)
+    EVT_MENU(MENU_TREEPOPUP_MOVE2,                 TransactionListCtrl::onMoveTransaction)
+    EVT_MENU(MENU_TREEPOPUP_VIEW_OTHER_ACCOUNT,    TransactionListCtrl::onViewOtherAccount)
+    EVT_MENU(MENU_TREEPOPUP_VIEW_SPLIT_CATEGORIES, TransactionListCtrl::onViewSplitTransaction)
+    EVT_MENU(MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS,  TransactionListCtrl::onOrganizeAttachments)
+    EVT_MENU(MENU_TREEPOPUP_CREATE_REOCCURANCE,    TransactionListCtrl::onCreateReoccurance)
+    EVT_MENU(MENU_TREEPOPUP_FIND,                  TransactionListCtrl::onFind)
+    EVT_MENU(MENU_TREEPOPUP_COPYTEXT,              TransactionListCtrl::onCopyText)
+    EVT_MENU_RANGE(
+        MENU_TREEPOPUP_MARKRECONCILED,
+        MENU_TREEPOPUP_MARKDELETE,
+        TransactionListCtrl::onMarkTransaction
+    )
+    EVT_MENU_RANGE(
+        MENU_TREEPOPUP_DELETE_VIEWED,
+        MENU_TREEPOPUP_DELETE_UNRECONCILED,
+        TransactionListCtrl::onDeleteViewedTransaction
+    )
 
+    EVT_MENU(MENU_ON_SELECT_ALL,            TransactionListCtrl::onSelectAll)
+    EVT_MENU(MENU_ON_COPY_TRANSACTION,      TransactionListCtrl::onCopy)
+    EVT_MENU(MENU_ON_PASTE_TRANSACTION,     TransactionListCtrl::onPaste)
+    EVT_MENU(MENU_ON_NEW_TRANSACTION,       TransactionListCtrl::onNewTransaction)
+    EVT_MENU(MENU_ON_DUPLICATE_TRANSACTION, TransactionListCtrl::onDuplicateTransaction)
+    EVT_MENU(MENU_ON_ENTER_SCHEDULED,       TransactionListCtrl::onEnterScheduled)
+    EVT_MENU(MENU_ON_SKIP_SCHEDULED,        TransactionListCtrl::onSkipScheduled)
+    EVT_MENU_RANGE(
+        MENU_ON_SET_UDC0,
+        MENU_ON_SET_UDC7,
+        TransactionListCtrl::onSetUserColour
+    )
 wxEND_EVENT_TABLE();
-//----------------------------------------------------------------------------
 
-TransactionListCtrl::EColumn TransactionListCtrl::toEColumn(const unsigned long col)
-{
-    EColumn res = COL_def_sort;
-    if (col < m_real_columns.size())
-        res = static_cast<EColumn>(col);
-    return res;
-}
-
-template<class Compare>
-void TransactionListCtrl::SortBy(Compare comp, bool ascend)
-{
-    if (ascend)
-        std::stable_sort(this->m_trans.begin(), this->m_trans.end(), comp);
-    else
-        std::stable_sort(this->m_trans.rbegin(), this->m_trans.rend(), comp);
-}
-
-void TransactionListCtrl::SortTransactions(int sortcol, bool ascend)
-{
-    const auto& ref_type = Model_Attachment::REFTYPE_STR_TRANSACTION;
-    Model_CustomField::TYPE_ID type;
+const std::vector<ListColumnInfo> TransactionListCtrl::LIST_INFO = {
+    { LIST_ID_ICON,        true, _n("Icon"),         25,  _FC, false },
+    { LIST_ID_ID,          true, _n("ID"),           _WA, _FR, true },
+    { LIST_ID_DATE,        true, _n("Date"),         112, _FL, true },
+    { LIST_ID_TIME,        true, _n("Time"),         70,  _FL, true },
+    { LIST_ID_NUMBER,      true, _n("Number"),       70,  _FL, true },
+    { LIST_ID_ACCOUNT,     true, _n("Account"),      100, _FL, true },
+    { LIST_ID_PAYEE_STR,   true, _n("Payee"),        150, _FL, true },
+    { LIST_ID_STATUS,      true, _n("Status"),       _WH, _FC, true },
+    { LIST_ID_CATEGORY,    true, _n("Category"),     150, _FL, true },
+    { LIST_ID_TAGS,        true, _n("Tags"),         250, _FL, true },
+    { LIST_ID_WITHDRAWAL,  true, _n("Withdrawal"),   _WH, _FR, true },
+    { LIST_ID_DEPOSIT,     true, _n("Deposit"),      _WH, _FR, true },
+    { LIST_ID_BALANCE,     true, _n("Balance"),      _WH, _FR, true },
+    { LIST_ID_CREDIT,      true, _n("Credit"),       _WH, _FR, true },
+    { LIST_ID_NOTES,       true, _n("Notes"),        250, _FL, true },
+    { LIST_ID_DELETEDTIME, true, _n("Deleted On"),   _WA, _FL, true },
+    { LIST_ID_UDFC01,      false, "",                100, _FL, true },
+    { LIST_ID_UDFC02,      false, "",                100, _FL, true },
+    { LIST_ID_UDFC03,      false, "",                100, _FL, true },
+    { LIST_ID_UDFC04,      false, "",                100, _FL, true },
+    { LIST_ID_UDFC05,      false, "",                100, _FL, true },
+    { LIST_ID_UPDATEDTIME, true, _n("Last Updated"), _WA, _FL, true },
+    { LIST_ID_SN,          true, _n("SN"),           _WA, _FR, true },
+};
 
-    switch (m_real_columns[sortcol]) {
-    case TransactionListCtrl::COL_SN:
-        SortBy(Fused_Transaction::SorterByFUSEDTRANSSN(), ascend);
-        break;
-    case TransactionListCtrl::COL_ID:
-        SortBy(Fused_Transaction::SorterByFUSEDTRANSID(), ascend);
-        break;
-    case TransactionListCtrl::COL_NUMBER:
-        SortBy(Model_Checking::SorterByNUMBER(), ascend);
-        break;
-    case TransactionListCtrl::COL_ACCOUNT:
-        SortBy(SorterByACCOUNTNAME(), ascend);
-        break;
-    case TransactionListCtrl::COL_PAYEE_STR:
-        SortBy(SorterByPAYEENAME(), ascend);
-        break;
-    case TransactionListCtrl::COL_STATUS:
-        SortBy(SorterBySTATUS(), ascend);
-        break;
-    case TransactionListCtrl::COL_CATEGORY:
-        SortBy(SorterByCATEGNAME(), ascend);
-        break;
-    case TransactionListCtrl::COL_TAGS:
-        SortBy(Model_Checking::SorterByTAGNAMES(), ascend);
-        break;
-    case TransactionListCtrl::COL_WITHDRAWAL:
-        SortBy(Model_Checking::SorterByWITHDRAWAL(), ascend);
-        break;
-    case TransactionListCtrl::COL_DEPOSIT:
-        SortBy(Model_Checking::SorterByDEPOSIT(), ascend);
-        break;
-    case TransactionListCtrl::COL_BALANCE:
-        SortBy(Model_Checking::SorterByBALANCE(), ascend);
-        break;
-    case TransactionListCtrl::COL_CREDIT:
-        SortBy(Model_Checking::SorterByBALANCE(), ascend);
-        break;
-    case TransactionListCtrl::COL_NOTES:
-        SortBy(SorterByNOTES(), ascend);
-        break;
-    case TransactionListCtrl::COL_DATE:
-        SortBy(Model_Checking::SorterByTRANSDATE_DATE(), ascend);
-        break;
-    case TransactionListCtrl::COL_TIME:
-        SortBy(Model_Checking::SorterByTRANSDATE_TIME(), ascend);
-        break;
-    case TransactionListCtrl::COL_DELETEDTIME:
-        SortBy(SorterByDELETEDTIME(), ascend);
-        break;
-    case TransactionListCtrl::COL_UDFC01:
-        type = Model_CustomField::getUDFCType(ref_type, "UDFC01");
-        if (type == Model_CustomField::TYPE_ID_DECIMAL || type == Model_CustomField::TYPE_ID_INTEGER)
-            SortBy(SorterByUDFC01_val, ascend);
-        else
-            SortBy(SorterByUDFC01, ascend);
-        break;
-    case TransactionListCtrl::COL_UDFC02:
-        type = Model_CustomField::getUDFCType(ref_type, "UDFC02");
-        if (type == Model_CustomField::TYPE_ID_DECIMAL || type == Model_CustomField::TYPE_ID_INTEGER)
-            SortBy(SorterByUDFC02_val, ascend);
-        else
-            SortBy(SorterByUDFC02, ascend);
-        break;
-    case TransactionListCtrl::COL_UDFC03:
-        type = Model_CustomField::getUDFCType(ref_type, "UDFC03");
-        if (type == Model_CustomField::TYPE_ID_DECIMAL || type == Model_CustomField::TYPE_ID_INTEGER)
-            SortBy(SorterByUDFC03_val, ascend);
-        else
-            SortBy(SorterByUDFC03, ascend);
-        break;
-    case TransactionListCtrl::COL_UDFC04:
-        type = Model_CustomField::getUDFCType(ref_type, "UDFC04");
-        if (type == Model_CustomField::TYPE_ID_DECIMAL || type == Model_CustomField::TYPE_ID_INTEGER)
-            SortBy(SorterByUDFC04_val, ascend);
-        else
-            SortBy(SorterByUDFC04, ascend);
-        break;
-    case TransactionListCtrl::COL_UDFC05:
-        type = Model_CustomField::getUDFCType(ref_type, "UDFC05");
-        if (type == Model_CustomField::TYPE_ID_DECIMAL || type == Model_CustomField::TYPE_ID_INTEGER)
-            SortBy(SorterByUDFC05_val, ascend);
-        else
-            SortBy(SorterByUDFC05, ascend);
-        break;
-    case TransactionListCtrl::COL_UPDATEDTIME:
-        SortBy(SorterByLASTUPDATEDTIME(), ascend);
-        break;
-    default:
-        break;
-    }
-}
-
-void TransactionListCtrl::sortTable()
-{
-    if (m_trans.empty()) return;
-
-    SortTransactions(prev_g_sortcol, prev_g_asc);
-    SortTransactions(g_sortcol, g_asc);
-
-    wxString sortText = wxString::Format(
-        "%s: %s %s / %s %s", _("Sort Order"),
-        m_columns[g_sortcol].HEADER, g_asc ? L"\u25B2" : L"\u25BC",
-        m_columns[prev_g_sortcol].HEADER, prev_g_asc ? L"\u25B2" : L"\u25BC"
-    );
-    m_cp->m_header_sortOrder->SetLabelText(sortText);
-
-    if (m_real_columns[g_sortcol] == COL_SN)
-        m_cp->showTips(_("SN (Sequence Number) has the same order as Date/ID (or Date/Time/ID if Time is enabled)."));
-    else if (m_real_columns[g_sortcol] == COL_ID)
-        m_cp->showTips(_("ID (identification number) is increasing with the time of creation in the database."));
-    else if (m_real_columns[g_sortcol] == COL_BALANCE)
-        m_cp->showTips(_("Balance is calculated in the order of SN (Sequence Number)."));
-
-    RefreshItems(0, m_trans.size() - 1);
-}
+//----------------------------------------------------------------------------
 
 TransactionListCtrl::TransactionListCtrl(
     mmCheckingPanel *cp,
@@ -294,8 +193,7 @@
     m_selectedForCopy.clear();
     mmThemeMetaColour(this, meta::COLOR_LISTPANEL);
 
-    const wxAcceleratorEntry entries[] =
-    {
+    const wxAcceleratorEntry entries[] = {
         wxAcceleratorEntry(wxACCEL_CTRL, 'A', MENU_ON_SELECT_ALL),
         wxAcceleratorEntry(wxACCEL_CTRL, 'C', MENU_ON_COPY_TRANSACTION),
         wxAcceleratorEntry(wxACCEL_CTRL, 'V', MENU_ON_PASTE_TRANSACTION),
@@ -308,25 +206,12 @@
         wxAcceleratorEntry(wxACCEL_CTRL, '6', MENU_ON_SET_UDC6),
         wxAcceleratorEntry(wxACCEL_CTRL, '7', MENU_ON_SET_UDC7)
     };
-
     wxAcceleratorTable tab(sizeof(entries) / sizeof(*entries), entries);
     SetAcceleratorTable(tab);
 
-    // V2 used as now maps to real column names and this resets everything to default
-    // to avoid strange column widths when this code version is first
-    // TODO: isDeletedTrans(), isGroup()
-    m_col_width = m_cp->isAllTrans() ? "ALLTRANS_COLV2%d_WIDTH" : "CHECK2_COLV2%d_WIDTH";
-    if (m_cp->isAllTrans()) {
-        m_col_idstr = "ALLTRANS";
-    }
-    else if (m_cp->m_account) {
-        m_col_idstr = m_cp->m_account->ACCOUNTTYPE.Upper();
-        m_col_idstr.Replace(" ", "_");
-    }
-
-    resetColumns();
+    setColumnsInfo();
+    createColumns();
 
-    m_default_sort_column = COL_def_sort;
     m_today = Option::instance().UseTransDateTime() ?
         wxDateTime::Now().FormatISOCombined() :
         wxDateTime(23, 59, 59, 999).FormatISOCombined();
@@ -334,151 +219,428 @@
     SetSingleStyle(wxLC_SINGLE_SEL, false);
 }
 
-void TransactionListCtrl::resetColumns()
+TransactionListCtrl::~TransactionListCtrl()
+{}
+
+//----------------------------------------------------------------------------
+
+void TransactionListCtrl::setColumnsInfo()
 {
-    m_columns.clear();
-    m_real_columns.clear();
-    m_columns.push_back(PANEL_COLUMN(" ", 25, wxLIST_FORMAT_CENTER, false));
-    m_real_columns.push_back(COL_IMGSTATUS);
-    m_columns.push_back(PANEL_COLUMN(_("SN"), wxLIST_AUTOSIZE, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(COL_SN);
-    m_columns.push_back(PANEL_COLUMN(_("ID"), wxLIST_AUTOSIZE, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(COL_ID);
-    m_columns.push_back(PANEL_COLUMN(_("Date"), 112, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(COL_DATE);
-    if (Option::instance().UseTransDateTime()) {
-        m_columns.push_back(PANEL_COLUMN(_("Time"), 70, wxLIST_FORMAT_LEFT, true));
-        m_real_columns.push_back(COL_TIME);
-    }
-    m_columns.push_back(PANEL_COLUMN(_("Number"), 70, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(COL_NUMBER);
-    if (!m_cp->isAccount()) {
-        m_columns.push_back(PANEL_COLUMN(_("Account"), 100, wxLIST_FORMAT_LEFT, true));
-        m_real_columns.push_back(COL_ACCOUNT);
-    }
-    m_columns.push_back(PANEL_COLUMN(_("Payee"), 150, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(COL_PAYEE_STR);
-    m_columns.push_back(PANEL_COLUMN(_("Status"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_CENTER, true));
-    m_real_columns.push_back(COL_STATUS);
-    m_columns.push_back(PANEL_COLUMN(_("Category"), 150, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(COL_CATEGORY);
-    m_columns.push_back(PANEL_COLUMN(_("Tags"), 250, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(COL_TAGS);
-    m_columns.push_back(PANEL_COLUMN(_("Withdrawal"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(COL_WITHDRAWAL);
-    m_columns.push_back(PANEL_COLUMN(_("Deposit"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(COL_DEPOSIT);
-    if (m_cp->isAccount()) {
-        m_columns.push_back(PANEL_COLUMN(_("Balance"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-        m_real_columns.push_back(COL_BALANCE);
-        if (m_cp->m_account->CREDITLIMIT != 0) {
-            m_columns.push_back(PANEL_COLUMN(_("Credit"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-            m_real_columns.push_back(COL_CREDIT);
-        }
-    }
-    m_columns.push_back(PANEL_COLUMN(_("Notes"), 250, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(COL_NOTES);
     if (m_cp->isDeletedTrans()) {
-        m_columns.push_back(PANEL_COLUMN(_("Deleted On"), wxLIST_AUTOSIZE, wxLIST_FORMAT_LEFT, true));
-        m_real_columns.push_back(COL_DELETEDTIME);
+        m_setting_name = "DELETED";
+        o_col_order_prefix = "ALLTRANS";
+        o_col_width_prefix = "ALLTRANS_COLV2";
+        o_sort_prefix = "DELETED";
+    }
+    else if (m_cp->isAccount()) {
+        m_setting_name = "TRANS1";
+        // note: migrate from CHECKING_COLUMNORDER for all account types
+        o_col_order_prefix = "CHECKING";
+        o_col_width_prefix = "CHECK2_COLV2";
+        o_sort_prefix = "CHECK";
+    }
+    else {
+        m_setting_name = "TRANS2";
+        o_col_order_prefix = "ALLTRANS";
+        o_col_width_prefix = "ALLTRANS_COLV2";
+        // note: MULTI_{SORT_COL,ASC}*` are ignored (not migrated)
+        o_sort_prefix = "ALLTRANS";
+    }
+
+    m_col_info_id = LIST_INFO;
+    m_col_disabled_id.clear();
+    m_col_id_nr.clear();
+
+    if (!Option::instance().UseTransDateTime())
+        m_col_disabled_id.insert(LIST_ID_TIME);
+    if (m_cp->isAccount() && m_cp->m_account->CREDITLIMIT == 0)
+        m_col_disabled_id.insert(LIST_ID_CREDIT);
+
+    m_col_id_nr.push_back(LIST_ID_ICON);
+    m_col_id_nr.push_back(LIST_ID_SN);
+    m_col_id_nr.push_back(LIST_ID_ID);
+    m_col_id_nr.push_back(LIST_ID_DATE);
+    m_col_id_nr.push_back(LIST_ID_TIME);
+    m_col_id_nr.push_back(LIST_ID_NUMBER);
+    if (!m_cp->isAccount())
+        m_col_id_nr.push_back(LIST_ID_ACCOUNT);
+    m_col_id_nr.push_back(LIST_ID_PAYEE_STR);
+    m_col_id_nr.push_back(LIST_ID_STATUS);
+    m_col_id_nr.push_back(LIST_ID_CATEGORY);
+    m_col_id_nr.push_back(LIST_ID_TAGS);
+    m_col_id_nr.push_back(LIST_ID_WITHDRAWAL);
+    m_col_id_nr.push_back(LIST_ID_DEPOSIT);
+    if (m_cp->isAccount()) {
+        m_col_id_nr.push_back(LIST_ID_BALANCE);
+        m_col_id_nr.push_back(LIST_ID_CREDIT);
     }
+    m_col_id_nr.push_back(LIST_ID_NOTES);
+    if (m_cp->isDeletedTrans())
+        m_col_id_nr.push_back(LIST_ID_DELETEDTIME);
 
-    int i = COL_UDFC01;
-    const auto& ref_type = Model_Attachment::REFTYPE_STR_TRANSACTION;
+    const auto& ref_type = Model_Checking::refTypeName;
+    int col_id = LIST_ID_UDFC01;
     for (const auto& udfc_entry : Model_CustomField::UDFC_FIELDS()) {
+        if (col_id > LIST_ID_UDFC05) break;
         if (udfc_entry.empty()) continue;
+
         const auto& name = Model_CustomField::getUDFCName(ref_type, udfc_entry);
         if (!name.IsEmpty() && name != udfc_entry) {
+            m_col_info_id[col_id].header = name;
             const auto& type = Model_CustomField::getUDFCType(ref_type, udfc_entry);
-            int align;
             if (type == Model_CustomField::TYPE_ID_DECIMAL || type == Model_CustomField::TYPE_ID_INTEGER)
-                align = wxLIST_FORMAT_RIGHT;
+                m_col_info_id[col_id].format = _FR;
             else if (type == Model_CustomField::TYPE_ID_BOOLEAN)
-                align = wxLIST_FORMAT_CENTER;
-            else
-                align = wxLIST_FORMAT_LEFT;
-            m_columns.push_back(PANEL_COLUMN(name, 100, align, true));
-            m_real_columns.push_back(static_cast<EColumn>(i));
+                m_col_info_id[col_id].format = _FC;
+            m_col_id_nr.push_back(col_id);
+        }
+        col_id++;
+    }
+
+    m_col_id_nr.push_back(LIST_ID_UPDATEDTIME);
+
+    m_sort_col_id = { LIST_ID_DATE, LIST_ID_ID };
+}
+
+int TransactionListCtrl::getSortIcon(bool asc) const
+{
+    return asc ? mmCheckingPanel::ICON_DESC : mmCheckingPanel::ICON_ASC;
+}
+
+void TransactionListCtrl::refreshVisualList(bool filter)
+{
+    wxLogDebug("refreshVisualList: %i selected, filter: %d", GetSelectedItemCount(), filter);
+
+    // Grab the selected transactions unless we have freshly pasted transactions in which case use them
+    if (m_pasted_id.empty()) {
+        findSelectedTransactions();
+    }
+    else {
+        m_selected_id.clear();
+        m_selected_id.insert(std::end(m_selected_id), std::begin(m_pasted_id), std::end(m_pasted_id));
+        m_pasted_id.clear();    // Now clear them
+    }
+
+    m_today = Option::instance().UseTransDateTime() ?
+        wxDateTime::Now().FormatISOCombined() :
+        wxDateTime(23, 59, 59, 999).FormatISOCombined();
+    this->SetEvtHandlerEnabled(false);
+    Hide();
+
+    if (filter)
+        m_cp->filterList();
+    SetItemCount(m_trans.size());
+    Show();
+    sortList();
+    markSelectedTransaction();
+
+    long i = static_cast<long>(m_trans.size());
+    if (m_topItemIndex > i || m_topItemIndex < 0)
+        m_topItemIndex = getSortAsc(0) ? i - 1 : 0;
+
+    i = 0;
+    for(const auto& entry : m_trans) {
+        int64 id = !entry.m_repeat_num ? entry.TRANSID : entry.m_bdid;
+        for (const auto& item : m_selected_id) {
+            if (item.first == id && item.second == entry.m_repeat_num) {
+                SetItemState(i, wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED);
+                SetItemState(i, wxLIST_STATE_FOCUSED, wxLIST_STATE_FOCUSED);
+                EnsureVisible(i);
+            }
         }
         i++;
     }
-    m_columns.push_back(PANEL_COLUMN(_("Last Updated"), wxLIST_AUTOSIZE, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(COL_UPDATEDTIME);
+    findSelectedTransactions();
+
+    if (m_topItemIndex >= 0 && m_topItemIndex < i && m_selected_id.empty())
+        EnsureVisible(m_topItemIndex);
+
+    m_cp->updateHeader();
+    setExtraTransactionData(GetSelectedItemCount() == 1);
+    this->SetEvtHandlerEnabled(true);
+    Refresh();
+    Update();
+    SetFocus();
+}
+
+void TransactionListCtrl::sortList()
+{
+    if (m_trans.empty()) return;
+
+    sortTransactions(getSortColId(1), getSortAsc(1));
+    sortTransactions(getSortColId(0), getSortAsc(0));
+
+    wxString sortText = wxString::Format(
+        "%s:  %s %s / %s %s", _t("Sorted by"),
+        getColHeader(getSortColId(0), true), getSortAsc(0) ? L"\u25B2" : L"\u25BC",
+        getColHeader(getSortColId(1), true), getSortAsc(1) ? L"\u25B2" : L"\u25BC"
+    );
+    m_cp->m_header_sortOrder->SetLabelText(sortText);
+
+    if (getSortColId(0) == LIST_ID_SN)
+        m_cp->showTips(_t("SN (Sequence Number) has the same order as Date/ID (or Date/Time/ID if Time is enabled)."));
+    else if (getSortColId(0) == LIST_ID_ID)
+        m_cp->showTips(_t("ID (identification number) is increasing with the time of creation in the database."));
+    else if (getSortColId(0) == LIST_ID_BALANCE)
+        m_cp->showTips(_t("Balance is calculated in the order of SN (Sequence Number)."));
 
-    CreateColumns();
+    RefreshItems(0, m_trans.size() - 1);
 }
 
-TransactionListCtrl::~TransactionListCtrl()
-{}
+template<class Compare>
+void TransactionListCtrl::sortBy(Compare comp, bool ascend)
+{
+    if (ascend)
+        std::stable_sort(this->m_trans.begin(), this->m_trans.end(), comp);
+    else
+        std::stable_sort(this->m_trans.rbegin(), this->m_trans.rend(), comp);
+}
 
-void TransactionListCtrl::setExtraTransactionData(const bool single)
+void TransactionListCtrl::sortTransactions(int col_id, bool ascend)
 {
-    int repeat_num = 0;
-    bool isForeign = false;
-    if (single) {
-        Fused_Transaction::IdRepeat id = m_selected_id[0];
-        Fused_Transaction::Data tran = !id.second ?
-            Fused_Transaction::Data(*Model_Checking::instance().get(id.first)) :
-            Fused_Transaction::Data(*Model_Billsdeposits::instance().get(id.first));
-        if (Model_Checking::foreignTransaction(tran))
-            isForeign = true;
-        repeat_num = id.second;
+    const auto& ref_type = Model_Checking::refTypeName;
+    Model_CustomField::TYPE_ID type;
+
+    switch (col_id) {
+    case TransactionListCtrl::LIST_ID_SN:
+        sortBy(Fused_Transaction::SorterByFUSEDTRANSSN(), ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_ID:
+        sortBy(Fused_Transaction::SorterByFUSEDTRANSID(), ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_NUMBER:
+        sortBy(Model_Checking::SorterByNUMBER(), ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_ACCOUNT:
+        sortBy(SorterByACCOUNTNAME(), ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_PAYEE_STR:
+        sortBy(SorterByPAYEENAME(), ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_STATUS:
+        sortBy(SorterBySTATUS(), ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_CATEGORY:
+        sortBy(SorterByCATEGNAME(), ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_TAGS:
+        sortBy(Model_Checking::SorterByTAGNAMES(), ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_WITHDRAWAL:
+        sortBy(Model_Checking::SorterByWITHDRAWAL(), ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_DEPOSIT:
+        sortBy(Model_Checking::SorterByDEPOSIT(), ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_BALANCE:
+        sortBy(Model_Checking::SorterByBALANCE(), ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_CREDIT:
+        sortBy(Model_Checking::SorterByBALANCE(), ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_NOTES:
+        sortBy(SorterByNOTES(), ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_DATE:
+        sortBy(Model_Checking::SorterByTRANSDATE_DATE(), ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_TIME:
+        sortBy(Model_Checking::SorterByTRANSDATE_TIME(), ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_DELETEDTIME:
+        sortBy(SorterByDELETEDTIME(), ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_UDFC01:
+        type = Model_CustomField::getUDFCType(ref_type, "UDFC01");
+        if (type == Model_CustomField::TYPE_ID_DECIMAL || type == Model_CustomField::TYPE_ID_INTEGER)
+            sortBy(SorterByUDFC01_val, ascend);
+        else
+            sortBy(SorterByUDFC01, ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_UDFC02:
+        type = Model_CustomField::getUDFCType(ref_type, "UDFC02");
+        if (type == Model_CustomField::TYPE_ID_DECIMAL || type == Model_CustomField::TYPE_ID_INTEGER)
+            sortBy(SorterByUDFC02_val, ascend);
+        else
+            sortBy(SorterByUDFC02, ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_UDFC03:
+        type = Model_CustomField::getUDFCType(ref_type, "UDFC03");
+        if (type == Model_CustomField::TYPE_ID_DECIMAL || type == Model_CustomField::TYPE_ID_INTEGER)
+            sortBy(SorterByUDFC03_val, ascend);
+        else
+            sortBy(SorterByUDFC03, ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_UDFC04:
+        type = Model_CustomField::getUDFCType(ref_type, "UDFC04");
+        if (type == Model_CustomField::TYPE_ID_DECIMAL || type == Model_CustomField::TYPE_ID_INTEGER)
+            sortBy(SorterByUDFC04_val, ascend);
+        else
+            sortBy(SorterByUDFC04, ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_UDFC05:
+        type = Model_CustomField::getUDFCType(ref_type, "UDFC05");
+        if (type == Model_CustomField::TYPE_ID_DECIMAL || type == Model_CustomField::TYPE_ID_INTEGER)
+            sortBy(SorterByUDFC05_val, ascend);
+        else
+            sortBy(SorterByUDFC05, ascend);
+        break;
+    case TransactionListCtrl::LIST_ID_UPDATEDTIME:
+        sortBy(SorterByLASTUPDATEDTIME(), ascend);
+        break;
+    default:
+        break;
     }
-    m_cp->updateExtraTransactionData(single, repeat_num, isForeign);
 }
+
 //----------------------------------------------------------------------------
 
-void TransactionListCtrl::OnListItemSelected(wxListEvent&)
+wxString TransactionListCtrl::OnGetItemText(long item, long col_nr) const
 {
-    wxLogDebug("OnListItemSelected: %i selected", GetSelectedItemCount());
-    FindSelectedTransactions();
-    setExtraTransactionData(GetSelectedItemCount() == 1);
+    return getItem(item, getColId_Nr(static_cast<int>(col_nr)));
 }
 
-void TransactionListCtrl::OnListItemDeSelected(wxListEvent&)
+// Returns the icon to be shown for each transaction for the required column
+int TransactionListCtrl::OnGetItemColumnImage(long item, long col_nr) const
 {
-    wxLogDebug("OnListItemDeSelected: %i selected", GetSelectedItemCount());
-    FindSelectedTransactions();
-    setExtraTransactionData(GetSelectedItemCount() == 1);
+    if (m_trans.empty())
+        return -1;
+
+    int col_id = getColId_Nr(static_cast<int>(col_nr));
+    if (col_id != LIST_ID_ICON)
+        return -1;
+
+    wxString status = getItem(item, LIST_ID_STATUS);
+    if (status.length() > 1) status = status.Mid(2, 1);
+
+    if (status == Model_Checking::STATUS_KEY_FOLLOWUP)
+        return mmCheckingPanel::ICON_FOLLOWUP;
+    else if (status == Model_Checking::STATUS_KEY_RECONCILED)
+        return mmCheckingPanel::ICON_RECONCILED;
+    else if (status == Model_Checking::STATUS_KEY_VOID)
+        return mmCheckingPanel::ICON_VOID;
+    else if (status == Model_Checking::STATUS_KEY_DUPLICATE)
+        return mmCheckingPanel::ICON_DUPLICATE;
+    else
+        return mmCheckingPanel::ICON_UNRECONCILED;
 }
 
-void TransactionListCtrl::OnListItemFocused(wxListEvent& WXUNUSED(event))
+// Failed wxASSERT will hang application if active modal dialog presents on screen.
+// Assertion's message box will be hidden until you press tab to activate one.
+wxListItemAttr* TransactionListCtrl::OnGetItemAttr(long item) const
 {
-    wxLogDebug("OnListItemFocused: %i selected", GetSelectedItemCount());
-    FindSelectedTransactions();
-    setExtraTransactionData(GetSelectedItemCount() == 1);
+    if (item < 0 || item >= static_cast<int>(m_trans.size())) return 0;
+
+    wxString strDate = Model_Checking::TRANSDATE(m_trans[item]).FormatISOCombined();
+    bool in_the_future = (strDate > m_today);
+
+    // apply alternating background pattern
+    int user_color_id = m_trans[item].COLOR.GetValue();
+    if (user_color_id < 0) user_color_id = 0;
+    else if (user_color_id > 7) user_color_id = 0;
+
+    if (user_color_id == 0) {
+        if (in_the_future) {
+            return (item % 2 ? m_attr3.get() : m_attr4.get());
+        }
+        return (item % 2 ? m_attr1.get() : m_attr2.get());
+    }
+
+    switch (user_color_id) {
+    case 1: return m_attr11.get();
+    case 2: return m_attr12.get();
+    case 3: return m_attr13.get();
+    case 4: return m_attr14.get();
+    case 5: return m_attr15.get();
+    case 6: return m_attr16.get();
+    case 7: return m_attr17.get();
+    }
+    return (item % 2 ? m_attr1.get() : m_attr2.get());
 }
 
-void TransactionListCtrl::OnListLeftClick(wxMouseEvent& event)
+void TransactionListCtrl::OnColClick(wxListEvent& event)
 {
-    wxLogDebug("OnListLeftClick: %i selected", GetSelectedItemCount());
-    event.Skip();
+    findSelectedTransactions();
+    int col_nr = (event.GetId() == MENU_HEADER_SORT) ?  m_sel_col_nr : event.GetColumn();
+    if (!isValidColNr(col_nr))
+        return;
+    int col_id = getColId_Nr(col_nr);
+    if (!m_col_info_id[col_id].sortable)
+        return;
+
+    if (m_sort_col_id[0] != col_id) {
+        m_sort_col_id[1] = m_sort_col_id[0];
+        m_sort_asc[1] = m_sort_asc[0];
+        m_sort_col_id[0] = col_id;
+    }
+    else if (event.GetId() != MENU_HEADER_SORT) {
+        m_sort_asc[0] = !m_sort_asc[0];
+    }
+
+    // #7080: Decouple DATE and ID, since SN may be used instead of ID.
+    /*
+        // If primary is DATE, then set secondary to ID in the same direction
+        if (getSortColId(0) == LIST_ID_DATE) {
+            m_sort_col_id[1] = LIST_ID_ID;
+            m_sort_asc[1] = m_sort_asc[0];
+        }
+    */
+
+    updateSortIcon();
+    savePreferences();
+
+    refreshVisualList(false);
 }
 
-void TransactionListCtrl::OnListItemActivated(wxListEvent& /*event*/)
+//----------------------------------------------------------------------------
+
+// If any of these keys are encountered, the search for the event handler
+// should continue as these keys may be processed by the operating system.
+void TransactionListCtrl::onChar(wxKeyEvent& event)
 {
-    wxLogDebug("OnListItemActivated: %i selected", GetSelectedItemCount());
-    wxCommandEvent evt(wxEVT_COMMAND_MENU_SELECTED, MENU_TREEPOPUP_EDIT2);
-    AddPendingEvent(evt);
+
+    int key = event.GetKeyCode();
+    if (key == WXK_ALT ||
+        key == WXK_COMMAND ||
+        key == WXK_UP ||
+        key == WXK_DOWN ||
+        key == WXK_LEFT ||
+        key == WXK_RIGHT ||
+        key == WXK_HOME ||
+        key == WXK_END ||
+        key == WXK_PAGEUP ||
+        key == WXK_PAGEDOWN ||
+        key == WXK_NUMPAD_UP ||
+        key == WXK_NUMPAD_DOWN ||
+        key == WXK_NUMPAD_LEFT ||
+        key == WXK_NUMPAD_RIGHT ||
+        key == WXK_NUMPAD_PAGEDOWN ||
+        key == WXK_NUMPAD_PAGEUP ||
+        key == WXK_NUMPAD_HOME ||
+        key == WXK_NUMPAD_END ||
+        key == WXK_DELETE ||
+        key == WXK_NUMPAD_DELETE ||
+        key == WXK_TAB ||
+        key == WXK_RETURN ||
+        key == WXK_NUMPAD_ENTER ||
+        key == WXK_SPACE ||
+        key == WXK_NUMPAD_SPACE
+    ) {
+        event.Skip();
+    }
 }
 
-int TransactionListCtrl::getColumnFromPosition(int xPos)
+void TransactionListCtrl::onListLeftClick(wxMouseEvent& event)
 {
-    int column = 0;
-    int x = -GetScrollPos(wxHORIZONTAL);
-    for (column = 0; column < GetColumnCount(); column++) {
-        x += GetColumnWidth(column);
-        if (x >= xPos) break;
-    }
-    if (!(column < GetColumnCount())) return -1;
-    return column;
+    wxLogDebug("onListLeftClick: %i selected", GetSelectedItemCount());
+    event.Skip();
 }
 
-void TransactionListCtrl::OnMouseRightClick(wxMouseEvent& event)
+void TransactionListCtrl::onMouseRightClick(wxMouseEvent& event)
 {
     rightClickFilter_ = "";
     copyText_ = "";
-    wxLogDebug("OnMouseRightClick: %i selected", GetSelectedItemCount());
+    wxLogDebug("onMouseRightClick: %i selected", GetSelectedItemCount());
     int selected = GetSelectedItemCount();
 
     bool is_nothing_selected = (selected < 1);
@@ -501,14 +663,14 @@
     }
     wxMenu menu;
     if (!m_cp->isDeletedTrans()) {
-        menu.Append(MENU_TREEPOPUP_WITHDRAWAL, _u("New &Withdrawal…"));
-        menu.Append(MENU_TREEPOPUP_DEPOSIT, _u("New &Deposit…"));
+        menu.Append(MENU_TREEPOPUP_WITHDRAWAL, _tu("New &Withdrawal…"));
+        menu.Append(MENU_TREEPOPUP_DEPOSIT, _tu("New &Deposit…"));
         if (Model_Account::instance().all_checking_account_names(true).size() > 1)
-            menu.Append(MENU_TREEPOPUP_TRANSFER, _u("New &Transfer…"));
+            menu.Append(MENU_TREEPOPUP_TRANSFER, _tu("New &Transfer…"));
 
         menu.AppendSeparator();
 
-        menu.Append(MENU_TREEPOPUP_EDIT2, wxPLURAL_U8("&Edit Transaction…", "&Edit Transactions…", selected));
+        menu.Append(MENU_TREEPOPUP_EDIT2, wxPLURAL("&Edit Transaction…", "&Edit Transactions…", selected));
         if (is_nothing_selected)
             menu.Enable(MENU_TREEPOPUP_EDIT2, false);
 
@@ -521,7 +683,7 @@
             menu.Append(
                 MENU_ON_PASTE_TRANSACTION,
                 wxString::Format(
-                    wxPLURAL(_("&Paste Transaction"), _("&Paste Transactions (%d)"),
+                    wxPLURAL("&Paste Transaction", "&Paste Transactions (%d)",
                         (toPaste < 2) ? 1 : toPaste
                     ),
                     toPaste
@@ -531,31 +693,31 @@
                 menu.Enable(MENU_ON_PASTE_TRANSACTION, false);
         }
 
-        menu.Append(MENU_ON_DUPLICATE_TRANSACTION, _u("D&uplicate Transaction…"));
+        menu.Append(MENU_ON_DUPLICATE_TRANSACTION, _tu("D&uplicate Transaction…"));
         if (is_nothing_selected || multiselect)
             menu.Enable(MENU_ON_DUPLICATE_TRANSACTION, false);
 
-        menu.Append(MENU_TREEPOPUP_MOVE2, wxPLURAL_U8("&Move Transaction…", "&Move Transactions…", selected));
+        menu.Append(MENU_TREEPOPUP_MOVE2, wxPLURAL("&Move Transaction…", "&Move Transactions…", selected));
         if (is_nothing_selected || type_transfer || (Model_Account::money_accounts_num() < 2) || is_foreign)
             menu.Enable(MENU_TREEPOPUP_MOVE2, false);
 
         menu.AppendSeparator();
 
-        menu.Append(MENU_TREEPOPUP_VIEW_OTHER_ACCOUNT, _("&View In Other Account"));
+        menu.Append(MENU_TREEPOPUP_VIEW_OTHER_ACCOUNT, _t("&View In Other Account"));
         if (!m_cp->isAccount() || is_nothing_selected || multiselect || is_foreign || !type_transfer)
             menu.Enable(MENU_TREEPOPUP_VIEW_OTHER_ACCOUNT, false);
 
-        menu.Append(MENU_TREEPOPUP_VIEW_SPLIT_CATEGORIES, _("&View Split Categories"));
+        menu.Append(MENU_TREEPOPUP_VIEW_SPLIT_CATEGORIES, _t("&View Split Categories"));
         if (is_nothing_selected || multiselect || have_category)
             menu.Enable(MENU_TREEPOPUP_VIEW_SPLIT_CATEGORIES, false);
 
-        menu.Append(MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS, _u("&Organize Attachments…"));
+        menu.Append(MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS, _tu("&Organize Attachments…"));
         if (is_nothing_selected || multiselect)
             menu.Enable(MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS, false);
 
         menu.Append(
             MENU_TREEPOPUP_CREATE_REOCCURANCE,
-            _u("Create Scheduled T&ransaction…")
+            _tu("Create Scheduled T&ransaction…")
         );
         if (is_nothing_selected || multiselect)
             menu.Enable(MENU_TREEPOPUP_CREATE_REOCCURANCE, false);
@@ -563,65 +725,66 @@
     else {
         menu.Append(
             MENU_TREEPOPUP_RESTORE,
-            wxPLURAL_U8("&Restore selected transaction…", "&Restore selected transactions…", selected)
+            wxPLURAL("&Restore selected transaction…", "&Restore selected transactions…", selected)
         );
         if (is_nothing_selected)
             menu.Enable(MENU_TREEPOPUP_RESTORE, false);
         menu.Append(
             MENU_TREEPOPUP_RESTORE_VIEWED,
-            _u("Restore &all transactions in current view…")
+            _tu("Restore &all transactions in current view…")
         );
     }
     bool columnIsAmount = false;
-    unsigned long column = getColumnFromPosition(event.GetX());
+    int col_nr = getColNr_X(event.GetX());
     int flags;
     unsigned long row = HitTest(event.GetPosition(), flags);
-    if (row < m_trans.size() && (flags & wxLIST_HITTEST_ONITEM) && column < m_columns.size()) {
+    if (row < m_trans.size() && (flags & wxLIST_HITTEST_ONITEM) && col_nr < getColNrSize()) {
+        int col_id = getColId_Nr(col_nr);
         wxString menuItemText;
-        wxString refType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+        wxString refType = Model_Checking::refTypeName;
         wxDateTime datetime;
         wxString dateFormat = Option::instance().getDateFormat();
 
-        switch (m_real_columns[column]) {
-        case COL_SN:
+        switch (col_id) {
+        case LIST_ID_SN:
             copyText_ = m_trans[row].displaySN;
             break;
-        case COL_ID:
+        case LIST_ID_ID:
             copyText_ = m_trans[row].displayID;
             break;
-        case COL_DATE: {
+        case LIST_ID_DATE: {
             copyText_ = menuItemText = mmGetDateTimeForDisplay(m_trans[row].TRANSDATE);
             wxString strDate = Model_Checking::TRANSDATE(m_trans[row]).FormatISODate();
             rightClickFilter_ = "{\n\"DATE1\": \"" + strDate + "\",\n\"DATE2\" : \"" + strDate + "T23:59:59" + "\"\n}";
             break;
         }
-        case COL_NUMBER:
+        case LIST_ID_NUMBER:
             copyText_ = menuItemText = m_trans[row].TRANSACTIONNUMBER;
             rightClickFilter_ = "{\n\"NUMBER\": \"" + menuItemText + "\"\n}";
             break;
-        case COL_ACCOUNT:
+        case LIST_ID_ACCOUNT:
             copyText_ = menuItemText = m_trans[row].ACCOUNTNAME;
             rightClickFilter_ = "{\n\"ACCOUNT\": [\n\"" + menuItemText + "\"\n]\n}";
             break;
-        case COL_PAYEE_STR:
+        case LIST_ID_PAYEE_STR:
             copyText_ = m_trans[row].PAYEENAME;
             if (!Model_Checking::is_transfer(m_trans[row].TRANSCODE)) {
                 menuItemText = m_trans[row].PAYEENAME;
                 rightClickFilter_ = "{\n\"PAYEE\": \"" + menuItemText + "\"\n}";
             }
             break;
-        case COL_STATUS:
-            copyText_ = menuItemText = Model_Checking::STATUS_STR[Model_Checking::status_id(m_trans[row].STATUS)];
+        case LIST_ID_STATUS:
+            copyText_ = menuItemText = Model_Checking::status_name(m_trans[row].STATUS);
             rightClickFilter_ = "{\n\"STATUS\": \"" + menuItemText + "\"\n}";
             break;
-        case COL_CATEGORY:
+        case LIST_ID_CATEGORY:
             copyText_ = m_trans[row].CATEGNAME;
             if (!m_trans[row].has_split()) {
                 menuItemText = m_trans[row].CATEGNAME;
                 rightClickFilter_ = "{\n\"CATEGORY\": \"" + menuItemText + "\",\n\"SUBCATEGORYINCLUDE\": false\n}";
             }
             break;
-        case COL_TAGS:
+        case LIST_ID_TAGS:
             if (!m_trans[row].has_split() && m_trans[row].has_tags()) {
                 copyText_ = menuItemText = m_trans[row].TAGNAMES;
                 // build the tag filter json
@@ -631,7 +794,7 @@
                 rightClickFilter_ += "\n]\n}";
             }
             break;
-        case COL_WITHDRAWAL: {
+        case LIST_ID_WITHDRAWAL: {
             columnIsAmount = true;
             Model_Account::Data* account = Model_Account::instance().get(m_trans[row].ACCOUNTID_W);
             Model_Currency::Data* currency = account ? Model_Currency::instance().get(account->CURRENCYID) : nullptr;
@@ -642,7 +805,7 @@
             }
             break;
         }
-        case COL_DEPOSIT: {
+        case LIST_ID_DEPOSIT: {
             columnIsAmount = true;
             Model_Account::Data* account = Model_Account::instance().get(m_trans[row].ACCOUNTID_D);
             Model_Currency::Data* currency = account ? Model_Currency::instance().get(account->CURRENCYID) : nullptr;
@@ -653,46 +816,46 @@
             }
             break;
         }
-        case COL_BALANCE:
+        case LIST_ID_BALANCE:
             copyText_ = Model_Currency::toString(m_trans[row].ACCOUNT_BALANCE, m_cp->m_currency);
             break;
-        case COL_CREDIT:
+        case LIST_ID_CREDIT:
             copyText_ = Model_Currency::toString(
                 m_cp->m_account->CREDITLIMIT + m_trans[row].ACCOUNT_BALANCE,
                 m_cp->m_currency
             );
             break;
-        case COL_NOTES:
+        case LIST_ID_NOTES:
             copyText_ = menuItemText = m_trans[row].NOTES;
             rightClickFilter_ = "{\n\"NOTES\": \"" + menuItemText + "\"\n}";
             break;
-        case COL_DELETEDTIME:
-            datetime.ParseISOCombined(m_trans[row].DELETEDTIME);        
+        case LIST_ID_DELETEDTIME:
+            datetime.ParseISOCombined(m_trans[row].DELETEDTIME);
             if(datetime.IsValid())
                 copyText_ = mmGetDateTimeForDisplay(datetime.FromUTC().FormatISOCombined(), dateFormat + " %H:%M:%S");
             break;
-        case COL_UPDATEDTIME:
+        case LIST_ID_UPDATEDTIME:
             datetime.ParseISOCombined(m_trans[row].LASTUPDATEDTIME);
             if (datetime.IsValid())
                 copyText_ = mmGetDateTimeForDisplay(datetime.FromUTC().FormatISOCombined(), dateFormat + " %H:%M:%S");
             break;
-        case COL_UDFC01:
+        case LIST_ID_UDFC01:
             copyText_ = menuItemText = m_trans[row].UDFC_content[0];
             rightClickFilter_ = wxString::Format("{\n\"CUSTOM%lld\": \"" + menuItemText + "\"\n}", Model_CustomField::getUDFCID(refType, "UDFC01"));
             break;
-        case COL_UDFC02:
+        case LIST_ID_UDFC02:
             copyText_ = menuItemText = m_trans[row].UDFC_content[1];
             rightClickFilter_ = wxString::Format("{\n\"CUSTOM%lld\": \"" + menuItemText + "\"\n}", Model_CustomField::getUDFCID(refType, "UDFC02"));
             break;
-        case COL_UDFC03:
+        case LIST_ID_UDFC03:
             copyText_ = menuItemText = m_trans[row].UDFC_content[2];
             rightClickFilter_ = wxString::Format("{\n\"CUSTOM%lld\": \"" + menuItemText + "\"\n}", Model_CustomField::getUDFCID(refType, "UDFC03"));
             break;
-        case COL_UDFC04:
+        case LIST_ID_UDFC04:
             copyText_ = menuItemText = m_trans[row].UDFC_content[3];
             rightClickFilter_ = wxString::Format("{\n\"CUSTOM%lld\": \"" + menuItemText + "\"\n}", Model_CustomField::getUDFCID(refType, "UDFC04"));
             break;
-        case COL_UDFC05:
+        case LIST_ID_UDFC05:
             copyText_ = menuItemText = m_trans[row].UDFC_content[4];
             rightClickFilter_ = wxString::Format("{\n\"CUSTOM%lld\": \"" + menuItemText + "\"\n}", Model_CustomField::getUDFCID(refType, "UDFC05"));
             break;
@@ -706,13 +869,13 @@
                 if (menuItemText.length() > 30)
                     menuItemText = menuItemText.SubString(0, 30).Append(L"\u2026");
                 menu.Append(MENU_TREEPOPUP_FIND, wxString::Format(
-                    _("&Find all transactions with %s '%s'"),
-                    (columnIsAmount ? _("Amount") : m_columns[column].HEADER),
+                    _t("&Find all transactions with %s '%s'"),
+                    (columnIsAmount ? _t("Amount") : getColHeader(col_id, true)),
                     menuItemText
                 ));
             }
             if (!copyText_.IsEmpty())
-                menu.Append(MENU_TREEPOPUP_COPYTEXT, _("Cop&y Text to Clipboard"));
+                menu.Append(MENU_TREEPOPUP_COPYTEXT, _t("Cop&y Text to Clipboard"));
         }
     }
 
@@ -721,8 +884,8 @@
     subGlobalOpMenuDelete->Append(
         MENU_TREEPOPUP_DELETE2,
         !m_cp->isDeletedTrans() ?
-            wxPLURAL_U8("&Delete selected transaction…", "&Delete selected transactions…", selected) :
-            wxPLURAL_U8("&Permanently delete selected transaction…", "&Permanently delete selected transactions…", selected)
+            wxPLURAL("&Delete selected transaction…", "&Delete selected transactions…", selected) :
+            wxPLURAL("&Permanently delete selected transaction…", "&Permanently delete selected transactions…", selected)
     );
     if (is_nothing_selected)
         subGlobalOpMenuDelete->Enable(MENU_TREEPOPUP_DELETE2, false);
@@ -730,41 +893,41 @@
     subGlobalOpMenuDelete->Append(
         MENU_TREEPOPUP_DELETE_VIEWED,
         !m_cp->isDeletedTrans() ?
-            _u("Delete &all transactions in current view…") :
-            _u("Permanently delete &all transactions in current view…")
+            _tu("Delete &all transactions in current view…") :
+            _tu("Permanently delete &all transactions in current view…")
     );
     if (!m_cp->isDeletedTrans()) {
         subGlobalOpMenuDelete->Append(
             MENU_TREEPOPUP_DELETE_FLAGGED,
-            _u("Delete Viewed “&Follow Up” Transactions…")
+            _tu("Delete Viewed “&Follow Up” Transactions…")
         );
         subGlobalOpMenuDelete->Append(
             MENU_TREEPOPUP_DELETE_UNRECONCILED,
-            _u("Delete Viewed “&Unreconciled” Transactions…")
+            _tu("Delete Viewed “&Unreconciled” Transactions…")
         );
     }
-    menu.Append(MENU_TREEPOPUP_DELETE2, _("De&lete "), subGlobalOpMenuDelete);
+    menu.Append(MENU_TREEPOPUP_DELETE2, _t("De&lete "), subGlobalOpMenuDelete);
 
     if (!m_cp->isDeletedTrans()) {
         menu.AppendSeparator();
 
         wxMenu* subGlobalOpMenuMark = new wxMenu();
-        subGlobalOpMenuMark->Append(MENU_TREEPOPUP_MARKUNRECONCILED, _("&Unreconciled"));
+        subGlobalOpMenuMark->Append(MENU_TREEPOPUP_MARKUNRECONCILED, _t("&Unreconciled"));
         if (is_nothing_selected)
             subGlobalOpMenuMark->Enable(MENU_TREEPOPUP_MARKUNRECONCILED, false);
-        subGlobalOpMenuMark->Append(MENU_TREEPOPUP_MARKRECONCILED, _("&Reconciled"));
+        subGlobalOpMenuMark->Append(MENU_TREEPOPUP_MARKRECONCILED, _t("&Reconciled"));
         if (is_nothing_selected)
             subGlobalOpMenuMark->Enable(MENU_TREEPOPUP_MARKRECONCILED, false);
-        subGlobalOpMenuMark->Append(MENU_TREEPOPUP_MARKVOID, _("&Void"));
+        subGlobalOpMenuMark->Append(MENU_TREEPOPUP_MARKVOID, _t("&Void"));
         if (is_nothing_selected)
             subGlobalOpMenuMark->Enable(MENU_TREEPOPUP_MARKVOID, false);
-        subGlobalOpMenuMark->Append(MENU_TREEPOPUP_MARK_ADD_FLAG_FOLLOWUP, _("&Follow Up"));
+        subGlobalOpMenuMark->Append(MENU_TREEPOPUP_MARK_ADD_FLAG_FOLLOWUP, _t("&Follow Up"));
         if (is_nothing_selected)
             subGlobalOpMenuMark->Enable(MENU_TREEPOPUP_MARK_ADD_FLAG_FOLLOWUP, false);
-        subGlobalOpMenuMark->Append(MENU_TREEPOPUP_MARKDUPLICATE, _("D&uplicate"));
+        subGlobalOpMenuMark->Append(MENU_TREEPOPUP_MARKDUPLICATE, _t("D&uplicate"));
         if (is_nothing_selected)
             subGlobalOpMenuMark->Enable(MENU_TREEPOPUP_MARKDUPLICATE, false);
-        menu.AppendSubMenu(subGlobalOpMenuMark, _("Mar&k as"));
+        menu.AppendSubMenu(subGlobalOpMenuMark, _t("Mar&k as"));
 
         // Disable menu items not ment for foreign transactions
         if (is_foreign) {
@@ -776,436 +939,37 @@
     PopupMenu(&menu, event.GetPosition());
 }
 
-void TransactionListCtrl::findInAllTransactions(wxCommandEvent&) {
-    if (rightClickFilter_.IsEmpty())
-        return;
-    // save the filter as the "Advanced" filter for All Transactions
-    Model_Infotable::instance().Set("CHECK_FILTER_ID_ADV_-1", rightClickFilter_);
-    // set All Transactions to use the "Advanced" filter
-    Model_Infotable::instance().Set(
-        "CHECK_FILTER_ID_-1",
-        "{\n\"FILTER\": \"" + mmCheckingPanel::FILTER_STR_DIALOG + "\"\n}"
-    );
-    // Navigate to the All Transactions panel
-    wxTreeItemId currentId = m_cp->m_frame->GetNavTreeSelection();
-    m_cp->m_frame->setNavTreeSection(wxTRANSLATE("All Transactions"));
-    wxTreeItemId allTransactionsId = m_cp->m_frame->GetNavTreeSelection();
-    if (currentId.IsOk() && currentId == allTransactionsId) {
-        m_cp->m_trans_filter_dlg.reset(
-            new mmFilterTransactionsDialog(this, -1, false, rightClickFilter_)
-        );
-        m_cp->m_filter_id = mmCheckingPanel::FILTER_ID_DIALOG;
-        m_cp->updateFilterState();
-        refreshVisualList();
-    }
-    else
-        m_cp->m_frame->SetNavTreeSelection(m_cp->m_frame->GetNavTreeSelection());
-}
-
-void TransactionListCtrl::OnCopyText(wxCommandEvent&)
-{
-    if (!copyText_.IsEmpty()) {
-        if (wxTheClipboard->Open()) {
-            wxTheClipboard->SetData(new wxTextDataObject(copyText_));
-            wxTheClipboard->Close();
-        }
-    }
-}
-//----------------------------------------------------------------------------
-
-void TransactionListCtrl::OnMarkTransaction(wxCommandEvent& event)
-{
-    FindSelectedTransactions();
-    int evt = event.GetId();
-    //bool bRefreshRequired = false;
-    wxString org_status = "";
-    wxString status = "";
-    switch (evt) {
-    case MENU_TREEPOPUP_MARKRECONCILED:         status = Model_Checking::STATUS_KEY_RECONCILED; break;
-    case MENU_TREEPOPUP_MARKUNRECONCILED:       status = Model_Checking::STATUS_KEY_NONE; break;
-    case MENU_TREEPOPUP_MARKVOID:               status = Model_Checking::STATUS_KEY_VOID; break;
-    case MENU_TREEPOPUP_MARK_ADD_FLAG_FOLLOWUP: status = Model_Checking::STATUS_KEY_FOLLOWUP; break;
-    case MENU_TREEPOPUP_MARKDUPLICATE:          status = Model_Checking::STATUS_KEY_DUPLICATE; break;
-    default: wxASSERT(false);
-    }
-
-    Model_Checking::instance().Savepoint();
-
-    for (int row = 0; row < GetItemCount(); row++) {
-        if (GetItemState(row, wxLIST_STATE_SELECTED) == wxLIST_STATE_SELECTED) {
-            Model_Account::Data* account = Model_Account::instance().get(m_trans[row].ACCOUNTID);
-            const auto statement_date = Model_Account::DateOf(account->STATEMENTDATE).FormatISODate();
-            wxString strDate = Model_Checking::TRANSDATE(m_trans[row]).FormatISODate();
-            if (!Model_Account::BoolOf(account->STATEMENTLOCKED)
-                || strDate > statement_date
-            ) {
-                //bRefreshRequired |= (status == Model_Checking::STATUS_KEY_VOID) || (m_trans[row].STATUS == Model_Checking::STATUS_KEY_VOID);
-                if (!m_trans[row].m_repeat_num) {
-                    m_trans[row].STATUS = status;
-                    Model_Checking::instance().save(&m_trans[row]);
-                }
-            }
-        }
-    }
-
-    Model_Checking::instance().ReleaseSavepoint();
-
-    refreshVisualList();
-}
-//----------------------------------------------------------------------------
-
-void TransactionListCtrl::OnColClick(wxListEvent& event)
-{
-    FindSelectedTransactions();
-    int ColumnNr;
-    if (event.GetId() != MENU_HEADER_SORT)
-        ColumnNr = event.GetColumn();
-    else
-        ColumnNr = m_ColumnHeaderNbr;
-
-    if (0 > ColumnNr || ColumnNr >= COL_size || ColumnNr == COL_IMGSTATUS) return;
-
-    /* Clear previous column image */
-    if (m_sortCol != ColumnNr) {
-        setColumnImage(m_sortCol, -1);
-        prev_g_sortcol = g_sortcol;
-        prev_g_asc = m_asc;
-    }
-
-    if (g_sortcol == ColumnNr && event.GetId() != MENU_HEADER_SORT) {
-        m_asc = !m_asc; // toggle sort order
-    }
-    g_asc = m_asc;
-
-    m_sortCol = toEColumn(ColumnNr);
-    g_sortcol = m_sortCol;
-
-    // disabled: If primary sort is DATE then secondary is always ID in the same direction
-    // decouple DATE and ID, since SN may be used instead of ID (see #7080)
-    if (false && ColumnNr == COL_DATE) {
-        prev_g_sortcol = toEColumn(COL_ID);
-        prev_g_asc = m_asc;        
-    }
-    Model_Setting::instance().Set(wxString::Format("%s_ASC2", m_cp->m_sortSaveTitle), (prev_g_asc ? 1 : 0));
-    Model_Setting::instance().Set(wxString::Format("%s_SORT_COL2", m_cp->m_sortSaveTitle), prev_g_sortcol);
-    Model_Setting::instance().Set(wxString::Format("%s_ASC", m_cp->m_sortSaveTitle), (g_asc ? 1 : 0));
-    Model_Setting::instance().Set(wxString::Format("%s_SORT_COL", m_cp->m_sortSaveTitle), g_sortcol);
-
-    refreshVisualList(false);
-
-}
-//----------------------------------------------------------------------------
-
-void TransactionListCtrl::setColumnImage(EColumn col, int image)
-{
-    wxListItem item;
-    item.SetMask(wxLIST_MASK_IMAGE);
-    item.SetImage(image);
-
-    SetColumn(col, item);
-}
-//----------------------------------------------------------------------------
-
-wxString TransactionListCtrl::OnGetItemText(long item, long column) const
-{
-    return getItem(item, column);
-}
-//----------------------------------------------------------------------------
-
-/*
-    Returns the icon to be shown for each transaction for the required column
-*/
-int TransactionListCtrl::OnGetItemColumnImage(long item, long column) const
-{
-    if (m_trans.empty()) return -1;
-
-    int res = -1;
-    if (m_real_columns[static_cast<int>(column)] == COL_IMGSTATUS) {
-        wxString status = getItem(item, COL_STATUS, true);
-        if (status.length() > 1)
-            status = status.Mid(2, 1);
-        if (status == Model_Checking::STATUS_KEY_FOLLOWUP)
-            res = mmCheckingPanel::ICON_FOLLOWUP;
-        else if (status == Model_Checking::STATUS_KEY_RECONCILED)
-            res = mmCheckingPanel::ICON_RECONCILED;
-        else if (status == Model_Checking::STATUS_KEY_VOID)
-            res = mmCheckingPanel::ICON_VOID;
-        else if (status == Model_Checking::STATUS_KEY_DUPLICATE)
-            res = mmCheckingPanel::ICON_DUPLICATE;
-        else
-            res = mmCheckingPanel::ICON_UNRECONCILED;
-    }
-
-    return res;
-}
 //----------------------------------------------------------------------------
 
-/*
-    Failed wxASSERT will hang application if active modal dialog presents on screen.
-    Assertion's message box will be hidden until you press tab to activate one.
-*/
-wxListItemAttr* TransactionListCtrl::OnGetItemAttr(long item) const
-{
-    if (item < 0 || item >= static_cast<int>(m_trans.size())) return 0;
-
-    wxString strDate = Model_Checking::TRANSDATE(m_trans[item]).FormatISOCombined();
-    bool in_the_future = (strDate > m_today);
-
-    // apply alternating background pattern
-    int user_color_id = m_trans[item].COLOR.GetValue();
-    if (user_color_id < 0) user_color_id = 0;
-    else if (user_color_id > 7) user_color_id = 0;
-
-    if (user_color_id == 0) {
-        if (in_the_future) {
-            return (item % 2 ? m_attr3.get() : m_attr4.get());
-        }
-        return (item % 2 ? m_attr1.get() : m_attr2.get());
-    }
-
-    switch (user_color_id) {
-    case 1: return m_attr11.get();
-    case 2: return m_attr12.get();
-    case 3: return m_attr13.get();
-    case 4: return m_attr14.get();
-    case 5: return m_attr15.get();
-    case 6: return m_attr16.get();
-    case 7: return m_attr17.get();
-    }
-    return (item % 2 ? m_attr1.get() : m_attr2.get());
-}
-//----------------------------------------------------------------------------
-// If any of these keys are encountered, the search for the event handler
-// should continue as these keys may be processed by the operating system.
-void TransactionListCtrl::OnChar(wxKeyEvent& event)
+void TransactionListCtrl::onListItemActivated(wxListEvent& /*event*/)
 {
-
-    int key = event.GetKeyCode();
-    if (key == WXK_ALT ||
-        key == WXK_COMMAND ||
-        key == WXK_UP ||
-        key == WXK_DOWN ||
-        key == WXK_LEFT ||
-        key == WXK_RIGHT ||
-        key == WXK_HOME ||
-        key == WXK_END ||
-        key == WXK_PAGEUP ||
-        key == WXK_PAGEDOWN ||
-        key == WXK_NUMPAD_UP ||
-        key == WXK_NUMPAD_DOWN ||
-        key == WXK_NUMPAD_LEFT ||
-        key == WXK_NUMPAD_RIGHT ||
-        key == WXK_NUMPAD_PAGEDOWN ||
-        key == WXK_NUMPAD_PAGEUP ||
-        key == WXK_NUMPAD_HOME ||
-        key == WXK_NUMPAD_END ||
-        key == WXK_DELETE ||
-        key == WXK_NUMPAD_DELETE ||
-        key == WXK_TAB ||
-        key == WXK_RETURN ||
-        key == WXK_NUMPAD_ENTER ||
-        key == WXK_SPACE ||
-        key == WXK_NUMPAD_SPACE
-    ) {
-        event.Skip();
-    }
+    wxLogDebug("onListItemActivated: %i selected", GetSelectedItemCount());
+    wxCommandEvent evt(wxEVT_COMMAND_MENU_SELECTED, MENU_TREEPOPUP_EDIT2);
+    AddPendingEvent(evt);
 }
-//----------------------------------------------------------------------------
 
-void TransactionListCtrl::OnSelectAll(wxCommandEvent& WXUNUSED(event))
+void TransactionListCtrl::onListItemSelected(wxListEvent&)
 {
-    m_selected_id.clear();
-    SetEvtHandlerEnabled(false);
-    std::set<Fused_Transaction::IdRepeat> unique_ids;
-    for (int row = 0; row < GetItemCount(); row++) {
-        SetItemState(row, wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED);
-        const auto& tran = m_trans[row];
-        Fused_Transaction::IdRepeat id = { !tran.m_repeat_num ? tran.TRANSID : tran.m_bdid, tran.m_repeat_num };
-        if (unique_ids.find(id) == unique_ids.end()) {
-            m_selected_id.push_back(id);
-            unique_ids.insert(id);
-        }
-    }
-    SetEvtHandlerEnabled(true);
+    wxLogDebug("onListItemSelected: %i selected", GetSelectedItemCount());
+    findSelectedTransactions();
     setExtraTransactionData(GetSelectedItemCount() == 1);
 }
 
-void TransactionListCtrl::OnCopy(wxCommandEvent& WXUNUSED(event))
+void TransactionListCtrl::onListItemDeSelected(wxListEvent&)
 {
-    // we can't copy deleted items or there is nothing to copy
-    if (m_cp->isDeletedTrans() || GetSelectedItemCount() < 1) return;
-
-    // collect the selected transactions for copy
-    FindSelectedTransactions();
-    m_selectedForCopy = m_selected_id;
-
-    if (wxTheClipboard->Open()) {
-        const wxString seperator = "\t";
-        wxString data = "";
-        for (int row = 0; row < GetItemCount(); row++) {
-            if (GetItemState(row, wxLIST_STATE_SELECTED) == wxLIST_STATE_SELECTED) {
-                for (int column = 0; column < static_cast<int>(m_columns.size()); column++) {
-                    if (GetColumnWidth(column) > 0) {
-                        data += inQuotes(OnGetItemText(row, column), seperator);
-                        data += seperator;
-                    }
-                }
-                data += "\n";
-            }
-        }
-        wxTheClipboard->SetData(new wxTextDataObject(data));
-        wxTheClipboard->Close();
-    }
-}
-
-void TransactionListCtrl::OnDuplicateTransaction(wxCommandEvent& WXUNUSED(event))
-{
-    // we can only duplicate a single transaction
-    if (GetSelectedItemCount() != 1) return;
-    FindSelectedTransactions();
-    Fused_Transaction::IdRepeat id = m_selected_id[0];
-
-    mmTransDialog dlg(this, m_cp->m_account_id, {id.first, id.second != 0}, true);
-    if (dlg.ShowModal() != wxID_CANCEL) {
-        m_selected_id.clear();
-        m_pasted_id.push_back({dlg.GetTransactionID(), 0});
-        m_cp->mmPlayTransactionSound();
-        refreshVisualList();
-    }
-    m_topItemIndex = GetTopItem() + GetCountPerPage() - 1;
-}
-
-void TransactionListCtrl::OnEnterScheduled(wxCommandEvent& WXUNUSED(event))
-{
-    if (GetSelectedItemCount() != 1) return;
-    FindSelectedTransactions();
-    Fused_Transaction::IdRepeat id = m_selected_id[0];
-
-    if (id.second == 1) {
-        mmBDDialog dlg(this, id.first, false, true);
-        if ( dlg.ShowModal() == wxID_OK ) {
-            refreshVisualList();
-        }
-    }
-}
-
-void TransactionListCtrl::OnSkipScheduled(wxCommandEvent& WXUNUSED(event))
-{
-    if (GetSelectedItemCount() != 1) return;
-    FindSelectedTransactions();
-    Fused_Transaction::IdRepeat id = m_selected_id[0];
-
-    if (id.second == 1) {
-        Model_Billsdeposits::instance().completeBDInSeries(id.first);
-        refreshVisualList();
-    }
-}
-
-void TransactionListCtrl::OnPaste(wxCommandEvent& WXUNUSED(event))
-{
-    // we can't paste with multiple accounts open, deleted items, or if there is nothing to paste
-    if (!m_cp->isAccount() || m_selectedForCopy.size() < 1)
-        return;
-    
-    FindSelectedTransactions();
-    Model_Checking::instance().Savepoint();
-    m_pasted_id.clear();    // make sure the list is empty before we paste
-    for (const auto& id : m_selectedForCopy) {
-        if (!id.second) {
-            Model_Checking::Data* tran = Model_Checking::instance().get(id.first);
-            if (Model_Checking::foreignTransaction(*tran)) continue;
-            OnPaste(tran);
-        }
-    }
-    Model_Checking::instance().ReleaseSavepoint();
-    refreshVisualList();
-}
-
-int64 TransactionListCtrl::OnPaste(Model_Checking::Data* tran)
-{
-    wxASSERT(m_cp->isAccount());
-
-    bool useOriginalDate = Model_Setting::instance().GetBoolSetting(INIDB_USE_ORG_DATE_COPYPASTE, false);
-
-    //TODO: the clone function can't clone split transactions, or custom data
-    Model_Checking::Data* copy = Model_Checking::instance().clone(tran); 
-    if (!useOriginalDate) copy->TRANSDATE = wxDateTime::Now().FormatISOCombined();
-    if (Model_Checking::type_id(copy->TRANSCODE) != Model_Checking::TYPE_ID_TRANSFER ||
-        (m_cp->m_account_id != copy->ACCOUNTID && m_cp->m_account_id != copy->TOACCOUNTID)
-    )
-        copy->ACCOUNTID = m_cp->m_account_id;
-    int64 transactionID = Model_Checking::instance().save(copy);
-    m_pasted_id.push_back({transactionID, 0});   // add the newly pasted transaction
-
-    // Clone transaction tags
-    Model_Taglink::Cache copy_taglinks;
-    wxString reftype = Model_Attachment::REFTYPE_STR_TRANSACTION;
-    for (const auto& link : Model_Taglink::instance().find(Model_Taglink::REFTYPE(reftype), Model_Taglink::REFID(tran->TRANSID))) {
-        Model_Taglink::Data* taglink = Model_Taglink::instance().clone(&link);
-        taglink->REFID = transactionID;
-        copy_taglinks.push_back(taglink);
-    }
-
-    // Clone split transactions
-    reftype = Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT;
-    for (const auto& split_item : Model_Checking::split(tran)) {
-        Model_Splittransaction::Data *copy_split_item = Model_Splittransaction::instance().clone(&split_item);
-        copy_split_item->TRANSID = transactionID;
-        int64 splittransID = Model_Splittransaction::instance().save(copy_split_item);
-
-        // Clone split tags
-        for (const auto& link : Model_Taglink::instance().find(
-            Model_Taglink::REFTYPE(reftype),
-            Model_Taglink::REFID(split_item.SPLITTRANSID)
-        )) {
-            Model_Taglink::Data* taglink = Model_Taglink::instance().clone(&link);
-            taglink->REFID = splittransID;
-            copy_taglinks.push_back(taglink);
-        }
-    }
-    Model_Taglink::instance().save(copy_taglinks);
-
-    // Clone duplicate custom fields
-    const auto& data_set = Model_CustomFieldData::instance().find(
-        Model_CustomFieldData::REFID(tran->TRANSID)
-    );
-    if (data_set.size() > 0) {
-        Model_CustomFieldData::instance().Savepoint();
-        for (const auto& item : data_set) {
-            Model_CustomFieldData::Data* fieldData = Model_CustomFieldData::instance().create();
-            fieldData->FIELDID = item.FIELDID;
-            fieldData->REFID = transactionID;
-            fieldData->CONTENT = item.CONTENT;
-            Model_CustomFieldData::instance().save(fieldData);
-        }
-        Model_CustomFieldData::instance().ReleaseSavepoint();
-    }
-
-    // Clone attachments if wanted
-    if (Model_Infotable::instance().GetBoolInfo("ATTACHMENTSDUPLICATE", false)) {
-        const wxString& RefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
-        mmAttachmentManage::CloneAllAttachments(RefType, tran->TRANSID, transactionID);
-    }
-
-    return transactionID;
+    wxLogDebug("onListItemDeSelected: %i selected", GetSelectedItemCount());
+    findSelectedTransactions();
+    setExtraTransactionData(GetSelectedItemCount() == 1);
 }
 
-void TransactionListCtrl::OnOpenAttachment(wxCommandEvent& WXUNUSED(event))
+void TransactionListCtrl::onListItemFocused(wxListEvent& WXUNUSED(event))
 {
-    // we can only open a single transaction
-    if (GetSelectedItemCount() != 1) return;
-    FindSelectedTransactions();
-    Fused_Transaction::IdRepeat id = m_selected_id[0];
-
-    const wxString refType = !id.second ?
-        Model_Attachment::REFTYPE_STR_TRANSACTION :
-        Model_Attachment::REFTYPE_STR_BILLSDEPOSIT;
-    mmAttachmentManage::OpenAttachmentFromPanelIcon(this, refType, id.first);
-    refreshVisualList();
+    wxLogDebug("onListItemFocused: %i selected", GetSelectedItemCount());
+    findSelectedTransactions();
+    setExtraTransactionData(GetSelectedItemCount() == 1);
 }
-//----------------------------------------------------------------------------
 
-void TransactionListCtrl::OnListKeyDown(wxListEvent& event)
+void TransactionListCtrl::onListKeyDown(wxListEvent& event)
 {
     if (wxGetKeyState(WXK_COMMAND) || wxGetKeyState(WXK_ALT) || wxGetKeyState(WXK_CONTROL))
         return event.Skip();
@@ -1217,32 +981,32 @@
         if (key == wxKeyCode('R')) {
             // Reconciled
             wxCommandEvent evt(wxEVT_COMMAND_MENU_SELECTED, MENU_TREEPOPUP_MARKRECONCILED);
-            OnMarkTransaction(evt);
+            onMarkTransaction(evt);
         }
         else if (key == wxKeyCode('U')) {
             // Unreconciled
             wxCommandEvent evt(wxEVT_COMMAND_MENU_SELECTED, MENU_TREEPOPUP_MARKUNRECONCILED);
-            OnMarkTransaction(evt);
+            onMarkTransaction(evt);
         }
         else if (key == wxKeyCode('F')) {
             // Follow Up
             wxCommandEvent evt(wxEVT_COMMAND_MENU_SELECTED, MENU_TREEPOPUP_MARK_ADD_FLAG_FOLLOWUP);
-            OnMarkTransaction(evt);
+            onMarkTransaction(evt);
         }
         else if (key == wxKeyCode('D')) {
             // Duplicate
             wxCommandEvent evt(wxEVT_COMMAND_MENU_SELECTED, MENU_TREEPOPUP_MARKDUPLICATE);
-            OnMarkTransaction(evt);
+            onMarkTransaction(evt);
         }
         else if (key == wxKeyCode('V')) {
             // Void
             wxCommandEvent evt(wxEVT_COMMAND_MENU_SELECTED, MENU_TREEPOPUP_MARKVOID);
-            OnMarkTransaction(evt);
+            onMarkTransaction(evt);
         }
         else if (key == WXK_DELETE || key == WXK_NUMPAD_DELETE)
         {
             wxCommandEvent evt(wxEVT_COMMAND_MENU_SELECTED, MENU_TREEPOPUP_DELETE2);
-            OnDeleteTransaction(evt);
+            onDeleteTransaction(evt);
         }
         else {
             event.Skip();
@@ -1252,11 +1016,11 @@
     else {
         if (key == WXK_DELETE || key == WXK_NUMPAD_DELETE) {
             wxCommandEvent evt(wxEVT_COMMAND_MENU_SELECTED, MENU_TREEPOPUP_DELETE2);
-            OnDeleteTransaction(evt);
+            onDeleteTransaction(evt);
         }
         else if (key == wxKeyCode('R')) {
             wxCommandEvent evt(wxEVT_COMMAND_MENU_SELECTED, MENU_TREEPOPUP_RESTORE);
-            OnRestoreTransaction(evt);
+            onRestoreTransaction(evt);
         }
         else {
             event.Skip();
@@ -1264,214 +1028,68 @@
         }
     }
 }
-//----------------------------------------------------------------------------
-
-void TransactionListCtrl::OnRestoreViewedTransaction(wxCommandEvent&)
-{
-    wxMessageDialog msgDlg(
-        this,
-        _("Do you really want to restore all of the transactions shown?"),
-        _("Confirm Transaction Restore"),
-        wxYES_NO | wxNO_DEFAULT | wxICON_ERROR
-    );
-    if (msgDlg.ShowModal() == wxID_YES) {
-        std::set<std::pair<wxString, int64>> assetStockAccts;
-        for (const auto& tran : this->m_trans) {
-            if (tran.m_repeat_num) continue;
-            Model_Checking::Data* trx = Model_Checking::instance().get(tran.TRANSID);
-            trx->DELETEDTIME.Clear();
-            Model_Checking::instance().save(trx);
-            Model_Translink::Data_Set translink = Model_Translink::instance().find(
-                Model_Translink::CHECKINGACCOUNTID(trx->TRANSID)
-            );
-            if (!translink.empty()) {
-                assetStockAccts.insert(std::make_pair(translink.at(0).LINKTYPE, translink.at(0).LINKRECORDID));
-            }
-        }
-        if (!assetStockAccts.empty()) {
-            for (const auto& i : assetStockAccts) {
-                if (i.first == "Asset")
-                    Model_Translink::UpdateAssetValue(Model_Asset::instance().get(i.second));
-                else if (i.first == "Stock")
-                    Model_Translink::UpdateStockValue(Model_Stock::instance().get(i.second));
-            }
-        }
-    }
-    
-    refreshVisualList();
-    m_cp->m_frame->RefreshNavigationTree();
-}
-
-void TransactionListCtrl::OnRestoreTransaction(wxCommandEvent& WXUNUSED(event))
-{
-    // check if any transactions selected
-    int sel = GetSelectedItemCount();
-    if (sel < 1) return;
-
-    FindSelectedTransactions();
-
-    //ask if they really want to restore
-    const wxString text = wxString::Format(
-        wxPLURAL(
-            "Do you really want to restore the selected transaction?",
-            "Do you really want to restore %i selected transactions?", sel
-        ),
-        sel
-    );
-
-    wxMessageDialog msgDlg(
-        this,
-        text,
-        _("Confirm Transaction Restore"),
-        wxYES_NO | wxYES_DEFAULT | wxICON_WARNING
-    );
-
-    if (msgDlg.ShowModal() == wxID_YES) {
-        std::set<std::pair<wxString, int64>> assetStockAccts;
-        for (const auto& id : m_selected_id) {
-            if (!id.second) {
-                Model_Checking::Data* trx = Model_Checking::instance().get(id.first);
-                trx->DELETEDTIME.Clear();
-                Model_Checking::instance().save(trx);
-                Model_Translink::Data_Set translink = Model_Translink::instance().find(
-                    Model_Translink::CHECKINGACCOUNTID(trx->TRANSID)
-                );
-                if (!translink.empty()) {
-                    assetStockAccts.insert(std::make_pair(
-                        translink.at(0).LINKTYPE,
-                        translink.at(0).LINKRECORDID
-                    ));
-                }
-            }
-        }
-        m_selected_id.clear();
-        if (!assetStockAccts.empty()) {
-            for (const auto& i : assetStockAccts) {
-                if (i.first == "Asset")
-                    Model_Translink::UpdateAssetValue(Model_Asset::instance().get(i.second));
-                else if (i.first == "Stock")
-                    Model_Translink::UpdateStockValue(Model_Stock::instance().get(i.second));
-            }
-        }
-    }
 
-    refreshVisualList();
-    m_cp->m_frame->RefreshNavigationTree();
-}
+//----------------------------------------------------------------------------
 
-void TransactionListCtrl::OnDeleteViewedTransaction(wxCommandEvent& event)
+void TransactionListCtrl::onNewTransaction(wxCommandEvent& event)
 {
-    auto i = event.GetId();
-    int retainDays = Model_Setting::instance().GetIntSetting("DELETED_TRANS_RETAIN_DAYS", 30);
-
-    if (i == MENU_TREEPOPUP_DELETE_VIEWED) {
-        wxString text = !(m_cp->isDeletedTrans() || retainDays == 0)
-            ? _("Do you really want to delete all the transactions shown?")
-            : _("Do you really want to permanently delete all the transactions shown?");
-
-        text += "\n\n";
-        text += !(m_cp->isDeletedTrans() || retainDays == 0)
-            ? _("Deleted transactions will be temporarily stored and can be restored from the Deleted Transactions view.")
-            : _("Unable to undo this action.");
+    int id = event.GetId();
+    int type;
 
-        wxMessageDialog msgDlg(this
-            , text
-            , _("Confirm Transaction Deletion")
-            , wxYES_NO | wxNO_DEFAULT | (m_cp->isDeletedTrans() ? wxICON_ERROR : wxICON_WARNING));
-        if (msgDlg.ShowModal() == wxID_YES) {
-            DeleteTransactionsByStatus("");
-        }
-    }
-    else if (i == MENU_TREEPOPUP_DELETE_FLAGGED) {
-        wxMessageDialog msgDlg(this
-            , wxString::Format(_("Do you really want to delete all the \"%s\" transactions shown?"), _("Follow Up"))
-            , _("Confirm Transaction Deletion")
-            , wxYES_NO | wxNO_DEFAULT | wxICON_QUESTION);
-        if (msgDlg.ShowModal() == wxID_YES) {
-            DeleteTransactionsByStatus(Model_Checking::STATUS_STR_FOLLOWUP);
-        }
-    }
-    else if (i == MENU_TREEPOPUP_DELETE_UNRECONCILED) {
-        wxMessageDialog msgDlg(this
-            , wxString::Format(_("Do you really want to delete all the \"%s\" transactions shown?"), _("Unreconciled"))
-            , _("Confirm Transaction Deletion")
-            , wxYES_NO | wxNO_DEFAULT | wxICON_QUESTION);
-        if (msgDlg.ShowModal() == wxID_YES) {
-            DeleteTransactionsByStatus(Model_Checking::STATUS_STR_NONE);
-        }
+    switch (id) {
+    case MENU_TREEPOPUP_WITHDRAWAL:
+        type = Model_Checking::TYPE_ID_WITHDRAWAL;
+        break;
+    case MENU_TREEPOPUP_DEPOSIT:
+        type = Model_Checking::TYPE_ID_DEPOSIT;
+        break;
+    case MENU_TREEPOPUP_TRANSFER:
+        type = Model_Checking::TYPE_ID_TRANSFER;
+        break;
+    default:
+        type = Model_Checking::TYPE_ID_WITHDRAWAL;
+        break;
     }
-    refreshVisualList();
-    m_cp->m_frame->RefreshNavigationTree();
-}
 
-void TransactionListCtrl::DeleteTransactionsByStatus(const wxString& status)
-{
-    int retainDays = Model_Setting::instance().GetIntSetting("DELETED_TRANS_RETAIN_DAYS", 30);
-    wxString deletionTime = wxDateTime::Now().ToUTC().FormatISOCombined();
-    std::set<std::pair<wxString, int64>> assetStockAccts;
-    const auto s = Model_Checking::status_key(status);
-    Model_Checking::instance().Savepoint();
-    Model_Attachment::instance().Savepoint();
-    Model_Splittransaction::instance().Savepoint();
-    Model_CustomFieldData::instance().Savepoint();
-    for (const auto& tran : this->m_trans) {
-        if (tran.m_repeat_num) continue;
-        if (tran.STATUS == s || (s.empty() && status.empty())) {
-            if (m_cp->isDeletedTrans() || retainDays == 0) {
-                // remove also removes any split transactions, translink entries, attachments, and custom field data
-                Model_Checking::instance().remove(tran.TRANSID);
-            }
-            else {
-                Model_Checking::Data* trx = Model_Checking::instance().get(tran.TRANSID);
-                trx->DELETEDTIME = deletionTime;
-                Model_Checking::instance().save(trx);
-                Model_Translink::Data_Set translink = Model_Translink::instance().find(Model_Translink::CHECKINGACCOUNTID(trx->TRANSID));
-                if (!translink.empty()) {
-                    assetStockAccts.insert(std::make_pair(translink.at(0).LINKTYPE, translink.at(0).LINKRECORDID));
-                }
-            }
-        }
-    }
+    mmTransDialog dlg(this, m_cp->m_account_id, {0, false}, false, type);
+    int i = dlg.ShowModal();
+    if (i != wxID_CANCEL) {
+        m_selected_id.clear();
+        m_pasted_id.push_back({dlg.GetTransactionID(), 0});
+        m_cp->mmPlayTransactionSound();
+        refreshVisualList();
 
-    if (!assetStockAccts.empty()) {
-        for (const auto& i : assetStockAccts) {
-            if (i.first == "Asset") Model_Translink::UpdateAssetValue(Model_Asset::instance().get(i.second));
-            else if (i.first == "Stock") Model_Translink::UpdateStockValue(Model_Stock::instance().get(i.second));
+        if (i == wxID_NEW) {
+            onNewTransaction(event);
         }
     }
-
-    Model_Splittransaction::instance().ReleaseSavepoint();
-    Model_Attachment::instance().ReleaseSavepoint();
-    Model_Checking::instance().ReleaseSavepoint();
-    Model_CustomFieldData::instance().ReleaseSavepoint();
 }
 
-
-void TransactionListCtrl::OnDeleteTransaction(wxCommandEvent& WXUNUSED(event))
+void TransactionListCtrl::onDeleteTransaction(wxCommandEvent& WXUNUSED(event))
 {
     // check if any transactions selected
     int sel = GetSelectedItemCount();
     if (sel < 1) return;
 
-    FindSelectedTransactions();
-    int retainDays = Model_Setting::instance().GetIntSetting("DELETED_TRANS_RETAIN_DAYS", 30);
+    findSelectedTransactions();
+    int retainDays = Model_Setting::instance().getInt("DELETED_TRANS_RETAIN_DAYS", 30);
 
-    //ask if they really want to delete
+    //ask if they want to delete
     wxString text = (m_cp->isDeletedTrans() || retainDays == 0)?
-        wxString::Format(wxPLURAL("Do you really want to permanently delete the selected transaction?"
-        , "Do you really want to permanently delete %i selected transactions?", sel)
+        wxString::Format(wxPLURAL("Do you want to permanently delete the selected transaction?"
+        , "Do you want to permanently delete the %i selected transactions?", sel)
         , sel)
         :
-        wxString::Format(wxPLURAL("Do you really want to delete the selected transaction?"
-            , "Do you really want to delete %i selected transactions?", sel)
+        wxString::Format(wxPLURAL("Do you want to delete the selected transaction?"
+            , "Do you want to delete the %i selected transactions?", sel)
             , sel);
     text += "\n\n";
-    text += _((m_cp->isDeletedTrans() || retainDays == 0) ? _("Unable to undo this action.")
-        : _("Deleted transactions will be temporarily stored and can be restored from the Deleted Transactions view."));
+    text += ((m_cp->isDeletedTrans() || retainDays == 0) ? _t("Unable to undo this action.")
+        : _t("Deleted transactions will be temporarily stored and can be restored from the Deleted Transactions view."));
 
     wxMessageDialog msgDlg(this
         , text
-        , _("Confirm Transaction Deletion")
+        , _t("Confirm Transaction Deletion")
         , wxYES_NO | wxYES_DEFAULT | (m_cp->isDeletedTrans() ? wxICON_ERROR : wxICON_WARNING));
 
     if (msgDlg.ShowModal() == wxID_YES) {
@@ -1485,7 +1103,7 @@
             if (id.second) continue;
             Model_Checking::Data* trx = Model_Checking::instance().get(id.first);
 
-            if (TransactionLocked(trx->ACCOUNTID, trx->TRANSDATE)) {
+            if (checkTransactionLocked(trx->ACCOUNTID, trx->TRANSDATE)) {
                 continue;
             }
 
@@ -1498,7 +1116,7 @@
                 Model_Checking::instance().save(trx);
                 Model_Translink::Data_Set translink = Model_Translink::instance().find(Model_Translink::CHECKINGACCOUNTID(trx->TRANSID));
                 if (!translink.empty()) {
-                    assetStockAccts.insert(std::make_pair(translink.at(0).LINKTYPE, translink.at(0).LINKRECORDID));
+                    assetStockAccts.emplace(translink.at(0).LINKTYPE, translink.at(0).LINKRECORDID);
                 }
             }
             m_selectedForCopy.erase(std::remove(m_selectedForCopy.begin(), m_selectedForCopy.end(), id)
@@ -1513,7 +1131,7 @@
         if (!assetStockAccts.empty()) {
             for (const auto& i : assetStockAccts) {
                 if (i.first == "Asset") Model_Translink::UpdateAssetValue(Model_Asset::instance().get(i.second));
-                else if (i.first == "Stock") Model_Translink::UpdateStockValue(Model_Stock::instance().get(i.second));
+                else if (i.first == "Stock") Model_Stock::UpdatePosition(Model_Stock::instance().get(i.second));
             }
         }
     }
@@ -1521,61 +1139,101 @@
     m_cp->m_frame->RefreshNavigationTree();
 }
 
-//----------------------------------------------------------------------------
-bool TransactionListCtrl::TransactionLocked(int64 accountID, const wxString& transdate)
+void TransactionListCtrl::onRestoreTransaction(wxCommandEvent& WXUNUSED(event))
 {
-    Model_Account::Data* account = Model_Account::instance().get(accountID);
-    if (Model_Account::BoolOf(account->STATEMENTLOCKED)) {
-        wxDateTime transaction_date;
-        if (transaction_date.ParseDate(transdate)) {
-            if (transaction_date <= Model_Account::DateOf(account->STATEMENTDATE)) {
-                wxMessageBox(_(wxString::Format(
-                    _("Locked transaction to date: %s\n\n"
-                        "Reconciled transactions.")
-                    , mmGetDateTimeForDisplay(account->STATEMENTDATE)))
-                    , _("MMEX Transaction Check"), wxOK | wxICON_WARNING);
-                return true;
+    // check if any transactions selected
+    int sel = GetSelectedItemCount();
+    if (sel < 1) return;
+
+    findSelectedTransactions();
+
+    //ask if they want to restore
+    const wxString text = wxString::Format(
+        wxPLURAL(
+            "Do you want to restore the selected transaction?",
+            "Do you want to restore the %i selected transactions?", sel
+        ),
+        sel
+    );
+
+    wxMessageDialog msgDlg(
+        this,
+        text,
+        _t("Confirm Transaction Restore"),
+        wxYES_NO | wxYES_DEFAULT | wxICON_WARNING
+    );
+
+    if (msgDlg.ShowModal() == wxID_YES) {
+        std::set<std::pair<wxString, int64>> assetStockAccts;
+        for (const auto& id : m_selected_id) {
+            if (!id.second) {
+                Model_Checking::Data* trx = Model_Checking::instance().get(id.first);
+                trx->DELETEDTIME.Clear();
+                Model_Checking::instance().save(trx);
+                Model_Translink::Data_Set translink = Model_Translink::instance().find(
+                    Model_Translink::CHECKINGACCOUNTID(trx->TRANSID)
+                );
+                if (!translink.empty()) {
+                    assetStockAccts.emplace(translink.at(0).LINKTYPE, translink.at(0).LINKRECORDID);
+                }
+            }
+        }
+        m_selected_id.clear();
+        if (!assetStockAccts.empty()) {
+            for (const auto& i : assetStockAccts) {
+                if (i.first == "Asset")
+                    Model_Translink::UpdateAssetValue(Model_Asset::instance().get(i.second));
+                else if (i.first == "Stock")
+                    Model_Stock::UpdatePosition(Model_Stock::instance().get(i.second));
             }
         }
     }
-    return false;
+
+    refreshVisualList();
+    m_cp->m_frame->RefreshNavigationTree();
 }
 
-bool TransactionListCtrl::CheckForClosedAccounts()
+void TransactionListCtrl::onRestoreViewedTransaction(wxCommandEvent&)
 {
-    int closedTrx = 0;
-    for (const auto& id : m_selected_id) {
-        Fused_Transaction::Data tran = !id.second ?
-            Fused_Transaction::Data(*Model_Checking::instance().get(id.first)) :
-            Fused_Transaction::Data(*Model_Billsdeposits::instance().get(id.first));
-        Model_Account::Data* account = Model_Account::instance().get(tran.ACCOUNTID);
-        if (account && Model_Account::STATUS_ID_CLOSED == Model_Account::status_id(account)) {
-            closedTrx++;
-            continue;
+    wxMessageDialog msgDlg(
+        this,
+        _t("Do you want to restore all of the transactions shown?"),
+        _t("Confirm Transaction Restore"),
+        wxYES_NO | wxNO_DEFAULT | wxICON_ERROR
+    );
+    if (msgDlg.ShowModal() == wxID_YES) {
+        std::set<std::pair<wxString, int64>> assetStockAccts;
+        for (const auto& tran : this->m_trans) {
+            if (tran.m_repeat_num) continue;
+            Model_Checking::Data* trx = Model_Checking::instance().get(tran.TRANSID);
+            trx->DELETEDTIME.Clear();
+            Model_Checking::instance().save(trx);
+            Model_Translink::Data_Set translink = Model_Translink::instance().find(
+                Model_Translink::CHECKINGACCOUNTID(trx->TRANSID)
+            );
+            if (!translink.empty()) {
+                assetStockAccts.emplace(translink.at(0).LINKTYPE, translink.at(0).LINKRECORDID);
+            }
+        }
+        if (!assetStockAccts.empty()) {
+            for (const auto& i : assetStockAccts) {
+                if (i.first == "Asset")
+                    Model_Translink::UpdateAssetValue(Model_Asset::instance().get(i.second));
+                else if (i.first == "Stock")
+                    Model_Stock::UpdatePosition(Model_Stock::instance().get(i.second));
+            }
         }
-        Model_Account::Data* to_account = Model_Account::instance().get(tran.TOACCOUNTID);
-        if (to_account && Model_Account::STATUS_ID_CLOSED == Model_Account::status_id(account))
-            closedTrx++;
     }
 
-    if (!closedTrx)
-        return true;
-    else {
-        const wxString text = wxString::Format(
-            wxPLURAL("You are about to edit a transaction involving an account that is closed."
-            , "The edit will affect %i transactions involving an account that is closed.", GetSelectedItemCount())
-            , closedTrx) + _("\n\nDo you still want to perform the edit?");
-        if (wxMessageBox(text, _("Closed Account Check"), wxYES_NO | wxICON_WARNING) == wxYES)
-            return true;
-    }
-    return false;
+    refreshVisualList();
+    m_cp->m_frame->RefreshNavigationTree();
 }
 
-void TransactionListCtrl::OnEditTransaction(wxCommandEvent& /*event*/)
+void TransactionListCtrl::onEditTransaction(wxCommandEvent& /*event*/)
 {
     // check if anything to edit
     if (GetSelectedItemCount() < 1) return;
-    FindSelectedTransactions();
+    findSelectedTransactions();
 
     // edit multiple transactions
     if (m_selected_id.size() > 1) {
@@ -1584,7 +1242,7 @@
             if (!id.second)
                 transid.push_back(id.first);
         if (transid.size() == 0) return;
-        if (!CheckForClosedAccounts()) return;
+        if (!checkForClosedAccounts()) return;
         transactionsUpdateDialog dlg(this, transid);
         if (dlg.ShowModal() == wxID_OK)
             refreshVisualList();
@@ -1595,18 +1253,18 @@
     Fused_Transaction::IdRepeat id = m_selected_id[0];
     if (!id.second) {
         Model_Checking::Data* checking_entry = Model_Checking::instance().get(id.first);
-        if (TransactionLocked(checking_entry->ACCOUNTID, checking_entry->TRANSDATE))
+        if (checkTransactionLocked(checking_entry->ACCOUNTID, checking_entry->TRANSDATE))
             return;
 
-        if (Model_Checking::foreignTransaction(*checking_entry)) {
+        if (!Model_Translink::instance().find(Model_Translink::CHECKINGACCOUNTID(id.first)).empty()) {
             Model_Translink::Data translink = Model_Translink::TranslinkRecord(id.first);
-            if (translink.LINKTYPE == Model_Attachment::REFTYPE_STR_STOCK) {
+            if (translink.LINKTYPE == Model_Stock::refTypeName) {
                 ShareTransactionDialog dlg(this, &translink, checking_entry);
                 if (dlg.ShowModal() == wxID_OK)
                     refreshVisualList();
             }
-            else if (translink.LINKTYPE == Model_Attachment::REFTYPE_STR_ASSET) {
-                mmAssetDialog dlg(this, m_cp->m_frame, &translink, checking_entry);
+            else if (translink.LINKTYPE == Model_Asset::refTypeName) {
+                mmAssetDialog dlg(this, &translink, checking_entry);
                 if (dlg.ShowModal() == wxID_OK)
                     refreshVisualList();
             }
@@ -1628,158 +1286,28 @@
     m_topItemIndex = GetTopItem() + GetCountPerPage() - 1;
 }
 
-void TransactionListCtrl::OnNewTransaction(wxCommandEvent& event)
-{
-    int id = event.GetId();
-    int type;
-
-    switch (id) {
-    case MENU_TREEPOPUP_WITHDRAWAL:
-        type = Model_Checking::TYPE_ID_WITHDRAWAL;
-        break;
-    case MENU_TREEPOPUP_DEPOSIT:
-        type = Model_Checking::TYPE_ID_DEPOSIT;
-        break;
-    case MENU_TREEPOPUP_TRANSFER:
-        type = Model_Checking::TYPE_ID_TRANSFER;
-        break;
-    default:
-        type = Model_Checking::TYPE_ID_WITHDRAWAL;
-        break;
-    }
-
-    mmTransDialog dlg(this, m_cp->m_account_id, {0, false}, false, type);
-    int i = dlg.ShowModal();
-    if (i != wxID_CANCEL) {
-        m_selected_id.clear();
-        m_pasted_id.push_back({dlg.GetTransactionID(), 0});
-        m_cp->mmPlayTransactionSound();
-        refreshVisualList();
-
-        if (i == wxID_NEW) {
-            OnNewTransaction(event);
-        }
-    }
-}
-
-//----------------------------------------------------------------------------
-
-void TransactionListCtrl::OnSetUserColour(wxCommandEvent& event)
-{
-    if (m_cp->isDeletedTrans())
-        return;
-    
-    FindSelectedTransactions();
-    int user_color_id = event.GetId();
-    user_color_id -= MENU_ON_SET_UDC0;
-    wxLogDebug("id: %i", user_color_id);
-
-    Model_Checking::instance().Savepoint();
-    Model_Billsdeposits::instance().Savepoint();
-    for (const auto& id : m_selected_id) {
-        if (!id.second) {
-            Model_Checking::Data* tran = Model_Checking::instance().get(id.first);
-            if (tran) {
-                tran->COLOR = user_color_id;
-                Model_Checking::instance().save(tran);
-            }
-        }
-        else {
-            Model_Billsdeposits::Data* bill = Model_Billsdeposits::instance().get(id.first);
-            if (bill) {
-                bill->COLOR = user_color_id;
-                Model_Billsdeposits::instance().save(bill);
-            }
-        }
-    }
-    Model_Billsdeposits::instance().ReleaseSavepoint();
-    Model_Checking::instance().ReleaseSavepoint();
-    m_topItemIndex = GetTopItem() + GetCountPerPage() - 1;
-
-    refreshVisualList();
-}
-//----------------------------------------------------------------------------
-
-void TransactionListCtrl::refreshVisualList(bool filter)
+void TransactionListCtrl::onMoveTransaction(wxCommandEvent& /*event*/)
 {
-    wxLogDebug("refreshVisualList: %i selected, filter: %d", GetSelectedItemCount(), filter);
-
-    // Grab the selected transactions unless we have freshly pasted transactions in which case use them
-    if (m_pasted_id.empty()) {
-        FindSelectedTransactions();
-    }
-    else {
-        m_selected_id.clear();
-        m_selected_id.insert(std::end(m_selected_id), std::begin(m_pasted_id), std::end(m_pasted_id));
-        m_pasted_id.clear();    // Now clear them
-    }
-
-    m_today = Option::instance().UseTransDateTime() ?
-        wxDateTime::Now().FormatISOCombined() :
-        wxDateTime(23, 59, 59, 999).FormatISOCombined();
-    this->SetEvtHandlerEnabled(false);
-    Hide();
-
-    // decide whether top or down icon needs to be shown
-    setColumnImage(g_sortcol, g_asc ? mmCheckingPanel::ICON_DESC : mmCheckingPanel::ICON_ASC);
-    if (filter)
-        m_cp->filterTable();
-    SetItemCount(m_trans.size());
-    Show();
-    sortTable();
-    markSelectedTransaction();
-
-    long i = static_cast<long>(m_trans.size());
-    if (m_topItemIndex > i || m_topItemIndex < 0)
-        m_topItemIndex = g_asc ? i - 1 : 0;
-
-    i = 0;
-    for(const auto& entry : m_trans) {
-        int64 id = !entry.m_repeat_num ? entry.TRANSID : entry.m_bdid;
-        for (const auto& item : m_selected_id) {
-            if (item.first == id && item.second == entry.m_repeat_num) {
-                SetItemState(i, wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED);
-                SetItemState(i, wxLIST_STATE_FOCUSED, wxLIST_STATE_FOCUSED);
-                EnsureVisible(i);
-            }
-        }
-        i++;
-    }
-    FindSelectedTransactions();
-
-    if (m_topItemIndex >= 0 && m_topItemIndex < i && m_selected_id.empty())
-        EnsureVisible(m_topItemIndex);
-
-    m_cp->setAccountSummary();
-    setExtraTransactionData(GetSelectedItemCount() == 1);
-    this->SetEvtHandlerEnabled(true);
-    Refresh();
-    Update();
-    SetFocus();
-}
-
-void TransactionListCtrl::OnMoveTransaction(wxCommandEvent& /*event*/)
-{
-    FindSelectedTransactions();
+    findSelectedTransactions();
     int sel = GetSelectedItemCount();
 
-    //ask if they really want to move
+    //ask if they want to move
     const wxString text = wxString::Format(
-        wxPLURAL("Do you really want to move the selected transaction?"
-            , "Do you really want to move %i selected transactions?", sel)
+        wxPLURAL("Do you want to move the selected transaction?"
+            , "Do you want to move the %i selected transactions?", sel)
         , sel);
     wxMessageDialog msgDlg(this
         , text
-        , _("Confirm Transaction Move")
+        , _t("Confirm Transaction Move")
         , wxYES_NO | wxYES_DEFAULT | wxICON_ERROR);
 
     if (msgDlg.ShowModal() == wxID_YES) {
         const wxString headerMsg = wxString::Format(
-                wxPLURAL_U8("Moving transaction to…"
+                wxPLURAL("Moving transaction to…"
                 , "Moving %i transactions to…", sel)
                 , sel);
         mmSingleChoiceDialog scd(this
-            , _("Select the destination Account ")
+            , _t("Select the destination Account ")
             , headerMsg
             , Model_Account::instance().all_checking_account_names());
         if (scd.ShowModal() == wxID_OK) {
@@ -1795,7 +1323,7 @@
             for (const auto& id : m_selected_id) {
                 if (!id.second) {
                     Model_Checking::Data* trx = Model_Checking::instance().get(id.first);
-                    if (TransactionLocked(trx->ACCOUNTID, trx->TRANSDATE)
+                    if (checkTransactionLocked(trx->ACCOUNTID, trx->TRANSDATE)
                             || Model_Checking::foreignTransaction(*trx)
                             || Model_Checking::type_id(trx->TRANSCODE) == Model_Checking::TYPE_ID_TRANSFER
                             || trx->TRANSDATE < dest_account->INITIALDATE
@@ -1810,12 +1338,12 @@
             Model_Checking::instance().ReleaseSavepoint();
             if (!skip_trx.empty()) {
                 const wxString detail = wxString::Format("%s\n%s: %zu\n%s: %zu"
-                                , _("This is due to some elements of the transaction or account detail not allowing the move")
-                                , _("Moved"), m_selected_id.size() - skip_trx.size()
-                                , _("Not moved"), skip_trx.size());
+                                , _t("This is due to some elements of the transaction or account detail not allowing the move")
+                                , _t("Moved"), m_selected_id.size() - skip_trx.size()
+                                , _t("Not moved"), skip_trx.size());
                 mmErrorDialogs::MessageWarning(this
                     , detail
-                    , _("Unable to move some transactions."));
+                    , _t("Unable to move some transactions."));
             }
             //TODO: enable report to detail transactions that are unable to be moved
             refreshVisualList();
@@ -1823,11 +1351,10 @@
     }
 }
 
-//----------------------------------------------------------------------------
-void TransactionListCtrl::OnViewOtherAccount(wxCommandEvent& /*event*/)
+void TransactionListCtrl::onViewOtherAccount(wxCommandEvent& /*event*/)
 {
     // we can only get here for a single transfer transaction
-    FindSelectedTransactions();
+    findSelectedTransactions();
     Fused_Transaction::IdRepeat id = m_selected_id[0];
 
     Fused_Transaction::Full_Data tran = !id.second ?
@@ -1835,7 +1362,7 @@
         Fused_Transaction::Full_Data(*Model_Billsdeposits::instance().get(id.first));
 
     int64 gotoAccountID = (m_cp->m_account_id == tran.ACCOUNTID) ? tran.TOACCOUNTID : tran.ACCOUNTID;
-    wxString gotoAccountName = (m_cp->m_account_id == tran.ACCOUNTID) ? tran.TOACCOUNTNAME : tran.ACCOUNTNAME;   
+    wxString gotoAccountName = (m_cp->m_account_id == tran.ACCOUNTID) ? tran.TOACCOUNTNAME : tran.ACCOUNTNAME;
 
     m_cp->m_frame->setNavTreeAccount(gotoAccountName);
     m_cp->m_frame->setGotoAccountID(gotoAccountID, id);
@@ -1843,165 +1370,398 @@
     m_cp->m_frame->GetEventHandler()->AddPendingEvent(event);
 }
 
-//----------------------------------------------------------------------------
-void TransactionListCtrl::OnViewSplitTransaction(wxCommandEvent& /*event*/)
+void TransactionListCtrl::onViewSplitTransaction(wxCommandEvent& /*event*/)
 {
     // we can only view a single transaction
     if (GetSelectedItemCount() != 1) return;
-    FindSelectedTransactions();
+    findSelectedTransactions();
     Fused_Transaction::IdRepeat id = m_selected_id[0];
 
-    m_cp->DisplaySplitCategories({id.first, id.second != 0});
+    m_cp->displaySplitCategories({id.first, id.second != 0});
 }
 
-//----------------------------------------------------------------------------
-void TransactionListCtrl::OnOrganizeAttachments(wxCommandEvent& /*event*/)
+void TransactionListCtrl::onOrganizeAttachments(wxCommandEvent& /*event*/)
 {
     // we only support a single transaction
     if (GetSelectedItemCount() != 1) return;
-    FindSelectedTransactions();
+    findSelectedTransactions();
     Fused_Transaction::IdRepeat id = m_selected_id[0];
 
     const wxString refType = !id.second ?
-        Model_Attachment::REFTYPE_STR_TRANSACTION :
-        Model_Attachment::REFTYPE_STR_BILLSDEPOSIT;
+        Model_Checking::refTypeName :
+        Model_Billsdeposits::refTypeName;
     mmAttachmentDialog dlg(this, refType, id.first);
     dlg.ShowModal();
     refreshVisualList();
 }
 
-//----------------------------------------------------------------------------
-void TransactionListCtrl::OnCreateReoccurance(wxCommandEvent& /*event*/)
+void TransactionListCtrl::onCreateReoccurance(wxCommandEvent& /*event*/)
 {
      // we only support a single transaction
     if (GetSelectedItemCount() != 1) return;
-    FindSelectedTransactions();
+    findSelectedTransactions();
     Fused_Transaction::IdRepeat id = m_selected_id[0];
 
     if (!id.second) {
         mmBDDialog dlg(this, 0, false, false);
         dlg.SetDialogParameters(id.first);
         if (dlg.ShowModal() == wxID_OK)
-            wxMessageBox(_("Scheduled transaction saved."));
+            wxMessageBox(_t("Scheduled transaction saved."));
     }
 }
 
-//----------------------------------------------------------------------------
+void TransactionListCtrl::onFind(wxCommandEvent&)
+{
+    if (rightClickFilter_.IsEmpty())
+        return;
+    // save the filter as the "Advanced" filter for All Transactions
+    Model_Infotable::instance().setString("CHECK_FILTER_ID_ADV_-1", rightClickFilter_);
+    // set All Transactions to use the "Advanced" filter
+    Model_Infotable::instance().setString(
+        "CHECK_FILTER_-1",
+        "{ \"FILTER\": \"" + mmCheckingPanel::FILTER_NAME_ADVANCED + "\" }"
+    );
+    // Navigate to the All Transactions panel
+    wxTreeItemId currentId = m_cp->m_frame->GetNavTreeSelection();
+    m_cp->m_frame->setNavTreeSection(wxTRANSLATE("All Transactions"));
+    wxTreeItemId allTransactionsId = m_cp->m_frame->GetNavTreeSelection();
+    if (currentId.IsOk() && currentId == allTransactionsId) {
+        m_cp->m_trans_filter_dlg.reset(
+            new mmFilterTransactionsDialog(this, -1, false, rightClickFilter_)
+        );
+        m_cp->setFilterAdvanced();
+        refreshVisualList();
+    }
+    else
+        m_cp->m_frame->SetNavTreeSelection(m_cp->m_frame->GetNavTreeSelection());
+}
 
-void TransactionListCtrl::markSelectedTransaction()
+void TransactionListCtrl::onCopyText(wxCommandEvent&)
 {
-    long i = 0;
-    for (const auto & tran : m_trans) {
-        Fused_Transaction::IdRepeat id = { !tran.m_repeat_num ? tran.TRANSID : tran.m_bdid,
-            tran.m_repeat_num };
-        //reset any selected items in the list
-        if (GetItemState(i, wxLIST_STATE_SELECTED) == wxLIST_STATE_SELECTED)
-            SetItemState(i, 0, wxLIST_STATE_SELECTED);
-        if (!m_selected_id.empty()) {
-            // discover where the transaction has ended up in the list
-            if (g_asc) {
-                if (m_topItemIndex < i && id == m_selected_id.back())
-                    m_topItemIndex = i;
-            } else {
-                if (m_topItemIndex > i && id == m_selected_id.back())
-                    m_topItemIndex = i;
+    if (!copyText_.IsEmpty()) {
+        if (wxTheClipboard->Open()) {
+            wxTheClipboard->SetData(new wxTextDataObject(copyText_));
+            wxTheClipboard->Close();
+        }
+    }
+}
+
+void TransactionListCtrl::onMarkTransaction(wxCommandEvent& event)
+{
+    findSelectedTransactions();
+    int evt = event.GetId();
+    //bool bRefreshRequired = false;
+    wxString status = "";
+    switch (evt) {
+    case MENU_TREEPOPUP_MARKRECONCILED:         status = Model_Checking::STATUS_KEY_RECONCILED; break;
+    case MENU_TREEPOPUP_MARKUNRECONCILED:       status = Model_Checking::STATUS_KEY_NONE; break;
+    case MENU_TREEPOPUP_MARKVOID:               status = Model_Checking::STATUS_KEY_VOID; break;
+    case MENU_TREEPOPUP_MARK_ADD_FLAG_FOLLOWUP: status = Model_Checking::STATUS_KEY_FOLLOWUP; break;
+    case MENU_TREEPOPUP_MARKDUPLICATE:          status = Model_Checking::STATUS_KEY_DUPLICATE; break;
+    default: wxASSERT(false);
+    }
+
+    Model_Checking::instance().Savepoint();
+
+    for (int row = 0; row < GetItemCount(); row++) {
+        if (GetItemState(row, wxLIST_STATE_SELECTED) == wxLIST_STATE_SELECTED) {
+            Model_Account::Data* account = Model_Account::instance().get(m_trans[row].ACCOUNTID);
+            const auto statement_date = Model_Account::DateOf(account->STATEMENTDATE).FormatISODate();
+            wxString strDate = Model_Checking::TRANSDATE(m_trans[row]).FormatISODate();
+            if (!Model_Account::BoolOf(account->STATEMENTLOCKED)
+                || strDate > statement_date
+            ) {
+                //bRefreshRequired |= (status == Model_Checking::STATUS_KEY_VOID) || (m_trans[row].STATUS == Model_Checking::STATUS_KEY_VOID);
+                if (!m_trans[row].m_repeat_num) {
+                    m_trans[row].STATUS = status;
+                    Model_Checking::instance().save(&m_trans[row]);
+                }
             }
         }
-        ++i;
     }
 
-    if (m_trans.empty()) return;
+    Model_Checking::instance().ReleaseSavepoint();
 
-    if (m_selected_id.empty()) {
-        i = static_cast<long>(m_trans.size()) - 1;
-        if (!g_asc)
-            i = 0;
-        EnsureVisible(i);
+    refreshVisualList();
+}
+
+void TransactionListCtrl::onDeleteViewedTransaction(wxCommandEvent& event)
+{
+    auto i = event.GetId();
+    int retainDays = Model_Setting::instance().getInt("DELETED_TRANS_RETAIN_DAYS", 30);
+
+    if (i == MENU_TREEPOPUP_DELETE_VIEWED) {
+        wxString text = !(m_cp->isDeletedTrans() || retainDays == 0)
+            ? _t("Do you want to delete all the transactions shown?")
+            : _t("Do you want to permanently delete all the transactions shown?");
+
+        text += "\n\n";
+        text += !(m_cp->isDeletedTrans() || retainDays == 0)
+            ? _t("Deleted transactions will be temporarily stored and can be restored from the Deleted Transactions view.")
+            : _t("Unable to undo this action.");
+
+        wxMessageDialog msgDlg(this
+            , text
+            , _t("Confirm Transaction Deletion")
+            , wxYES_NO | wxNO_DEFAULT | (m_cp->isDeletedTrans() ? wxICON_ERROR : wxICON_WARNING));
+        if (msgDlg.ShowModal() == wxID_YES) {
+            deleteTransactionsByStatus("");
+        }
     }
+    else if (i == MENU_TREEPOPUP_DELETE_FLAGGED) {
+        wxMessageDialog msgDlg(this
+            , wxString::Format(_tu("Do you want to delete all the “%s” transactions shown?"), _t("Follow Up"))
+            , _t("Confirm Transaction Deletion")
+            , wxYES_NO | wxNO_DEFAULT | wxICON_QUESTION);
+        if (msgDlg.ShowModal() == wxID_YES) {
+            deleteTransactionsByStatus(Model_Checking::STATUS_NAME_FOLLOWUP);
+        }
+    }
+    else if (i == MENU_TREEPOPUP_DELETE_UNRECONCILED) {
+        wxMessageDialog msgDlg(this
+            , wxString::Format(_tu("Do you want to delete all the “%s” transactions shown?"), _t("Unreconciled"))
+            , _t("Confirm Transaction Deletion")
+            , wxYES_NO | wxNO_DEFAULT | wxICON_QUESTION);
+        if (msgDlg.ShowModal() == wxID_YES) {
+            deleteTransactionsByStatus(Model_Checking::STATUS_NAME_NONE);
+        }
+    }
+    refreshVisualList();
+    m_cp->m_frame->RefreshNavigationTree();
 }
 
-void TransactionListCtrl::markItem(long selectedItem)
+//----------------------------------------------------------------------------
+
+void TransactionListCtrl::onSelectAll(wxCommandEvent& WXUNUSED(event))
 {
-    //First of all any items should be unselected
-    long cursel = GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
-    if (cursel != wxNOT_FOUND)
-        SetItemState(cursel, 0, wxLIST_STATE_SELECTED | wxLIST_STATE_FOCUSED);
+    m_selected_id.clear();
+    SetEvtHandlerEnabled(false);
+    std::set<Fused_Transaction::IdRepeat> unique_ids;
+    for (int row = 0; row < GetItemCount(); row++) {
+        SetItemState(row, wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED);
+        const auto& tran = m_trans[row];
+        Fused_Transaction::IdRepeat id = { !tran.m_repeat_num ? tran.TRANSID : tran.m_bdid, tran.m_repeat_num };
+        if (unique_ids.find(id) == unique_ids.end()) {
+            m_selected_id.push_back(id);
+            unique_ids.insert(id);
+        }
+    }
+    SetEvtHandlerEnabled(true);
+    setExtraTransactionData(GetSelectedItemCount() == 1);
+}
 
-    //Then finded item will be selected
-    SetItemState(selectedItem, wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED);
-    EnsureVisible(selectedItem);
-    return;
+void TransactionListCtrl::onCopy(wxCommandEvent& WXUNUSED(event))
+{
+    // we can't copy deleted items or there is nothing to copy
+    if (m_cp->isDeletedTrans() || GetSelectedItemCount() < 1) return;
+
+    // collect the selected transactions for copy
+    findSelectedTransactions();
+    m_selectedForCopy = m_selected_id;
+
+    if (wxTheClipboard->Open()) {
+        const wxString seperator = "\t";
+        wxString data = "";
+        for (int row = 0; row < GetItemCount(); row++) {
+            if (GetItemState(row, wxLIST_STATE_SELECTED) == wxLIST_STATE_SELECTED) {
+                for (int col_vo = 0; col_vo < getColNrSize(); ++col_vo) {
+                    int col_nr = getColNr_Vo(col_vo);
+                    if (!isHiddenColNr(col_nr)) {
+                        data += inQuotes(OnGetItemText(row, col_nr), seperator);
+                        data += seperator;
+                    }
+                }
+                data += "\n";
+            }
+        }
+        wxTheClipboard->SetData(new wxTextDataObject(data));
+        wxTheClipboard->Close();
+    }
 }
 
-void TransactionListCtrl::doSearchText(const wxString& value)
+void TransactionListCtrl::onPaste(wxCommandEvent& WXUNUSED(event))
 {
-    const wxString pattern = value.Lower().Append("*");
+    // we can't paste with multiple accounts open, deleted items, or if there is nothing to paste
+    if (!m_cp->isAccount() || m_selectedForCopy.size() < 1)
+        return;
 
-    long last = static_cast<long>(GetItemCount() - 1);
-    if (m_selected_id.size() > 1) {
-        SetEvtHandlerEnabled(false);
-        for (long i = 0; i < last; i++) {
-            long cursel = GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
-            if (cursel != wxNOT_FOUND)
-                SetItemState(cursel, 0, wxLIST_STATE_SELECTED | wxLIST_STATE_FOCUSED);
+    findSelectedTransactions();
+    Model_Checking::instance().Savepoint();
+    m_pasted_id.clear();    // make sure the list is empty before we paste
+    for (const auto& id : m_selectedForCopy) {
+        if (!id.second) {
+            Model_Checking::Data* tran = Model_Checking::instance().get(id.first);
+            if (Model_Checking::foreignTransaction(*tran)) continue;
+            onPaste(tran);
         }
-        SetEvtHandlerEnabled(true);
     }
+    Model_Checking::instance().ReleaseSavepoint();
+    refreshVisualList();
+}
 
-    long selectedItem = GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
+int64 TransactionListCtrl::onPaste(Model_Checking::Data* tran)
+{
+    wxASSERT(m_cp->isAccount());
 
-    if (selectedItem < 0 || selectedItem > last) //nothing selected
-        selectedItem = g_asc ? last + 1  : -1;
+    bool useOriginalDate = Model_Setting::instance().getBool(INIDB_USE_ORG_DATE_COPYPASTE, false);
 
-    while (true) {
-        g_asc ? selectedItem-- : selectedItem++;
-        if (selectedItem < 0 || selectedItem >= static_cast<long>(m_trans.size()))
-            break;
+    //TODO: the clone function can't clone split transactions, or custom data
+    Model_Checking::Data* copy = Model_Checking::instance().clone(tran); 
+    if (!useOriginalDate) copy->TRANSDATE = wxDateTime::Now().FormatISOCombined();
+    if (Model_Checking::type_id(copy->TRANSCODE) != Model_Checking::TYPE_ID_TRANSFER ||
+        (m_cp->m_account_id != copy->ACCOUNTID && m_cp->m_account_id != copy->TOACCOUNTID)
+    )
+        copy->ACCOUNTID = m_cp->m_account_id;
+    int64 transactionID = Model_Checking::instance().save(copy);
+    m_pasted_id.push_back({transactionID, 0});   // add the newly pasted transaction
 
-        wxString test1 = Model_Currency::fromString2CLocale(value);
-        double v;
-        if (test1.ToCDouble(&v)) {
-            try {
-                double amount = m_trans.at(selectedItem).TRANSAMOUNT;
-                double to_trans_amount = m_trans.at(selectedItem).TOTRANSAMOUNT;
-                if (v == amount || v == to_trans_amount) {
-                    return markItem(selectedItem);
-                }
-            }
-            catch (std::exception & ex) {
-                wxLogDebug("%s | row invalid %ld", ex.what(), selectedItem);
-            }
+    // Clone transaction tags
+    Model_Taglink::Cache copy_taglinks;
+    wxString reftype = Model_Checking::refTypeName;
+    for (const auto& link : Model_Taglink::instance().find(Model_Taglink::REFTYPE(reftype), Model_Taglink::REFID(tran->TRANSID))) {
+        Model_Taglink::Data* taglink = Model_Taglink::instance().clone(&link);
+        taglink->REFID = transactionID;
+        copy_taglinks.push_back(taglink);
+    }
+
+    // Clone split transactions
+    reftype = Model_Splittransaction::refTypeName;
+    for (const auto& split_item : Model_Checking::split(tran)) {
+        Model_Splittransaction::Data *copy_split_item = Model_Splittransaction::instance().clone(&split_item);
+        copy_split_item->TRANSID = transactionID;
+        int64 splittransID = Model_Splittransaction::instance().save(copy_split_item);
 
+        // Clone split tags
+        for (const auto& link : Model_Taglink::instance().find(
+            Model_Taglink::REFTYPE(reftype),
+            Model_Taglink::REFID(split_item.SPLITTRANSID)
+        )) {
+            Model_Taglink::Data* taglink = Model_Taglink::instance().clone(&link);
+            taglink->REFID = splittransID;
+            copy_taglinks.push_back(taglink);
         }
+    }
+    Model_Taglink::instance().save(copy_taglinks);
 
-        for (const auto& t : {
-            COL_NOTES, COL_NUMBER, COL_PAYEE_STR, COL_CATEGORY, COL_DATE, COL_TAGS,
-            COL_DELETEDTIME, COL_UDFC01, COL_UDFC02, COL_UDFC03, COL_UDFC04, COL_UDFC05
-        }) {
-            const auto test = getItem(selectedItem, t, true).Lower();
-            if (test.empty())
-                continue;
-            if (test.Matches(pattern)) {
-                return markItem(selectedItem);
-            }
+    // Clone duplicate custom fields
+    const auto& data_set = Model_CustomFieldData::instance().find(
+        Model_CustomFieldData::REFID(tran->TRANSID)
+    );
+    if (data_set.size() > 0) {
+        Model_CustomFieldData::instance().Savepoint();
+        for (const auto& item : data_set) {
+            Model_CustomFieldData::Data* fieldData = Model_CustomFieldData::instance().create();
+            fieldData->FIELDID = item.FIELDID;
+            fieldData->REFID = transactionID;
+            fieldData->CONTENT = item.CONTENT;
+            Model_CustomFieldData::instance().save(fieldData);
         }
+        Model_CustomFieldData::instance().ReleaseSavepoint();
+    }
 
-        for (const auto& entry : m_trans.at(selectedItem).ATTACHMENT_DESCRIPTION) {
-            wxString test = entry.Lower();
-            if (test.Matches(pattern)) {
-                return markItem(selectedItem);
-            }
+    // Clone attachments if wanted
+    if (Model_Infotable::instance().getBool("ATTACHMENTSDUPLICATE", false)) {
+        const wxString& RefType = Model_Checking::refTypeName;
+        mmAttachmentManage::CloneAllAttachments(RefType, tran->TRANSID, transactionID);
+    }
+
+    return transactionID;
+}
+
+void TransactionListCtrl::onDuplicateTransaction(wxCommandEvent& WXUNUSED(event))
+{
+    // we can only duplicate a single transaction
+    if (GetSelectedItemCount() != 1) return;
+    findSelectedTransactions();
+    Fused_Transaction::IdRepeat id = m_selected_id[0];
+
+    mmTransDialog dlg(this, m_cp->m_account_id, {id.first, id.second != 0}, true);
+    if (dlg.ShowModal() != wxID_CANCEL) {
+        m_selected_id.clear();
+        m_pasted_id.push_back({dlg.GetTransactionID(), 0});
+        m_cp->mmPlayTransactionSound();
+        refreshVisualList();
+    }
+    m_topItemIndex = GetTopItem() + GetCountPerPage() - 1;
+}
+
+void TransactionListCtrl::onEnterScheduled(wxCommandEvent& WXUNUSED(event))
+{
+    if (GetSelectedItemCount() != 1) return;
+    findSelectedTransactions();
+    Fused_Transaction::IdRepeat id = m_selected_id[0];
+
+    if (id.second == 1) {
+        mmBDDialog dlg(this, id.first, false, true);
+        if ( dlg.ShowModal() == wxID_OK ) {
+            refreshVisualList();
         }
+    }
+}
+
+void TransactionListCtrl::onSkipScheduled(wxCommandEvent& WXUNUSED(event))
+{
+    if (GetSelectedItemCount() != 1) return;
+    findSelectedTransactions();
+    Fused_Transaction::IdRepeat id = m_selected_id[0];
 
+    if (id.second == 1) {
+        Model_Billsdeposits::instance().completeBDInSeries(id.first);
+        refreshVisualList();
     }
+}
 
-    wxLogDebug("Searching finished");
-    selectedItem = g_asc ? last : 0;
-    long cursel = GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
-    SetItemState(cursel, 0, wxLIST_STATE_SELECTED | wxLIST_STATE_FOCUSED);
-    EnsureVisible(selectedItem);
+void TransactionListCtrl::onSetUserColour(wxCommandEvent& event)
+{
+    if (m_cp->isDeletedTrans())
+        return;
+
+    findSelectedTransactions();
+    int user_color_id = event.GetId();
+    user_color_id -= MENU_ON_SET_UDC0;
+    wxLogDebug("id: %i", user_color_id);
+
+    Model_Checking::instance().Savepoint();
+    Model_Billsdeposits::instance().Savepoint();
+    for (const auto& id : m_selected_id) {
+        if (!id.second) {
+            Model_Checking::Data* tran = Model_Checking::instance().get(id.first);
+            if (tran) {
+                tran->COLOR = user_color_id;
+                Model_Checking::instance().save(tran);
+            }
+        }
+        else {
+            Model_Billsdeposits::Data* bill = Model_Billsdeposits::instance().get(id.first);
+            if (bill) {
+                bill->COLOR = user_color_id;
+                Model_Billsdeposits::instance().save(bill);
+            }
+        }
+    }
+    Model_Billsdeposits::instance().ReleaseSavepoint();
+    Model_Checking::instance().ReleaseSavepoint();
+    m_topItemIndex = GetTopItem() + GetCountPerPage() - 1;
+
+    refreshVisualList();
 }
 
+void TransactionListCtrl::onOpenAttachment(wxCommandEvent& WXUNUSED(event))
+{
+    // we can only open a single transaction
+    if (GetSelectedItemCount() != 1) return;
+    findSelectedTransactions();
+    Fused_Transaction::IdRepeat id = m_selected_id[0];
+
+    const wxString refType = !id.second ?
+        Model_Checking::refTypeName :
+        Model_Billsdeposits::refTypeName;
+    mmAttachmentManage::OpenAttachmentFromPanelIcon(this, refType, id.first);
+    refreshVisualList();
+}
+
+//----------------------------------------------------------------------------
+
 wxString UDFCFormatHelper(Model_CustomField::TYPE_ID type, wxString data)
 {
     wxString formattedData = data;
@@ -2022,37 +1782,40 @@
     return formattedData;
 }
 
-const wxString TransactionListCtrl::getItem(long item, long column, bool realenum) const
+const wxString TransactionListCtrl::getItem(long item, int col_id) const
 {
-    if (item < 0 || item >= static_cast<int>(m_trans.size())) return "";
-
+    if (item < 0 || item >= static_cast<int>(m_trans.size()))
+        return "";
+    // TODO: add isHiddenColId(col_id)
+    if (isDisabledColId(col_id))
+        return "";
     const Fused_Transaction::Full_Data& fused = m_trans.at(item);
 
     wxString value = wxEmptyString;
     wxDateTime datetime;
     wxString dateFormat = Option::instance().getDateFormat();
-    switch (realenum ? column : m_real_columns[column]) {
-    case TransactionListCtrl::COL_SN:
+    switch (col_id) {
+    case LIST_ID_SN:
         return fused.displaySN;
-    case TransactionListCtrl::COL_ID:
+    case LIST_ID_ID:
         return fused.displayID;
-    case TransactionListCtrl::COL_ACCOUNT:
+    case LIST_ID_ACCOUNT:
         return fused.ACCOUNTNAME;
-    case TransactionListCtrl::COL_DATE:
+    case LIST_ID_DATE:
         return mmGetDateForDisplay(fused.TRANSDATE);
-    case TransactionListCtrl::COL_TIME:
+    case LIST_ID_TIME:
         return mmGetTimeForDisplay(fused.TRANSDATE);
-    case TransactionListCtrl::COL_NUMBER:
+    case LIST_ID_NUMBER:
         return fused.TRANSACTIONNUMBER;
-    case TransactionListCtrl::COL_CATEGORY:
+    case LIST_ID_CATEGORY:
         return fused.CATEGNAME;
-    case TransactionListCtrl::COL_PAYEE_STR:
+    case LIST_ID_PAYEE_STR:
         return fused.is_foreign_transfer() ?
             (Model_Checking::type_id(fused.TRANSCODE) == Model_Checking::TYPE_ID_DEPOSIT ? "< " : "> ") + fused.PAYEENAME :
             fused.PAYEENAME;
-    case TransactionListCtrl::COL_STATUS:
+    case LIST_ID_STATUS:
         return fused.is_foreign() ? "< " + fused.STATUS : fused.STATUS;
-    case TransactionListCtrl::COL_NOTES: {
+    case LIST_ID_NOTES: {
         value = fused.NOTES;
         if (!fused.displayID.Contains(".")) {
             for (const auto& split : fused.m_splits)
@@ -2063,10 +1826,10 @@
             value.Prepend(mmAttachmentManage::GetAttachmentNoteSign());
         return value.Trim(false);
     }
-    case TransactionListCtrl::COL_TAGS:
+    case LIST_ID_TAGS:
         value = fused.TAGNAMES;
         if (!fused.displayID.Contains(".")) {
-            const wxString splitRefType = Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT;
+            const wxString splitRefType = Model_Splittransaction::refTypeName;
             for (const auto& split : fused.m_splits) {
                 wxString tagnames;
                 std::map<wxString, int64> tags = Model_Taglink::instance().get(splitRefType, split.SPLITTRANSID);
@@ -2078,30 +1841,30 @@
             }
         }
         return value.Trim();
-    case TransactionListCtrl::COL_DELETEDTIME:
-        datetime.ParseISOCombined(fused.DELETEDTIME);        
+    case LIST_ID_DELETEDTIME:
+        datetime.ParseISOCombined(fused.DELETEDTIME);
         if(!datetime.IsValid())
             return wxString("");
         return mmGetDateTimeForDisplay(datetime.FromUTC().FormatISOCombined(), dateFormat + " %H:%M:%S");
-    case TransactionListCtrl::COL_UDFC01:
+    case LIST_ID_UDFC01:
         return UDFCFormatHelper(fused.UDFC_type[0], fused.UDFC_content[0]);
-    case TransactionListCtrl::COL_UDFC02:
+    case LIST_ID_UDFC02:
         return UDFCFormatHelper(fused.UDFC_type[1], fused.UDFC_content[1]);
-    case TransactionListCtrl::COL_UDFC03:
+    case LIST_ID_UDFC03:
         return UDFCFormatHelper(fused.UDFC_type[2], fused.UDFC_content[2]);
-    case TransactionListCtrl::COL_UDFC04:
+    case LIST_ID_UDFC04:
         return UDFCFormatHelper(fused.UDFC_type[3], fused.UDFC_content[3]);
-    case TransactionListCtrl::COL_UDFC05:
+    case LIST_ID_UDFC05:
         return UDFCFormatHelper(fused.UDFC_type[4], fused.UDFC_content[4]);
-    case TransactionListCtrl::COL_UPDATEDTIME:
+    case LIST_ID_UPDATEDTIME:
         datetime.ParseISOCombined(fused.LASTUPDATEDTIME);
         if (!datetime.IsValid())
             return wxString("");
         return mmGetDateTimeForDisplay(datetime.FromUTC().FormatISOCombined(), dateFormat + " %H:%M:%S");
     }
 
-    switch (realenum ? column : m_real_columns[column]) {
-    case TransactionListCtrl::COL_WITHDRAWAL:
+    switch (col_id) {
+    case LIST_ID_WITHDRAWAL:
         if (!m_cp->isAccount()) {
             Model_Account::Data* account = Model_Account::instance().get(fused.ACCOUNTID_W);
             Model_Currency::Data* currency = account ?
@@ -2115,7 +1878,7 @@
         if (!value.IsEmpty() && Model_Checking::status_id(fused.STATUS) == Model_Checking::STATUS_ID_VOID)
             value = "* " + value;
         return value;
-    case TransactionListCtrl::COL_DEPOSIT:
+    case LIST_ID_DEPOSIT:
         if (!m_cp->isAccount()) {
             Model_Account::Data* account = Model_Account::instance().get(fused.ACCOUNTID_D);
             Model_Currency::Data* currency = account ?
@@ -2129,9 +1892,9 @@
         if (!value.IsEmpty() && Model_Checking::status_id(fused.STATUS) == Model_Checking::STATUS_ID_VOID)
             value = "* " + value;
         return value;
-    case TransactionListCtrl::COL_BALANCE:
+    case LIST_ID_BALANCE:
         return Model_Currency::toString(fused.ACCOUNT_BALANCE, m_cp->m_currency);
-    case TransactionListCtrl::COL_CREDIT:
+    case LIST_ID_CREDIT:
         return Model_Currency::toString(
             m_cp->m_account->CREDITLIMIT + fused.ACCOUNT_BALANCE,
             m_cp->m_currency
@@ -2141,7 +1904,50 @@
     return value;
 }
 
-void TransactionListCtrl::FindSelectedTransactions()
+void TransactionListCtrl::setExtraTransactionData(const bool single)
+{
+    int repeat_num = 0;
+    bool isForeign = false;
+    if (single) {
+        Fused_Transaction::IdRepeat id = m_selected_id[0];
+        Fused_Transaction::Data tran = !id.second ?
+            Fused_Transaction::Data(*Model_Checking::instance().get(id.first)) :
+            Fused_Transaction::Data(*Model_Billsdeposits::instance().get(id.first));
+        if (Model_Checking::foreignTransaction(tran))
+            isForeign = true;
+        repeat_num = id.second;
+    }
+    m_cp->updateExtraTransactionData(single, repeat_num, isForeign);
+}
+
+void TransactionListCtrl::markItem(long selectedItem)
+{
+    //First of all any items should be unselected
+    long cursel = GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
+    if (cursel != wxNOT_FOUND)
+        SetItemState(cursel, 0, wxLIST_STATE_SELECTED | wxLIST_STATE_FOCUSED);
+
+    //Then finded item will be selected
+    SetItemState(selectedItem, wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED);
+    EnsureVisible(selectedItem);
+    return;
+}
+
+void TransactionListCtrl::setSelectedId(Fused_Transaction::IdRepeat sel_id)
+{ 
+    int i = 0;
+    for (const auto& fused : m_trans) {
+        if (fused.m_repeat_num == sel_id.second && fused.TRANSID == sel_id.first) {
+            SetItemState(i, wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED);
+            SetItemState(i, wxLIST_STATE_FOCUSED, wxLIST_STATE_FOCUSED);
+            m_topItemIndex = i;
+            break;
+        }
+        i++;
+    }
+}
+
+void TransactionListCtrl::findSelectedTransactions()
 {
     // find the selected transactions
     long x = 0;
@@ -2158,16 +1964,209 @@
     }
 }
 
-void TransactionListCtrl::setSelectedID(Fused_Transaction::IdRepeat sel_id)
-{ 
-    int i = 0;
-    for (const auto& fused : m_trans) {
-        if (fused.m_repeat_num == sel_id.first && fused.TRANSID == sel_id.first) {
-            SetItemState(i, wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED);
-            SetItemState(i, wxLIST_STATE_FOCUSED, wxLIST_STATE_FOCUSED);
-            m_topItemIndex = i;
+int TransactionListCtrl::getColNr_X(int xPos)
+{
+    int col_vo = 0;
+    int x = -GetScrollPos(wxHORIZONTAL);
+    for (col_vo = 0; col_vo < GetColumnCount(); col_vo++) {
+        x += GetColumnWidth(getColNr_Vo(col_vo));
+        if (x >= xPos) break;
+    }
+    if (col_vo >= GetColumnCount())
+        return -1;
+    return getColNr_Vo(col_vo);
+}
+
+void TransactionListCtrl::doSearchText(const wxString& value)
+{
+    const wxString pattern = value.Lower().Append("*");
+
+    long last = static_cast<long>(GetItemCount() - 1);
+    if (m_selected_id.size() > 1) {
+        SetEvtHandlerEnabled(false);
+        for (long i = 0; i < last; i++) {
+            long cursel = GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
+            if (cursel != wxNOT_FOUND)
+                SetItemState(cursel, 0, wxLIST_STATE_SELECTED | wxLIST_STATE_FOCUSED);
+        }
+        SetEvtHandlerEnabled(true);
+    }
+
+    long selectedItem = GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
+
+    if (selectedItem < 0 || selectedItem > last) //nothing selected
+        selectedItem = getSortAsc(0) ? last + 1  : -1;
+
+    while (true) {
+        getSortAsc(0) ? selectedItem-- : selectedItem++;
+        if (selectedItem < 0 || selectedItem >= static_cast<long>(m_trans.size()))
             break;
+
+        wxString test1 = Model_Currency::fromString2CLocale(value);
+        double v;
+        if (test1.ToCDouble(&v)) {
+            try {
+                double amount = m_trans.at(selectedItem).TRANSAMOUNT;
+                double to_trans_amount = m_trans.at(selectedItem).TOTRANSAMOUNT;
+                if (v == amount || v == to_trans_amount) {
+                    return markItem(selectedItem);
+                }
+            }
+            catch (std::exception & ex) {
+                wxLogDebug("%s | row invalid %ld", ex.what(), selectedItem);
+            }
+
+        }
+
+        for (const auto& t : {
+            LIST_ID_NOTES, LIST_ID_NUMBER, LIST_ID_PAYEE_STR, LIST_ID_CATEGORY,
+            LIST_ID_DATE, LIST_ID_TAGS, LIST_ID_DELETEDTIME, LIST_ID_UDFC01,
+            LIST_ID_UDFC02, LIST_ID_UDFC03, LIST_ID_UDFC04, LIST_ID_UDFC05
+        }) {
+            const auto test = getItem(selectedItem, t).Lower();
+            if (test.empty())
+                continue;
+            if (test.Matches(pattern)) {
+                return markItem(selectedItem);
+            }
+        }
+
+        for (const auto& entry : m_trans.at(selectedItem).ATTACHMENT_DESCRIPTION) {
+            wxString test = entry.Lower();
+            if (test.Matches(pattern)) {
+                return markItem(selectedItem);
+            }
+        }
+
+    }
+
+    wxLogDebug("Searching finished");
+    selectedItem = getSortAsc(0) ? last : 0;
+    long cursel = GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
+    SetItemState(cursel, 0, wxLIST_STATE_SELECTED | wxLIST_STATE_FOCUSED);
+    EnsureVisible(selectedItem);
+}
+
+void TransactionListCtrl::markSelectedTransaction()
+{
+    long i = 0;
+    for (const auto & tran : m_trans) {
+        Fused_Transaction::IdRepeat id = { !tran.m_repeat_num ? tran.TRANSID : tran.m_bdid,
+            tran.m_repeat_num };
+        //reset any selected items in the list
+        if (GetItemState(i, wxLIST_STATE_SELECTED) == wxLIST_STATE_SELECTED)
+            SetItemState(i, 0, wxLIST_STATE_SELECTED);
+        if (!m_selected_id.empty()) {
+            // discover where the transaction has ended up in the list
+            if (getSortAsc(0)) {
+                if (m_topItemIndex < i && id == m_selected_id.back())
+                    m_topItemIndex = i;
+            } else {
+                if (m_topItemIndex > i && id == m_selected_id.back())
+                    m_topItemIndex = i;
+            }
+        }
+        ++i;
+    }
+
+    if (m_trans.empty()) return;
+
+    if (m_selected_id.empty()) {
+        i = static_cast<long>(m_trans.size()) - 1;
+        if (!getSortAsc(0))
+            i = 0;
+        EnsureVisible(i);
+    }
+}
+
+void TransactionListCtrl::deleteTransactionsByStatus(const wxString& status)
+{
+    int retainDays = Model_Setting::instance().getInt("DELETED_TRANS_RETAIN_DAYS", 30);
+    wxString deletionTime = wxDateTime::Now().ToUTC().FormatISOCombined();
+    std::set<std::pair<wxString, int64>> assetStockAccts;
+    const auto s = Model_Checking::status_key(status);
+    Model_Checking::instance().Savepoint();
+    Model_Attachment::instance().Savepoint();
+    Model_Splittransaction::instance().Savepoint();
+    Model_CustomFieldData::instance().Savepoint();
+    for (const auto& tran : this->m_trans) {
+        if (tran.m_repeat_num) continue;
+        if (tran.STATUS == s || (s.empty() && status.empty())) {
+            if (m_cp->isDeletedTrans() || retainDays == 0) {
+                // remove also removes any split transactions, translink entries, attachments, and custom field data
+                Model_Checking::instance().remove(tran.TRANSID);
+            }
+            else {
+                Model_Checking::Data* trx = Model_Checking::instance().get(tran.TRANSID);
+                trx->DELETEDTIME = deletionTime;
+                Model_Checking::instance().save(trx);
+                Model_Translink::Data_Set translink = Model_Translink::instance().find(Model_Translink::CHECKINGACCOUNTID(trx->TRANSID));
+                if (!translink.empty()) {
+                    assetStockAccts.emplace(translink.at(0).LINKTYPE, translink.at(0).LINKRECORDID);
+                }
+            }
+        }
+    }
+
+    if (!assetStockAccts.empty()) {
+        for (const auto& i : assetStockAccts) {
+            if (i.first == "Asset") Model_Translink::UpdateAssetValue(Model_Asset::instance().get(i.second));
+            else if (i.first == "Stock") Model_Stock::UpdatePosition(Model_Stock::instance().get(i.second));
         }
-        i++;
     }
+
+    Model_Splittransaction::instance().ReleaseSavepoint();
+    Model_Attachment::instance().ReleaseSavepoint();
+    Model_Checking::instance().ReleaseSavepoint();
+    Model_CustomFieldData::instance().ReleaseSavepoint();
 }
+
+bool TransactionListCtrl::checkForClosedAccounts()
+{
+    int closedTrx = 0;
+    for (const auto& id : m_selected_id) {
+        Fused_Transaction::Data tran = !id.second ?
+            Fused_Transaction::Data(*Model_Checking::instance().get(id.first)) :
+            Fused_Transaction::Data(*Model_Billsdeposits::instance().get(id.first));
+        Model_Account::Data* account = Model_Account::instance().get(tran.ACCOUNTID);
+        if (account && Model_Account::STATUS_ID_CLOSED == Model_Account::status_id(account)) {
+            closedTrx++;
+            continue;
+        }
+        Model_Account::Data* to_account = Model_Account::instance().get(tran.TOACCOUNTID);
+        if (to_account && Model_Account::STATUS_ID_CLOSED == Model_Account::status_id(account))
+            closedTrx++;
+    }
+
+    if (!closedTrx)
+        return true;
+    else {
+        const wxString text = wxString::Format(
+            wxPLURAL("You are about to edit a transaction involving an account that is closed."
+            , "The edit will affect %i transactions involving an account that is closed.", GetSelectedItemCount())
+            , closedTrx) + "\n\n" + _t("Do you want to perform the edit?");
+        if (wxMessageBox(text, _t("Closed Account Check"), wxYES_NO | wxICON_WARNING) == wxYES)
+            return true;
+    }
+    return false;
+}
+
+bool TransactionListCtrl::checkTransactionLocked(int64 accountID, const wxString& transdate)
+{
+    Model_Account::Data* account = Model_Account::instance().get(accountID);
+    if (Model_Account::BoolOf(account->STATEMENTLOCKED)) {
+        wxDateTime transaction_date;
+        if (transaction_date.ParseDate(transdate)) {
+            if (transaction_date <= Model_Account::DateOf(account->STATEMENTDATE)) {
+                wxMessageBox(wxString::Format(
+                    _t("Locked transaction to date: %s\n\n"
+                      "Reconciled transactions.")
+                    , mmGetDateTimeForDisplay(account->STATEMENTDATE))
+                    , _t("MMEX Transaction Check"), wxOK | wxICON_WARNING);
+                return true;
+            }
+        }
+    }
+    return false;
+}
+
diff -Naur a/src/mmchecking_list.h b/src/mmchecking_list.h
--- a/src/mmchecking_list.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmchecking_list.h	2025-07-09 01:46:59.648940508 +0200
@@ -31,103 +31,48 @@
 class TransactionListCtrl : public mmListCtrl
 {
 public:
-    TransactionListCtrl(mmCheckingPanel* cp
-        , wxWindow* parent
-        , const wxWindowID id = wxID_ANY);
-
+    TransactionListCtrl(
+        mmCheckingPanel* cp,
+        wxWindow* parent,
+        const wxWindowID id = wxID_ANY
+    );
     ~TransactionListCtrl();
 
-    Fused_Transaction::Full_Data_Set m_trans;
-    void markSelectedTransaction();
-    void DeleteTransactionsByStatus(const wxString& status);
-    void resetColumns();
+private:
+    friend class mmCheckingPanel;
 
-public:
-    enum EColumn
+    enum LIST_ID
     {
-        COL_IMGSTATUS = 0,
-        COL_ID,
-        COL_DATE,
-        COL_TIME,
-        COL_NUMBER,
-        COL_ACCOUNT,
-        COL_PAYEE_STR,
-        COL_STATUS,
-        COL_CATEGORY,
-        COL_TAGS,
-        COL_WITHDRAWAL,
-        COL_DEPOSIT,
-        COL_BALANCE,
-        COL_CREDIT,
-        COL_NOTES,
-        COL_DELETEDTIME,
-        COL_UDFC01,
-        COL_UDFC02,
-        COL_UDFC03,
-        COL_UDFC04,
-        COL_UDFC05,
-        COL_UPDATEDTIME,
-        COL_SN,
-        COL_size, // number of columns
-        COL_def_sort = COL_DATE, // don't omit any columns before this
-        COL_def_sort2 = COL_ID 
+        LIST_ID_ICON = 0,
+        LIST_ID_ID,
+        LIST_ID_DATE,
+        LIST_ID_TIME,
+        LIST_ID_NUMBER,
+        LIST_ID_ACCOUNT,
+        LIST_ID_PAYEE_STR,
+        LIST_ID_STATUS,
+        LIST_ID_CATEGORY,
+        LIST_ID_TAGS,
+        LIST_ID_WITHDRAWAL,
+        LIST_ID_DEPOSIT,
+        LIST_ID_BALANCE,
+        LIST_ID_CREDIT,
+        LIST_ID_NOTES,
+        LIST_ID_DELETEDTIME,
+        LIST_ID_UDFC01,
+        LIST_ID_UDFC02,
+        LIST_ID_UDFC03,
+        LIST_ID_UDFC04,
+        LIST_ID_UDFC05,
+        LIST_ID_UPDATEDTIME,
+        LIST_ID_SN,
+        LIST_ID_size
     };
-    EColumn toEColumn(const unsigned long col);
-
-    EColumn g_sortcol = COL_def_sort; // index of primary column to sort by
-    EColumn prev_g_sortcol = COL_def_sort2; // index of secondary column to sort by
-    bool g_asc = true; // asc\desc sorting for primary sort column
-    bool prev_g_asc = true; // asc\desc sorting for secondary sort column
-
-    bool getSortOrder() const;
-    EColumn getSortColumn() const { return m_sortCol; }
-
-    void setSortOrder(bool asc) { m_asc = asc; }
-    void setSortColumn(EColumn col) { m_sortCol = col; }
-    void setVisibleItemIndex(long v);
+    static const std::vector<ListColumnInfo> LIST_INFO;
 
-    void setColumnImage(EColumn col, int image);
-public:
-    void OnNewTransaction(wxCommandEvent& event);
-    void OnDeleteTransaction(wxCommandEvent& event);
-    void OnRestoreTransaction(wxCommandEvent& event);
-    void OnDeleteViewedTransaction(wxCommandEvent& event);
-    void OnRestoreViewedTransaction(wxCommandEvent&);
-    void OnEditTransaction(wxCommandEvent& event);
-    void OnDuplicateTransaction(wxCommandEvent& event);
-    void OnEnterScheduled(wxCommandEvent& event);
-    void OnSkipScheduled(wxCommandEvent& event);
-    void OnSetUserColour(wxCommandEvent& event);
-    void OnMoveTransaction(wxCommandEvent& event);
-    void OnOpenAttachment(wxCommandEvent& event);
-    void OnViewOtherAccount(wxCommandEvent& event);
-    // Displays the split categories for the selected transaction
-    void OnViewSplitTransaction(wxCommandEvent& event);
-    void OnOrganizeAttachments(wxCommandEvent& event);
-    void OnCreateReoccurance(wxCommandEvent& event);
-    void refreshVisualList(bool filter = true);
-    void sortTable();
-public:
-    std::vector<Fused_Transaction::IdRepeat> getSelectedForCopy() const;
-    std::vector<Fused_Transaction::IdRepeat> getSelectedId() const;
-    void setSelectedID(Fused_Transaction::IdRepeat sel_id);
-    void doSearchText(const wxString& value);
-    /* Getter for Virtual List Control */
-    const wxString getItem(long item, long column, bool realenum = false) const;
-
-protected:
-    /* Sort Columns */
-    virtual void OnColClick(wxListEvent& event);
-
-private:
-    void markItem(long selectedItem);
-
-    std::vector<Fused_Transaction::IdRepeat> m_selectedForCopy; // the copied transactions (held for pasting)
-    std::vector<Fused_Transaction::IdRepeat> m_pasted_id;       // the last pasted transactions
-    std::vector<Fused_Transaction::IdRepeat> m_selected_id;     // the selected transactions
     enum
     {
-        MENU_TREEPOPUP_MARKRECONCILED = wxID_HIGHEST + 150,
+        MENU_TREEPOPUP_MARKRECONCILED = wxID_HIGHEST + 200,
         MENU_TREEPOPUP_MARKUNRECONCILED,
         MENU_TREEPOPUP_MARKVOID,
         MENU_TREEPOPUP_MARK_ADD_FLAG_FOLLOWUP,
@@ -154,14 +99,14 @@
         MENU_ON_ENTER_SCHEDULED,
         MENU_ON_SKIP_SCHEDULED,
 
-        MENU_ON_SET_UDC0, //Default color
-        MENU_ON_SET_UDC1, //User defined color 1
-        MENU_ON_SET_UDC2, //User defined color 2
-        MENU_ON_SET_UDC3, //User defined color 3
-        MENU_ON_SET_UDC4, //User defined color 4
-        MENU_ON_SET_UDC5, //User defined color 5
-        MENU_ON_SET_UDC6, //User defined color 6
-        MENU_ON_SET_UDC7, //User defined color 7
+        MENU_ON_SET_UDC0, // default color
+        MENU_ON_SET_UDC1, // user-defined color 1
+        MENU_ON_SET_UDC2, // user-defined color 2
+        MENU_ON_SET_UDC3, // user-defined color 3
+        MENU_ON_SET_UDC4, // user-defined color 4
+        MENU_ON_SET_UDC5, // user-defined color 5
+        MENU_ON_SET_UDC6, // user-defined color 6
+        MENU_ON_SET_UDC7, // user-defined color 7
 
         MENU_TREEPOPUP_WITHDRAWAL,
         MENU_TREEPOPUP_DEPOSIT,
@@ -176,72 +121,119 @@
         MENU_TREEPOPUP_RESTORE_VIEWED,
         ID_PANEL_CHECKING_STATIC_BITMAP_VIEW,
     };
+
 private:
+    Fused_Transaction::Full_Data_Set m_trans;
+    long m_topItemIndex = -1; // where to display the list again after refresh
+    wxString m_today;
+    bool m_firstSort = true;
+    wxString rightClickFilter_;
+    wxString copyText_;
+    std::vector<Fused_Transaction::IdRepeat> m_selectedForCopy; // copied transactions
+    std::vector<Fused_Transaction::IdRepeat> m_pasted_id;       // last pasted transactions
+    std::vector<Fused_Transaction::IdRepeat> m_selected_id;     // selected transactions
+
     DECLARE_NO_COPY_CLASS(TransactionListCtrl)
     wxDECLARE_EVENT_TABLE();
-
     mmCheckingPanel* m_cp = nullptr;
+    wxSharedPtr<wxListItemAttr> m_attr1;  // style 1
+    wxSharedPtr<wxListItemAttr> m_attr2;  // style 2
+    wxSharedPtr<wxListItemAttr> m_attr3;  // style 3 (reserved)
+    wxSharedPtr<wxListItemAttr> m_attr4;  // style 4 (reserved)
+    wxSharedPtr<wxListItemAttr> m_attr11; // user-defined style 1
+    wxSharedPtr<wxListItemAttr> m_attr12; // user-defined style 2
+    wxSharedPtr<wxListItemAttr> m_attr13; // user-defined style 3
+    wxSharedPtr<wxListItemAttr> m_attr14; // user-defined style 4
+    wxSharedPtr<wxListItemAttr> m_attr15; // user-defined style 5
+    wxSharedPtr<wxListItemAttr> m_attr16; // user-defined style 6
+    wxSharedPtr<wxListItemAttr> m_attr17; // user-defined style 7
 
-    wxSharedPtr<wxListItemAttr> m_attr1;  // style1
-    wxSharedPtr<wxListItemAttr> m_attr2;  // style2
-    wxSharedPtr<wxListItemAttr> m_attr3;  // style, for future dates
-    wxSharedPtr<wxListItemAttr> m_attr4;  // style, for future dates
-    wxSharedPtr<wxListItemAttr> m_attr11; // user defined style 1
-    wxSharedPtr<wxListItemAttr> m_attr12; // user defined style 2
-    wxSharedPtr<wxListItemAttr> m_attr13; // user defined style 3
-    wxSharedPtr<wxListItemAttr> m_attr14; // user defined style 4
-    wxSharedPtr<wxListItemAttr> m_attr15; // user defined style 5
-    wxSharedPtr<wxListItemAttr> m_attr16; // user defined style 6
-    wxSharedPtr<wxListItemAttr> m_attr17; // user defined style 7
-
-    /* required overrides for virtual style list control */
-    virtual wxString OnGetItemText(long item, long column) const;
-    virtual int OnGetItemColumnImage(long item, long column) const;
-    virtual wxListItemAttr* OnGetItemAttr(long item) const;
-
-    void OnMouseRightClick(wxMouseEvent& event);
-    void OnListLeftClick(wxMouseEvent& event);
-    void OnListItemSelected(wxListEvent&);
-    void OnListItemDeSelected(wxListEvent&);
-    void OnListItemActivated(wxListEvent& event);
-    void OnMarkTransaction(wxCommandEvent& event);
-    void OnListKeyDown(wxListEvent& event);
-    void OnChar(wxKeyEvent& event);
-    void OnSelectAll(wxCommandEvent& WXUNUSED(event));
-    void OnCopy(wxCommandEvent& WXUNUSED(event));
-    void OnPaste(wxCommandEvent& WXUNUSED(event));
-    void OnListItemFocused(wxListEvent& WXUNUSED(event));
-    int64 OnPaste(Model_Checking::Data* tran);
-
-    bool TransactionLocked(int64 AccountID, const wxString& transdate);
-    void FindSelectedTransactions();
-    bool CheckForClosedAccounts();
-    void setExtraTransactionData(const bool single);
+private:
+    void setColumnsInfo();
+    void refreshVisualList(bool filter = true);
+    void sortList();
     template<class Compare>
-    void SortBy(Compare comp, bool ascend);
-    void SortTransactions(int sortcol, bool ascend);
-    void findInAllTransactions(wxCommandEvent&);
-    void OnCopyText(wxCommandEvent&);
-    int getColumnFromPosition(int xPos);
+    void sortBy(Compare comp, bool ascend);
+    void sortTransactions(int col_id, bool ascend);
+
 private:
-    /* The topmost visible item - this will be used to set
-    where to display the list again after refresh */
-    long m_topItemIndex = -1;
-    EColumn m_sortCol = COL_def_sort;
-    wxString m_today;
-    bool m_firstSort = true;
-    wxString rightClickFilter_;
-    wxString copyText_;
+    // required overrides for virtual style list control
+    virtual wxString OnGetItemText(long item, long col_nr) const override;
+    virtual int OnGetItemColumnImage(long item, long col_nr) const override;
+    virtual wxListItemAttr* OnGetItemAttr(long item) const override;
+
+protected:
+    virtual int getSortIcon(bool asc) const override;
+    virtual void OnColClick(wxListEvent& event) override;
+
+private:
+    void onChar(wxKeyEvent& event);
+    void onListLeftClick(wxMouseEvent& event);
+    void onMouseRightClick(wxMouseEvent& event);
+
+    void onListItemActivated(wxListEvent& event);
+    void onListItemSelected(wxListEvent&);
+    void onListItemDeSelected(wxListEvent&);
+    void onListItemFocused(wxListEvent& WXUNUSED(event));
+    void onListKeyDown(wxListEvent& event);
+
+    void onNewTransaction(wxCommandEvent& event);
+    void onDeleteTransaction(wxCommandEvent& event);
+    void onRestoreTransaction(wxCommandEvent& event);
+    void onRestoreViewedTransaction(wxCommandEvent&);
+    void onEditTransaction(wxCommandEvent& event);
+    void onMoveTransaction(wxCommandEvent& event);
+    void onViewOtherAccount(wxCommandEvent& event);
+    void onViewSplitTransaction(wxCommandEvent& event);
+    void onOrganizeAttachments(wxCommandEvent& event);
+    void onCreateReoccurance(wxCommandEvent& event);
+    void onFind(wxCommandEvent&);
+    void onCopyText(wxCommandEvent&);
+    void onMarkTransaction(wxCommandEvent& event);
+    void onDeleteViewedTransaction(wxCommandEvent& event);
+
+    void onSelectAll(wxCommandEvent& WXUNUSED(event));
+    void onCopy(wxCommandEvent& WXUNUSED(event));
+    void onPaste(wxCommandEvent& WXUNUSED(event));
+    int64 onPaste(Model_Checking::Data* tran);
+    void onDuplicateTransaction(wxCommandEvent& event);
+    void onEnterScheduled(wxCommandEvent& event);
+    void onSkipScheduled(wxCommandEvent& event);
+    void onSetUserColour(wxCommandEvent& event);
+    void onOpenAttachment(wxCommandEvent& event);
+
+private:
+    const wxString getItem(long item, int col_id) const;
+    void setExtraTransactionData(const bool single);
+    void markItem(long selectedItem);
+    void setSelectedId(Fused_Transaction::IdRepeat sel_id);
+    std::vector<Fused_Transaction::IdRepeat> getSelectedId() const;
+    std::vector<Fused_Transaction::IdRepeat> getSelectedForCopy() const;
+    void findSelectedTransactions();
+    int getColNr_X(int xPos);
+    void doSearchText(const wxString& value);
+    void setVisibleItemIndex(long v);
+    void markSelectedTransaction();
+    void deleteTransactionsByStatus(const wxString& status);
+    bool checkForClosedAccounts();
+    bool checkTransactionLocked(int64 AccountID, const wxString& transdate);
 };
 
 //----------------------------------------------------------------------------
 
-inline bool TransactionListCtrl::getSortOrder() const { return m_asc; }
-inline std::vector<Fused_Transaction::IdRepeat> TransactionListCtrl::getSelectedForCopy() const { return m_selectedForCopy; }
-
-inline std::vector<Fused_Transaction::IdRepeat> TransactionListCtrl::getSelectedId() const { return m_selected_id; }
+inline std::vector<Fused_Transaction::IdRepeat> TransactionListCtrl::getSelectedId() const
+{
+    return m_selected_id;
+}
+inline std::vector<Fused_Transaction::IdRepeat> TransactionListCtrl::getSelectedForCopy() const
+{
+    return m_selectedForCopy;
+}
 
-inline void TransactionListCtrl::setVisibleItemIndex(long v) { m_topItemIndex = v; }
+inline void TransactionListCtrl::setVisibleItemIndex(long v)
+{
+    m_topItemIndex = v;
+}
 
 #endif // MM_EX_CHECKING_LIST_H_
 
@@ -250,21 +242,25 @@
 ) {
     return (i.UDFC_content[0] < j.UDFC_content[0]);
 }
+
 inline static bool SorterByUDFC02(
     const Model_Checking::Full_Data& i, const Model_Checking::Full_Data& j
 ) {
     return (i.UDFC_content[1] < j.UDFC_content[1]);
 }
+
 inline static bool SorterByUDFC03(
     const Model_Checking::Full_Data& i, const Model_Checking::Full_Data& j
 ) {
     return (i.UDFC_content[2] < j.UDFC_content[2]);
 }
+
 inline static bool SorterByUDFC04(
     const Model_Checking::Full_Data& i, const Model_Checking::Full_Data& j
 ) {
     return (i.UDFC_content[3] < j.UDFC_content[3]);
 }
+
 inline static bool SorterByUDFC05(
     const Model_Checking::Full_Data& i, const Model_Checking::Full_Data& j
 ) {
@@ -276,23 +272,28 @@
 ) {
     return (i.UDFC_value[0] < j.UDFC_value[0]);
 }
+
 inline static bool SorterByUDFC02_val(
     const Model_Checking::Full_Data& i, const Model_Checking::Full_Data& j
 ) {
     return (i.UDFC_value[1] < j.UDFC_value[1]);
 }
+
 inline static bool SorterByUDFC03_val(
     const Model_Checking::Full_Data& i, const Model_Checking::Full_Data& j
 ) {
     return (i.UDFC_value[2] < j.UDFC_value[2]);
 }
+
 inline static bool SorterByUDFC04_val(
     const Model_Checking::Full_Data& i, const Model_Checking::Full_Data& j
 ) {
     return (i.UDFC_value[3] < j.UDFC_value[3]);
 }
+
 inline static bool SorterByUDFC05_val(
     const Model_Checking::Full_Data& i, const Model_Checking::Full_Data& j
 ) {
     return (i.UDFC_value[4] < j.UDFC_value[4]);
 }
+
diff -Naur a/src/mmcheckingpanel.cpp b/src/mmcheckingpanel.cpp
--- a/src/mmcheckingpanel.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmcheckingpanel.cpp	2025-07-09 01:46:59.648940508 +0200
@@ -45,66 +45,45 @@
 #include <wx/srchctrl.h>
 #include <algorithm>
 #include <wx/sound.h>
+
 //----------------------------------------------------------------------------
 
-const std::vector<std::pair<mmCheckingPanel::FILTER_ID, wxString> > mmCheckingPanel::FILTER_CHOICES =
+const std::vector<std::pair<mmCheckingPanel::FILTER_ID, wxString> > mmCheckingPanel::FILTER_NAME =
 {
-    { mmCheckingPanel::FILTER_ID_ALL,            wxString(wxTRANSLATE("View All Transactions")) },
-    { mmCheckingPanel::FILTER_ID_TODAY,          wxString(wxTRANSLATE("View Today")) },
-    { mmCheckingPanel::FILTER_ID_CURRENTMONTH,   wxString(wxTRANSLATE("View Current Month")) },
-    { mmCheckingPanel::FILTER_ID_LAST30,         wxString(wxTRANSLATE("View Last 30 days")) },
-    { mmCheckingPanel::FILTER_ID_LAST90,         wxString(wxTRANSLATE("View Last 90 days")) },
-    { mmCheckingPanel::FILTER_ID_LASTMONTH,      wxString(wxTRANSLATE("View Last Month")) },
-    { mmCheckingPanel::FILTER_ID_LAST3MONTHS,    wxString(wxTRANSLATE("View Last 3 Months")) },
-    { mmCheckingPanel::FILTER_ID_LAST12MONTHS,   wxString(wxTRANSLATE("View Last 12 Months")) },
-    { mmCheckingPanel::FILTER_ID_CURRENTYEAR,    wxString(wxTRANSLATE("View Current Year")) },
-    { mmCheckingPanel::FILTER_ID_CURRENTFINYEAR, wxString(wxTRANSLATE("View Current Financial Year")) },
-    { mmCheckingPanel::FILTER_ID_LASTYEAR,       wxString(wxTRANSLATE("View Last Year")) },
-    { mmCheckingPanel::FILTER_ID_LASTFINYEAR,    wxString(wxTRANSLATE("View Last Financial Year")) },
-    { mmCheckingPanel::FILTER_ID_STATEMENTDATE,  wxString(wxTRANSLATE("View Since Statement Date")) },
-    { mmCheckingPanel::FILTER_ID_DIALOG,         wxString::FromUTF8(wxTRANSLATE("View Transaction Report…")) }
+    { mmCheckingPanel::FILTER_ID_DATE,     wxString("Date") },
+    { mmCheckingPanel::FILTER_ID_ADVANCED, wxString("Advanced") },
 };
 
-wxArrayString mmCheckingPanel::FILTER_STR = filter_str_all();
-const wxString mmCheckingPanel::FILTER_STR_ALL    = FILTER_STR[FILTER_ID_ALL];
-const wxString mmCheckingPanel::FILTER_STR_DIALOG = FILTER_STR[FILTER_ID_DIALOG];
+const wxString mmCheckingPanel::FILTER_NAME_DATE     = FILTER_NAME[FILTER_ID_DATE].second;
+const wxString mmCheckingPanel::FILTER_NAME_ADVANCED = FILTER_NAME[FILTER_ID_ADVANCED].second;
 
-wxArrayString mmCheckingPanel::filter_str_all()
-{
-    wxArrayString items;
-    int i = 0;
-    for (const auto& item: FILTER_CHOICES) {
-        wxASSERT_MSG(item.first == i++, "Wrong order in mmCheckingPanel::FILTER_CHOICES");
-        items.Add(item.second);
-    }
-    return items;
-}
 //----------------------------------------------------------------------------
 
 wxBEGIN_EVENT_TABLE(mmCheckingPanel, wxPanel)
-    EVT_BUTTON(wxID_NEW,       mmCheckingPanel::OnNewTransaction)
-    EVT_BUTTON(wxID_EDIT,      mmCheckingPanel::OnEditTransaction)
-    EVT_BUTTON(wxID_DUPLICATE, mmCheckingPanel::OnDuplicateTransaction)
-    EVT_BUTTON(wxID_UNDELETE,  mmCheckingPanel::OnRestoreTransaction)
-    EVT_BUTTON(wxID_REMOVE,    mmCheckingPanel::OnDeleteTransaction)
-    EVT_BUTTON(wxID_PASTE,     mmCheckingPanel::OnEnterScheduled)
-    EVT_BUTTON(wxID_IGNORE,    mmCheckingPanel::OnSkipScheduled)
-    EVT_BUTTON(wxID_FILE,      mmCheckingPanel::OnOpenAttachment)
-    EVT_BUTTON(ID_TRX_FILTER,  mmCheckingPanel::OnMouseLeftDown)
-    //EVT_CHECKBOX(ID_TRX_SCHEDULED, mmCheckingPanel::OnScheduled)
-    EVT_TOGGLEBUTTON(ID_TRX_SCHEDULED, mmCheckingPanel::OnScheduled)
-    EVT_SEARCHCTRL_SEARCH_BTN(wxID_FIND, mmCheckingPanel::OnSearchTxtEntered)
+    EVT_BUTTON(wxID_NEW,             mmCheckingPanel::onNewTransaction)
+    EVT_BUTTON(wxID_EDIT,            mmCheckingPanel::onEditTransaction)
+    EVT_BUTTON(wxID_DUPLICATE,       mmCheckingPanel::onDuplicateTransaction)
+    EVT_BUTTON(wxID_UNDELETE,        mmCheckingPanel::onRestoreTransaction)
+    EVT_BUTTON(wxID_REMOVE,          mmCheckingPanel::onDeleteTransaction)
+    EVT_BUTTON(wxID_PASTE,           mmCheckingPanel::onEnterScheduled)
+    EVT_BUTTON(wxID_IGNORE,          mmCheckingPanel::onSkipScheduled)
+    EVT_BUTTON(wxID_FILE,            mmCheckingPanel::onOpenAttachment)
+    EVT_BUTTON(mmID_FILTER,          mmCheckingPanel::onFilterPopup)
+    EVT_MENU(mmID_FILTER_ADVANCED,   mmCheckingPanel::onFilterAdvanced)
+    EVT_MENU(mmID_EDIT_DATE_RANGES,  mmCheckingPanel::onEditDateRanges)
+    EVT_TOGGLEBUTTON(mmID_SCHEDULED, mmCheckingPanel::onScheduled)
     EVT_MENU_RANGE(
-        wxID_HIGHEST + FILTER_ID_ALL,
-        wxID_HIGHEST + FILTER_ID_MAX,
-        mmCheckingPanel::OnViewPopupSelected
-    )
+        mmID_FILTER_DATE_MIN,
+        mmID_FILTER_DATE_MAX,
+        mmCheckingPanel::onFilterDate)
     EVT_MENU_RANGE(
         Model_Checking::TYPE_ID_WITHDRAWAL,
         Model_Checking::TYPE_ID_TRANSFER,
-        mmCheckingPanel::OnNewTransaction
+        mmCheckingPanel::onNewTransaction
     )
-wxEND_EVENT_TABLE()
+    EVT_SEARCHCTRL_SEARCH_BTN(wxID_FIND, mmCheckingPanel::onSearchTxtEntered)
+    wxEND_EVENT_TABLE()
+
 //----------------------------------------------------------------------------
 
 mmCheckingPanel::mmCheckingPanel(
@@ -129,8 +108,9 @@
     else {
         m_currency = Model_Currency::GetBaseCurrency();
     }
+    loadFilterSettings();
 
-    Create(parent);
+    create(parent);
     Fit();
 }
 
@@ -139,7 +119,7 @@
 {
 }
 
-bool mmCheckingPanel::Create(
+bool mmCheckingPanel::create(
     wxWindow* parent,
     const wxPoint& pos, const wxSize& size,
     long style, const wxString& name
@@ -149,51 +129,470 @@
         return false;
 
     this->windowsFreezeThaw();
-    CreateControls();
-
-    initFilterChoices();
-    updateFilterState();
-
-    if (m_transFilterActive) {
-        const wxString& def_view = wxString::Format(
-            R"({ "FILTER": "%s" })",
-            Model_Setting::instance().ViewTransactions()
-        );
-        wxString json = Model_Infotable::instance().GetStringInfo(
+    createControls();
+    updateFilter();
+    if (m_filter_id == FILTER_ID_ADVANCED) {
+        wxString j_str = Model_Infotable::instance().getString(
             wxString::Format("CHECK_FILTER_ID_ADV_%lld", m_checking_id),
-            def_view
+            "{}"
         );
-        m_trans_filter_dlg = new mmFilterTransactionsDialog(parent, m_account_id, false, json);
-        m_bitmapTransFilter->SetToolTip(m_trans_filter_dlg->mmGetDescriptionToolTip());
+        m_trans_filter_dlg = new mmFilterTransactionsDialog(parent, m_account_id, false, j_str);
     }
+    updateFilterTooltip();
 
-    RefreshList();
+    refreshList();
     this->windowsFreezeThaw();
-
     Model_Usage::instance().pageview(this);
     return true;
 }
+
+// Refresh account screen with new details
+void mmCheckingPanel::loadAccount(int64 account_id)
+{
+    wxASSERT (account_id >= 1);
+
+    m_lc->setVisibleItemIndex(-1);
+    m_checking_id = account_id;
+    m_account_id = account_id;
+    m_account_type = -1;
+    m_group_ids = {};
+    m_account = Model_Account::instance().get(m_account_id);
+    m_currency = Model_Account::currency(m_account);
+    loadFilterSettings();
+
+    updateFilter();
+    if (m_filter_id == FILTER_ID_ADVANCED) {
+        wxString j_str = Model_Infotable::instance().getString(
+            wxString::Format("CHECK_FILTER_ID_ADV_%lld", m_checking_id),
+            "{}"
+        );
+        m_trans_filter_dlg.reset(
+            new mmFilterTransactionsDialog(this, m_account_id, false, j_str)
+        );
+    }
+    updateFilterTooltip();
+
+    refreshList();
+    showTips();
+    enableButtons(false, false, false, false, false, false);
+}
+
 //----------------------------------------------------------------------------
 
-void mmCheckingPanel::sortTable()
+void mmCheckingPanel::createControls()
 {
-    m_listCtrlAccount->sortTable();
+    wxBoxSizer* sizerV = new wxBoxSizer(wxVERTICAL);
+    this->SetSizer(sizerV);
+
+    /* ---------------------- */
+
+    wxFlexGridSizer* sizerVHeader = new wxFlexGridSizer(0, 1, 0, 0);
+    sizerVHeader->AddGrowableCol(0, 0);
+    sizerV->Add(sizerVHeader, g_flagsBorder1V);
+
+    m_header_text = new wxStaticText(this, wxID_STATIC, "");
+    m_header_text->SetFont(this->GetFont().Larger().Bold());
+    sizerVHeader->Add(m_header_text, g_flagsExpandBorder1);
+
+    wxBoxSizer* sizerHInfo = new wxBoxSizer(wxHORIZONTAL);
+    m_header_balance = new wxStaticText(this, wxID_STATIC, "");
+    sizerHInfo->Add(m_header_balance, g_flagsH);
+    m_header_credit = new wxGauge(this, wxID_ANY, 100, wxDefaultPosition, wxSize(100,-1));
+    sizerHInfo->Add(m_header_credit, g_flagsH);
+    sizerVHeader->Add(sizerHInfo, g_flagsBorder1V);
+
+    wxBoxSizer* sizerHCtrl = new wxBoxSizer(wxHORIZONTAL);
+    m_bitmapTransFilter = new wxButton(this, mmID_FILTER);
+    m_bitmapTransFilter->SetBitmap(mmBitmapBundle(png::TRANSFILTER, mmBitmapButtonSize));
+    sizerHCtrl->Add(m_bitmapTransFilter, g_flagsH);
+    if (!isDeletedTrans()) {
+        sizerHCtrl->AddSpacer(15);
+        const auto& size = m_bitmapTransFilter->GetSize().GetY();
+        m_header_scheduled = new wxBitmapToggleButton(
+            this, mmID_SCHEDULED, mmBitmapBundle(png::RECURRING),
+            wxDefaultPosition, wxSize(size, size)
+        );
+        sizerHCtrl->Add(m_header_scheduled, g_flagsH);
+        sizerHCtrl->AddSpacer(10);
+    }
+    m_header_sortOrder = new wxStaticText(this, wxID_STATIC, "");
+    sizerHCtrl->Add(m_header_sortOrder, g_flagsH);
+    sizerVHeader->Add(sizerHCtrl, g_flagsBorder1H);
+
+    m_bitmapTransFilter->Connect(wxEVT_RIGHT_DOWN,
+        wxMouseEventHandler(mmCheckingPanel::onButtonRightDown), nullptr, this);
+
+    /* ---------------------- */
+
+    wxSplitterWindow* splitterListFooter = new wxSplitterWindow(
+        this, wxID_ANY, wxDefaultPosition, wxSize(200, 200),
+        wxSP_3DBORDER | wxSP_3DSASH | wxNO_BORDER
+    );
+
+    m_images.push_back(mmBitmapBundle(png::UNRECONCILED));
+    m_images.push_back(mmBitmapBundle(png::RECONCILED));
+    m_images.push_back(mmBitmapBundle(png::VOID_STAT));
+    m_images.push_back(mmBitmapBundle(png::FOLLOW_UP));
+    m_images.push_back(mmBitmapBundle(png::DUPLICATE_STAT));
+    m_images.push_back(mmBitmapBundle(png::UPARROW));
+    m_images.push_back(mmBitmapBundle(png::DOWNARROW));
+
+    m_lc = new TransactionListCtrl(this, splitterListFooter);
+    m_lc->SetSmallImages(m_images);
+    m_lc->SetNormalImages(m_images);
+
+    wxPanel* panelFooter = new wxPanel(
+        splitterListFooter, wxID_ANY, wxDefaultPosition, wxDefaultSize,
+        wxNO_BORDER | wxTAB_TRAVERSAL
+    );
+    mmThemeMetaColour(panelFooter, meta::COLOR_LISTPANEL);
+
+    splitterListFooter->SplitHorizontally(m_lc, panelFooter);
+    splitterListFooter->SetMinimumPaneSize(100);
+    splitterListFooter->SetSashGravity(1.0);
+
+    sizerV->Add(splitterListFooter, g_flagsExpandBorder1);
+
+    wxBoxSizer* sizerVFooter = new wxBoxSizer(wxVERTICAL);
+    panelFooter->SetSizer(sizerVFooter);
+
+    wxBoxSizer* sizerHButtons = new wxBoxSizer(wxHORIZONTAL);
+    sizerVFooter->Add(sizerHButtons, wxSizerFlags(g_flagsExpandBorder1).Proportion(0));
+
+    m_btnDelete = new wxButton(panelFooter, wxID_REMOVE, _t("&Delete "));
+    mmToolTip(m_btnDelete, _t("Delete all selected transactions"));
+
+    if (!isDeletedTrans()) {
+        m_btnNew = new wxButton(panelFooter, wxID_NEW, _t("&New "));
+        mmToolTip(m_btnNew, _t("New Transaction"));
+        sizerHButtons->Add(m_btnNew, 0, wxRIGHT, 2);
+
+        m_btnEdit = new wxButton(panelFooter, wxID_EDIT, _t("&Edit "));
+        mmToolTip(m_btnEdit, _t("Edit all selected transactions"));
+        sizerHButtons->Add(m_btnEdit, 0, wxRIGHT, 2);
+        m_btnEdit->Enable(false);
+
+        m_btnDuplicate = new wxButton(panelFooter, wxID_DUPLICATE, _t("D&uplicate "));
+        mmToolTip(m_btnDuplicate, _t("Duplicate selected transaction"));
+        sizerHButtons->Add(m_btnDuplicate, 0, wxRIGHT, 2);
+        m_btnDuplicate->Enable(false);
+
+        sizerHButtons->Add(m_btnDelete, 0, wxRIGHT, 2);
+        m_btnDelete->Enable(false);
+
+        m_btnEnter = new wxButton(panelFooter, wxID_PASTE, _t("Ente&r"));
+        mmToolTip(m_btnEnter, _t("Enter Next Scheduled Transaction Occurrence"));
+        sizerHButtons->Add(m_btnEnter, 0, wxRIGHT, 2);
+        m_btnEnter->Enable(false);
+
+        m_btnSkip = new wxButton(panelFooter, wxID_IGNORE, _t("&Skip"));
+        mmToolTip(m_btnSkip, _t("Skip Next Scheduled Transaction Occurrence"));
+        sizerHButtons->Add(m_btnSkip, 0, wxRIGHT, 2);
+        m_btnSkip->Enable(false);
+
+        const auto& btnDupSize = m_btnDuplicate->GetSize();
+        m_btnAttachment = new wxBitmapButton(
+            panelFooter, wxID_FILE, mmBitmapBundle(png::CLIP), wxDefaultPosition,
+            wxSize(30, btnDupSize.GetY())
+        );
+        mmToolTip(m_btnAttachment, _t("Open attachments"));
+        sizerHButtons->Add(m_btnAttachment, 0, wxRIGHT, 5);
+        m_btnAttachment->Enable(false);
+
+        m_btnAttachment->Connect(
+            wxEVT_RIGHT_DOWN,
+            wxMouseEventHandler(mmCheckingPanel::onButtonRightDown),
+            nullptr, this
+        );
+        m_btnNew->Connect(
+            wxEVT_RIGHT_DOWN,
+            wxMouseEventHandler(mmCheckingPanel::onButtonRightDown),
+            nullptr, this
+        );
+    }
+    else {
+        m_btnRestore = new wxButton(panelFooter, wxID_UNDELETE, _t("&Restore "));
+        mmToolTip(m_btnRestore, _t("Restore selected transaction"));
+        sizerHButtons->Add(m_btnRestore, 0, wxRIGHT, 5);
+        m_btnRestore->Enable(false);
+
+        sizerHButtons->Add(m_btnDelete, 0, wxRIGHT, 5);
+        m_btnDelete->Enable(false);
+    }
+
+    wxSearchCtrl* searchCtrl = new wxSearchCtrl(
+        panelFooter,
+        wxID_FIND, wxEmptyString, wxDefaultPosition,
+        wxSize(100, m_btnDelete->GetSize().GetHeight()),
+        wxTE_NOHIDESEL, wxDefaultValidator
+    );
+    searchCtrl->SetDescriptiveText(_t("Search"));
+    sizerHButtons->Add(searchCtrl, g_flagsExpandBorder1);
+    mmToolTip(searchCtrl,
+        _t("Enter any string to find it in the nearest transaction data") + "\n\n" +
+        _tu("Tips: Wildcard characters—question mark (?), asterisk (*)—can be used in search criteria.") + "\n" +
+        _tu("Use the question mark (?) to find any single character—for example, “s?t” finds “sat” and “set”.") + "\n" +
+        _tu("Use the asterisk (*) to find any number of characters—for example, “s*d” finds “sad” and “started”.") + "\n" +
+        _tu("Use the asterisk (*) at the beginning to find any string in the middle of the sentence.") + "\n" +
+        _t("Use regex: to match using regular expressions.")
+    );
+
+    // Infobar-mini
+    m_info_panel_mini = new wxStaticText(panelFooter, wxID_STATIC, "");
+    sizerHButtons->Add(m_info_panel_mini, 1, wxGROW | wxTOP | wxLEFT, 5);
+
+    // Infobar
+    m_info_panel = new wxStaticText(
+        panelFooter, wxID_STATIC, "", wxDefaultPosition, wxSize(200, -1),
+        wxTE_MULTILINE | wxTE_WORDWRAP
+    );
+    sizerVFooter->Add(m_info_panel, g_flagsExpandBorder1);
+    mmToolTip(m_info_panel, _t("Click to copy to clipboard"));
+
+    m_info_panel->Bind(wxEVT_LEFT_DOWN,
+                       [this, infoPanel = m_info_panel](wxMouseEvent& event)
+                       {
+                           onInfoPanelClick(event, infoPanel);
+                       });
+
+    //Show tips when no any transaction selected
+    showTips();
 }
 
-void mmCheckingPanel::filterTable()
+void mmCheckingPanel::updateHeader()
 {
-    m_listCtrlAccount->m_trans.clear();
+    m_header_text->SetLabelText(getPanelTitle());
+    m_header_credit->Hide();
+    if (m_account)
+    {
+        wxString summary = wxString::Format("%s%s",
+            _t("Account Bal: "),
+            Model_Account::toCurrency(m_balance, m_account)
+        );
+        if (m_show_reconciled) summary.Append(wxString::Format("     %s%s     %s%s",
+            _t("Reconciled Bal: "),
+            Model_Account::toCurrency(m_reconciled_balance, m_account),
+            _t("Diff: "),
+            Model_Account::toCurrency(m_balance - m_reconciled_balance, m_account)
+        ));
+        summary.Append(wxString::Format("     %s%s",
+            _t("Filtered Flow: "),
+            Model_Account::toCurrency(m_flow, m_account)
+        ));
+        if (m_account->CREDITLIMIT != 0.0) {
+            double limit = 100.0 * ((m_balance < 0.0) ? -m_balance / m_account->CREDITLIMIT : 0.0);
+            summary.Append(wxString::Format("   %s %.1f%%",
+                _t("Credit Limit:"),
+                limit
+            ));
+            m_header_credit->SetRange(std::max(100.0, limit));
+            m_header_credit->SetValue(limit);
+            m_header_credit->Show();
+        }
+        if (Model_Account::type_id(m_account) == Model_Account::TYPE_ID_INVESTMENT || Model_Account::type_id(m_account) == Model_Account::TYPE_ID_ASSET) 
+        {
+            std::pair<double, double> investment_bal = Model_Account::investment_balance(m_account);
+            summary.Append(wxString::Format("     %s%s", _t("Market Value: "), Model_Account::toCurrency(investment_bal.first, m_account)));
+            summary.Append(wxString::Format("     %s%s", _t("Invested: "), Model_Account::toCurrency(investment_bal.second, m_account)));
+        }
+        m_header_balance->SetLabelText(summary);
+    }
+    this->Layout();
+}
+
+void mmCheckingPanel::updateFilter()
+{
+    m_bitmapTransFilter->UnsetToolTip();
+
+    wxString label = (m_filter_id == FILTER_ID_DATE) ?
+        m_date_range.getName() :
+        _t("Advanced filter");
+    m_bitmapTransFilter->SetLabel(label);
+    m_bitmapTransFilter->SetBitmap(m_filter_id == FILTER_ID_ADVANCED ?
+        mmBitmapBundle(png::TRANSFILTER_ACTIVE, mmBitmapButtonSize) :
+        mmBitmapBundle(png::TRANSFILTER, mmBitmapButtonSize)
+    );
+
+    wxSize buttonSize(wxDefaultSize);
+    buttonSize.IncTo(GetTextExtent(label));
+    int width = buttonSize.GetWidth();
+    if (width < 200) width = 200;
+    m_bitmapTransFilter->SetMinSize(
+        wxSize(width + Option::instance().getIconSize() * 2, -1)
+    );
+
+    if (!isDeletedTrans()) {
+        m_header_scheduled->SetValue(m_scheduled_selected);
+        m_header_scheduled->Enable(m_scheduled_enable);
+        updateScheduledToolTip();
+    }
+}
+
+void mmCheckingPanel::updateFilterTooltip()
+{
+    wxString tooltip = (m_filter_id == FILTER_ID_ADVANCED) ?
+        m_trans_filter_dlg->mmGetDescriptionToolTip() :
+        m_date_range.checking_tooltip();
+    m_bitmapTransFilter->SetToolTip(tooltip);
+}
+
+void mmCheckingPanel::setFilterDate(DateRange2::Spec& spec)
+{
+    m_filter_id = FILTER_ID_DATE;
+    m_date_range = DateRange2();
+    if (isAccount()) m_date_range.setDateS(
+        Model_Account::DateOf(m_account->STATEMENTDATE)
+    );
+    m_date_range.setSpec(spec);
+    m_scheduled_enable = (!isDeletedTrans() &&
+        m_date_range.checking_end() != wxInvalidDateTime
+    );
+    saveFilterSettings();
+    updateFilter();
+}
+
+void mmCheckingPanel::setFilterAdvanced()
+{
+    m_filter_id = FILTER_ID_ADVANCED;
+    m_date_range = DateRange2();
+    m_scheduled_enable = (!isDeletedTrans() &&
+        m_date_range.checking_end() != wxInvalidDateTime
+    );
+    saveFilterSettings();
+    updateFilter();
+}
+
+//----------------------------------------------------------------------------
+
+void mmCheckingPanel::loadFilterSettings()
+{
+    m_date_range_a.clear();
+    m_date_range_m = -1;
+    int src_i = 0;
+    int src_m = Option::instance().getCheckingRangeM();
+    for (const auto& spec : Option::instance().getCheckingRangeA()) {
+        if (m_date_range_a.size() > mmID_FILTER_DATE_MAX - mmID_FILTER_DATE_MIN)
+            break;
+        if (src_i == src_m)
+            m_date_range_m = m_date_range_a.size();
+        if (isAccount() || !spec.hasPeriodS()) {
+            m_date_range_a.push_back(spec);
+        }
+        src_i++;
+    }
+    if (m_date_range_m < 0)
+        m_date_range_m = m_date_range_a.size();
+
+    wxString key = wxString::Format("CHECK_FILTER_%lld", m_checking_id);
+    Document j_doc = Model_Infotable::instance().getJdoc(key, "{}");
+    if (j_doc.HasParseError())
+        j_doc.Parse("{}");
+
+    m_filter_id = FILTER_ID_DATE;
+    wxString j_filter;
+    if (JSON_GetStringValue(j_doc, "FILTER", j_filter)) {
+        for (int i = 0; i < FILTER_ID_size; ++i) if (FILTER_NAME[i].second == j_filter) {
+            m_filter_id = static_cast<FILTER_ID>(i);
+            break;
+        }
+    }
+
+    DateRange2::Spec date_spec = DateRange2::Spec();
+    if (m_filter_id == FILTER_ID_DATE) {
+        wxString j_date;
+        if (JSON_GetStringValue(j_doc, "DATE", j_date))
+            date_spec.parseSpec(j_date);
+        wxString date_label = date_spec.getLabel();
+        for (auto& spec : m_date_range_a) if (spec.getLabel() == date_label) {
+            date_spec.setName(spec.getName());
+            break;
+        }
+        if (date_spec.getName().empty())
+            date_spec.setName(_t("(Date range)"));
+    }
+    m_date_range = DateRange2();
+    if (isAccount()) m_date_range.setDateS(
+        Model_Account::DateOf(m_account->STATEMENTDATE)
+    );
+    m_date_range.setSpec(date_spec);
+
+    m_scheduled_enable = false;
+    m_scheduled_selected = false;
+    if (!isDeletedTrans()) {
+        m_scheduled_enable = (m_date_range.checking_end() != wxInvalidDateTime);
+        JSON_GetBoolValue(j_doc, "SCHEDULED", m_scheduled_selected);
+    }
+}
+
+void mmCheckingPanel::saveFilterSettings()
+{
+    wxString key = wxString::Format("CHECK_FILTER_%lld", m_checking_id);
+    Document j_doc = Model_Infotable::instance().getJdoc(key, "{}");
+    if (j_doc.HasParseError())
+        j_doc.Parse("{}");
+
+    wxString filter = FILTER_NAME[m_filter_id].second;
+    if (j_doc.HasMember("FILTER")) {
+        j_doc["FILTER"].SetString(filter.utf8_str(), j_doc.GetAllocator());
+    }
+    else {
+        auto& allocator = j_doc.GetAllocator();
+        rapidjson::Value field_key("FILTER", allocator);
+        rapidjson::Value value(filter.utf8_str(), allocator);
+        j_doc.AddMember(field_key, value, allocator);
+    }
+
+    if (m_filter_id == FILTER_ID_DATE) {
+        wxString date = m_date_range.getLabelName();
+        if (j_doc.HasMember("DATE")) {
+            j_doc["DATE"].SetString(date.utf8_str(), j_doc.GetAllocator());
+        }
+        else {
+            auto& allocator = j_doc.GetAllocator();
+            rapidjson::Value field_key("DATE", allocator);
+            rapidjson::Value value(date.utf8_str(), allocator);
+            j_doc.AddMember(field_key, value, allocator);
+        }
+    }
+
+    if (!isDeletedTrans()) {
+        if (j_doc.HasMember("SCHEDULED")) {
+            j_doc["SCHEDULED"].SetBool(m_scheduled_selected);
+        }
+        else {
+            auto& allocator = j_doc.GetAllocator();
+            rapidjson::Value field_key("SCHEDULED", allocator);
+            j_doc.AddMember(field_key, m_scheduled_selected, allocator);
+        }
+    }
+
+    Model_Infotable::instance().setJdoc(key, j_doc);
+}
+
+//----------------------------------------------------------------------------
+
+void mmCheckingPanel::refreshList()
+{
+    m_lc->refreshVisualList();
+}
+
+void mmCheckingPanel::filterList()
+{
+    m_lc->m_trans.clear();
+
+    wxString date_start_str = m_date_range.checking_start_str();
+    wxString date_end_str = m_date_range.checking_end_str();
 
     int sn = 0; // sequence number
-    m_account_balance = m_account ? m_account->INITIALBAL : 0.0;
-    m_account_reconciled = m_account_balance;
+    m_flow = 0.0;
+    m_balance = m_account ? m_account->INITIALBAL : 0.0;
+    m_reconciled_balance = m_balance;
     m_show_reconciled = false;
-    m_account_flow = 0.0;
 
-    const wxString tranRefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
-    const wxString billRefType = Model_Attachment::REFTYPE_STR_BILLSDEPOSIT;
-    const wxString tranSplitRefType = Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT;
-    const wxString billSplitRefType = Model_Attachment::REFTYPE_STR_BILLSDEPOSITSPLIT;
+    const wxString tranRefType = Model_Checking::refTypeName;
+    const wxString billRefType = Model_Billsdeposits::refTypeName;
+    const wxString tranSplitRefType = Model_Splittransaction::refTypeName;
+    const wxString billSplitRefType = Model_Budgetsplittransaction::refTypeName;
 
     static wxArrayString udfc_fields = Model_CustomField::UDFC_FIELDS();
     int64 udfc_id[5];
@@ -209,7 +608,7 @@
         );
     }
 
-    auto tranFieldData = Model_CustomFieldData::instance().get_all(Model_Attachment::REFTYPE_ID_TRANSACTION);
+    auto tranFieldData = Model_CustomFieldData::instance().get_all(Model_Checking::refTypeName);
 
     bool ignore_future = Option::instance().getIgnoreFutureTransactions();
     const wxString today_date = Option::instance().UseTransDateTime() ?
@@ -221,9 +620,7 @@
         Model_Checking::instance().allByDateTimeId();
     const auto trans_splits = Model_Splittransaction::instance().get_all();
     const auto trans_tags = Model_Taglink::instance().get_all(tranRefType);
-    const auto trans_attachments = Model_Attachment::instance().get_all(
-        Model_Attachment::REFTYPE_ID_TRANSACTION
-    );
+    const auto trans_attachments = Model_Attachment::instance().get_all(Model_Checking::refTypeName);
 
     std::map<int64, Model_Budgetsplittransaction::Data_Set> bills_splits;
     std::map<int64, Model_Taglink::Data_Set> bills_tags;
@@ -238,15 +635,13 @@
     if (m_scheduled_enable && m_scheduled_selected) {
         bills_splits = Model_Budgetsplittransaction::instance().get_all();
         bills_tags = Model_Taglink::instance().get_all(billRefType);
-        bills_attachments = Model_Attachment::instance().get_all(
-            Model_Attachment::REFTYPE_ID_BILLSDEPOSIT
-        );
+        bills_attachments = Model_Attachment::instance().get_all(Model_Billsdeposits::refTypeName);
         bills = m_account ?
             Model_Account::billsdeposits(m_account) :
             Model_Billsdeposits::instance().all();
         for (unsigned int i = 0; i < bills.size(); ++i) {
             int limit = 1000;  // this is enough for daily repetitions for one year
-            auto dates = Model_Billsdeposits::unroll(bills[i], m_end_date, limit);
+            auto dates = Model_Billsdeposits::unroll(bills[i], date_end_str, limit);
             for (unsigned int repeat_num = 1; repeat_num <= dates.size(); ++repeat_num)
                 bills_index.push_back({i, dates[repeat_num-1], repeat_num});
         }
@@ -294,21 +689,19 @@
         if (ignore_future && tran_date > today_date)
             break;
 
-        // update m_account_balance even if tran is filtered out
+        // update m_balance even if tran is filtered out
         double account_flow = 0.0;
         if (isAccount()) {
             // assertion: tran->DELETEDTIME.IsEmpty()
             account_flow = Model_Checking::account_flow(tran, m_account_id);
-            m_account_balance += account_flow;
+            m_balance += account_flow;
             if (Model_Checking::status_id(tran->STATUS) == Model_Checking::STATUS_ID_RECONCILED)
-                m_account_reconciled += account_flow;
+                m_reconciled_balance += account_flow;
             else
                 m_show_reconciled = true;
         }
 
-        if (!m_transFilterActive && m_filter_id != FILTER_ID_ALL &&
-            (tran_date < m_begin_date || tran_date > m_end_date)
-        )
+        if (tran_date < date_start_str || tran_date > date_end_str)
             continue;
 
         Fused_Transaction::Full_Data full_tran = (repeat_num == 0) ?
@@ -316,7 +709,7 @@
             Fused_Transaction::Full_Data(bills[bill_i], tran_date, repeat_num, bills_splits, bills_tags);
 
         bool expandSplits = false;
-        if (m_transFilterActive) {
+        if (m_filter_id == FILTER_ID_ADVANCED) {
             int txnMatch = m_trans_filter_dlg->mmIsRecordMatches(*tran, full_tran.m_splits);
             if (!txnMatch)
                 continue;
@@ -333,7 +726,7 @@
                 full_tran.ACCOUNTID_D = -1; full_tran.TRANSAMOUNT_D = 0.0;
             }
             full_tran.ACCOUNT_FLOW = account_flow;
-            full_tran.ACCOUNT_BALANCE = m_account_balance;
+            full_tran.ACCOUNT_BALANCE = m_balance;
         }
 
         if (repeat_num == 0 && trans_attachments.find(tran->TRANSID) != trans_attachments.end()) {
@@ -386,13 +779,13 @@
             full_tran.displayID = wxString::Format("%s%ld", marker, full_tran.m_bdid);
 
         if (!expandSplits) {
-            m_listCtrlAccount->m_trans.push_back(full_tran);
+            m_lc->m_trans.push_back(full_tran);
             if (isAccount())
-                m_account_flow += account_flow;
+                m_flow += account_flow;
             continue;
         }
         // else {
-        // assertion: m_transFilterActive == true
+        // assertion: m_filter_id == FILTER_ID_ADVANCED
         // assertion: Model_Checking::is_transfer(full_tran.TRANSCODE) == false
         int splitIndex = 1;
         wxString tranTagnames = full_tran.TAGNAMES;
@@ -419,7 +812,7 @@
                 continue;
             if (isAccount()) {
                 full_tran.ACCOUNT_FLOW = Model_Checking::account_flow(splitWithTxnNotes, m_account_id);
-                m_account_flow += full_tran.ACCOUNT_FLOW;
+                m_flow += full_tran.ACCOUNT_FLOW;
             }
             full_tran.NOTES.Append((tran->NOTES.IsEmpty() ? "" : " ") + split.NOTES);
             wxString tagnames;
@@ -428,351 +821,17 @@
                 tagnames.Append(tag.first + " ");
             if (!tagnames.IsEmpty())
                 full_tran.TAGNAMES.Append((full_tran.TAGNAMES.IsEmpty() ? "" : ", ") + tagnames.Trim());
-            m_listCtrlAccount->m_trans.push_back(full_tran);
+            m_lc->m_trans.push_back(full_tran);
         }
         // }
     }
 }
 
-void mmCheckingPanel::OnButtonRightDown(wxMouseEvent& event)
-{
-    int id = event.GetId();
-    switch (id) {
-    case ID_TRX_FILTER: {
-        wxCommandEvent evt(wxID_ANY, wxID_HIGHEST + FILTER_ID_DIALOG);
-        OnViewPopupSelected(evt);
-        break;
-    }
-    case wxID_FILE: {
-        auto selected_id = m_listCtrlAccount->getSelectedId();
-        if (selected_id.size() == 1) {
-            const wxString refType = !selected_id[0].second ?
-                Model_Attachment::REFTYPE_STR_TRANSACTION :
-                Model_Attachment::REFTYPE_STR_BILLSDEPOSIT;
-            mmAttachmentDialog dlg(this, refType, selected_id[0].first);
-            dlg.ShowModal();
-            RefreshList();
-        }
-        break;
-    }
-    case wxID_NEW: {
-        wxMenu menu;
-        menu.Append(Model_Checking::TYPE_ID_WITHDRAWAL, _u("&New Withdrawal…"));
-        menu.Append(Model_Checking::TYPE_ID_DEPOSIT, _u("&New Deposit…"));
-        menu.Append(Model_Checking::TYPE_ID_TRANSFER, _u("&New Transfer…"));
-        PopupMenu(&menu);
-    }
-    default:
-        break;
-    }
-}
-
-void mmCheckingPanel::OnMouseLeftDown(wxCommandEvent& event)
-{
-    wxMenu menu;
-    int id = 0;
-    for (const auto& item : FILTER_STR) {
-        if (isAccount() || (FILTER_ID_STATEMENTDATE != id))
-            menu.Append(wxID_HIGHEST + id, wxGetTranslation(item));
-        id++;
-    }
-    PopupMenu(&menu);
-    m_bitmapTransFilter->Layout();
-    event.Skip();
-}
-
-//----------------------------------------------------------------------------
-
-void mmCheckingPanel::CreateControls()
-{
-    wxBoxSizer* sizerV = new wxBoxSizer(wxVERTICAL);
-    this->SetSizer(sizerV);
-
-    /* ---------------------- */
-
-    wxFlexGridSizer* sizerVHeader = new wxFlexGridSizer(0, 1, 0, 0);
-    sizerVHeader->AddGrowableCol(0, 0);
-    sizerV->Add(sizerVHeader, g_flagsBorder1V);
-
-    m_header_text = new wxStaticText(this, wxID_STATIC, "");
-    m_header_text->SetFont(this->GetFont().Larger().Bold());
-    sizerVHeader->Add(m_header_text, g_flagsExpandBorder1);
-
-    wxBoxSizer* sizerHInfo = new wxBoxSizer(wxHORIZONTAL);
-    m_header_balance = new wxStaticText(this, wxID_STATIC, "");
-    sizerHInfo->Add(m_header_balance, g_flagsH);
-    m_header_credit = new wxGauge(this, wxID_ANY, 100, wxDefaultPosition, wxSize(100,-1));
-    sizerHInfo->Add(m_header_credit, g_flagsH);
-    sizerVHeader->Add(sizerHInfo, g_flagsBorder1V);
-
-    wxBoxSizer* sizerHCtrl = new wxBoxSizer(wxHORIZONTAL);
-    m_bitmapTransFilter = new wxButton(this, ID_TRX_FILTER);
-    m_bitmapTransFilter->SetBitmap(mmBitmapBundle(png::TRANSFILTER, mmBitmapButtonSize));
-    sizerHCtrl->Add(m_bitmapTransFilter, g_flagsH);
-    if (!isDeletedTrans()) {
-        sizerHCtrl->AddSpacer(15);
-        const auto& size = m_bitmapTransFilter->GetSize().GetY();
-        //m_header_scheduled = new wxCheckBox(this, ID_TRX_SCHEDULED, _("Scheduled Transactions"));
-        m_header_scheduled = new wxBitmapToggleButton(this, ID_TRX_SCHEDULED, mmBitmapBundle(png::RECURRING), wxDefaultPosition, wxSize(size, size));
-        sizerHCtrl->Add(m_header_scheduled, g_flagsH);
-        sizerHCtrl->AddSpacer(10);
-    }
-    m_header_sortOrder = new wxStaticText(this, wxID_STATIC, "");
-    sizerHCtrl->Add(m_header_sortOrder, g_flagsH);
-    sizerVHeader->Add(sizerHCtrl, g_flagsBorder1H);
-
-    m_bitmapTransFilter->Connect(wxEVT_RIGHT_DOWN,
-        wxMouseEventHandler(mmCheckingPanel::OnButtonRightDown), nullptr, this);
-
-    /* ---------------------- */
-
-    wxSplitterWindow* splitterListFooter = new wxSplitterWindow(
-        this, wxID_ANY, wxDefaultPosition, wxSize(200, 200),
-        wxSP_3DBORDER | wxSP_3DSASH | wxNO_BORDER
-    );
-
-    m_images.push_back(mmBitmapBundle(png::UNRECONCILED));
-    m_images.push_back(mmBitmapBundle(png::RECONCILED));
-    m_images.push_back(mmBitmapBundle(png::VOID_STAT));
-    m_images.push_back(mmBitmapBundle(png::FOLLOW_UP));
-    m_images.push_back(mmBitmapBundle(png::DUPLICATE_STAT));
-    m_images.push_back(mmBitmapBundle(png::UPARROW));
-    m_images.push_back(mmBitmapBundle(png::DOWNARROW));
-
-    m_listCtrlAccount = new TransactionListCtrl(this, splitterListFooter);
-
-    m_listCtrlAccount->SetSmallImages(m_images);
-    m_listCtrlAccount->SetNormalImages(m_images);
-
-    m_listCtrlAccount->setSortOrder(m_listCtrlAccount->g_asc);
-    m_listCtrlAccount->setSortColumn(m_listCtrlAccount->g_sortcol);
-
-    // load the global variables
-    m_sortSaveTitle =
-        isAllTrans() ? "ALLTRANS" :
-        isDeletedTrans() ? "DELETED" :
-        isGroup() ? "MULTI" :
-        "CHECK";
-
-    long val = m_listCtrlAccount->COL_def_sort;
-    wxString strVal = Model_Setting::instance().GetStringSetting(
-        wxString::Format("%s_SORT_COL", m_sortSaveTitle),
-        wxString() << val
-    );
-    if (strVal.ToLong(&val))
-        m_listCtrlAccount->g_sortcol = m_listCtrlAccount->toEColumn(val);
-    val = m_listCtrlAccount->COL_def_sort2;
-    strVal = Model_Setting::instance().GetStringSetting(
-        wxString::Format("%s_SORT_COL2", m_sortSaveTitle),
-        wxString() << val
-    );
-    if (strVal.ToLong(&val))
-        m_listCtrlAccount->prev_g_sortcol = m_listCtrlAccount->toEColumn(val);
-
-    val = 1; // asc sorting default
-    strVal = Model_Setting::instance().GetStringSetting(
-        wxString::Format("%s_ASC", m_sortSaveTitle),
-        wxString() << val
-    );
-    if (strVal.ToLong(&val))
-        m_listCtrlAccount->g_asc = val != 0;
-    val = 1;
-    strVal = Model_Setting::instance().GetStringSetting(
-        wxString::Format("%s_ASC2", m_sortSaveTitle),
-        wxString() << val
-    );
-    if (strVal.ToLong(&val))
-        m_listCtrlAccount->prev_g_asc = val != 0;
-
-    // --
-    m_listCtrlAccount->setSortColumn(m_listCtrlAccount->g_sortcol);
-    m_listCtrlAccount->setSortOrder(m_listCtrlAccount->g_asc);
-    m_listCtrlAccount->setColumnImage(
-        m_listCtrlAccount->getSortColumn(),
-        m_listCtrlAccount->getSortOrder() ? ICON_ASC : ICON_DESC // asc\desc sort mark (arrow)
-    );
-
-    wxPanel* panelFooter = new wxPanel(
-        splitterListFooter, wxID_ANY, wxDefaultPosition, wxDefaultSize,
-        wxNO_BORDER | wxTAB_TRAVERSAL
-    );
-    mmThemeMetaColour(panelFooter, meta::COLOR_LISTPANEL);
-
-    splitterListFooter->SplitHorizontally(m_listCtrlAccount, panelFooter);
-    splitterListFooter->SetMinimumPaneSize(100);
-    splitterListFooter->SetSashGravity(1.0);
-
-    sizerV->Add(splitterListFooter, g_flagsExpandBorder1);
-
-    wxBoxSizer* sizerVFooter = new wxBoxSizer(wxVERTICAL);
-    panelFooter->SetSizer(sizerVFooter);
-
-    wxBoxSizer* sizerHButtons = new wxBoxSizer(wxHORIZONTAL);
-    sizerVFooter->Add(sizerHButtons, wxSizerFlags(g_flagsExpandBorder1).Proportion(0));
-
-    m_btnDelete = new wxButton(panelFooter, wxID_REMOVE, _("&Delete "));
-    mmToolTip(m_btnDelete, _("Delete all selected transactions"));
-
-    if (!isDeletedTrans()) {
-        m_btnNew = new wxButton(panelFooter, wxID_NEW, _("&New "));
-        mmToolTip(m_btnNew, _("New Transaction"));
-        sizerHButtons->Add(m_btnNew, 0, wxRIGHT, 2);
-
-        m_btnEdit = new wxButton(panelFooter, wxID_EDIT, _("&Edit "));
-        mmToolTip(m_btnEdit, _("Edit all selected transactions"));
-        sizerHButtons->Add(m_btnEdit, 0, wxRIGHT, 2);
-        m_btnEdit->Enable(false);
-
-        m_btnDuplicate = new wxButton(panelFooter, wxID_DUPLICATE, _("D&uplicate "));
-        mmToolTip(m_btnDuplicate, _("Duplicate selected transaction"));
-        sizerHButtons->Add(m_btnDuplicate, 0, wxRIGHT, 2);
-        m_btnDuplicate->Enable(false);
-
-        sizerHButtons->Add(m_btnDelete, 0, wxRIGHT, 2);
-        m_btnDelete->Enable(false);
-
-        m_btnEnter = new wxButton(panelFooter, wxID_PASTE, _("Ente&r"));
-        mmToolTip(m_btnEnter, _("Enter Next Scheduled Transaction Occurrence"));
-        sizerHButtons->Add(m_btnEnter, 0, wxRIGHT, 2);
-        m_btnEnter->Enable(false);
-
-        m_btnSkip = new wxButton(panelFooter, wxID_IGNORE, _("&Skip"));
-        mmToolTip(m_btnSkip, _("Skip Next Scheduled Transaction Occurrence"));
-        sizerHButtons->Add(m_btnSkip, 0, wxRIGHT, 2);
-        m_btnSkip->Enable(false);
-
-        const auto& btnDupSize = m_btnDuplicate->GetSize();
-        m_btnAttachment = new wxBitmapButton(
-            panelFooter, wxID_FILE, mmBitmapBundle(png::CLIP), wxDefaultPosition,
-            wxSize(30, btnDupSize.GetY())
-        );
-        mmToolTip(m_btnAttachment, _("Open attachments"));
-        sizerHButtons->Add(m_btnAttachment, 0, wxRIGHT, 5);
-        m_btnAttachment->Enable(false);
-
-        m_btnAttachment->Connect(
-            wxEVT_RIGHT_DOWN,
-            wxMouseEventHandler(mmCheckingPanel::OnButtonRightDown),
-            nullptr, this
-        );
-        m_btnNew->Connect(
-            wxEVT_RIGHT_DOWN,
-            wxMouseEventHandler(mmCheckingPanel::OnButtonRightDown),
-            nullptr, this
-        );
-    }
-    else {
-        m_btnRestore = new wxButton(panelFooter, wxID_UNDELETE, _("&Restore "));
-        mmToolTip(m_btnRestore, _("Restore selected transaction"));
-        sizerHButtons->Add(m_btnRestore, 0, wxRIGHT, 5);
-        m_btnRestore->Enable(false);
-
-        sizerHButtons->Add(m_btnDelete, 0, wxRIGHT, 5);
-        m_btnDelete->Enable(false);
-    }
-
-    wxSearchCtrl* searchCtrl = new wxSearchCtrl(
-        panelFooter,
-        wxID_FIND, wxEmptyString, wxDefaultPosition,
-        wxSize(100, m_btnDelete->GetSize().GetHeight()),
-        wxTE_NOHIDESEL, wxDefaultValidator
-    );
-    searchCtrl->SetDescriptiveText(_("Search"));
-    sizerHButtons->Add(searchCtrl, g_flagsExpandBorder1);
-    mmToolTip(searchCtrl,
-        _("Enter any string to find it in the nearest transaction data") + "\n\n" +
-        _("Tips: You can use wildcard characters - question mark (?), asterisk (*) - in your search criteria.") + "\n" +
-        _("Use the question mark (?) to find any single character - for example, s?t finds 'sat' and 'set'.") + "\n" +
-        _("Use the asterisk (*) to find any number of characters - for example, s*d finds 'sad' and 'started'.") + "\n" +
-        _("Use the asterisk (*) in the begin to find any string in the middle of the sentence.")
-    );
-
-    // Infobar-mini
-    m_info_panel_mini = new wxStaticText(panelFooter, wxID_STATIC, "");
-    sizerHButtons->Add(m_info_panel_mini, 1, wxGROW | wxTOP | wxLEFT, 5);
-
-    // Infobar
-    m_info_panel = new wxStaticText(
-        panelFooter, wxID_STATIC, "", wxDefaultPosition, wxSize(200, -1),
-        wxTE_MULTILINE | wxTE_WORDWRAP
-    );
-    sizerVFooter->Add(m_info_panel, g_flagsExpandBorder1);
-    //Show tips when no any transaction selected
-    showTips();
-}
-
-wxString mmCheckingPanel::GetPanelTitle() const
-{
-    if (isAllTrans())
-        return _("All Transactions");
-    else if (isDeletedTrans())
-        return _("Deleted Transactions");
-    else if (isGroup()) {
-        if (m_checking_id == -3)
-            return _("Favorites");
-        else
-            return wxGetTranslation(mmGUIFrame::ACCOUNT_SECTION[m_account_type]);
-    }
-    else if (m_account)
-        return wxString::Format(_("Account View: %s"), m_account->ACCOUNTNAME);
-    else
-        return "";
-}
-
-wxString mmCheckingPanel::BuildPage() const
+void mmCheckingPanel::sortList()
 {
-    return m_listCtrlAccount->BuildPage((m_account ? GetPanelTitle() : ""));
+    m_lc->sortList();
 }
 
-void mmCheckingPanel::setAccountSummary()
-{
-    m_header_text->SetLabelText(GetPanelTitle());
-    m_header_credit->Hide();
-
-    if (m_account) {
-        bool show_displayed_balance_ = (m_transFilterActive || m_filter_id != FILTER_ID_ALL);
-        wxString summaryLine = wxString::Format("%s%s" "%s%s%s" "%s%s%s" "%s%s%s",
-            _("Account Bal: "),
-            Model_Account::toCurrency(m_account_balance, m_account),
-            m_show_reconciled ? "     " : "",
-            m_show_reconciled ? _("Reconciled Bal: ") : "",
-            m_show_reconciled ? Model_Account::toCurrency(m_account_reconciled, m_account) : "",
-            m_show_reconciled ? "     " : "",
-            m_show_reconciled ? _("Diff: ") : "",
-            m_show_reconciled ? Model_Account::toCurrency(m_account_balance - m_account_reconciled, m_account) : "",
-            show_displayed_balance_ ? "     " : "",
-            show_displayed_balance_ ? _("Filtered Flow: ") : "",
-            show_displayed_balance_ ? Model_Account::toCurrency(m_account_flow, m_account) : ""
-        );
-        if (m_account->CREDITLIMIT != 0.0) {
-            double limit = 100.0 * ((m_account_balance < 0.0) ? -m_account_balance / m_account->CREDITLIMIT : 0.0);
-            summaryLine.Append(
-                wxString::Format("   %s %.1f%%", _("Credit Limit:"), limit)
-            );
-           m_header_credit->SetValue(limit);
-           m_header_credit->Show();
-        }
-        m_header_balance->SetLabelText(summaryLine);
-    }
-    this->Layout();
-}
-//----------------------------------------------------------------------------
-
-void mmCheckingPanel::enableButtons(bool edit, bool dup, bool del, bool enter, bool skip, bool attach)
-{
-    if (!isDeletedTrans()) {
-        m_btnEdit->Enable(edit);
-        m_btnDuplicate->Enable(dup);
-        m_btnDelete->Enable(del);
-        m_btnEnter->Enable(enter);
-        m_btnSkip->Enable(skip);
-        m_btnAttachment->Enable(attach);
-    }
-    else {
-        m_btnRestore->Enable(edit);
-        m_btnDelete->Enable(del);
-    }
-}
 //----------------------------------------------------------------------------
 
 void mmCheckingPanel::updateExtraTransactionData(bool single, int repeat_num, bool foreign)
@@ -788,12 +847,12 @@
         );
 
         long x = -1;
-        for (x = 0; x < m_listCtrlAccount->GetItemCount(); x++) {
-            if (m_listCtrlAccount->GetItemState(x, wxLIST_STATE_SELECTED) == wxLIST_STATE_SELECTED)
+        for (x = 0; x < m_lc->GetItemCount(); x++) {
+            if (m_lc->GetItemState(x, wxLIST_STATE_SELECTED) == wxLIST_STATE_SELECTED)
                 break;
         }
 
-        Fused_Transaction::Full_Data full_tran(m_listCtrlAccount->m_trans[x]);
+        Fused_Transaction::Full_Data full_tran(m_lc->m_trans[x]);
         wxString miniStr = full_tran.info();
         //Show only first line but full string set as tooltip
         if (miniStr.Find("\n") > 1 && !miniStr.IsEmpty()) {
@@ -818,11 +877,11 @@
                     notesStr += split.NOTES;
                 }
             if (full_tran.has_attachment()) {
-                const wxString& refType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+                const wxString& refType = Model_Checking::refTypeName;
                 Model_Attachment::Data_Set attachments = Model_Attachment::instance().FilterAttachments(refType, full_tran.TRANSID);
                 for (const auto& i : attachments) {
                     notesStr += notesStr.empty() ? "" : "\n";
-                    notesStr += _("Attachment") + " " + i.DESCRIPTION + " " + i.FILENAME;
+                    notesStr += _t("Attachment") + " " + i.DESCRIPTION + " " + i.FILENAME;
                 }
             }
         }
@@ -836,19 +895,20 @@
                     notesStr += split.NOTES;
                 }
             if (full_tran.has_attachment()) {
-                const wxString& refType = Model_Attachment::REFTYPE_STR_BILLSDEPOSIT;
+                const wxString& refType = Model_Billsdeposits::refTypeName;
                 Model_Attachment::Data_Set attachments = Model_Attachment::instance().FilterAttachments(refType, full_tran.m_bdid);
                 for (const auto& i : attachments) {
                     notesStr += notesStr.empty() ? "" : "\n";
-                    notesStr += _("Attachment") + " " + i.DESCRIPTION + " " + i.FILENAME;
+                    notesStr += _t("Attachment") + " " + i.DESCRIPTION + " " + i.FILENAME;
                 }
             }
         }
+        m_info_panel_selectedbal.clear(); // Not displaying any selected transactions in m_info_panel, clear selected transaction balance var
         m_info_panel->SetLabelText(notesStr);
     }
     else /* !single */ {
         m_info_panel_mini->SetLabelText("");
-        const auto selected = m_listCtrlAccount->getSelectedId();
+        const auto selected = m_lc->getSelectedId();
         if (selected.size() > 0) {
             bool selected_bill = false;
             for (const auto& id : selected)
@@ -870,14 +930,14 @@
             wxString minDate;
             long item = -1;
             while (true) {
-                item = m_listCtrlAccount->GetNextItem(item, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
+                item = m_lc->GetNextItem(item, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
                 if (item == -1) break;
                 if (currency)
                     flow += Model_Checking::account_flow(
-                        m_listCtrlAccount->m_trans[item],
+                        m_lc->m_trans[item],
                         m_account_id
                     );
-                wxString transdate = m_listCtrlAccount->m_trans[item].TRANSDATE;
+                wxString transdate = m_lc->m_trans[item].TRANSDATE;
                 if (minDate > transdate || minDate.empty()) minDate = transdate;
                 if (maxDate < transdate || maxDate.empty()) maxDate = transdate;
             }
@@ -888,23 +948,24 @@
             int days = max_date.Subtract(min_date).GetDays();
 
             wxString msg;
-            msg = wxString::Format(_("Transactions selected: %zu"), selected.size());
+            wxString selectedBal = Model_Currency::toCurrency(flow, currency);
+            m_info_panel_selectedbal = selectedBal;
+            msg = wxString::Format(_t("Transactions selected: %zu"), selected.size());
             msg += "\n";
             if (currency) {
                 msg += wxString::Format(
-                    _("Selected transactions balance: %s"),
-                    Model_Currency::toCurrency(flow, currency)
+                    _t("Selected transactions balance: %s"), selectedBal
                 );
                 msg += "\n";
             }
             msg += wxString::Format(
-                _("Days between selected transactions: %d"),
+                _t("Days between selected transactions: %d"),
                 days
             );
 #ifdef __WXMAC__    // See issue #2914
             msg = "";
 #endif
-            m_info_panel->SetLabelText(msg);
+            m_info_panel->SetLabelText(msg);         
         }
         else /* selected.size() == 0 */ {
             enableButtons(false, false, false, false, false, false);
@@ -912,10 +973,29 @@
         }
     }
 }
+
+void mmCheckingPanel::enableButtons(bool edit, bool dup, bool del, bool enter, bool skip, bool attach)
+{
+    if (!isDeletedTrans()) {
+        m_btnEdit->Enable(edit);
+        m_btnDuplicate->Enable(dup);
+        m_btnDelete->Enable(del);
+        m_btnEnter->Enable(enter);
+        m_btnSkip->Enable(skip);
+        m_btnAttachment->Enable(attach);
+    }
+    else {
+        m_btnRestore->Enable(edit);
+        m_btnDelete->Enable(del);
+    }
+}
+
 //----------------------------------------------------------------------------
 
 void mmCheckingPanel::showTips()
 {
+    m_info_panel_selectedbal.clear(); // Not displaying any selected transactions in m_info_panel, clear selected transaction balance var
+
     if (m_show_tips) {
         m_show_tips = false;
         return;
@@ -934,292 +1014,261 @@
 
 void mmCheckingPanel::showTips(const wxString& tip)
 {
+    m_info_panel_selectedbal.clear(); // Not displaying any selected transactions in m_info_panel, clear selected transaction balance var
     if (Option::instance().getShowMoneyTips())
         m_info_panel->SetLabelText(tip);
     else
         m_info_panel->SetLabelText("");
     m_show_tips = true;
 }
-//----------------------------------------------------------------------------
 
-void mmCheckingPanel::OnDeleteTransaction(wxCommandEvent& event)
+void mmCheckingPanel::updateScheduledToolTip()
 {
-    m_listCtrlAccount->OnDeleteTransaction(event);
+    mmToolTip(m_header_scheduled,
+        !m_scheduled_enable ? _t("Unable to show scheduled transactions because the current filter choice extends into the future without limit.") :
+        !m_scheduled_selected ? _t("Click to show scheduled transactions. This feature works best with filter choices that extend into the future (e.g., Current Month).") :
+        _t("Click to hide scheduled transactions."));
 }
 
-void mmCheckingPanel::OnRestoreTransaction(wxCommandEvent& event)
+//----------------------------------------------------------------------------
+
+void mmCheckingPanel::onFilterPopup(wxCommandEvent& event)
 {
-    m_listCtrlAccount->OnRestoreTransaction(event);
+    wxMenu menu;
+    int i = 0;
+    while (i < m_date_range_m) {
+        menu.Append(mmID_FILTER_DATE_MIN + i, m_date_range_a[i].getName());
+        i++;
+    }
+
+    menu.AppendSeparator();
+    if (i < static_cast<int>(m_date_range_a.size())) {
+        wxMenu* menu_more(new wxMenu);
+        menu.AppendSubMenu(menu_more, _tu("More date ranges…"));
+        while (i < static_cast<int>(m_date_range_a.size())) {
+            menu_more->Append(mmID_FILTER_DATE_MIN + i, m_date_range_a[i].getName());
+            i++;
+        }
+    }
+    // TODO: menu.Append(mmID_EDIT_DATE_RANGES, _tu("Edit date ranges…"));
+    menu.Append(mmID_FILTER_ADVANCED, _tu("Advanced filter…"));
+
+    PopupMenu(&menu);
+    m_bitmapTransFilter->Layout();
+    event.Skip();
 }
 
-void mmCheckingPanel::OnNewTransaction(wxCommandEvent& event)
+void mmCheckingPanel::onFilterDate(wxCommandEvent& event)
 {
-    m_listCtrlAccount->OnNewTransaction(event);
+    int i = event.GetId() - mmID_FILTER_DATE_MIN;
+    if (i < 0 || i >= static_cast<int>(m_date_range_a.size()))
+        return;
+
+    setFilterDate(m_date_range_a[i]);
+    updateFilterTooltip();
+    refreshList();
 }
 
-void mmCheckingPanel::OnEditTransaction(wxCommandEvent& event)
+void mmCheckingPanel::onFilterAdvanced(wxCommandEvent& WXUNUSED(event))
 {
-    m_listCtrlAccount->OnEditTransaction(event);
-    m_listCtrlAccount->SetFocus();
+    if (!m_trans_filter_dlg) {
+        wxString j_str = Model_Infotable::instance().getString(
+            wxString::Format("CHECK_FILTER_ID_ADV_%lld", m_checking_id),
+            "{}"
+        );
+        m_trans_filter_dlg.reset(
+            new mmFilterTransactionsDialog(this, m_account_id, false, j_str)
+        );
+    }
+    const wxString save_j_str = m_trans_filter_dlg->mmGetJsonSettings();
+    int status = m_trans_filter_dlg->ShowModal();
+    if (status != wxID_OK) {
+        if (m_filter_id == FILTER_ID_ADVANCED) m_trans_filter_dlg.reset(
+            new mmFilterTransactionsDialog(this, m_account_id, false, save_j_str)
+        );
+        return;
+    }
+    if (m_filter_id != FILTER_ID_ADVANCED && !m_trans_filter_dlg->mmIsSomethingChecked()) {
+        return;
+    }
+
+    setFilterAdvanced();
+    m_bitmapTransFilter->SetToolTip(m_trans_filter_dlg->mmGetDescriptionToolTip());
+    refreshList();
 }
 
-void mmCheckingPanel::OnDuplicateTransaction(wxCommandEvent& event)
+void mmCheckingPanel::onEditDateRanges(wxCommandEvent& WXUNUSED(event))
 {
-    m_listCtrlAccount->OnDuplicateTransaction(event);
+    wxLogDebug("mmCheckingPanel::onEditDateRanges(): not yet implemented");
 }
 
-void mmCheckingPanel::OnEnterScheduled(wxCommandEvent& event)
+void mmCheckingPanel::onScheduled(wxCommandEvent&)
 {
-    m_listCtrlAccount->OnEnterScheduled(event);
+    if (!isDeletedTrans()) {
+        m_scheduled_selected = m_header_scheduled->GetValue();
+        updateScheduledToolTip();
+        saveFilterSettings();
+    }
+    refreshList();
 }
 
-void mmCheckingPanel::OnSkipScheduled(wxCommandEvent& event)
+//----------------------------------------------------------------------------
+
+void mmCheckingPanel::onNewTransaction(wxCommandEvent& event)
 {
-    m_listCtrlAccount->OnSkipScheduled(event);
+    m_lc->onNewTransaction(event);
 }
 
-void mmCheckingPanel::OnMoveTransaction(wxCommandEvent& event)
+void mmCheckingPanel::onEditTransaction(wxCommandEvent& event)
 {
-    m_listCtrlAccount->OnMoveTransaction(event);
+    m_lc->onEditTransaction(event);
+    m_lc->SetFocus();
 }
 
-void mmCheckingPanel::OnOpenAttachment(wxCommandEvent& event)
+void mmCheckingPanel::onDeleteTransaction(wxCommandEvent& event)
 {
-    m_listCtrlAccount->OnOpenAttachment(event);
-    m_listCtrlAccount->SetFocus();
+    m_lc->onDeleteTransaction(event);
 }
-//----------------------------------------------------------------------------
 
-void mmCheckingPanel::initFilterChoices()
+void mmCheckingPanel::onRestoreTransaction(wxCommandEvent& event)
 {
-    const wxString& def_view = wxString::Format(
-        "{ \"FILTER\": \"%s\" }",
-        Model_Setting::instance().ViewTransactions()
-    );
-    const auto& data = Model_Infotable::instance().GetStringInfo(
-        wxString::Format("CHECK_FILTER_ID_%lld", m_checking_id),
-        def_view
-    );
-    Document j_doc;
-    if (j_doc.Parse(data.utf8_str()).HasParseError())
-        j_doc.Parse("{}");
-
-    Value& j_filter = GetValueByPointerWithDefault(j_doc, "/FILTER", "");
-    m_filter_id = j_filter.IsString() ?
-        FILTER_STR.Index(wxString::FromUTF8(j_filter.GetString())) :
-        FILTER_ID_ALL;
-    if (m_filter_id < 0 || m_filter_id >= FILTER_ID_MAX)
-        m_filter_id = FILTER_ID_ALL;
-
-    m_scheduled_selected = false;
-    if (!isDeletedTrans() && j_doc.HasMember("SCHEDULED") && j_doc["SCHEDULED"].IsBool())
-        m_scheduled_selected = j_doc["SCHEDULED"].GetBool();
+    m_lc->onRestoreTransaction(event);
 }
-//----------------------------------------------------------------------------
 
-void mmCheckingPanel::saveFilterChoices()
+void mmCheckingPanel::onDuplicateTransaction(wxCommandEvent& event)
 {
-   const wxString& def_view = wxString::Format(
-        R"({ "FILTER": "%s" })",
-        Model_Setting::instance().ViewTransactions()
-    );
-    wxString json = Model_Infotable::instance().GetStringInfo(
-        wxString::Format("CHECK_FILTER_ID_%lld", m_checking_id),
-        def_view
-    );
-
-    Document j_doc;
-    if (j_doc.Parse(json.utf8_str()).HasParseError() || !j_doc.IsArray()) {
-        j_doc.Parse("{}");
-    }
-
-    int menu_index = m_transFilterActive ? FILTER_ID_DIALOG : m_filter_id;
-    auto menu_item = FILTER_STR[menu_index];
-    if (j_doc.HasMember("FILTER")) {
-        j_doc["FILTER"].SetString(menu_item.utf8_str(), j_doc.GetAllocator());
-    }
-    else {
-        auto& allocator = j_doc.GetAllocator();
-        rapidjson::Value key("FILTER", allocator);
-        rapidjson::Value value(menu_item.utf8_str(), allocator);
-        j_doc.AddMember(key, value, allocator);
-    }
-
-    if (!isDeletedTrans()) {
-        if (j_doc.HasMember("SCHEDULED")) {
-            j_doc["SCHEDULED"].SetBool(m_scheduled_selected);
-        }
-        else {
-            auto& allocator = j_doc.GetAllocator();
-            rapidjson::Value key("SCHEDULED", allocator);
-            j_doc.AddMember(key, m_scheduled_selected, allocator);
-        }
-    }
+    m_lc->onDuplicateTransaction(event);
+}
 
-    json = JSON_PrettyFormated(j_doc);
-    Model_Infotable::instance().Set(
-        wxString::Format("CHECK_FILTER_ID_%lld", m_checking_id),
-        json
-    );
+void mmCheckingPanel::onMoveTransaction(wxCommandEvent& event)
+{
+    m_lc->onMoveTransaction(event);
 }
-//----------------------------------------------------------------------------
 
-void mmCheckingPanel::updateFilterState()
+void mmCheckingPanel::onEnterScheduled(wxCommandEvent& event)
 {
-    m_transFilterActive = false;
-    m_bitmapTransFilter->UnsetToolTip();
-    wxSharedPtr<mmDateRange> date_range(new mmAllTime);
+    m_lc->onEnterScheduled(event);
+}
 
-    m_begin_date = "";
-    m_end_date = "";
+void mmCheckingPanel::onSkipScheduled(wxCommandEvent& event)
+{
+    m_lc->onSkipScheduled(event);
+}
 
-    switch (m_filter_id) {
-    case FILTER_ID_TODAY:
-        date_range = new mmToday; break;
-    case FILTER_ID_CURRENTMONTH:
-        date_range = new mmCurrentMonth; break;
-    case FILTER_ID_LAST30:
-        date_range = new mmLast30Days; break;
-    case FILTER_ID_LAST90:
-        date_range = new mmLast90Days; break;
-    case FILTER_ID_LASTMONTH:
-        date_range = new mmLastMonth; break;
-    case FILTER_ID_LAST3MONTHS:
-        date_range = new mmLast3Months; break;
-    case FILTER_ID_LAST12MONTHS:
-        date_range = new mmLast12Months; break;
-    case  FILTER_ID_CURRENTYEAR:
-        date_range = new mmCurrentYear; break;
-    case  FILTER_ID_CURRENTFINYEAR:
-        date_range = new mmCurrentFinancialYear(); break;
-    case  FILTER_ID_LASTYEAR:
-        date_range = new mmLastYear; break;
-    case  FILTER_ID_LASTFINYEAR:
-        date_range = new mmLastFinancialYear(); break;
-    case  FILTER_ID_STATEMENTDATE:
-        date_range = new mmSpecifiedRange(
-            Model_Account::DateOf(m_account->STATEMENTDATE).Add(wxDateSpan::Day()),
-            wxDateTime::Today()
-        );
+void mmCheckingPanel::onOpenAttachment(wxCommandEvent& event)
+{
+    m_lc->onOpenAttachment(event);
+    m_lc->SetFocus();
+}
 
-        if (!Option::instance().getIgnoreFutureTransactions())
-            date_range->set_end_date(date_range->future_date());
+void mmCheckingPanel::onSearchTxtEntered(wxCommandEvent& event)
+{
+    const wxString search_string = event.GetString();
+    if (search_string.IsEmpty()) return;
+    m_lc->doSearchText(search_string);
+}
 
-        break;
-    case FILTER_ID_DIALOG:
-        m_transFilterActive = true;
+void mmCheckingPanel::onButtonRightDown(wxMouseEvent& event)
+{
+    int id = event.GetId();
+    switch (id) {
+    case mmID_FILTER: {
+        wxCommandEvent evt(wxID_ANY, mmID_FILTER_ADVANCED);
+        onFilterAdvanced(evt);
         break;
     }
-
-    if (m_begin_date.empty()) {
-        m_begin_date = date_range->start_date().FormatISOCombined();
+    case wxID_FILE: {
+        auto selected_id = m_lc->getSelectedId();
+        if (selected_id.size() == 1) {
+            const wxString refType = !selected_id[0].second ?
+                Model_Checking::refTypeName :
+                Model_Billsdeposits::refTypeName;
+            mmAttachmentDialog dlg(this, refType, selected_id[0].first);
+            dlg.ShowModal();
+            refreshList();
+        }
+        break;
     }
-
-    if (m_end_date.empty()) {
-        m_end_date = date_range->end_date().FormatISOCombined();
+    case wxID_NEW: {
+        wxMenu menu;
+        menu.Append(Model_Checking::TYPE_ID_WITHDRAWAL, _tu("&New Withdrawal…"));
+        menu.Append(Model_Checking::TYPE_ID_DEPOSIT, _tu("&New Deposit…"));
+        menu.Append(Model_Checking::TYPE_ID_TRANSFER, _tu("&New Transfer…"));
+        PopupMenu(&menu);
     }
-
-    auto item = m_transFilterActive ? FILTER_STR[FILTER_ID_DIALOG] : FILTER_STR[m_filter_id];
-    m_bitmapTransFilter->SetLabel(wxGetTranslation(item));
-    m_bitmapTransFilter->SetBitmap(m_transFilterActive ?
-        mmBitmapBundle(png::TRANSFILTER_ACTIVE, mmBitmapButtonSize) :
-        mmBitmapBundle(png::TRANSFILTER, mmBitmapButtonSize)
-    );
-
-    //Text field for name of day of the week
-    wxSize buttonSize(wxDefaultSize);
-    buttonSize.IncTo(GetTextExtent(wxGetTranslation(item)));
-    int width = buttonSize.GetWidth();
-    if (width < 200) width = 200;
-    m_bitmapTransFilter->SetMinSize(
-        wxSize(width + Option::instance().getIconSize() * 2, -1)
-    );
-
-    m_scheduled_enable = !isDeletedTrans() &&
-        (m_filter_id >= FILTER_ID_TODAY && m_filter_id <= FILTER_ID_LASTFINYEAR);
-
-    if (!isDeletedTrans()) {
-        m_header_scheduled->SetValue(m_scheduled_selected);
-        m_header_scheduled->Enable(m_scheduled_enable);
-        updateScheduledToolTip();
+    default:
+        break;
     }
-
-    saveFilterChoices();
-}
-
-void mmCheckingPanel::updateScheduledToolTip()
-{
-    mmToolTip(m_header_scheduled,
-        !m_scheduled_enable ? _("Unable to show scheduled transactions because the current filter choice extends into the future without limit.") :
-        !m_scheduled_selected ? _("Click to show scheduled transactions. This feature works best with filter choices that extend into the future (e.g., Current Month).") :
-        _("Click to hide scheduled transactions."));
 }
 
-void mmCheckingPanel::OnViewPopupSelected(wxCommandEvent& event)
+void mmCheckingPanel::onInfoPanelClick(wxMouseEvent& event, wxStaticText* infoPanel)
 {
-    int oldView = m_filter_id;
-    m_filter_id = event.GetId() - wxID_HIGHEST;
-
-    if (m_filter_id == FILTER_ID_DIALOG) {
-        if (!m_trans_filter_dlg) {
-            const wxString& def_view = wxString::Format(
-                R"({ "FILTER": "%s" })",
-                Model_Setting::instance().ViewTransactions()
-            );
-            wxString json = Model_Infotable::instance().GetStringInfo(
-                wxString::Format("CHECK_FILTER_ID_ADV_%lld", m_checking_id),
-                def_view
-            );
-            m_trans_filter_dlg.reset(
-                new mmFilterTransactionsDialog(this, m_account_id, false, json)
-            );
-        }
-
-        const auto json_settings = m_trans_filter_dlg->mmGetJsonSetings();
-        int status =  m_trans_filter_dlg->ShowModal();
-        if (oldView == FILTER_ID_DIALOG) {
-            if (status != wxID_OK)
-                m_trans_filter_dlg.reset(
-                    new mmFilterTransactionsDialog(this, m_account_id, false, json_settings)
-                );
-        }
-        else {
-            m_transFilterActive = (status == wxID_OK && m_trans_filter_dlg->mmIsSomethingChecked());
-            if (!m_transFilterActive)
-                m_filter_id = oldView;
-        }
+    wxString clipboardValue = "";
+    if (!m_info_panel_selectedbal.IsEmpty())
+    {
+        clipboardValue = m_info_panel_selectedbal;
     }
-    else {
-        m_transFilterActive = false;
+    else
+    {
+        clipboardValue = infoPanel->GetLabel();
+    }
+    if (!clipboardValue.IsEmpty())
+    {
+        // Copy to clipboard
+        if (wxTheClipboard->Open())
+        {
+            wxTheClipboard->SetData(new wxTextDataObject(clipboardValue));
+            wxTheClipboard->Close();
+            this->Layout();
+        }
+        m_info_panel_selectedbal.empty();
     }
 
-    updateFilterState();
+    event.Skip();
+}
 
-    if (m_transFilterActive)
-        m_bitmapTransFilter->SetToolTip(m_trans_filter_dlg->mmGetDescriptionToolTip());
 
-    RefreshList();
-}
+//----------------------------------------------------------------------------
 
-void mmCheckingPanel::OnScheduled(wxCommandEvent&)
+wxString mmCheckingPanel::getPanelTitle() const
 {
-    if (!isDeletedTrans()) {
-        m_scheduled_selected = m_header_scheduled->GetValue();
-        updateScheduledToolTip();
-        saveFilterChoices();
+    if (isAllTrans())
+        return _t("All Transactions");
+    else if (isDeletedTrans())
+        return _t("Deleted Transactions");
+    else if (isGroup()) {
+        if (m_checking_id == -3)
+            return _t("Favorites");
+        else
+            return wxGetTranslation(mmGUIFrame::ACCOUNT_SECTION[m_account_type]);
     }
-    RefreshList();
+    else if (m_account)
+        return wxString::Format(_t("Account View: %s"), m_account->ACCOUNTNAME);
+    else
+        return "";
 }
 
-void mmCheckingPanel::OnSearchTxtEntered(wxCommandEvent& event)
+wxString mmCheckingPanel::BuildPage() const
 {
-    const wxString search_string = event.GetString();
-    if (search_string.IsEmpty()) return;
+    return m_lc->BuildPage((m_account ? getPanelTitle() : ""));
+}
 
-    m_listCtrlAccount->doSearchText(search_string);
+void mmCheckingPanel::resetColumnView()
+{
+    m_lc->DeleteAllColumns();
+    m_lc->setColumnsInfo();
+    m_lc->createColumns();
+    m_lc->refreshVisualList();
 }
 
-void mmCheckingPanel::DisplaySplitCategories(Fused_Transaction::IdB fused_id)
+void mmCheckingPanel::setSelectedTransaction(Fused_Transaction::IdRepeat fused_id)
+{
+    m_lc->setSelectedId(fused_id);
+    refreshList();
+    m_lc->SetFocus();
+}
+
+void mmCheckingPanel::displaySplitCategories(Fused_Transaction::IdB fused_id)
 {
     Fused_Transaction::Data fused = !fused_id.second ?
         Fused_Transaction::Data(*Model_Checking::instance().get(fused_id.first)) :
@@ -1233,74 +1282,15 @@
         splits.push_back(s);
     }
     if (splits.empty()) return;
-    int tranType = Model_Checking::type_id(fused.TRANSCODE);
-    mmSplitTransactionDialog splitTransDialog(this, splits, m_account_id, tranType, 0.0, true);
+    mmSplitTransactionDialog splitTransDialog(this, splits, m_account_id, true);
 
     //splitTransDialog.SetDisplaySplitCategories();
     splitTransDialog.ShowModal();
 }
 
-void mmCheckingPanel::RefreshList()
-{
-    m_listCtrlAccount->refreshVisualList();
-}
-
-void mmCheckingPanel::ResetColumnView()
-{
-    m_listCtrlAccount->DeleteAllColumns();
-    m_listCtrlAccount->resetColumns();
-    m_listCtrlAccount->refreshVisualList();
-}
-
-void mmCheckingPanel::SetSelectedTransaction(Fused_Transaction::IdRepeat fused_id)
-{
-    m_listCtrlAccount->setSelectedID(fused_id);
-    RefreshList();
-    m_listCtrlAccount->SetFocus();
-}
-
-// Refresh account screen with new details
-void mmCheckingPanel::DisplayAccountDetails(int64 account_id)
-{
-    wxASSERT (account_id >= 1);
-
-    m_listCtrlAccount->setVisibleItemIndex(-1);
-    m_checking_id = account_id;
-    m_account_id = account_id;
-    m_account_type = -1;
-    m_group_ids = {};
-    m_account = Model_Account::instance().get(m_account_id);
-    m_currency = Model_Account::currency(m_account);
-
-    initFilterChoices();
-    updateFilterState();
-
-    if (m_transFilterActive) {
-        const wxString& def_view = wxString::Format(
-            "{ \"FILTER\": \"%s\" }",
-            Model_Setting::instance().ViewTransactions()
-        );
-        wxString json = Model_Infotable::instance().GetStringInfo(
-            wxString::Format("CHECK_FILTER_ID_ADV_%lld", m_checking_id),
-            def_view
-        );
-        m_trans_filter_dlg.reset(
-            new mmFilterTransactionsDialog(this, m_account_id, false, json)
-        );
-        m_bitmapTransFilter->SetToolTip(
-            m_trans_filter_dlg->mmGetDescriptionToolTip()
-        );
-    }
-
-    RefreshList();
-    showTips();
-
-    enableButtons(false, false, false, false, false, false);
-}
-
 void mmCheckingPanel::mmPlayTransactionSound()
 {
-    int play = Model_Setting::instance().GetIntSetting(INIDB_USE_TRANSACTION_SOUND, 0);
+    int play = Model_Setting::instance().getInt(INIDB_USE_TRANSACTION_SOUND, 0);
     if (!play) return;
 
     wxString wav_path = mmex::getPathResource(
@@ -1312,3 +1302,4 @@
     if (registerSound.IsOk())
         registerSound.Play(wxSOUND_ASYNC);
 }
+
diff -Naur a/src/mmcheckingpanel.h b/src/mmcheckingpanel.h
--- a/src/mmcheckingpanel.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmcheckingpanel.h	2025-07-09 01:46:59.648940508 +0200
@@ -26,6 +26,7 @@
 #include "mmpanelbase.h"
 #include "constants.h"
 #include "fusedtransaction.h"
+#include "reports/mmDateRange.h"
 #include "model/Model_Account.h"
 #include <map>
 //----------------------------------------------------------------------------
@@ -49,10 +50,6 @@
         ICON_ASC,
     };
 
-    static wxArrayString FILTER_STR;
-    static const wxString FILTER_STR_ALL;
-    static const wxString FILTER_STR_DIALOG;
-
 public:
     mmCheckingPanel(
         mmGUIFrame* frame,
@@ -68,78 +65,69 @@
     bool isGroup() const;
     bool isAccount() const;
 
-    void DisplayAccountDetails(int64 account_id = -1);
-        // Refresh account screen with new details
-    void DisplaySplitCategories(Fused_Transaction::IdB fused_id);
-        // Display the split categories for the selected transaction.
-
-    void SetSelectedTransaction(Fused_Transaction::IdRepeat fused_id);
-
-    void RefreshList();
-    void ResetColumnView();
-
+    void loadAccount(int64 account_id = -1);
+    void refreshList();
     wxString BuildPage() const;
+    void resetColumnView();
+    void setSelectedTransaction(Fused_Transaction::IdRepeat fused_id);
+    void displaySplitCategories(Fused_Transaction::IdB fused_id);
 
 private:
-    friend class TransactionListCtrl; // needs access to m_core, initdb_, ...
+    friend class TransactionListCtrl;
 
-    enum ID_TRX
+    enum FILTER_ID
     {
-        ID_TRX_FILTER = wxID_HIGHEST + 50,
-        ID_TRX_SCHEDULED
+        FILTER_ID_DATE = 0,
+        FILTER_ID_ADVANCED,
+        FILTER_ID_size
     };
 
-    enum FILTER_ID
+    wxDECLARE_EVENT_TABLE();
+    enum
     {
-        FILTER_ID_ALL = 0,
-        FILTER_ID_TODAY,
-        FILTER_ID_CURRENTMONTH,
-        FILTER_ID_LAST30,
-        FILTER_ID_LAST90,
-        FILTER_ID_LASTMONTH,
-        FILTER_ID_LAST3MONTHS,
-        FILTER_ID_LAST12MONTHS,
-        FILTER_ID_CURRENTYEAR,
-        FILTER_ID_CURRENTFINYEAR,
-        FILTER_ID_LASTYEAR,
-        FILTER_ID_LASTFINYEAR,
-        FILTER_ID_STATEMENTDATE,
-        FILTER_ID_DIALOG,
-        FILTER_ID_MAX,
+        mmID_FILTER = wxID_HIGHEST + 50,
+        mmID_FILTER_DATE_MIN,
+        mmID_FILTER_DATE_MAX = mmID_FILTER_DATE_MIN + 99,
+        mmID_FILTER_ADVANCED,
+        mmID_EDIT_DATE_RANGES,
+        mmID_SCHEDULED,
     };
 
-    static const std::vector<std::pair<FILTER_ID, wxString> > FILTER_CHOICES;
-    static wxArrayString filter_str_all();
-    static void mmPlayTransactionSound();
+    static const std::vector<std::pair<FILTER_ID, wxString> > FILTER_NAME;
+    static const wxString FILTER_NAME_DATE;
+    static const wxString FILTER_NAME_ADVANCED;
 
 private:
+    // set by constructor or loadAccount()
     int64 m_checking_id = -1;
         //  1..   : single account with id m_checking_id
         // -1     : all transactions
         // -2     : deleted transactions
         // -3     : favorite accounts
         // -(4+X) : accounts of type X
-    int m_filter_id;
-    bool m_scheduled_enable;
-    bool m_scheduled_selected;
-    bool m_transFilterActive = false;
-    wxString m_sortSaveTitle;  // Used for saving sort settings
-    wxString m_begin_date;
-    wxString m_end_date;
-    double m_account_flow = 0.0;
-    double m_account_balance = 0.0;
-    double m_account_reconciled = 0.0;
-    bool m_show_reconciled;
-    bool m_show_tips = false;
-    TransactionListCtrl* m_listCtrlAccount = nullptr;
-
     int64 m_account_id = -1;                    // applicable if m_checking_id >= 1
     int m_account_type = -1;                    // applicable if m_checking_id <= -4
     std::set<int64> m_group_ids = {};           // applicable if m_checking_id <= -3
     Model_Account::Data* m_account = nullptr;   // non-null if m_checking_id >= 1
     Model_Currency::Data* m_currency = nullptr; // currency of m_account, or base currency
+    std::vector<DateRange2::Spec> m_date_range_a = {};
+    int m_date_range_m = -1;
+
+    // set by gui
+    FILTER_ID m_filter_id;
+    DateRange2 m_date_range = DateRange2();
+    bool m_scheduled_enable;
+    bool m_scheduled_selected;
+
+    // calculated by filterList(); applicable if isAccount()
+    double m_flow = 0.0;
+    double m_balance = 0.0;
+    double m_reconciled_balance = 0.0;
+    bool m_show_reconciled;
+
+    // set by showTips()
+    bool m_show_tips = false;
 
-    wxDECLARE_EVENT_TABLE();
     mmGUIFrame* m_frame = nullptr;
     wxButton* m_bitmapTransFilter = nullptr;
     wxButton* m_btnNew = nullptr;
@@ -157,49 +145,55 @@
     wxStaticText* m_header_balance = nullptr;
     wxStaticText* m_info_panel = nullptr;
     wxStaticText* m_info_panel_mini = nullptr;
-    wxSharedPtr<mmFilterTransactionsDialog> m_trans_filter_dlg;
+    wxString m_info_panel_selectedbal; 
     wxVector<wxBitmapBundle> m_images;
+    TransactionListCtrl* m_lc = nullptr;
+    wxSharedPtr<mmFilterTransactionsDialog> m_trans_filter_dlg;
 
 private:
-    wxString GetPanelTitle() const;
-
-    bool Create(
+    bool create(
         wxWindow* parent,
         const wxPoint& pos = wxDefaultPosition,
         const wxSize& size = wxDefaultSize,
         long style = wxTAB_TRAVERSAL | wxNO_BORDER,
         const wxString& name = "mmCheckingPanel" 
     );
-
-    void initFilterChoices();
-    void updateFilterState();
-    void saveFilterChoices();
-    void setAccountSummary();
-    void sortTable();
-    void filterTable();
-    void CreateControls();
-
-    /* updates the checking panel data */
+    void createControls();
+    void updateHeader();
+    void updateFilter();
+    void updateFilterTooltip();
+    void setFilterDate(DateRange2::Spec& spec);
+    void setFilterAdvanced();
+    void loadFilterSettings();
+    void saveFilterSettings();
+    void filterList();
+    void sortList();
+    void updateExtraTransactionData(bool single, int repeat_num, bool foreign);
+    void enableButtons(bool edit, bool dup, bool del, bool enter, bool skip, bool attach);
     void showTips();
     void showTips(const wxString& tip);
     void updateScheduledToolTip();
-    void updateExtraTransactionData(bool single, int repeat_num, bool foreign);
-    void enableButtons(bool edit, bool dup, bool del, bool enter, bool skip, bool attach);
 
-    void OnNewTransaction(wxCommandEvent& event);
-    void OnEditTransaction(wxCommandEvent& event);
-    void OnDuplicateTransaction(wxCommandEvent& event);
-    void OnRestoreTransaction(wxCommandEvent& event);
-    void OnDeleteTransaction(wxCommandEvent& event);
-    void OnEnterScheduled(wxCommandEvent& event);
-    void OnSkipScheduled(wxCommandEvent& event);
-    void OnOpenAttachment(wxCommandEvent& event);
-    void OnMoveTransaction(wxCommandEvent& event);
-    void OnMouseLeftDown(wxCommandEvent& event);
-    void OnButtonRightDown(wxMouseEvent& event);
-    void OnViewPopupSelected(wxCommandEvent& event);
-    void OnScheduled(wxCommandEvent& event);
-    void OnSearchTxtEntered(wxCommandEvent& event);
+    void onFilterPopup(wxCommandEvent& event);
+    void onFilterDate(wxCommandEvent& event);
+    void onFilterAdvanced(wxCommandEvent& event);
+    void onEditDateRanges(wxCommandEvent& event);
+    void onScheduled(wxCommandEvent& event);
+    void onNewTransaction(wxCommandEvent& event);
+    void onEditTransaction(wxCommandEvent& event);
+    void onDeleteTransaction(wxCommandEvent& event);
+    void onRestoreTransaction(wxCommandEvent& event);
+    void onDuplicateTransaction(wxCommandEvent& event);
+    void onMoveTransaction(wxCommandEvent& event);
+    void onEnterScheduled(wxCommandEvent& event);
+    void onSkipScheduled(wxCommandEvent& event);
+    void onOpenAttachment(wxCommandEvent& event);
+    void onSearchTxtEntered(wxCommandEvent& event);
+    void onButtonRightDown(wxMouseEvent& event);
+    void onInfoPanelClick(wxMouseEvent& event, wxStaticText* infoPanel);
+
+    wxString getPanelTitle() const;
+    static void mmPlayTransactionSound();
 };
 
 inline bool mmCheckingPanel::isAllTrans() const { return m_checking_id == -1; }
diff -Naur a/src/mmcustomdata.cpp b/src/mmcustomdata.cpp
--- a/src/mmcustomdata.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmcustomdata.cpp	2025-07-09 01:46:59.652940532 +0200
@@ -25,7 +25,6 @@
 #include "validators.h"
 #include "Model_Currency.h"
 #include "Model_CustomFieldData.h"
-#include "Model_Attachment.h"
 
 #include <wx/timectrl.h>
 #include <wx/collpane.h>
@@ -54,7 +53,7 @@
 
 mmCustomDataTransaction::mmCustomDataTransaction(wxDialog* dialog, int64 ref_id, wxWindowID base_id)
     : mmCustomData(dialog
-        , Model_Attachment::REFTYPE_STR_TRANSACTION
+        , Model_Checking::refTypeName
         , ref_id)
 {
     SetBaseID(base_id);
@@ -62,7 +61,7 @@
 
 bool mmCustomData::FillCustomFields(wxBoxSizer* box_sizer)
 {
-    m_static_box = new wxStaticBox(m_dialog, wxID_ANY, _("Custom fields"));
+    m_static_box = new wxStaticBox(m_dialog, wxID_ANY, _t("Custom fields"));
     wxStaticBoxSizer* box_sizer_right = new wxStaticBoxSizer(m_static_box, wxVERTICAL);
     box_sizer->Add(box_sizer_right, g_flagsExpand);
 
@@ -75,6 +74,7 @@
     grid_sizer_custom->AddGrowableCol(1, 1);
     custom_sizer->Add(grid_sizer_custom, g_flagsExpand);
 
+    int field_index = 0;
     for (const auto &field : m_fields)
     {
         bool nonDefaultData = true;
@@ -88,7 +88,7 @@
             nonDefaultData = false;
         }
 
-        wxWindowID controlID = GetBaseID() + field.FIELDID.GetValue() * FIELDMULTIPLIER;
+        wxWindowID controlID = GetBaseID() + field_index++ * FIELDMULTIPLIER;
         wxWindowID labelID = controlID + CONTROLOFFSET;
 
         wxCheckBox* Description = new wxCheckBox(scrolled_window
@@ -153,9 +153,9 @@
         case Model_CustomField::TYPE_ID_BOOLEAN:
         {
             wxRadioButton* CustomBooleanF = new wxRadioButton(scrolled_window, controlID
-                , _("False"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP);
+                , _t("False"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP);
             wxRadioButton* CustomBooleanT = new wxRadioButton(scrolled_window, controlID + 1
-                , _("True"), wxDefaultPosition, wxDefaultSize);
+                , _t("True"), wxDefaultPosition, wxDefaultSize);
 
             const auto& data = fieldData->CONTENT;
             if (!data.empty())
@@ -285,7 +285,7 @@
     }
 
     const auto& name = button->GetName();
-    const wxString& type = Model_CustomField::TYPE_STR[Model_CustomField::TYPE_ID_MULTICHOICE];
+    const wxString& type = Model_CustomField::type_name(Model_CustomField::TYPE_ID_MULTICHOICE);
 
     Model_CustomField::Data_Set fields = Model_CustomField::instance()
         .find(Model_CustomField::REFTYPE(m_ref_type)
@@ -306,7 +306,7 @@
     wxString data = label;
     if (init != -1)
     {
-        wxSharedPtr<wxMultiChoiceDialog> MultiChoice(new wxMultiChoiceDialog(this, _("Please select"), _("Multi Choice"), all_choices));
+        wxSharedPtr<wxMultiChoiceDialog> MultiChoice(new wxMultiChoiceDialog(this, _t("Please select"), _t("Multi Choice"), all_choices));
         MultiChoice->SetSelections(arr_selections);
 
         if (MultiChoice->ShowModal() == wxID_OK)
@@ -333,8 +333,8 @@
     std::map<int64, wxString> values;
     for (const auto& entry : m_data_changed)
     {
-        int64 id = (entry.first - GetBaseID()) / FIELDMULTIPLIER;
-        Model_CustomField::Data *item = Model_CustomField::instance().get(id);
+        int id = (entry.first - GetBaseID()) / FIELDMULTIPLIER;
+        Model_CustomField::Data *item = Model_CustomField::instance().get(m_fields[id].FIELDID);
         if (item) {
             values[item->FIELDID] = entry.second;
         }
@@ -470,9 +470,10 @@
 {
     bool updateTimestamp = false;
     Model_CustomFieldData::instance().Savepoint();
+    int field_index = 0;
     for (const auto &field : m_fields)
     {
-        wxWindowID controlID = GetBaseID() + field.FIELDID.GetValue() * FIELDMULTIPLIER;
+        wxWindowID controlID = GetBaseID() + field_index++ * FIELDMULTIPLIER;
         const auto& data = IsWidgetChanged(controlID) ? GetWidgetData(controlID) : "";
 
         Model_CustomFieldData::Data* fieldData = Model_CustomFieldData::instance().get(field.FIELDID, ref_id);
@@ -489,7 +490,7 @@
             fieldData->CONTENT = data;
             wxLogDebug("Control:%i Type:%s Value:%s"
                 , controlID
-                , Model_CustomField::TYPE_STR[Model_CustomField::type_id(field)]
+                , Model_CustomField::type_name(Model_CustomField::type_id(field))
                 , data);
 
             if (!fieldData->equals(&oldData)) updateTimestamp = true;
@@ -505,7 +506,7 @@
 
     Model_CustomFieldData::instance().ReleaseSavepoint();
 
-    if (updateTimestamp && m_ref_type == Model_Attachment::REFTYPE_STR_TRANSACTION)
+    if (updateTimestamp && m_ref_type == Model_Checking::refTypeName)
         Model_Checking::instance().updateTimestamp(ref_id);        
 
     return true;
@@ -515,11 +516,12 @@
 {
     Model_CustomFieldData::instance().Savepoint();
     bool updateTimestamp = false;
+    int field_index = 0;
     for (const auto& field : m_fields)
     {
         bool is_changed = false;
 
-        wxWindowID controlID = GetBaseID() + field.FIELDID.GetValue() * FIELDMULTIPLIER;
+        wxWindowID controlID = GetBaseID() + field_index++ * FIELDMULTIPLIER;
         auto label_id = controlID + CONTROLOFFSET;
         wxCheckBox* Description = static_cast<wxCheckBox*>(m_dialog->FindWindow(label_id));
         if (Description) {
@@ -555,7 +557,7 @@
 
     Model_CustomFieldData::instance().ReleaseSavepoint();
 
-    if (updateTimestamp && m_ref_type == Model_Attachment::REFTYPE_STR_TRANSACTION)
+    if (updateTimestamp && m_ref_type == Model_Checking::refTypeName)
         Model_Checking::instance().updateTimestamp(ref_id);        
 }
 
@@ -600,10 +602,10 @@
 
 void mmCustomData::ClearSettings()
 {
-    for (const auto &field : m_fields)
+    for (unsigned int field_index = 0 ; field_index < m_fields.size() ; field_index++ )
     {
-        SetStringValue(field.FIELDID, "");
-        wxWindowID labelID = GetBaseID() + field.FIELDID.GetValue() * FIELDMULTIPLIER + CONTROLOFFSET;
+        SetStringValue(field_index, "");
+        wxWindowID labelID = GetBaseID() + field_index * FIELDMULTIPLIER + CONTROLOFFSET;
         wxCheckBox* cb = static_cast<wxCheckBox*>(FindWindowById(labelID, m_dialog));
         if (cb)
             cb->SetValue(false);
@@ -631,7 +633,7 @@
     int control_id = (controlID - GetBaseID()) / FIELDMULTIPLIER;
     for (const auto& entry : fields)
     {
-        if (entry.FIELDID == control_id)
+        if (entry.FIELDID == m_fields[control_id].FIELDID)
         {
             return Model_CustomField::type_id(entry);
         }
@@ -644,7 +646,7 @@
 {
     int control_id = (controlID - GetBaseID()) / FIELDMULTIPLIER;
     for (const auto &field : m_fields)
-        if (field.FIELDID == control_id)
+    if (field.FIELDID == m_fields[control_id].FIELDID)
             return (Model_CustomField::getDigitScale(field.PROPERTIES));
     wxFAIL_MSG("No field found");
     return -1;
@@ -745,9 +747,9 @@
     m_static_box->Show();
 }
 
-void mmCustomData::SetStringValue(int64 fieldId, const wxString& value, bool hasChanged)
+void mmCustomData::SetStringValue(int fieldIndex, const wxString& value, bool hasChanged)
 {
-    wxWindowID widget_id = GetBaseID() + fieldId.GetValue() * FIELDMULTIPLIER;
+    wxWindowID widget_id = GetBaseID() + fieldIndex * FIELDMULTIPLIER;
     SetWidgetData(widget_id, value);
     if (hasChanged)
          SetWidgetChanged(widget_id, value);
@@ -756,9 +758,10 @@
 bool mmCustomData::ValidateCustomValues(int64)
 {
     bool is_valid = true;
+    int field_index = 0;
     for (const auto &field : m_fields)
     {
-        wxWindowID controlID = GetBaseID() + field.FIELDID.GetValue() * FIELDMULTIPLIER;
+        wxWindowID controlID = GetBaseID() + field_index++ * FIELDMULTIPLIER;
         wxWindowID labelID = controlID + CONTROLOFFSET;
 
         wxCheckBox* cb = static_cast<wxCheckBox*>(FindWindowById(labelID, m_dialog));
@@ -789,10 +792,10 @@
 
             if (!regEx.Matches(data))
             {
-                mmErrorDialogs::MessageError(this, wxString::Format(_("Unable to save custom field \"%1$s\":\nvalue \"%2$s\" "
+                mmErrorDialogs::MessageError(this, wxString::Format(_t("Unable to save custom field \"%1$s\":\nvalue \"%2$s\" "
                     "does not match RegEx validation \"%3$s\"")
                     , field.DESCRIPTION, data, regExStr)
-                    , _("CustomField validation error"));
+                    , _t("CustomField validation error"));
                 is_valid = false;
                 continue;
             }
diff -Naur a/src/mmcustomdata.h b/src/mmcustomdata.h
--- a/src/mmcustomdata.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmcustomdata.h	2025-07-09 01:46:59.652940532 +0200
@@ -36,7 +36,7 @@
     bool FillCustomFields(wxBoxSizer* box_sizer);
     bool SaveCustomValues(int64 ref_id);
     void UpdateCustomValues(int64 ref_id);
-    void SetStringValue(int64 fieldID, const wxString& value, bool hasChanged = false);
+    void SetStringValue(int fieldIndex, const wxString& value, bool hasChanged = false);
     bool ValidateCustomValues(int64);
     const wxString GetWidgetData(wxWindowID controlID) const;
     void SetWidgetData(wxWindowID controlID, const wxString& value);
diff -Naur a/src/mmex.cpp b/src/mmex.cpp
--- a/src/mmex.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmex.cpp	2025-07-09 01:46:59.652940532 +0200
@@ -24,11 +24,11 @@
 #include "paths.h"
 #include "platfdep.h"
 #include "util.h"
+#include "daterange2.h"
 
 #include "model/Model_Setting.h"
 #include "model/Model_Usage.h"
 
-#include "../resources/money.xpm"
 #include <wx/cmdline.h>
 #include <wx/display.h>
 #include <wx/fs_arc.h>
@@ -175,7 +175,7 @@
 
     if (!report.IsOk())
     {
-        wxSafeShowMessage(mmex::getProgramName(), _("Fatal error occured.\nApplication will be terminated."));
+        wxSafeShowMessage(mmex::getProgramName(), _t("Fatal error occured.\nApplication will be terminated."));
     }
 
     report.AddAll(ctx);
@@ -233,6 +233,8 @@
 
 bool OnInitImpl(mmGUIApp* app)
 {
+    bool ok = true;
+
     app->SetAppName(mmex::GetAppName());
 
     app->SetSettingDB(new wxSQLite3Database());
@@ -247,11 +249,16 @@
     app->GetSettingDB()->Open(file_path);
     Model_Setting::instance(app->GetSettingDB());
 
-    Model_Setting::instance().ShrinkUsageTable();
+    Model_Setting::instance().shrinkUsageTable();
     Model_Usage::instance(app->GetSettingDB());
 
     /* Load general MMEX Custom Settings */
-    Option::instance().LoadOptions(false);
+    Option::instance().load(false);
+
+    // checks (only in Debug build)
+#ifndef NDEBUG
+    ok = ok && DateRange2::debug();
+#endif
 
     /* initialize GUI with best language */
     wxTranslations* trans = new wxTranslations;
@@ -266,13 +273,12 @@
 
     wxFileSystem::AddHandler(new wxMemoryFSHandler);
 
-    // Copy files from resources to VFS
+    wxLogDebug("{{{ OnInitImpl(): Copy files from resources to VFS");
     const wxString res_dir = mmex::GetResourceDir().GetPathWithSep();
     wxArrayString files_array;
     wxDir::GetAllFiles(res_dir, &files_array);
     for (const auto& source_file : files_array)
     {
-        wxString data;
         if (wxFileName::FileExists(source_file))
         {
             const auto file_name = wxFileName(source_file).GetFullName();
@@ -284,10 +290,11 @@
             wxMemoryOutputStream memOut(nullptr);
             input.Read(memOut);
             wxStreamBuffer* buffer = memOut.GetOutputStreamBuffer();
-            wxLogDebug("File: %s has been copied to VFS", file_name);
+            wxLogDebug("%s", file_name);
             wxMemoryFSHandler::AddFile(file_name, buffer->GetBufferStart(), buffer->GetBufferSize());
         }
     }
+    wxLogDebug("}}}");
 
 #else
 
@@ -350,10 +357,10 @@
     int defValH = rect.GetHeight() / 4 * 3;
 
     // Load Dimensions of Window, if not found use the 'sensible' values
-    int valX = Model_Setting::instance().GetIntSetting("ORIGINX", defValX);
-    int valY = Model_Setting::instance().GetIntSetting("ORIGINY", defValY);
-    int valW = Model_Setting::instance().GetIntSetting("SIZEW", defValW);
-    int valH = Model_Setting::instance().GetIntSetting("SIZEH", defValH);
+    int valX = Model_Setting::instance().getInt("ORIGINX", defValX);
+    int valY = Model_Setting::instance().getInt("ORIGINY", defValY);
+    int valW = Model_Setting::instance().getInt("SIZEW", defValW);
+    int valH = Model_Setting::instance().getInt("SIZEH", defValH);
 
     // Check if it 'fits' into any of the windows
     // -- 'fit' means either an exact fit or at least 20% of application is on a visible window)
@@ -403,11 +410,10 @@
     }
 
     app->m_frame = new mmGUIFrame(app, mmex::getProgramName(), wxPoint(valX, valY), wxSize(valW, valH));
-
-    bool ok = app->m_frame->Show();
+    ok = ok && app->m_frame->Show();
 
     /* Was App Maximized? */
-    bool isMax = Model_Setting::instance().GetBoolSetting("ISMAXIMIZED", true);
+    bool isMax = Model_Setting::instance().getBool("ISMAXIMIZED", true);
     if (isMax)
         app->m_frame->Maximize(true);
 
@@ -451,19 +457,21 @@
 
 int mmGUIApp::OnExit()
 {
-    wxLogDebug("OnExit()");
+    wxLogDebug("{{{ mmGUIApp::OnExit()");
+
+    if (m_frame && !m_frame->IsBeingDeleted())
+        m_frame->Destroy();
+
     Model_Usage::Data* usage = Model_Usage::instance().create();
     usage->USAGEDATE = wxDate::Today().FormatISODate();
 
     wxString rj = Model_Usage::instance().To_JSON_String();
-    wxLogDebug("===== mmGUIApp::OnExit ===========================");
     wxLogDebug("RapidJson\n%s", rj);
 
     usage->JSONCONTENT = rj;
     Model_Usage::instance().save(usage);
 
-    if (m_setting_db)
-    {
+    if (m_setting_db) {
         m_setting_db->Close();
         m_setting_db->ShutdownSQLite();
     }
@@ -474,6 +482,7 @@
     // Delete mmex temp folder for current user
     wxFileName::Rmdir(mmex::getTempFolder(), wxPATH_RMDIR_RECURSIVE);
 
+    wxLogDebug("}}}");
     return 0;
 }
 
@@ -483,9 +492,9 @@
 bool findModal(wxWindow* w)
 {
     wxWindowList& children = w->GetChildren();
-    for (wxWindowList::Node* node = children.GetFirst(); node; node = node->GetNext())
+    for ( wxWindowList::compatibility_iterator it = children.GetFirst(); it; it = it->GetNext() )
     {
-        wxWindow* current = static_cast<wxWindow*>(node->GetData());
+        wxWindow* current = static_cast<wxWindow*>(it->GetData());
         wxLogDebug("  Name [%s]", current->GetName());
         if (current->IsKindOf(CLASSINFO(wxDialog)))
             return true;
@@ -502,5 +511,6 @@
     bool modalExists = findModal(GetTopWindow());
     if (!modalExists)
         this->GetTopWindow()->Close();
+    return true;
 }
 #endif
diff -Naur a/src/mmframe.cpp b/src/mmframe.cpp
--- a/src/mmframe.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmframe.cpp	2025-07-09 01:46:59.652940532 +0200
@@ -62,6 +62,7 @@
 #include "themes.h"
 #include "transdialog.h"
 #include "util.h"
+#include "mmTreeItemData.h"
 #include "webapp.h"
 #include "webappdialog.h"
 #include "wizard_newdb.h"
@@ -80,8 +81,9 @@
 #include <wx/fs_mem.h>
 #include <wx/busyinfo.h>
 #include <stack>
+#include <unordered_set>
 
- //----------------------------------------------------------------------------
+//----------------------------------------------------------------------------
 
 int REPEAT_TRANS_DELAY_TIME = 3000; // 3 seconds
 //----------------------------------------------------------------------------
@@ -207,14 +209,14 @@
 
 const std::vector<std::pair<Model_Account::TYPE_ID, wxString> > mmGUIFrame::ACCOUNT_SECTION_TABLE =
 {
-    { Model_Account::TYPE_ID_CASH,        wxString(wxTRANSLATE("Cash Accounts")) },
-    { Model_Account::TYPE_ID_CHECKING,    wxString(wxTRANSLATE("Bank Accounts")) },
-    { Model_Account::TYPE_ID_CREDIT_CARD, wxString(wxTRANSLATE("Credit Card Accounts")) },
-    { Model_Account::TYPE_ID_LOAN,        wxString(wxTRANSLATE("Loan Accounts")) },
-    { Model_Account::TYPE_ID_TERM,        wxString(wxTRANSLATE("Term Accounts")) },
-    { Model_Account::TYPE_ID_INVESTMENT,  wxString(wxTRANSLATE("Stock Portfolios")) },
-    { Model_Account::TYPE_ID_ASSET,       wxString(wxTRANSLATE("Assets")) },
-    { Model_Account::TYPE_ID_SHARES,      wxString(wxTRANSLATE("Share Accounts")) },
+    { Model_Account::TYPE_ID_CASH,        _n("Cash Accounts") },
+    { Model_Account::TYPE_ID_CHECKING,    _n("Bank Accounts") },
+    { Model_Account::TYPE_ID_CREDIT_CARD, _n("Credit Card Accounts") },
+    { Model_Account::TYPE_ID_LOAN,        _n("Loan Accounts") },
+    { Model_Account::TYPE_ID_TERM,        _n("Term Accounts") },
+    { Model_Account::TYPE_ID_INVESTMENT,  _n("Stock Portfolios") },
+    { Model_Account::TYPE_ID_ASSET,       _n("Assets") },
+    { Model_Account::TYPE_ID_SHARES,      _n("Share Accounts") },
 };
 wxArrayString mmGUIFrame::ACCOUNT_SECTION = account_section_all();
 
@@ -254,7 +256,7 @@
     bool from_scratch = false;
     wxFileName dbpath = m_app->GetOptParam();
     if (!dbpath.IsOk()) {
-        from_scratch = Model_Setting::instance().GetBoolSetting("SHOWBEGINAPP", true);
+        from_scratch = Model_Setting::instance().getBool("SHOWBEGINAPP", true);
         if (from_scratch)
             dbpath = wxGetEmptyString();
         else
@@ -262,7 +264,7 @@
     }
 
     //Read news, if checking enabled
-    if (Option::instance().CheckNewsOnStartup())
+    if (Option::instance().getCheckNews())
         getNewsRSS(websiteNewsArray_);
 
     /* Create the Controls for the frame */
@@ -270,7 +272,7 @@
     LoadTheme();
     createMenu();    
     createControls();
-    CreateToolBar();
+    createToolBar();
 
 #if wxUSE_STATUSBAR
     CreateStatusBar();
@@ -278,36 +280,43 @@
     m_recentFiles = new mmFileHistory(); // TODO Max files
     m_recentFiles->SetMenuPathStyle(wxFH_PATH_SHOW_ALWAYS);
     m_recentFiles->UseMenu(m_menuRecentFiles);
-    m_recentFiles->Load();
+    m_recentFiles->LoadHistory();
 
     // Load perspective
-    const wxString auiPerspective = Model_Setting::instance()
-        .GetStringSetting("AUIPERSPECTIVE", wxEmptyString);
+    const wxString auiPerspective = Model_Setting::instance().getString("AUIPERSPECTIVE", wxEmptyString);
     m_mgr.LoadPerspective(auiPerspective);
 
     // add the toolbars to the manager
     m_mgr.AddPane(toolBar_, wxAuiPaneInfo()
         .Name("toolbar").ToolbarPane().Top()
         .LeftDockable(false).RightDockable(false)
-        .Show(Model_Setting::instance().GetBoolSetting("SHOWTOOLBAR", true))
-    );
+        .Show(Model_Setting::instance().getBool("SHOWTOOLBAR", true))
+        .DockFixed(false)                                               
+        .Top()
+        .MinSize(wxSize(-1, toolBar_->GetSize().GetHeight())) 
+        .MaxSize(wxSize(-1, toolBar_->GetSize().GetHeight())) 
+        .Position(0)
+        .Row(0)
+        .Layer(0)
+        .Resizable(true)
+        );                          
 
     // change look and feel of wxAuiManager
     m_mgr.GetArtProvider()->SetMetric(16, 0);
     m_mgr.GetArtProvider()->SetMetric(3, 1);
 
     // "commit" all changes made to wxAuiManager
-    m_mgr.GetPane("Navigation").Caption(_("Navigator"));
-    m_mgr.GetPane("toolbar").Caption(_("Toolbar"));
+    m_mgr.GetPane("Navigation").Caption(_t("Navigator"));
+    m_mgr.GetPane("toolbar").Caption(_t("Toolbar"));
     m_mgr.Update();
 
     // Show license agreement at first open
-    if (Model_Setting::instance().GetStringSetting(INIDB_SEND_USAGE_STATS, "") == "") {
+    if (Model_Setting::instance().getString(INIDB_SEND_USAGE_STATS, "") == "") {
         mmAboutDialog(this, 4).ShowModal();
     }
 
     //Check for new version at startup
-    if (Model_Setting::instance().GetBoolSetting("UPDATECHECK", true))
+    if (Model_Setting::instance().getBool("UPDATECHECK", true))
         mmUpdate::checkUpdates(this, true);
 
     //Show appstart
@@ -331,6 +340,7 @@
     const wxAcceleratorEntry entries[] = {
         wxAcceleratorEntry(wxACCEL_NORMAL, WXK_F9, wxID_NEW),
         wxAcceleratorEntry(wxACCEL_NORMAL, WXK_F5, wxID_REFRESH),
+        wxAcceleratorEntry(wxACCEL_NORMAL, WXK_F6, MENU_VIEW_LINKS),
     };
 
     wxAcceleratorTable tab(sizeof(entries) / sizeof(*entries), entries);
@@ -342,7 +352,7 @@
 
         // Refresh stock quotes
         if (!Model_Stock::instance().all().empty() &&
-            Model_Setting::instance().GetBoolSetting("REFRESH_STOCK_QUOTES_ON_OPEN", false)
+            Model_Setting::instance().getBool("REFRESH_STOCK_QUOTES_ON_OPEN", false)
         ) {
             wxCommandEvent evt(wxEVT_COMMAND_MENU_SELECTED, MENU_RATES);
             this->GetEventHandler()->AddPendingEvent(evt);
@@ -385,13 +395,13 @@
     CloseTheme();
 
     // Backup the database according to user requirements
-    if (Option::instance().DatabaseUpdated() &&
-        Model_Setting::instance().GetBoolSetting("BACKUPDB_UPDATE", false)
+    if (Option::instance().getDatabaseUpdated() &&
+        Model_Setting::instance().getBool("BACKUPDB_UPDATE", false)
     ) {
         dbUpgrade::BackupDB(
             m_filename,
             dbUpgrade::BACKUPTYPE::CLOSE,
-            Model_Setting::instance().GetIntSetting("MAX_BACKUP_FILES", 4)
+            Model_Setting::instance().getInt("MAX_BACKUP_FILES", 4)
         );
     }
 }
@@ -403,7 +413,7 @@
 
     if (!Model_Infotable::instance().cache_.empty()) { //Cache empty on InfoTable means instance never initialized
         if (!db_lockInPlace)
-            Model_Infotable::instance().Set("ISUSED", false);
+            Model_Infotable::instance().setBool("ISUSED", false);
     }
     m_db->SetCommitHook(nullptr);
     m_db->Close();
@@ -499,7 +509,7 @@
 
 void mmGUIFrame::setNavTreeAccount(const wxString& accountName)
 {
-    if (setNavTreeSectionChild(_("Favorites"), accountName))
+    if (setNavTreeSectionChild(_t("Favorites"), accountName))
         return;
     static const std::vector<Model_Account::TYPE_ID> account_types = {
         Model_Account::TYPE_ID_CHECKING,
@@ -540,7 +550,7 @@
             if (bills.allowExecution() && bills.AllowTransaction(q1)) {
                 continueExecution = true;
                 mmBDDialog repeatTransactionsDlg(this, q1.BDID, false, true);
-                repeatTransactionsDlg.SetDialogHeader(_("Auto Repeat Transactions"));
+                repeatTransactionsDlg.SetDialogHeader(_t("Auto Repeat Transactions"));
                 if (repeatTransactionsDlg.ShowModal() == wxID_OK) {
                     refreshPanelData();
                 }
@@ -581,7 +591,7 @@
                     checking_splits.push_back(split);
                     wxArrayInt64 tags;
                     for (const auto& tag : Model_Taglink::instance().find(
-                        Model_Taglink::REFTYPE(Model_Attachment::REFTYPE_STR_BILLSDEPOSITSPLIT),
+                        Model_Taglink::REFTYPE(Model_Budgetsplittransaction::refTypeName),
                         Model_Taglink::REFID(item.SPLITTRANSID)
                     ))
                         tags.push_back(tag.TAGID);
@@ -590,7 +600,7 @@
                 Model_Splittransaction::instance().save(checking_splits);
 
                 // Save split tags
-                const wxString& splitRefType = Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT;
+                const wxString& splitRefType = Model_Splittransaction::refTypeName;
 
                 for (size_t i = 0; i < checking_splits.size(); i++) {
                     Model_Taglink::Data_Set splitTaglinks;
@@ -620,9 +630,9 @@
                 
                 // Save base transaction tags
                 Model_Taglink::Data_Set taglinks;
-                const wxString& txnRefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+                const wxString& txnRefType = Model_Checking::refTypeName;
                 for (const auto& tag : Model_Taglink::instance().find(
-                    Model_Taglink::REFTYPE(Model_Attachment::REFTYPE_STR_BILLSDEPOSIT),
+                    Model_Taglink::REFTYPE(Model_Billsdeposits::refTypeName),
                     Model_Taglink::REFID(q1.BDID)
                 )) {
                     Model_Taglink::Data* t = Model_Taglink::instance().create();
@@ -650,24 +660,24 @@
     Model_Setting::instance().Savepoint();
     if (!m_filename.IsEmpty()) {
         wxFileName fname(m_filename);
-        Model_Setting::instance().Set("LASTFILENAME", fname.GetFullPath());
+        Model_Setting::instance().setString("LASTFILENAME", fname.GetFullPath());
     }
     /* Aui Settings */
-    Model_Setting::instance().Set("AUIPERSPECTIVE", m_mgr.SavePerspective());
+    Model_Setting::instance().setString("AUIPERSPECTIVE", m_mgr.SavePerspective());
 
     // prevent values being saved while window is in an iconised state.
     if (this->IsIconized()) this->Restore();
 
     int value_x = 0, value_y = 0;
     this->GetPosition(&value_x, &value_y);
-    Model_Setting::instance().Set("ORIGINX", value_x);
-    Model_Setting::instance().Set("ORIGINY", value_y);
+    Model_Setting::instance().setInt("ORIGINX", value_x);
+    Model_Setting::instance().setInt("ORIGINY", value_y);
 
     int value_w = 0, value_h = 0;
     this->GetSize(&value_w, &value_h);
-    Model_Setting::instance().Set("SIZEW", value_w);
-    Model_Setting::instance().Set("SIZEH", value_h);
-    Model_Setting::instance().Set("ISMAXIMIZED", this->IsMaximized());
+    Model_Setting::instance().setInt("SIZEW", value_w);
+    Model_Setting::instance().setInt("SIZEH", value_h);
+    Model_Setting::instance().setBool("ISMAXIMIZED", this->IsMaximized());
     Model_Setting::instance().ReleaseSavepoint();
 }
 //----------------------------------------------------------------------------
@@ -818,12 +828,12 @@
         mmTreeItemData::HOME_PAGE
     );
 
-    wxTreeItemId alltransactions = addNavTreeSection(
+    addNavTreeSection(
         root, "All Transactions", img::ALLTRANSACTIONS_PNG,
         mmTreeItemData::CHECKING, -1
     );
 
-    wxTreeItemId bills = addNavTreeSection(
+    addNavTreeSection(
         root, "Scheduled Transactions", img::SCHEDULE_PNG,
         mmTreeItemData::BILLS
     );
@@ -895,18 +905,18 @@
         mmTreeItemData::CHECKING, -2
     );
 
-    wxTreeItemId help = addNavTreeSection(
+    addNavTreeSection(
         root, "Help", img::HELP_PNG,
         mmTreeItemData::HELP_PAGE_MAIN
     );
 
     ///////////////////////////////////////////////////////////////////
 
-    bool hideShareAccounts = Option::instance().HideShareAccounts();
+    bool hideShareAccounts = Option::instance().getHideShareAccounts();
 
     if (m_db) {
         /* Start Populating the dynamic data */
-        m_temp_view = Model_Setting::instance().GetViewAccounts();
+        m_temp_view = Model_Setting::instance().getViewAccounts();
         wxASSERT(
             m_temp_view == VIEW_ACCOUNTS_ALL_STR ||
             m_temp_view == VIEW_ACCOUNTS_FAVORITES_STR ||
@@ -975,27 +985,29 @@
                 );
                 m_nav_tree_ctrl->SetItemData(
                     accountItem,
-                    new mmTreeItemData(mmTreeItemData::STOCK, account.ACCOUNTID)
+                    new mmTreeItemData(mmTreeItemData::INVESTMENT, account.ACCOUNTID)
                 );
+
+                // Cash Ledger
+                wxTreeItemId stockItem = m_nav_tree_ctrl->AppendItem(accountItem, _n("Cash Ledger"), accountImg, accountImg);
+                m_nav_tree_ctrl->SetItemData(stockItem, new mmTreeItemData(mmTreeItemData::CHECKING, account.ACCOUNTID));
+
                 // find all the accounts associated with this stock portfolio
-                Model_Stock::Data_Set stocks = Model_Stock::instance().find(
-                    Model_Stock::HELDAT(account.ACCOUNTID)
-                );
+                // just to keep compatibility for legacy Shares account data
+                Model_Stock::Data_Set stocks = Model_Stock::instance().find(Model_Stock::HELDAT(account.ACCOUNTID));
                 std::sort(stocks.begin(), stocks.end(), SorterBySTOCKNAME());
+
                 // Put the names of the Stock_entry names as children of the stock account.
-                for (const auto& stock : stocks) {
-                    if (!Model_Translink::HasShares(stock.STOCKID))
+                std::unordered_set<wxString> processedStockNames;
+                for (const auto& stock : stocks)
+                {
+                    if (!processedStockNames.insert(stock.STOCKNAME).second)
                         continue;
-                    wxTreeItemId stockItem = m_nav_tree_ctrl->AppendItem(
-                        accountItem, stock.STOCKNAME, accountImg, accountImg
-                    );
-                    int64 account_id = stock.STOCKID;
-                    if (Model_Translink::ShareAccountId(account_id)) {
-                        m_nav_tree_ctrl->SetItemData(
-                            stockItem,
-                            new mmTreeItemData(mmTreeItemData::CHECKING, account_id)
-                        );
-                    }
+                    Model_Account::Data* share_account = Model_Account::instance().get(stock.STOCKNAME);
+                    if (!share_account)
+                        continue;
+                    stockItem = m_nav_tree_ctrl->AppendItem(accountItem, stock.STOCKNAME, accountImg, accountImg);
+                    m_nav_tree_ctrl->SetItemData(stockItem, new mmTreeItemData(mmTreeItemData::CHECKING, share_account->ACCOUNTID));
                 }
                 break;
             }
@@ -1024,7 +1036,7 @@
             Model_Checking::instance().find(
                 Model_Checking::DELETEDTIME(wxEmptyString, NOT_EQUAL)
             ).empty() ||
-            Option::instance().HideDeletedTransactions()
+            Option::instance().getHideDeletedTransactions()
         ) {
             m_nav_tree_ctrl->Delete(trash);
             if (panelCurrent_ && panelCurrent_->GetId() == mmID_CHECKING) {
@@ -1057,7 +1069,7 @@
     wxTreeItemId root = m_nav_tree_ctrl->GetRootItem();
     //m_nav_tree_ctrl->Expand(root);
 
-    const wxString& str = Model_Infotable::instance().GetStringInfo("NAV_TREE_STATUS", "");
+    const wxString& str = Model_Infotable::instance().getString("NAV_TREE_STATUS", "");
     Document json_doc;
     if (json_doc.Parse(str.utf8_str()).HasParseError()) {
         json_doc.Parse("{}");
@@ -1200,7 +1212,7 @@
     const wxString nav_tree_status = wxString::FromUTF8(json_buffer.GetString());
     wxLogDebug("=========== navTreeStateToJson =============================");
     wxLogDebug(nav_tree_status);
-    Model_Infotable::instance().Set("NAV_TREE_STATUS", nav_tree_status);
+    Model_Infotable::instance().setString("NAV_TREE_STATUS", nav_tree_status);
 }
 //----------------------------------------------------------------------------
 
@@ -1268,7 +1280,7 @@
         return createCheckingPage(id, group_ids);
     }
 
-    case mmTreeItemData::STOCK: {
+    case mmTreeItemData::INVESTMENT: {
         Model_Account::Data* account = Model_Account::instance().get(iData->getId());
         gotoAccountID_ = account->ACCOUNTID;
         return createStocksAccountPage(gotoAccountID_);
@@ -1285,6 +1297,7 @@
         wxSharedPtr<mmFilterTransactionsDialog> dlg(
             new mmFilterTransactionsDialog(this, iData->getString())
         );
+        /// FIXME memory leak
         mmReportTransactions* rs = new mmReportTransactions(dlg);
         return createReportsPage(rs, true);
     }
@@ -1322,7 +1335,7 @@
     if (!selectedItemData_)
         return;
 
-    wxString refType = Model_Attachment::REFTYPE_STR_BANKACCOUNT;
+    wxString refType = Model_Account::refTypeName;
     int64 refId = selectedItemData_->getId();
     mmAttachmentDialog dlg(this, refType, refId);
     dlg.ShowModal();
@@ -1368,15 +1381,15 @@
     wxString selected = j_label.IsString() ? wxString::FromUTF8(j_label.GetString()) : "";
 
     if (wxMessageBox(
-        _("The selected item will be deleted") + "\n\n" +
-        _("Do you wish to continue?")
-        , _("Settings item deletion"), wxYES_NO | wxICON_WARNING) == wxNO
-    )
+        _t("The selected item will be deleted.") + "\n\n" + _t("Do you want to continue?"),
+        _t("Settings item deletion"),
+        wxYES_NO | wxICON_WARNING
+    ) == wxNO)
         return;
 
-    int sel_json = Model_Infotable::instance().FindLabelInJSON("TRANSACTIONS_FILTER", selected);
-    if (sel_json != wxNOT_FOUND) {
-        Model_Infotable::instance().Erase("TRANSACTIONS_FILTER", sel_json);
+    int i = Model_Infotable::instance().findArrayItem("TRANSACTIONS_FILTER", selected);
+    if (i != wxNOT_FOUND) {
+        Model_Infotable::instance().eraseArrayItem("TRANSACTIONS_FILTER", i);
         RefreshNavigationTree();
     }
 }
@@ -1397,22 +1410,22 @@
     wxString new_name;
     bool nameOK = false;
     while (!nameOK) {
-        new_name = wxGetTextFromUser(_("Setting Name"), _("Please Enter"), selected);
+        new_name = wxGetTextFromUser(_t("Setting Name"), _t("Please Enter"), selected);
         if (new_name.empty())
             return;
-        if (wxNOT_FOUND == Model_Infotable::instance().FindLabelInJSON("TRANSACTIONS_FILTER", new_name))
+        if (wxNOT_FOUND == Model_Infotable::instance().findArrayItem("TRANSACTIONS_FILTER", new_name))
             nameOK = true;
         else {
-            wxString msgStr = wxString() << _("A setting with this name already exists") << "\n"
+            wxString msgStr = wxString() << _t("A setting with this name already exists") << "\n"
                 << "\n"
-                << _("Please specify a new name for the setting") << "\n";
-            wxMessageBox(msgStr, _("Name in use"), wxICON_ERROR);
+                << _t("Please specify a new name for the setting") << "\n";
+            wxMessageBox(msgStr, _t("Name in use"), wxICON_ERROR);
         }
     }
 
-    int sel_json = Model_Infotable::instance().FindLabelInJSON("TRANSACTIONS_FILTER", selected);
-    if (sel_json != wxNOT_FOUND) {
-        Model_Infotable::instance().Erase("TRANSACTIONS_FILTER", sel_json);
+    int i = Model_Infotable::instance().findArrayItem("TRANSACTIONS_FILTER", selected);
+    if (i != wxNOT_FOUND) {
+        Model_Infotable::instance().eraseArrayItem("TRANSACTIONS_FILTER", i);
 
         // Change the name
         Value::MemberIterator v_name = j_doc.FindMember("LABEL");
@@ -1424,10 +1437,10 @@
         writer.SetFormatOptions(kFormatSingleLineArray);
         j_doc.Accept(writer);
         data = wxString::FromUTF8(buffer.GetString());
-        Model_Infotable::instance().Prepend("TRANSACTIONS_FILTER", data, -1);
+        Model_Infotable::instance().prependArrayItem("TRANSACTIONS_FILTER", data, -1);
 
         DoRecreateNavTreeControl();
-        setNavTreeSection(_("Transaction Report"));
+        setNavTreeSection(_t("Transaction Report"));
     }
 }
 //--------------------------------------------------------------------------
@@ -1441,13 +1454,13 @@
 
     wxString data = selectedItemData_->getString();
 
-    const auto filter_settings = Model_Infotable::instance().GetArrayStringSetting("TRANSACTIONS_FILTER");
+    const auto filter_settings = Model_Infotable::instance().getArrayString("TRANSACTIONS_FILTER");
 
     wxSharedPtr<mmFilterTransactionsDialog> dlg(new mmFilterTransactionsDialog(this, -1, true, data));
     bool is_ok = (dlg->ShowModal() == wxID_OK);
-    if (filter_settings != Model_Infotable::instance().GetArrayStringSetting("TRANSACTIONS_FILTER")) {
+    if (filter_settings != Model_Infotable::instance().getArrayString("TRANSACTIONS_FILTER")) {
         DoRecreateNavTreeControl();
-        setNavTreeSection(_("Transaction Report"));
+        setNavTreeSection(_t("Transaction Report"));
     }
 
     if (is_ok) {
@@ -1467,20 +1480,20 @@
     if (!account)
         return;
 
-    wxString warning_msg = _("Do you really want to delete the account?");
-    if (account->ACCOUNTTYPE == Model_Account::TYPE_STR_INVESTMENT ||
-        account->ACCOUNTTYPE == Model_Account::TYPE_STR_SHARES
+    wxString warning_msg = _t("Do you want to delete the account?");
+    if (account->ACCOUNTTYPE == Model_Account::TYPE_NAME_INVESTMENT ||
+        account->ACCOUNTTYPE == Model_Account::TYPE_NAME_SHARES
     ) {
-        warning_msg += "\n\n" + _("This will also delete any associated Shares.");
+        warning_msg += "\n\n" + _t("This will also delete any associated Shares.");
     }
     wxMessageDialog msgDlg(
-        this, warning_msg, _("Confirm Account Deletion"),
+        this, warning_msg, _t("Confirm Account Deletion"),
         wxYES_NO | wxNO_DEFAULT | wxICON_ERROR
     );
     if (msgDlg.ShowModal() == wxID_YES) {
         Model_Account::instance().remove(account->ACCOUNTID);
         mmAttachmentManage::DeleteAllAttachments(
-            Model_Attachment::REFTYPE_STR_BANKACCOUNT, account->ACCOUNTID
+            Model_Account::refTypeName, account->ACCOUNTID
         );
         DoRecreateNavTreeControl(true);
     }
@@ -1495,8 +1508,8 @@
         showTreePopupMenu(selectedItem, ScreenToClient(wxGetMousePosition()));
     else
         wxMessageBox(
-            _("MMEX has been opened without an active database."),
-            _("MMEX: Menu Popup Error"),
+            _t("MMEX has been opened without an active database."),
+            _t("MMEX: Menu Popup Error"),
             wxOK | wxICON_EXCLAMATION
         );
 }
@@ -1514,20 +1527,20 @@
 void mmGUIFrame::AppendImportMenu(wxMenu& menu)
 {
     wxMenu* importFrom(new wxMenu);
-    menu.AppendSubMenu(importFrom, _("&Import from"));
-    importFrom->Append(MENU_TREEPOPUP_ACCOUNT_IMPORTUNIVCSV, _u("&CSV Files…"));
-    importFrom->Append(MENU_TREEPOPUP_ACCOUNT_IMPORTXML, _u("&XML Files…"), _("Import from XML file (Excel format)"));
+    menu.AppendSubMenu(importFrom, _t("&Import from"));
+    importFrom->Append(MENU_TREEPOPUP_ACCOUNT_IMPORTUNIVCSV, _tu("&CSV Files…"));
+    importFrom->Append(MENU_TREEPOPUP_ACCOUNT_IMPORTXML, _tu("&XML Files…"), _t("Import from XML file (Excel format)"));
     importFrom->AppendSeparator();
-    importFrom->Append(MENU_TREEPOPUP_ACCOUNT_IMPORTQIF, _u("&QIF Files…"));
+    importFrom->Append(MENU_TREEPOPUP_ACCOUNT_IMPORTQIF, _tu("&QIF Files…"));
 
     wxMenu* exportTo(new wxMenu);
-    menu.AppendSubMenu(exportTo, _("&Export as"));
-    exportTo->Append(MENU_TREEPOPUP_ACCOUNT_EXPORT2CSV, _u("&CSV File…"));
-    exportTo->Append(MENU_TREEPOPUP_ACCOUNT_EXPORT2XML, _u("&XML File…"));
+    menu.AppendSubMenu(exportTo, _t("&Export as"));
+    exportTo->Append(MENU_TREEPOPUP_ACCOUNT_EXPORT2CSV, _tu("&CSV File…"));
+    exportTo->Append(MENU_TREEPOPUP_ACCOUNT_EXPORT2XML, _tu("&XML File…"));
     exportTo->AppendSeparator();
-    exportTo->Append(MENU_TREEPOPUP_ACCOUNT_EXPORT2MMEX, _u("&MMEX CSV File…"));
-    exportTo->Append(MENU_TREEPOPUP_ACCOUNT_EXPORT2JSON, _u("&JSON File…"));
-    exportTo->Append(MENU_TREEPOPUP_ACCOUNT_EXPORT2QIF, _u("&QIF File…"));
+    exportTo->Append(MENU_TREEPOPUP_ACCOUNT_EXPORT2MMEX, _tu("&MMEX CSV File…"));
+    exportTo->Append(MENU_TREEPOPUP_ACCOUNT_EXPORT2JSON, _tu("&JSON File…"));
+    exportTo->Append(MENU_TREEPOPUP_ACCOUNT_EXPORT2QIF, _tu("&QIF File…"));
 }
 
 void mmGUIFrame::showTreePopupMenu(const wxTreeItemId& id, const wxPoint& pt)
@@ -1550,9 +1563,9 @@
     case mmTreeItemData::FILTER_REPORT: {
         const wxString data = iData->getString();
         wxLogDebug("MENU FILTER: %s", data);
-        menu.Append(MENU_TREEPOPUP_FILTER_EDIT, _u("&Customize Report…"));
-        menu.Append(MENU_TREEPOPUP_FILTER_RENAME, _u("&Rename Report…"));
-        menu.Append(MENU_TREEPOPUP_FILTER_DELETE, _u("&Delete Report…"));
+        menu.Append(MENU_TREEPOPUP_FILTER_EDIT, _tu("&Customize Report…"));
+        menu.Append(MENU_TREEPOPUP_FILTER_RENAME, _tu("&Rename Report…"));
+        menu.Append(MENU_TREEPOPUP_FILTER_DELETE, _tu("&Delete Report…"));
         PopupMenu(&menu, pt);
         break;
     }
@@ -1561,21 +1574,21 @@
         return OnGeneralReportManager(e);
     case mmTreeItemData::HELP_REPORT:
         return mmDoHideReportsDialog();
-    case mmTreeItemData::STOCK: {
+    case mmTreeItemData::INVESTMENT: {
         int64 acct_id = iData->getId();
         Model_Account::Data* account = Model_Account::instance().get(acct_id);
         if (account) {
             menu.Append(
                 MENU_TREEPOPUP_EDIT,
-                _u("&Edit Account…")
+                _tu("&Edit Account…")
             );
             menu.Append(
                 MENU_TREEPOPUP_DELETE,
-                _u("&Delete Account…")
+                _tu("&Delete Account…")
             );
             menu.AppendSeparator();
-            menu.Append(MENU_TREEPOPUP_LAUNCHWEBSITE, _("&Launch Account Website"));
-            menu.Append(MENU_TREEPOPUP_ACCOUNTATTACHMENTS, _u("&Attachment Manager…"));
+            menu.Append(MENU_TREEPOPUP_LAUNCHWEBSITE, _t("&Launch Account Website"));
+            menu.Append(MENU_TREEPOPUP_ACCOUNTATTACHMENTS, _tu("&Attachment Manager…"));
             menu.Enable(MENU_TREEPOPUP_LAUNCHWEBSITE, !account->WEBSITE.IsEmpty());
             PopupMenu(&menu, pt);
         }
@@ -1589,25 +1602,25 @@
                 break;
             menu.Append(
                 MENU_TREEPOPUP_EDIT,
-                _u("&Edit Account…")
+                _tu("&Edit Account…")
             );
             menu.Append(
                 MENU_TREEPOPUP_REALLOCATE,
-                _u("&Change Account Type…")
+                _tu("&Change Account Type…")
             );
             menu.AppendSeparator();
             menu.Append(
                 MENU_TREEPOPUP_DELETE,
-                _u("&Delete Account…")
+                _tu("&Delete Account…")
             );
             menu.AppendSeparator();
-            menu.Append(MENU_TREEPOPUP_LAUNCHWEBSITE, _("&Launch Account Website"));
+            menu.Append(MENU_TREEPOPUP_LAUNCHWEBSITE, _t("&Launch Account Website"));
             menu.Append(
                 MENU_TREEPOPUP_ACCOUNTATTACHMENTS,
-                _u("&Attachment Manager…")
+                _tu("&Attachment Manager…")
             );
             menu.Enable(MENU_TREEPOPUP_LAUNCHWEBSITE, !account->WEBSITE.IsEmpty());
-            menu.Enable(MENU_TREEPOPUP_REALLOCATE, account->ACCOUNTTYPE != Model_Account::TYPE_STR_SHARES);
+            menu.Enable(MENU_TREEPOPUP_REALLOCATE, account->ACCOUNTTYPE != Model_Account::TYPE_NAME_SHARES && account->ACCOUNTTYPE != Model_Account::TYPE_NAME_INVESTMENT && account->ACCOUNTTYPE != Model_Account::TYPE_NAME_ASSET);
             menu.AppendSeparator();
             AppendImportMenu(menu);
             PopupMenu(&menu, pt);
@@ -1615,17 +1628,17 @@
         else if (acct_id == -1 || acct_id <= -3) { // isAllTrans, isGroup
             menu.Append(
                 MENU_TREEPOPUP_ACCOUNT_NEW,
-                _u("&New Account…")
+                _tu("&New Account…")
             );
             menu.Append(
                 MENU_TREEPOPUP_ACCOUNT_EDIT,
-                _u("&Edit Account…")
+                _tu("&Edit Account…")
             );
-            menu.Append(MENU_TREEPOPUP_ACCOUNT_LIST, _("Account &List"));
+            menu.Append(MENU_TREEPOPUP_ACCOUNT_LIST, _t("Account &List"));
             menu.AppendSeparator();
             menu.Append(
                 MENU_TREEPOPUP_ACCOUNT_DELETE,
-                _u("&Delete Account…")
+                _tu("&Delete Account…")
             );
             menu.AppendSeparator();
 
@@ -1635,21 +1648,21 @@
             wxMenu* viewAccounts(new wxMenu);
             viewAccounts->AppendRadioItem(
                 MENU_TREEPOPUP_ACCOUNT_VIEWALL,
-                _("&All")
+                _t("&All")
             )->Check(m_temp_view == VIEW_ACCOUNTS_ALL_STR);
             viewAccounts->AppendRadioItem(
                 MENU_TREEPOPUP_ACCOUNT_VIEWFAVORITE,
-                _("&Favorites")
+                _t("&Favorites")
             )->Check(m_temp_view == VIEW_ACCOUNTS_FAVORITES_STR);
             viewAccounts->AppendRadioItem(
                 MENU_TREEPOPUP_ACCOUNT_VIEWOPEN,
-                _("&Open")
+                _t("&Open")
             )->Check(m_temp_view == VIEW_ACCOUNTS_OPEN_STR);
             viewAccounts->AppendRadioItem(
                 MENU_TREEPOPUP_ACCOUNT_VIEWCLOSED,
-                _("&Closed")
+                _t("&Closed")
             )->Check(m_temp_view == VIEW_ACCOUNTS_CLOSED_STR);
-            menu.AppendSubMenu(viewAccounts, _("Accounts &Visible"));
+            menu.AppendSubMenu(viewAccounts, _t("Accounts &Visible"));
 
             PopupMenu(&menu, pt);
         }
@@ -1663,7 +1676,7 @@
 {
     int evt_id = e.GetId();
     //Get current settings for view accounts
-    const wxString vAccts = Model_Setting::instance().GetViewAccounts();
+    const wxString vAccts = Model_Setting::instance().getViewAccounts();
     if (m_temp_view.empty())
         m_temp_view = vAccts;
 
@@ -1682,11 +1695,11 @@
         m_temp_view = VIEW_ACCOUNTS_CLOSED_STR;
         break;
     }
-    Model_Setting::instance().SetViewAccounts(m_temp_view);
+    Model_Setting::instance().setViewAccounts(m_temp_view);
     RefreshNavigationTree();
 
     //Restore settings
-    Model_Setting::instance().SetViewAccounts(vAccts);
+    Model_Setting::instance().setViewAccounts(vAccts);
 }
 
 //----------------------------------------------------------------------------
@@ -1695,50 +1708,50 @@
 {
     wxMenu* menu_file = new wxMenu;
 
-    wxMenuItem* menuItemNew = new wxMenuItem(menu_file, MENU_NEW, _u("&New Database…"), _("New Database"));
-    wxMenuItem* menuItemOpen = new wxMenuItem(menu_file, MENU_OPEN, _u("&Open Database…\tCtrl-O"), _("Open Database"));
-    wxMenuItem* menuItemSaveAs = new wxMenuItem(menu_file, MENU_SAVE_AS, _u("Save Database &As…"), _("Save Database As"));
+    wxMenuItem* menuItemNew = new wxMenuItem(menu_file, MENU_NEW, _tu("&New Database…"), _t("New Database"));
+    wxMenuItem* menuItemOpen = new wxMenuItem(menu_file, MENU_OPEN, _tu("&Open Database…") + "\tCtrl-O", _t("Open Database"));
+    wxMenuItem* menuItemSaveAs = new wxMenuItem(menu_file, MENU_SAVE_AS, _tu("Save Database &As…"), _t("Save Database As"));
     menu_file->Append(menuItemNew);
     menu_file->Append(menuItemOpen);
     menu_file->Append(menuItemSaveAs);
     menu_file->AppendSeparator();
 
     m_menuRecentFiles = new wxMenu;
-    menu_file->Append(MENU_RECENT_FILES, _("&Recent Files"), m_menuRecentFiles);
-    wxMenuItem* menuClearRecentFiles = new wxMenuItem(menu_file, MENU_RECENT_FILES_CLEAR, _("&Clear Recent Files"));
+    menu_file->Append(MENU_RECENT_FILES, _t("&Recent Files"), m_menuRecentFiles);
+    wxMenuItem* menuClearRecentFiles = new wxMenuItem(menu_file, MENU_RECENT_FILES_CLEAR, _t("&Clear Recent Files"));
     menu_file->Append(menuClearRecentFiles);
     menu_file->AppendSeparator();
 
     wxMenu* importMenu = new wxMenu;
-    menu_file->Append(MENU_IMPORT, _("&Import from"), importMenu);
-    importMenu->Append(MENU_IMPORT_UNIVCSV, _u("&CSV File…"), _("Import from CSV file"));
-    importMenu->Append(MENU_IMPORT_XML, _u("&XML File…"), _("Import from XML file (Excel format)"));
+    menu_file->Append(MENU_IMPORT, _t("&Import from"), importMenu);
+    importMenu->Append(MENU_IMPORT_UNIVCSV, _tu("&CSV File…"), _t("Import from CSV file"));
+    importMenu->Append(MENU_IMPORT_XML, _tu("&XML File…"), _t("Import from XML file (Excel format)"));
     importMenu->AppendSeparator();
-    importMenu->Append(MENU_IMPORT_QIF, _u("&QIF File…"), _("Import from QIF file"));
+    importMenu->Append(MENU_IMPORT_QIF, _tu("&QIF File…"), _t("Import from QIF file"));
     importMenu->AppendSeparator();
-    importMenu->Append(MENU_IMPORT_WEBAPP, _u("&WebApp…"), _("Import from the WebApp"));
+    importMenu->Append(MENU_IMPORT_WEBAPP, _tu("&WebApp…"), _t("Import from the WebApp"));
 
     wxMenu* exportMenu = new wxMenu;
-    menu_file->Append(MENU_EXPORT, _("&Export as"), exportMenu);
-    exportMenu->Append(MENU_EXPORT_CSV, _u("&CSV File…"), _("Export as CSV file"));
-    exportMenu->Append(MENU_EXPORT_XML, _u("&XML File…"), _("Export as XML file"));
+    menu_file->Append(MENU_EXPORT, _t("&Export as"), exportMenu);
+    exportMenu->Append(MENU_EXPORT_CSV, _tu("&CSV File…"), _t("Export as CSV file"));
+    exportMenu->Append(MENU_EXPORT_XML, _tu("&XML File…"), _t("Export as XML file"));
     exportMenu->AppendSeparator();
-    exportMenu->Append(MENU_EXPORT_MMEX, _u("&MMEX CSV File…"), _("Export as fixed CSV file"));
-    exportMenu->Append(MENU_EXPORT_JSON, _u("&JSON File…"), _("Export as JSON file"));
-    exportMenu->Append(MENU_EXPORT_QIF, _u("&QIF File…"), _("Export as QIF file"));
+    exportMenu->Append(MENU_EXPORT_MMEX, _tu("&MMEX CSV File…"), _t("Export as fixed CSV file"));
+    exportMenu->Append(MENU_EXPORT_JSON, _tu("&JSON File…"), _t("Export as JSON file"));
+    exportMenu->Append(MENU_EXPORT_QIF, _tu("&QIF File…"), _t("Export as QIF file"));
     exportMenu->AppendSeparator();
-    exportMenu->Append(MENU_EXPORT_HTML, _u("&HTML File…"), _("Export as HTML file"));
+    exportMenu->Append(MENU_EXPORT_HTML, _tu("&HTML File…"), _t("Export as HTML file"));
 
     menu_file->AppendSeparator();
 
     wxMenuItem* menuItemPrint = new wxMenuItem(menu_file, wxID_PRINT,
-        _u("&Print…"), _("Print current view"));
+        _tu("&Print…"), _t("Print current view"));
     menu_file->Append(menuItemPrint);
 
     menu_file->AppendSeparator();
 
     wxMenuItem* menuItemQuit = new wxMenuItem(menu_file, wxID_EXIT,
-        _("E&xit\tCtrl-Q"), _("Quit this program"));
+        _t("E&xit") + "\tCtrl-Q", _t("Quit this program"));
     menu_file->Append(menuItemQuit);
 
     // Create the required menu items
@@ -1746,71 +1759,71 @@
     wxMenuItem* menuItemToolbar = new wxMenuItem(
         menuView,
         MENU_VIEW_TOOLBAR,
-        _("&Toolbar"),
-        _("Show/Hide the toolbar"),
+        _t("&Toolbar"),
+        _t("Show/Hide the toolbar"),
         wxITEM_CHECK
     );
     wxMenuItem* menuItemLinks = new wxMenuItem(
         menuView,
         MENU_VIEW_LINKS,
-        _("&Navigator\tF5"),
-        _("Show/Hide Navigator"),
+        _t("&Navigator") + "\tF6",
+        _t("Show/Hide Navigator"),
         wxITEM_CHECK
     );
     wxMenuItem* menuItemHideShareAccounts = new wxMenuItem(
         menuView,
         MENU_VIEW_HIDE_SHARE_ACCOUNTS,
-        _("&Display Share Accounts"),
-        _("Show/Hide Share Accounts in Navigator"),
+        _t("&Display Share Accounts"),
+        _t("Show/Hide Share Accounts in Navigator"),
         wxITEM_CHECK
     );
     wxMenuItem* menuItemHideDeletedTransactions = new wxMenuItem(
         menuView,
         MENU_VIEW_HIDE_DELETED_TRANSACTIONS,
-        _("&Display Deleted Transactions"),
-        _("Show/Hide Deleted Transactions in Navigator"),
+        _t("&Display Deleted Transactions"),
+        _t("Show/Hide Deleted Transactions in Navigator"),
         wxITEM_CHECK
     );
     wxMenuItem* menuItemBudgetFinancialYears = new wxMenuItem(
         menuView,
         MENU_VIEW_BUDGET_FINANCIAL_YEARS,
-        _("Budgets: As Financial &Years"),
-        _("Display Budgets in Financial Year Format"),
+        _t("Budgets: As Financial &Years"),
+        _t("Display Budgets in Financial Year Format"),
         wxITEM_CHECK
     );
     wxMenuItem* menuItemBudgetTransferTotal = new wxMenuItem(
         menuView,
         MENU_VIEW_BUDGET_TRANSFER_TOTAL,
-        _("Budgets: &Include Transfers in Totals"),
-        _("Include the transfer transactions in the Budget Totals"),
+        _t("Budgets: &Include Transfers in Totals"),
+        _t("Include the transfer transactions in the Budget Totals"),
         wxITEM_CHECK
     );
     wxMenuItem* menuItemBudgetCategorySummary = new wxMenuItem(
         menuView,
         MENU_VIEW_BUDGET_CATEGORY_SUMMARY,
-        _("Budget Category Report: with &Summaries"),
-        _("Include the category summaries in the Budget Category Summary"),
+        _t("Budget Category Report: with &Summaries"),
+        _t("Include the category summaries in the Budget Category Summary"),
         wxITEM_CHECK
     );
     wxMenuItem* menuItemIgnoreFutureTransactions = new wxMenuItem(
         menuView,
         MENU_VIEW_IGNORE_FUTURE_TRANSACTIONS,
-        _("Ignore F&uture Transactions"),
-        _("Ignore Future transactions"),
+        _t("Ignore F&uture Transactions"),
+        _t("Ignore Future transactions"),
         wxITEM_CHECK
     );
     wxMenuItem* menuItemShowToolTips = new wxMenuItem(
         menuView,
         MENU_VIEW_SHOW_TOOLTIPS,
-        _("Show T&ooltips"),
-        _("Show Tooltips"),
+        _t("Show T&ooltips"),
+        _t("Show Tooltips"),
         wxITEM_CHECK
     );
     wxMenuItem* menuItemShowMoneyTips = new wxMenuItem(
         menuView,
         MENU_VIEW_SHOW_MONEYTIPS,
-        _("Show &Money Tips"),
-        _("Show Money Tips"),
+        _t("Show &Money Tips"),
+        _t("Show Money Tips"),
         wxITEM_CHECK
     );
 
@@ -1834,8 +1847,8 @@
     wxMenuItem* menuItemToggleFullscreen = new wxMenuItem(
         menuView,
         MENU_VIEW_TOGGLE_FULLSCREEN,
-        _("&Full Screen\tF11"),
-        _("Toggle full screen"),
+        _t("&Full Screen") + "\tF11",
+        _t("Toggle full screen"),
         wxITEM_CHECK
     );
     menuView->Append(menuItemToggleFullscreen);
@@ -1844,8 +1857,8 @@
     wxMenuItem* menuItemResetView = new wxMenuItem(
         menuView,
         MENU_VIEW_RESET,
-        _("&Reset View"),
-        _("Reset view and dock tools")
+        _t("&Reset View"),
+        _t("Reset view and dock tools")
     );
     menuView->Append(menuItemResetView);   
 
@@ -1853,14 +1866,14 @@
     wxMenuItem* menuItemLanguage = new wxMenuItem(
         menuView,
         MENU_LANG,
-        _("User Interface &Language"),
-        _("Change user interface language")
+        _t("User Interface &Language"),
+        _t("Change user interface language")
     );
     wxMenu* menuLang = new wxMenu;
 
     wxArrayString lang_files = wxTranslations::Get()->GetAvailableTranslations("mmex");
     std::map<wxString, std::pair<int, wxString>> langs;
-    menuLang->AppendRadioItem(MENU_LANG + 1 + wxLANGUAGE_DEFAULT, _("System default"))
+    menuLang->AppendRadioItem(MENU_LANG + 1 + wxLANGUAGE_DEFAULT, _t("System default"))
         ->Check(m_app->getGUILanguage() == wxLANGUAGE_DEFAULT);
     for (auto & file : lang_files) {
         const wxLanguageInfo* info = wxLocale::FindLanguageInfo(file);
@@ -1880,36 +1893,36 @@
     wxMenuItem* menuItemAcctList = new wxMenuItem(
         menuAccounts,
         MENU_HOMEPAGE,
-        _("Dash&board"),
-        _("Open Dashboard")
+        _t("Dash&board"),
+        _t("Open Dashboard")
     );
 
     wxMenuItem* menuItemNewAcct = new wxMenuItem(
         menuAccounts,
         MENU_NEWACCT,
-        _u("&New Account…"),
-        _("New Account")
+        _tu("&New Account…"),
+        _t("New Account")
     );
 
     wxMenuItem* menuItemAcctEdit = new wxMenuItem(
         menuAccounts,
         MENU_ACCTEDIT,
-        _u("&Edit Account…"),
-        _("Edit Account")
+        _tu("&Edit Account…"),
+        _t("Edit Account")
     );
 
     wxMenuItem* menuItemReallocateAcct = new wxMenuItem(
         menuAccounts,
         MENU_ACCOUNT_REALLOCATE,
-        _u("&Change Account Type…"),
-        _("Change the account type of an account")
+        _tu("&Change Account Type…"),
+        _t("Change the account type of an account")
     );
 
     wxMenuItem* menuItemAcctDelete = new wxMenuItem(
         menuAccounts,
         MENU_ACCTDELETE,
-        _u("&Delete Account…"),
-        _("Delete Account from database")
+        _tu("&Delete Account…"),
+        _t("Delete Account from database")
     );
 
     menuAccounts->Append(menuItemAcctList);
@@ -1923,39 +1936,39 @@
     wxMenu* menuTools = new wxMenu;
 
     wxMenuItem* menuItemRates = new wxMenuItem(menuTools
-        , MENU_RATES, _("Download &Rates"), _("Download Currency and Stock Rates"));
+        , MENU_RATES, _t("Download &Rates"), _t("Download Currency and Stock Rates"));
     menuTools->Append(menuItemRates);
 
     menuTools->AppendSeparator();
 
     wxMenuItem* menuItemPayee = new wxMenuItem(menuTools
-        , MENU_ORGPAYEE, _u("&Payee Manager…"), _("Payee Manager"));
+        , MENU_ORGPAYEE, _tu("&Payee Manager…"), _t("Payee Manager"));
     menuTools->Append(menuItemPayee);
 
     wxMenuItem* menuItemCateg = new wxMenuItem(menuTools
-        , MENU_ORGCATEGS, _u("&Category Manager…"), _("Category Manager"));
+        , MENU_ORGCATEGS, _tu("&Category Manager…"), _t("Category Manager"));
     menuTools->Append(menuItemCateg);
 
     wxMenuItem* menuItemTags = new wxMenuItem(menuTools
-        , MENU_ORGTAGS, _u("&Tag Manager…"), _("Tag Manager"));
+        , MENU_ORGTAGS, _tu("&Tag Manager…"), _t("Tag Manager"));
     menuTools->Append(menuItemTags);
 
     wxMenuItem* menuItemCurrency = new wxMenuItem(menuTools, MENU_CURRENCY
-        , _u("Curre&ncy Manager…"), _("Currency Manager"));
+        , _tu("Curre&ncy Manager…"), _t("Currency Manager"));
     menuTools->Append(menuItemCurrency);
 
     wxMenuItem* menuItemCategoryRelocation = new wxMenuItem(menuTools
-        , MENU_CATEGORY_RELOCATION, _u("&Categories…")
-        , _("Merge categories"));
+        , MENU_CATEGORY_RELOCATION, _tu("&Categories…")
+        , _t("Merge categories"));
     wxMenuItem* menuItemPayeeRelocation = new wxMenuItem(menuTools
-        , MENU_PAYEE_RELOCATION, _u("&Payees…")
-        , _("Merge payees"));
+        , MENU_PAYEE_RELOCATION, _tu("&Payees…")
+        , _t("Merge payees"));
     wxMenuItem* menuItemTagRelocation = new wxMenuItem(menuTools
-        , MENU_TAG_RELOCATION, _u("&Tags…")
-        , _("Merge tags"));
+        , MENU_TAG_RELOCATION, _tu("&Tags…")
+        , _t("Merge tags"));
     wxMenuItem* menuItemRelocation = new wxMenuItem(menuTools
-        , MENU_RELOCATION, _("&Merge")
-        , _("Merge categories, payees, and tags"));
+        , MENU_RELOCATION, _t("&Merge")
+        , _t("Merge categories, payees, and tags"));
     wxMenu* menuRelocation = new wxMenu;
     menuRelocation->Append(menuItemPayeeRelocation);
     menuRelocation->Append(menuItemCategoryRelocation);
@@ -1966,122 +1979,122 @@
     menuTools->AppendSeparator();
 
     wxMenuItem* menuItemBudgeting = new wxMenuItem(menuTools, MENU_BUDGETSETUPDIALOG
-        , _u("&Budget Planner…"), _("Budget Planner"));
+        , _tu("&Budget Planner…"), _t("Budget Planner"));
     menuTools->Append(menuItemBudgeting);
 
     wxMenuItem* menuItemBillsDeposits = new wxMenuItem(menuTools, MENU_BILLSDEPOSITS
-        , _("&Scheduled Transactions"), _("Bills and Deposits"));
+        , _t("&Scheduled Transactions"), _t("Bills and Deposits"));
     menuTools->Append(menuItemBillsDeposits);
 
     wxMenuItem* menuItemAssets = new wxMenuItem(menuTools, MENU_ASSETS
-        , _("&Assets"), _("Assets"));
+        , _t("&Assets"), _t("Assets"));
     menuTools->Append(menuItemAssets);
 
     menuTools->AppendSeparator();
 
     wxMenuItem* menuItemThemes = new wxMenuItem(menuTools, MENU_THEME_MANAGER
-        , _u("T&heme Manager…"), _("Theme Manager"));
+        , _tu("T&heme Manager…"), _t("Theme Manager"));
     menuTools->Append(menuItemThemes);
 
     menuTools->AppendSeparator();
 
     wxMenuItem* menuItemTransactions = new wxMenuItem(menuTools, MENU_TRANSACTIONREPORT
-        , _u("Tra&nsaction Report…"), _("Transaction Report"));
+        , _tu("Tra&nsaction Report…"), _t("Transaction Report"));
     menuTools->Append(menuItemTransactions);
 
     menuTools->AppendSeparator();
 
     wxMenuItem* menuItemGRM = new wxMenuItem(menuTools, wxID_VIEW_LIST
-        , _u("&General Report Manager…"), _("General Report Manager"));
+        , _tu("&General Report Manager…"), _t("General Report Manager"));
     menuTools->Append(menuItemGRM);
 
     wxMenuItem* menuItemCF = new wxMenuItem(menuTools, wxID_BROWSE
-        , _u("C&ustom Field Manager…"), _("Custom Field Manager"));
+        , _tu("C&ustom Field Manager…"), _t("Custom Field Manager"));
     menuTools->Append(menuItemCF);
 
     menuTools->AppendSeparator();
 
     wxMenuItem* menuItemWA = new wxMenuItem(menuTools, MENU_REFRESH_WEBAPP
-        , _u("Refresh &WebApp…"), _("Refresh WebApp"));
+        , _tu("Refresh &WebApp…"), _t("Refresh WebApp"));
     menuTools->Append(menuItemWA);
     menuTools->AppendSeparator();
 
     wxMenuItem* menuItemOptions = new wxMenuItem(menuTools, wxID_PREFERENCES
-        , _u("&Settings…\tAlt-F12"), _("Settings"));
+        , _tu("&Settings…") + "\tAlt-F12", _t("Settings"));
     menuTools->Append(menuItemOptions);
 
     menuTools->AppendSeparator();
 
     wxMenu* menuDatabase = new wxMenu;
     wxMenuItem* menuItemConvertDB = new wxMenuItem(menuTools, MENU_CONVERT_ENC_DB
-        , _u("&Decrypt Encrypted Database…")
-        , _("Convert encrypted database to unencrypted database"));
+        , _tu("&Decrypt Encrypted Database…")
+        , _t("Convert encrypted database to unencrypted database"));
     wxMenuItem* menuItemChangeEncryptPassword = new wxMenuItem(menuTools, MENU_CHANGE_ENCRYPT_PASSWORD
-        , _u("Change Encrypted &Password…")
-        , _("Change the password of an encrypted database"));
+        , _tu("Change Encrypted &Password…")
+        , _t("Change the password of an encrypted database"));
     wxMenuItem* menuItemVacuumDB = new wxMenuItem(menuTools, MENU_DB_VACUUM
-        , _u("&Optimize Database…")
-        , _("Optimize database for space and performance"));
+        , _tu("&Optimize Database…")
+        , _t("Optimize database for space and performance"));
     wxMenuItem* menuItemCheckDB = new wxMenuItem(menuTools, MENU_DB_DEBUG
-        , _u("Database Check and De&bug…")
-        , _("Generate database report or fix errors"));
+        , _tu("Database Check and De&bug…")
+        , _t("Generate database report or fix errors"));
     menuDatabase->Append(menuItemConvertDB);
     menuDatabase->Append(menuItemChangeEncryptPassword);
     menuDatabase->Append(menuItemVacuumDB);
     menuDatabase->Append(menuItemCheckDB);
-    menuTools->AppendSubMenu(menuDatabase, _("&Database")
-        , _("Database management"));
+    menuTools->AppendSubMenu(menuDatabase, _t("&Database")
+        , _t("Database management"));
     menuItemChangeEncryptPassword->Enable(false);
 
     // Help Menu
     wxMenu* menuHelp = new wxMenu;
 
     wxMenuItem* menuItemHelp = new wxMenuItem(menuTools, wxID_HELP,
-        _("&Help\tF1"), _("Show Help"));
+        _t("&Help") + "\tF1", _t("Show Help"));
     menuHelp->Append(menuItemHelp);
 
     //Community Submenu
     wxMenuItem* menuItemWebsite = new wxMenuItem(menuHelp, MENU_WEBSITE
-        , _("&Website")
-        , _("Visit MMEX website for the latest news and updates"));
+        , _t("&Website")
+        , _t("Visit MMEX website for the latest news and updates"));
     wxMenuItem* menuItemFacebook = new wxMenuItem(menuHelp, MENU_FACEBOOK
-        , _("Face&book"), _("Visit MMEX Facebook page"));
+        , _t("Face&book"), _t("Visit MMEX Facebook page"));
     wxMenuItem* menuItemCrowdin = new wxMenuItem(menuHelp, MENU_CROWDIN
-        , _("&Crowdin"), _("Help translate MMEX on Crowdin"));
+        , _t("&Crowdin"), _t("Help translate MMEX on Crowdin"));
     wxMenuItem* menuItemTwitter = new wxMenuItem(menuHelp, MENU_TWITTER
-        , _("&X"), _("Follow MMEX on X"));
+        , _t("&X"), _t("Follow MMEX on X"));
     wxMenuItem* menuItemYouTube = new wxMenuItem(menuHelp, MENU_YOUTUBE
-        , _("&YouTube"), _("Watch MMEX videos on YouTube"));
+        , _t("&YouTube"), _t("Watch MMEX videos on YouTube"));
     wxMenuItem* menuItemSlack = new wxMenuItem(menuHelp, MENU_SLACK
-        , _("&Slack"), _("Communicate with the MMEX team online"));
+        , _t("&Slack"), _t("Communicate with the MMEX team online"));
     wxMenuItem* menuItemGitHub = new wxMenuItem(menuHelp, MENU_GITHUB
-        , _("&GitHub"), _("Access open source code repository and track reported bug statuses"));
+        , _t("&GitHub"), _t("Access open source code repository and track reported bug statuses"));
     wxMenuItem* menuItemWiki = new wxMenuItem(menuHelp, MENU_WIKI
-        , _("Wi&ki"), _("Read and update MMEX wiki"));
+        , _t("Wi&ki"), _t("Read and update MMEX wiki"));
     wxMenuItem* menuItemReportIssues = new wxMenuItem(menuHelp, MENU_REPORTISSUES
-        , _("&Forum")
-        , _("Visit MMEX forum to read and post comments and for support"));
+        , _t("&Forum")
+        , _t("Visit MMEX forum to read and post comments and for support"));
     wxMenuItem* menuItemAppleAppStore = new wxMenuItem(menuHelp, MENU_APPLE_APPSTORE
-        , _("MMEX for &iOS")
-        , _("Install MMEX on iPads and iPhones"));
+        , _t("MMEX for &iOS")
+        , _t("Install MMEX on iPads and iPhones"));
     wxMenuItem* menuItemGooglePlay = new wxMenuItem(menuHelp, MENU_GOOGLEPLAY
-        , _("MMEX for &Android")
-        , _("Install MMEX for Android based smartphones and tablets"));
+        , _t("MMEX for &Android")
+        , _t("Install MMEX for Android based smartphones and tablets"));
     wxMenuItem* menuItemNotify = new wxMenuItem(menuHelp, MENU_ANNOUNCEMENTMAILING
-        , _("&Newsletter")
-        , _("Visit the MMEX blog to view announcements"));
+        , _t("&Newsletter")
+        , _t("Visit the MMEX blog to view announcements"));
     wxMenuItem* menuItemRSS = new wxMenuItem(menuHelp, MENU_RSS
-        , _("&RSS Feed"), _("Connect RSS web feed to news aggregator"));
+        , _t("&RSS Feed"), _t("Connect RSS web feed to news aggregator"));
     wxMenuItem* menuItemDonate = new wxMenuItem(menuHelp, MENU_DONATE
-        , _("Make a &Donation")
-        , _("Donate to the MMEX team to support infrastructure and development"));
+        , _t("Make a &Donation")
+        , _t("Donate to the MMEX team to support infrastructure and development"));
     wxMenuItem* menuItemBuyCoffee = new wxMenuItem(menuHelp, MENU_BUY_COFFEE
-        , _("&Buy us a Coffee")
-        , _("Buy a key developer a coffee"));
+        , _t("&Buy us a Coffee")
+        , _t("Buy a key developer a coffee"));
 
     wxMenuItem* menuItemCommunity = new wxMenuItem(menuHelp, MENU_COMMUNITY
-        , _("&Community")
-        , _("Stay in touch with MMEX community"));
+        , _t("&Community")
+        , _t("Stay in touch with MMEX community"));
 
     wxMenu* menuCommunity = new wxMenu;
     menuCommunity->Append(menuItemWebsite);
@@ -2106,47 +2119,47 @@
     menuHelp->Append(menuItemCommunity);
 
     wxMenuItem* menuItemReportBug = new wxMenuItem(menuTools, MENU_REPORT_BUG
-        , _("Report a &Bug")
-        , _("Report an error in application to the developers"));
+        , _t("Report a &Bug")
+        , _t("Report an error in application to the developers"));
     menuHelp->Append(menuItemReportBug);
 
     wxMenuItem* menuItemDiagnostics = new wxMenuItem(menuTools, MENU_DIAGNOSTICS
-        , _("View &Diagnostics")
-        , _("Help provide information to the developers"));
+        , _t("View &Diagnostics")
+        , _t("Help provide information to the developers"));
     menuHelp->Append(menuItemDiagnostics);
 
     wxMenuItem* menuItemAppStart = new wxMenuItem(menuTools, MENU_SHOW_APPSTART
-        , _("&Show App Start Dialog"), _("App Start Dialog"));
+        , _t("&Show App Start Dialog"), _t("App Start Dialog"));
     menuHelp->Append(menuItemAppStart);
 
     wxMenuItem* menuItemCheck = new wxMenuItem(menuTools, MENU_CHECKUPDATE
-        , _("Check for &Updates"), _("Check For Updates"));
+        , _t("Check for &Updates"), _t("Check For Updates"));
     menuHelp->Append(menuItemCheck);
 
     wxMenuItem* menuItemAbout = new wxMenuItem(menuTools, wxID_ABOUT
-        , _("&About"), _("About dialog"));
+        , _t("&About"), _t("About dialog"));
     menuHelp->Append(menuItemAbout);
 
     menuBar_ = new wxMenuBar;
-    menuBar_->Append(menu_file, _("&File"));
-    menuBar_->Append(menuAccounts, _("&Accounts"));
-    menuBar_->Append(menuTools, _("&Tools"));
-    menuBar_->Append(menuView, _("&View"));
-    menuBar_->Append(menuHelp, _("&Help"));
+    menuBar_->Append(menu_file, _t("&File"));
+    menuBar_->Append(menuAccounts, _t("&Accounts"));
+    menuBar_->Append(menuTools, _t("&Tools"));
+    menuBar_->Append(menuView, _t("&View"));
+    menuBar_->Append(menuHelp, _t("&Help"));
     SetMenuBar(menuBar_);
 
-    menuBar_->Check(MENU_VIEW_HIDE_SHARE_ACCOUNTS, !Option::instance().HideShareAccounts());
-    menuBar_->Check(MENU_VIEW_HIDE_DELETED_TRANSACTIONS, !Option::instance().HideDeletedTransactions());
-    menuBar_->Check(MENU_VIEW_BUDGET_FINANCIAL_YEARS, Option::instance().BudgetFinancialYears());
-    menuBar_->Check(MENU_VIEW_BUDGET_TRANSFER_TOTAL, Option::instance().BudgetIncludeTransfers());
-    menuBar_->Check(MENU_VIEW_BUDGET_CATEGORY_SUMMARY, Option::instance().BudgetReportWithSummaries());
+    menuBar_->Check(MENU_VIEW_HIDE_SHARE_ACCOUNTS, !Option::instance().getHideShareAccounts());
+    menuBar_->Check(MENU_VIEW_HIDE_DELETED_TRANSACTIONS, !Option::instance().getHideDeletedTransactions());
+    menuBar_->Check(MENU_VIEW_BUDGET_FINANCIAL_YEARS, Option::instance().getBudgetFinancialYears());
+    menuBar_->Check(MENU_VIEW_BUDGET_TRANSFER_TOTAL, Option::instance().getBudgetIncludeTransfers());
+    menuBar_->Check(MENU_VIEW_BUDGET_CATEGORY_SUMMARY, Option::instance().getBudgetSummaryWithoutCategories());
     menuBar_->Check(MENU_VIEW_IGNORE_FUTURE_TRANSACTIONS, Option::instance().getIgnoreFutureTransactions());
     menuBar_->Check(MENU_VIEW_SHOW_TOOLTIPS, Option::instance().getShowToolTips());
     menuBar_->Check(MENU_VIEW_SHOW_MONEYTIPS, Option::instance().getShowMoneyTips());
 }
 //----------------------------------------------------------------------------
 
-void mmGUIFrame::CreateToolBar()
+void mmGUIFrame::createToolBar()
 {
     const int toolbar_icon_size = Option::instance().getToolbarIconSize();
     const long style = wxAUI_TB_DEFAULT_STYLE | wxAUI_TB_HORIZONTAL | wxAUI_TB_PLAIN_BACKGROUND;
@@ -2156,49 +2169,50 @@
     mmThemeMetaColour(toolBar_, meta::COLOR_LISTPANEL);
     //toolBar_->SetToolBitmapSize(wxSize(toolbar_icon_size, toolbar_icon_size));  // adjust tool size to match the icon size being used
 
-    toolBar_->AddTool(MENU_NEW, _("New"), mmBitmapBundle(png::NEW_DB, toolbar_icon_size), _("New Database"));
-    toolBar_->AddTool(MENU_OPEN, _("Open"), mmBitmapBundle(png::OPEN, toolbar_icon_size), _("Open Database"));
+    toolBar_->AddTool(MENU_NEW, _t("New"), mmBitmapBundle(png::NEW_DB, toolbar_icon_size), _t("New Database"));
+    toolBar_->AddTool(MENU_OPEN, _t("Open"), mmBitmapBundle(png::OPEN, toolbar_icon_size), _t("Open Database"));
     toolBar_->AddSeparator();
-    toolBar_->AddTool(MENU_NEWACCT, _("New Account"), mmBitmapBundle(png::NEW_ACC, toolbar_icon_size), _("New Account"));
-    toolBar_->AddTool(MENU_HOMEPAGE, _("Dashboard"), mmBitmapBundle(png::HOME, toolbar_icon_size), _("Open Dashboard"));
+    toolBar_->AddTool(MENU_NEWACCT, _t("New Account"), mmBitmapBundle(png::NEW_ACC, toolbar_icon_size), _t("New Account"));
+    toolBar_->AddTool(MENU_HOMEPAGE, _t("Dashboard"), mmBitmapBundle(png::HOME, toolbar_icon_size), _t("Open Dashboard"));
     toolBar_->AddSeparator();
-    toolBar_->AddTool(wxID_NEW, _("New"), mmBitmapBundle(png::NEW_TRX, toolbar_icon_size), _("New Transaction"));
+    toolBar_->AddTool(wxID_NEW, _t("New"), mmBitmapBundle(png::NEW_TRX, toolbar_icon_size), _t("New Transaction"));
     toolBar_->AddSeparator();
-    toolBar_->AddTool(MENU_ORGPAYEE, _("Payee Manager"), mmBitmapBundle(png::PAYEE, toolbar_icon_size), _("Payee Manager"));
-    toolBar_->AddTool(MENU_ORGCATEGS, _("Category Manager"), mmBitmapBundle(png::CATEGORY, toolbar_icon_size), _("Category Manager"));
-    toolBar_->AddTool(MENU_ORGTAGS, _("Tag Manager"), mmBitmapBundle(png::TAG, toolbar_icon_size), _("Tag Manager"));
-    toolBar_->AddTool(MENU_CURRENCY, _("Currency Manager"), mmBitmapBundle(png::CURR, toolbar_icon_size), _("Currency Manager"));
+    toolBar_->AddTool(MENU_ORGPAYEE, _t("Payee Manager"), mmBitmapBundle(png::PAYEE, toolbar_icon_size), _t("Payee Manager"));
+    toolBar_->AddTool(MENU_ORGCATEGS, _t("Category Manager"), mmBitmapBundle(png::CATEGORY, toolbar_icon_size), _t("Category Manager"));
+    toolBar_->AddTool(MENU_ORGTAGS, _t("Tag Manager"), mmBitmapBundle(png::TAG, toolbar_icon_size), _t("Tag Manager"));
+    toolBar_->AddTool(MENU_CURRENCY, _t("Currency Manager"), mmBitmapBundle(png::CURR, toolbar_icon_size), _t("Currency Manager"));
     toolBar_->AddSeparator();
-    toolBar_->AddTool(MENU_TRANSACTIONREPORT, _("Transaction Report"), mmBitmapBundle(png::FILTER, toolbar_icon_size), _("Transaction Report"));
+    toolBar_->AddTool(MENU_TRANSACTIONREPORT, _t("Transaction Report"), mmBitmapBundle(png::FILTER, toolbar_icon_size), _t("Transaction Report"));
     toolBar_->AddSeparator();
-    toolBar_->AddTool(wxID_VIEW_LIST, _("General Report Manager"), mmBitmapBundle(png::GRM, toolbar_icon_size), _("General Report Manager"));
+    toolBar_->AddTool(wxID_VIEW_LIST, _t("General Report Manager"), mmBitmapBundle(png::GRM, toolbar_icon_size), _t("General Report Manager"));
+    toolBar_->AddTool(MENU_RATES, _t("Download Rates"), mmBitmapBundle(png::CURRATES, toolbar_icon_size), _t("Download currency and stock rates"));
+
     toolBar_->AddSeparator();
-    toolBar_->AddTool(wxID_PREFERENCES, _("&Settings"), mmBitmapBundle(png::OPTIONS, toolbar_icon_size), _("Settings"));
+    toolBar_->AddTool(wxID_PRINT, _t("&Print"), mmBitmapBundle(png::PRINT, toolbar_icon_size), _t("Print"));
     toolBar_->AddSeparator();
 
-    wxString news_array;
-    for (const auto& entry : websiteNewsArray_) {
-        news_array += entry.Title + "\n";
-    }
-    if (news_array.empty()) {
-        news_array = _("News");
-    }
-    const auto news_ico = (websiteNewsArray_.size() > 0)
-        ? mmBitmapBundle(png::NEW_NEWS, toolbar_icon_size)
-        : mmBitmapBundle(png::NEWS, toolbar_icon_size);
-    toolBar_->AddTool(MENU_ANNOUNCEMENTMAILING, _("News"), news_ico, news_array);
-
-    toolBar_->AddTool(MENU_RATES, _("Download Rates"), mmBitmapBundle(png::CURRATES, toolbar_icon_size), _("Download currency and stock rates"));
+    toolBar_->AddStretchSpacer();
 
     toolBar_->AddSeparator();
-    toolBar_->AddTool(MENU_VIEW_TOGGLE_FULLSCREEN, _("Full Screen\tF11"), mmBitmapBundle(png::FULLSCREEN, toolbar_icon_size), _("Toggle full screen"));
-
+    toolBar_->AddTool(MENU_VIEW_TOGGLE_FULLSCREEN, _t("Full Screen") + "\tF11", mmBitmapBundle(png::FULLSCREEN, toolbar_icon_size), _t("Toggle full screen"));
+    toolBar_->AddTool(wxID_PREFERENCES, _t("&Settings"), mmBitmapBundle(png::OPTIONS, toolbar_icon_size), _t("Settings"));
     toolBar_->AddSeparator();
-    toolBar_->AddTool(wxID_PRINT, _("&Print"), mmBitmapBundle(png::PRINT, toolbar_icon_size), _("Print"));
 
-    toolBar_->AddSeparator();
-    toolBar_->AddTool(wxID_ABOUT, _("&About"), mmBitmapBundle(png::ABOUT, toolbar_icon_size), _("About"));
-    toolBar_->AddTool(wxID_HELP, _("&Help\tF1"), mmBitmapBundle(png::HELP, toolbar_icon_size), _("Help"));
+
+    wxString news_array;
+    for (const auto& entry : websiteNewsArray_)
+    {
+        news_array += entry.Title + "\n";
+    }
+    if (news_array.empty())
+    {
+        news_array = _t("News");
+    }
+    const auto news_ico = (websiteNewsArray_.size() > 0) ? mmBitmapBundle(png::NEW_NEWS, toolbar_icon_size) : mmBitmapBundle(png::NEWS, toolbar_icon_size);
+
+    toolBar_->AddTool(MENU_ANNOUNCEMENTMAILING, _t("News"), news_ico, news_array);
+    toolBar_->AddTool(wxID_ABOUT, _t("&About"), mmBitmapBundle(png::ABOUT, toolbar_icon_size), _t("About"));
+    toolBar_->AddTool(wxID_HELP, _t("&Help") + "\tF1", mmBitmapBundle(png::HELP, toolbar_icon_size), _t("Help"));
 
     // after adding the buttons to the toolbar, must call Realize() to reflect changes
     toolBar_->Realize();
@@ -2237,15 +2251,15 @@
     if (m_db) {
         ShutdownDatabase();
         // Backup the database according to user requirements
-        if (Option::instance().DatabaseUpdated() &&
-            Model_Setting::instance().GetBoolSetting("BACKUPDB_UPDATE", false)
+        if (Option::instance().getDatabaseUpdated() &&
+            Model_Setting::instance().getBool("BACKUPDB_UPDATE", false)
         ) {
             dbUpgrade::BackupDB(
                 m_filename,
                 dbUpgrade::BACKUPTYPE::CLOSE,
-                Model_Setting::instance().GetIntSetting("MAX_BACKUP_FILES", 4)
+                Model_Setting::instance().getInt("MAX_BACKUP_FILES", 4)
             );
-            Option::instance().DatabaseUpdated(false);
+            Option::instance().setDatabaseUpdated(false);
         }
     }
 
@@ -2254,17 +2268,17 @@
     bool passwordCheckPassed = true;
     if (checkExt.GetExt().Lower() == "emb" && wxFileName::FileExists(fileName)) {
         wxString password_message = wxString::Format(
-            _("Please enter password for Database\n\n%s"),
+            _t("Please enter password for Database\n\n%s"),
             fileName
         );
         password = !pwd.empty() ? pwd :
-            wxGetPasswordFromUser(password_message, _("MMEX: Encrypted Database")
+            wxGetPasswordFromUser(password_message, _t("MMEX: Encrypted Database")
         );
         if (password.IsEmpty())
             passwordCheckPassed = false;
     }
 
-    const wxString dialogErrorMessageHeading = _("Opening MMEX Database – Error");
+    const wxString dialogErrorMessageHeading = _t("Opening MMEX Database – Error");
 
     // Existing Database
     if (!openingNew
@@ -2273,11 +2287,11 @@
         && passwordCheckPassed
     ) {
         /* Do a backup before opening */
-        if (Model_Setting::instance().GetBoolSetting("BACKUPDB", false)) {
+        if (Model_Setting::instance().getBool("BACKUPDB", false)) {
             dbUpgrade::BackupDB(
                 fileName,
                 dbUpgrade::BACKUPTYPE::START,
-                Model_Setting::instance().GetIntSetting("MAX_BACKUP_FILES", 4)
+                Model_Setting::instance().getInt("MAX_BACKUP_FILES", 4)
             );
         }
 
@@ -2298,7 +2312,7 @@
             m_db = mmDBWrapper::Open(fileName, password, true);
             //DB backup is handled inside UpgradeDB
             if (!dbUpgrade::UpgradeDB(m_db.get(), fileName)) {
-                int response = wxMessageBox(_("Have MMEX support provided a debug/patch file?"), _("MMEX upgrade"), wxYES_NO);
+                int response = wxMessageBox(_t("Have MMEX support provided a debug/patch file?"), _t("MMEX upgrade"), wxYES_NO);
                 if (response == wxYES) {
                     // upgrade failure turns CorruptRdOnly flag back on, so reopen again in debug mode
                     ShutdownDatabase();
@@ -2312,19 +2326,19 @@
 
         InitializeModelTables();
 
-        wxString UID = Model_Infotable::instance().GetStringInfo("UID", wxEmptyString);
+        wxString UID = Model_Infotable::instance().getString("UID", wxEmptyString);
         if (UID.IsEmpty()) {
-            UID = Model_Setting::instance().GetStringSetting("UUID", wxEmptyString);
-            Model_Infotable::instance().Set("UID", UID);
+            UID = Model_Setting::instance().getString("UUID", wxEmptyString);
+            Model_Infotable::instance().setString("UID", UID);
         }
-        Model_Setting::instance().Set("UID", UID);
+        Model_Setting::instance().setString("UID", UID);
 
         // ** OBSOLETE **
         // Mantained only for really old compatibility reason and replaced by dbupgrade.cpp
         if (!Model_Infotable::instance().checkDBVersion()) {
-            const wxString note = wxString::Format("%s - %s", mmex::getProgramName(), _("No File opened"));
+            const wxString note = wxString::Format("%s - %s", mmex::getProgramName(), _t("No File opened"));
             this->SetTitle(note);
-            wxMessageBox(_("Sorry. The Database version is too old or Database password is incorrect")
+            wxMessageBox(_t("Sorry. The Database version is too old or Database password is incorrect")
                 , dialogErrorMessageHeading
                 , wxOK | wxICON_EXCLAMATION);
 
@@ -2336,7 +2350,7 @@
 
         // WE CAN EVENTUALLY DELETE THIS CODE
         // Get Hidden Categories id from stored INFO string and move to Category/Subcategory tables
-        wxString sSettings = Model_Infotable::instance().GetStringInfo("HIDDEN_CATEGS_ID", "");
+        wxString sSettings = Model_Infotable::instance().getString("HIDDEN_CATEGS_ID", "");
         if (!sSettings.empty()) {
             wxStringTokenizer token(sSettings, ";");
             Model_Category::instance().Savepoint();
@@ -2362,7 +2376,7 @@
                 }
             }
             Model_Category::instance().ReleaseSavepoint();
-            Model_Infotable::instance().Set("HIDDEN_CATEGS_ID", "");
+            Model_Infotable::instance().setString("HIDDEN_CATEGS_ID", "");
         }
     }
     else if (openingNew) { // New Database
@@ -2389,7 +2403,7 @@
         }
 
         wxButton* next = static_cast<wxButton*>(wizard->FindWindow(wxID_FORWARD)); //FIXME: 
-        if (next) next->SetLabel(_u("&Next →"));
+        if (next) next->SetLabel(_tu("&Next →"));
 
         SetDataBaseParameters(fileName);
         /* Jump to new account creation screen */
@@ -2401,13 +2415,13 @@
         const wxString note = wxString::Format(
             "%s - %s",
             mmex::getProgramName(),
-            _("No File opened")
+            _t("No File opened")
         );
         this->SetTitle(note);
 
-        wxString msgStr = _("Unable to find previously opened database.\n");
+        wxString msgStr = _t("Unable to find previously opened database.\n");
         if (!passwordCheckPassed)
-            msgStr = _("Password not entered for encrypted database.\n");
+            msgStr = _t("Password not entered for encrypted database.\n");
 
         msgStr << fileName;
         wxMessageBox(msgStr, dialogErrorMessageHeading, wxOK | wxICON_ERROR);
@@ -2426,14 +2440,14 @@
     wxFileName fname(fileName);
     wxString title = wxString::Format("%s - %s", fname.GetFullName(), mmex::getProgramName());
     if (mmex::isPortableMode())
-        title = wxString::Format("%s [%s]", title, _("portable mode"));
+        title = wxString::Format("%s [%s]", title, _t("portable mode"));
 
     SetTitle(title);
 
     if (m_db) {
         m_filename = fileName;
         /* Set InfoTable Options into memory */
-        Option::instance().LoadOptions();
+        Option::instance().load();
     }
     else {
         m_filename.Clear();
@@ -2455,20 +2469,21 @@
         }
 
         if (!m_app->GetSilentParam()) {
-            db_lockInPlace = Model_Infotable::instance().GetBoolInfo("ISUSED", false);
+            db_lockInPlace = Model_Infotable::instance().getBool("ISUSED", false);
             if (db_lockInPlace) {
-                int response = wxMessageBox(_(
-                    "The database you are trying to open has been marked as opened by another instance of MMEX.\n"
+                int response = wxMessageBox(_t(
+                    "Attempting to open a database that has been marked as opened by another instance of MMEX.\n"
                     "To avoid data loss or conflict, it's strongly recommended that you close all other applications that may be using the database.\n\n"
-                    "If nothing else is running, it's possible that the database was left open as a result of a crash during previous usage of MMEX.\n\n"
-                    "Would you like to continue to open this database?")
-                    , _("MMEX Instance Check"), wxYES_NO | wxNO_DEFAULT | wxICON_WARNING);
+                    "If nothing else is running, it's possible that the database was left open as a result of a crash during previous usage of MMEX.") +
+                    "\n\n" +
+                    _t("Do you want to open the database?")
+                    , _t("MMEX Instance Check"), wxYES_NO | wxNO_DEFAULT | wxICON_WARNING);
                 if (response == wxNO)
                     return false;
             }
         }
 
-        Model_Infotable::instance().Set("ISUSED", true);
+        Model_Infotable::instance().setBool("ISUSED", true);
         db_lockInPlace = false;
         autoRepeatTransactionsTimer_.Start(REPEAT_TRANS_DELAY_TIME, wxTIMER_ONE_SHOT);
     }
@@ -2483,10 +2498,10 @@
 {
     autoRepeatTransactionsTimer_.Stop();
     wxFileDialog dlg(this,
-        _("Choose database file to create"),
+        _t("Choose database file to create"),
         wxEmptyString,
         wxEmptyString,
-        _("MMEX Database")+" (*.mmb)|*.mmb",
+        _t("MMEX Database")+" (*.mmb)|*.mmb",
         wxFD_SAVE | wxFD_OVERWRITE_PROMPT
     );
 
@@ -2499,7 +2514,7 @@
         fileName += ".mmb";
 
     SetDatabaseFile(fileName, true);
-    Model_Setting::instance().Set("LASTFILENAME", fileName);
+    Model_Setting::instance().setString("LASTFILENAME", fileName);
 }
 //----------------------------------------------------------------------------
 
@@ -2507,9 +2522,9 @@
 {
     autoRepeatTransactionsTimer_.Stop();
     wxString fileName = wxFileSelector(
-        _("Choose database file to open"),
+        _t("Choose database file to open"),
         wxEmptyString, wxEmptyString, wxEmptyString,
-        _("MMEX Database") + " (*.mmb)|*.mmb|" + _("Encrypted MMEX Database") + " (*.emb)|*.emb",
+        _t("MMEX Database") + " (*.mmb)|*.mmb|" + _t("Encrypted MMEX Database") + " (*.emb)|*.emb",
         wxFD_FILE_MUST_EXIST | wxFD_OPEN,
         this
     );
@@ -2520,7 +2535,7 @@
         if (m_db) {
             autocleanDeletedTransactions();
             if (!Model_Stock::instance().all().empty() &&
-                Model_Setting::instance().GetBoolSetting("REFRESH_STOCK_QUOTES_ON_OPEN", false)
+                Model_Setting::instance().getBool("REFRESH_STOCK_QUOTES_ON_OPEN", false)
             ) {
                 wxCommandEvent evt(wxEVT_COMMAND_MENU_SELECTED, MENU_RATES);
                 this->GetEventHandler()->AddPendingEvent(evt);
@@ -2533,9 +2548,9 @@
 void mmGUIFrame::OnConvertEncryptedDB(wxCommandEvent& /*event*/)
 {
     wxString encFileName = wxFileSelector(
-        _("Choose Encrypted database file to open"),
+        _t("Choose Encrypted database file to open"),
         wxEmptyString, wxEmptyString, wxEmptyString,
-        _("Encrypted MMEX Database") + " (*.emb)|*.emb",
+        _t("Encrypted MMEX Database") + " (*.emb)|*.emb",
         wxFD_FILE_MUST_EXIST,
         this
     );
@@ -2544,18 +2559,18 @@
         return;
 
     wxString password = wxGetPasswordFromUser(
-        _("Enter password for database"),
-        _("MMEX: Encrypted Database")
+        _t("Enter password for database"),
+        _t("MMEX: Encrypted Database")
     );
     if (password.empty())
         return;
 
     wxFileDialog dlg(
         this,
-        _("Choose database file to Save As"),
+        _t("Choose database file to Save As"),
         wxEmptyString,
         wxEmptyString,
-        _("MMEX Database") + " (*.mmb)|*.mmb",
+        _t("MMEX Database") + " (*.mmb)|*.mmb",
         wxFD_SAVE | wxFD_OVERWRITE_PROMPT
     );
 
@@ -2578,15 +2593,15 @@
     db.ReKey(cipher, wxEmptyString);
     db.Close();
 
-    mmErrorDialogs::MessageError(this, _("Converted database!"), _("MMEX message"));
+    mmErrorDialogs::MessageError(this, _t("Converted database!"), _t("MMEX message"));
 }
 //----------------------------------------------------------------------------
 
 void mmGUIFrame::OnChangeEncryptPassword(wxCommandEvent& /*event*/)
 {
-    wxString password_change_heading = _("MMEX: Encryption Password Change");
+    wxString password_change_heading = _t("MMEX: Encryption Password Change");
     wxString password_message = wxString::Format(
-        _("New password for database:") + "\n\n%s",
+        _t("New password for database:") + "\n\n%s",
         m_filename
     );
 
@@ -2595,7 +2610,7 @@
         wxString new_password = dlg.GetValue();
         if (new_password.IsEmpty()) {
             wxMessageBox(
-                _("New password must not be empty."),
+                _t("New password must not be empty."),
                 password_change_heading,
                 wxOK | wxICON_WARNING
             );
@@ -2603,7 +2618,7 @@
         else {
             wxPasswordEntryDialog confirm_dlg(
                 this,
-                _("Please confirm new password"),
+                _t("Please confirm new password"),
                 password_change_heading
             );
             if (confirm_dlg.ShowModal() == wxID_OK) {
@@ -2614,10 +2629,10 @@
                     cipher.SetLegacy(true);
 
                     m_db->ReKey(cipher, confirm_password);
-                    wxMessageBox(_("Password change completed"), password_change_heading);
+                    wxMessageBox(_t("Password change completed"), password_change_heading);
                 }
                 else {
-                    wxMessageBox(_("Confirm password failed."), password_change_heading);
+                    wxMessageBox(_t("Confirm password failed."), password_change_heading);
                 }
             }
         }
@@ -2629,8 +2644,8 @@
 {
     wxMessageDialog msgDlg(
         this,
-        wxString::Format("%s\n\n%s", _("Backup database before optimization."), _("Do you want to proceed?")),
-        _("DB Optimization"),
+        wxString::Format("%s\n\n%s", _t("Backup database before optimization."), _t("Do you want to continue?")),
+        _t("DB Optimization"),
         wxYES_NO | wxNO_DEFAULT | wxICON_WARNING
     );
     if (msgDlg.ShowModal() == wxID_YES) {
@@ -2638,12 +2653,12 @@
         m_db->Vacuum();
         const wxString SizeAfter = wxFileName(m_filename).GetHumanReadableSize();
         wxMessageBox(wxString::Format(
-            _("Database Optimization Completed!\n\n"
+            _t("Database Optimization Completed!\n\n"
                 "Size before: %1$s\n"
                 "Size after: %2$s\n"
             ),
             SizeBefore, SizeAfter),
-            _("DB Optimization")
+            _t("DB Optimization")
         );
     }
 }
@@ -2667,8 +2682,8 @@
         }
         catch (const wxSQLite3Exception& e) {
             wxMessageBox(
-                _("Query error, please contact MMEX support!") + "\n\n" + e.GetMessage(),
-                _("MMEX debug error"),
+                _t("Query error, please contact MMEX support!") + "\n\n" + e.GetMessage(),
+                _t("MMEX debug error"),
                 wxOK | wxICON_ERROR
             );
             return;
@@ -2676,7 +2691,7 @@
     }
 
     if (!resultMessage.IsEmpty()) {
-        wxTextEntryDialog checkDlg(this, _("Result of database integrity check:"), _("Database Check"), resultMessage.Trim(), wxOK | wxTE_MULTILINE);
+        wxTextEntryDialog checkDlg(this, _t("Result of database integrity check:"), _t("Database Check"), resultMessage.Trim(), wxOK | wxTE_MULTILINE);
         checkDlg.SetIcon(mmex::getProgramIcon());
         wxTextCtrl* textCtrl = dynamic_cast<wxTextCtrl*>(checkDlg.FindWindow(3000));
         if (textCtrl) {
@@ -2695,14 +2710,14 @@
     wxMessageDialog msgDlg(
         this,
         wxString::Format("%s\n\n%s",
-            _("Please use this function only if requested by MMEX support and you have been supplied with a .mmdbg debug file"),
-            _("Do you want to proceed?")
+            _t("Please use this function only if requested by MMEX support and an .mmdbg debug file has been supplied."),
+            _t("Do you want to continue?")
         ),
-        _("Database Debug"),
+        _t("Database Debug"),
         wxYES_NO | wxNO_DEFAULT | wxICON_WARNING
     );
 
-    msgDlg.SetYesNoLabels(_("&Yes"), _("&No"));
+    msgDlg.SetYesNoLabels(_t("&Yes"), _t("&No"));
 
     if (msgDlg.ShowModal() == wxID_YES) {
         dbUpgrade::SqlFileDebug(m_db.get());
@@ -2720,10 +2735,10 @@
     }
 
     wxFileDialog dlg(this,
-        _("Save database file as"),
+        _t("Save database file as"),
         wxEmptyString,
         wxEmptyString,
-        _("MMEX Database")+" (*.mmb)|*.mmb|"+_("Encrypted MMEX Database")+" (*.emb)|*.emb",
+        _t("MMEX Database")+" (*.mmb)|*.mmb|"+_t("Encrypted MMEX Database")+" (*.emb)|*.emb",
         wxFD_SAVE | wxFD_OVERWRITE_PROMPT
     );
 
@@ -2742,8 +2757,8 @@
     if (newFileName == oldFileName) { // on case-sensitive FS uses case-sensitive comparison
         wxMessageDialog dlgMsg(
             this,
-            _("Unable to copy file to itself"),
-            _("Save database file as"),
+            _t("Unable to copy file to itself"),
+            _t("Save database file as"),
             wxOK | wxICON_WARNING
         );
         dlgMsg.ShowModal();
@@ -2756,7 +2771,7 @@
 
     if (encrypt) {
         if (rekey) {
-            new_password = wxGetPasswordFromUser(_("Enter password for new database"), _("MMEX: Encrypted Database"));
+            new_password = wxGetPasswordFromUser(_t("Enter password for new database"), _t("MMEX: Encrypted Database"));
             if (new_password.empty())
                 return;
         }
@@ -2843,7 +2858,7 @@
 void mmGUIFrame::OnImportUniversalCSV(wxCommandEvent& /*event*/)
 {
     if (Model_Account::instance().all().empty()) {
-        wxMessageBox(_("No account available to import"), _("Universal CSV Import"), wxOK | wxICON_WARNING);
+        wxMessageBox(_t("No account available to import"), _t("Universal CSV Import"), wxOK | wxICON_WARNING);
         return;
     }
 
@@ -2862,7 +2877,7 @@
 void mmGUIFrame::OnImportXML(wxCommandEvent& /*event*/)
 {
     if (Model_Account::instance().all().empty()) {
-        wxMessageBox(_("No account available to import"), _("Universal CSV Import"), wxOK | wxICON_WARNING);
+        wxMessageBox(_t("No account available to import"), _t("Universal CSV Import"), wxOK | wxICON_WARNING);
         return;
     }
 
@@ -2885,7 +2900,7 @@
     if (dlg.ShowModal() == wxID_HELP) {
         helpFileIndex_ = mmex::HTML_WEBAPP;
         createHelpPage(helpFileIndex_);
-        setNavTreeSection(_("Help"));
+        setNavTreeSection(_t("Help"));
     }
     if (dlg.getRefreshRequested())
         refreshPanelData();
@@ -2908,24 +2923,24 @@
         Model_Account::Data* account = Model_Account::instance().get(wizard->acctID_);
         mmNewAcctDialog dlg(account, this);
         dlg.ShowModal();
-        if (account->ACCOUNTTYPE == Model_Account::TYPE_STR_ASSET) {
-            wxMessageBox(_(
+        if (account->ACCOUNTTYPE == Model_Account::TYPE_NAME_ASSET) {
+            wxMessageBox(_t(
                 "Asset Accounts hold Asset transactions\n\n"
                 "Asset transactions are created within the Assets View\n"
                 "after the selection of the Asset within that view.\n\n"
                 "Asset Accounts can also hold normal transactions to regular accounts."
-            ), _("Asset Account Creation"));
+            ), _t("Asset Account Creation"));
         }
 
-        if (account->ACCOUNTTYPE == Model_Account::TYPE_STR_SHARES) {
-            wxMessageBox(wxGetTranslation(wxString::FromUTF8(wxTRANSLATE(
+        if (account->ACCOUNTTYPE == Model_Account::TYPE_NAME_SHARES) {
+            wxMessageBox(_tu(
                 "Share Accounts hold Share transactions\n\n"
                 "Share transactions are created within the Stock Portfolio View\n"
                 "after the selection of the Company Stock within the associated view.\n\n"
                 "These accounts only become visible after associating a Stock to the Share Account\n"
                 "Or by using the Menu View → 'Display Share Accounts'\n"
                 "Share Accounts can also hold normal transactions to regular account."
-            ))), _("Share Account Creation"));
+            ), _t("Share Account Creation"));
         }
 
         RefreshNavigationTree();
@@ -2955,7 +2970,7 @@
         createHomePage();
         break;
     case mmID_CHECKING:
-        wxDynamicCast(panelCurrent_, mmCheckingPanel)->RefreshList();
+        wxDynamicCast(panelCurrent_, mmCheckingPanel)->refreshList();
         break;
     case mmID_STOCKS:
         wxDynamicCast(panelCurrent_, mmStocksPanel)->RefreshList();
@@ -3055,16 +3070,16 @@
     if (!m_db) return;
     if (Model_Account::instance().all().empty()) return;
 
-    const auto filter_settings = Model_Infotable::instance().GetArrayStringSetting("TRANSACTIONS_FILTER");
+    const auto filter_settings = Model_Infotable::instance().getArrayString("TRANSACTIONS_FILTER");
 
     wxSharedPtr<mmFilterTransactionsDialog> dlg(new mmFilterTransactionsDialog(this, -1, true));
     bool is_ok = (dlg->ShowModal() == wxID_OK);
-    if (filter_settings != Model_Infotable::instance().GetArrayStringSetting("TRANSACTIONS_FILTER")) {
+    if (filter_settings != Model_Infotable::instance().getArrayString("TRANSACTIONS_FILTER")) {
         DoRecreateNavTreeControl();
     }
     if (is_ok) {
         mmReportTransactions* rs = new mmReportTransactions(dlg);
-        setNavTreeSection(_("Transaction Report"));
+        setNavTreeSection(_t("Transaction Report"));
         createReportsPage(rs, true);
     }
 }
@@ -3079,7 +3094,7 @@
     const auto b = Model_Budgetyear::instance().all(Model_Budgetyear::COL_BUDGETYEARNAME).to_json();
     if (a != b)
         DoRecreateNavTreeControl(true);
-    setNavTreeSection(_("Budget Planner"));
+    setNavTreeSection(_t("Budget Planner"));
 }
 
 void mmGUIFrame::OnGeneralReportManager(wxCommandEvent& /*event*/)
@@ -3100,9 +3115,9 @@
     mmOptionsDialog systemOptions(this, this->m_app);
     if (systemOptions.ShowModal() == wxID_OK) {
         //set the View Menu Option items the same as the options saved.
-        menuBar_->FindItem(MENU_VIEW_BUDGET_FINANCIAL_YEARS)->Check(Option::instance().BudgetFinancialYears());
-        menuBar_->FindItem(MENU_VIEW_BUDGET_TRANSFER_TOTAL)->Check(Option::instance().BudgetIncludeTransfers());
-        menuBar_->FindItem(MENU_VIEW_BUDGET_CATEGORY_SUMMARY)->Check(Option::instance().BudgetReportWithSummaries());
+        menuBar_->FindItem(MENU_VIEW_BUDGET_FINANCIAL_YEARS)->Check(Option::instance().getBudgetFinancialYears());
+        menuBar_->FindItem(MENU_VIEW_BUDGET_TRANSFER_TOTAL)->Check(Option::instance().getBudgetIncludeTransfers());
+        menuBar_->FindItem(MENU_VIEW_BUDGET_CATEGORY_SUMMARY)->Check(Option::instance().getBudgetSummaryWithoutCategories());
         menuBar_->FindItem(MENU_VIEW_IGNORE_FUTURE_TRANSACTIONS)->Check(Option::instance().getIgnoreFutureTransactions());
         menuBar_->FindItem(MENU_VIEW_SHOW_TOOLTIPS)->Check(Option::instance().getShowToolTips());
         menuBar_->FindItem(MENU_VIEW_SHOW_MONEYTIPS)->Check(Option::instance().getShowMoneyTips());
@@ -3114,11 +3129,11 @@
         // Reset columns of the checking panel in case the time columns was added/removed
         int id = panelCurrent_->GetId();
         if (id == mmID_CHECKING)
-            wxDynamicCast(panelCurrent_, mmCheckingPanel)->ResetColumnView();
+            wxDynamicCast(panelCurrent_, mmCheckingPanel)->resetColumnView();
 
-        const wxString& sysMsg = _("Settings have been updated.") + "\n\n"
-            + _("Some settings take effect only after an application restart.");
-        wxMessageBox(sysMsg, _("Settings"), wxOK | wxICON_INFORMATION);
+        const wxString& sysMsg = _t("Settings have been updated.") + "\n\n"
+            + _t("Some settings take effect only after an application restart.");
+        wxMessageBox(sysMsg, _t("Settings"), wxOK | wxICON_INFORMATION);
     }
 }
 //----------------------------------------------------------------------------
@@ -3145,15 +3160,15 @@
         && mmWebApp::MMEX_WebApp_UpdateCategory()
         && mmWebApp::MMEX_WebApp_UpdatePayee()) {
         if (!is_silent) {
-            wxMessageBox(_("Accounts, Payees, and Categories Updated"), _("Refresh WebApp"), wxOK | wxICON_INFORMATION);
+            wxMessageBox(_t("Accounts, Payees, and Categories Updated"), _t("Refresh WebApp"), wxOK | wxICON_INFORMATION);
         }
         return true;
     }
     else {
         if (!is_silent) {
             wxMessageBox(
-                _("Issue encountered updating WebApp, check Web server and WebApp settings"),
-                _("Refresh WebApp"),
+                _t("Issue encountered updating WebApp, check Web server and WebApp settings"),
+                _t("Refresh WebApp"),
                 wxOK | wxICON_ERROR
             );
         }
@@ -3171,7 +3186,7 @@
 void mmGUIFrame::OnHelp(wxCommandEvent& /*event*/)
 {
     createHelpPage();
-    setNavTreeSection(_("Help"));
+    setNavTreeSection(_t("Help"));
 }
 //----------------------------------------------------------------------------
 
@@ -3206,7 +3221,7 @@
 
 void mmGUIFrame::OnBeNotified(wxCommandEvent& /*event*/)
 {
-    Model_Setting::instance().Set(INIDB_NEWS_LAST_READ_DATE, wxDate::Today().FormatISODate());
+    Model_Setting::instance().setString(INIDB_NEWS_LAST_READ_DATE, wxDate::Today().FormatISODate());
     wxLaunchDefaultBrowser(mmex::weblink::News);
 
     int toolbar_icon_size = Option::instance().getToolbarIconSize();
@@ -3214,14 +3229,14 @@
     toolBar_->SetToolBitmap(MENU_ANNOUNCEMENTMAILING, mmBitmapBundle(png::NEWS, toolbar_icon_size));
 
     const auto b = toolBar_->FindTool(MENU_ANNOUNCEMENTMAILING);
-    if (b) b->SetShortHelp(_("News"));
+    if (b) b->SetShortHelp(_t("News"));
 }
 //----------------------------------------------------------------------------
 
 void mmGUIFrame::OnReportBug(wxCommandEvent& WXUNUSED(event))
 {
     mmPrintableBase* br = new mmBugReport();
-    setNavTreeSection(_("Reports"));
+    setNavTreeSection(_t("Reports"));
     createReportsPage(br, true);
 }
 
@@ -3271,8 +3286,7 @@
         break;
     }
     case wxID_SETUP: {
-        auto language = Option::instance().getLanguageID(true);
-        const auto langName = language == wxLANGUAGE_DEFAULT ? _("System default") : wxLocale::GetLanguageName(language);
+        // auto language = Option::instance().getLanguageID(true);
         break;
     }
     case wxID_EXIT:
@@ -3290,7 +3304,7 @@
 void mmGUIFrame::OnExportToHtml(wxCommandEvent& WXUNUSED(event))
 {
     wxString fileName = wxFileSelector(
-        _("Choose HTML file to Export"),
+        _t("Choose HTML file to Export"),
         wxEmptyString, wxEmptyString, wxEmptyString,
         "*.html",
         wxFD_SAVE | wxFD_OVERWRITE_PROMPT
@@ -3435,7 +3449,7 @@
 
     Model_Usage::instance().AppendToUsage(wxString::FromUTF8(json_buffer.GetString()));
     m_nav_tree_ctrl->SetFocus();
-    setNavTreeSection(_("Scheduled Transactions"));
+    setNavTreeSection(_t("Scheduled Transactions"));
 }
 //----------------------------------------------------------------------------
 
@@ -3458,7 +3472,7 @@
     else {
         DoWindowsFreezeThaw(homePanel_);
         wxSizer *sizer = cleanupHomePanel();
-        panelCurrent_ = new mmBudgetingPanel(budgetYearID, homePanel_, this, mmID_BUDGET);
+        panelCurrent_ = new mmBudgetingPanel(budgetYearID, homePanel_, mmID_BUDGET);
         sizer->Add(panelCurrent_, 1, wxGROW | wxALL, 1);
         homePanel_->Layout();
         DoWindowsFreezeThaw(homePanel_);
@@ -3506,9 +3520,9 @@
             (checking_id == -2 && cp->isDeletedTrans()) ||
             (checking_id >= 1 && cp->isAccount() && newCreditDisplayed == creditDisplayed_)
         ) {
-            cp->RefreshList();
+            cp->refreshList();
             if (cp->isAccount())
-                cp->DisplayAccountDetails(checking_id);
+                cp->loadAccount(checking_id);
             done = true;
         }
     }
@@ -3532,7 +3546,7 @@
     menuPrintingEnable(true);
     if (checking_id >= 1 && gotoTransID_.first > 0) {
         mmCheckingPanel* cp = wxDynamicCast(panelCurrent_, mmCheckingPanel);
-        cp->SetSelectedTransaction(gotoTransID_);
+        cp->setSelectedTransaction(gotoTransID_);
         gotoTransID_ = { -1, 0 };
     }
     m_nav_tree_ctrl->SetEvtHandlerEnabled(true);
@@ -3617,7 +3631,7 @@
         homePanel_->Layout();
         DoWindowsFreezeThaw(homePanel_);
         menuPrintingEnable(true);
-        setNavTreeSection(_("Assets"));
+        setNavTreeSection(_t("Assets"));
     }
 
     json_writer.Key("seconds");
@@ -3642,14 +3656,14 @@
     (
         wxBusyInfoFlags()
         .Parent(this)
-        .Title(_("Downloading stock prices from Yahoo"))
-        .Text(_u("Please wait…"))
+        .Title(_t("Downloading stock prices from Yahoo"))
+        .Text(_tu("Please wait…"))
         .Foreground(*wxWHITE)
         .Background(wxColour(0, 102, 51))
         .Transparency(4 * wxALPHA_OPAQUE / 5)
     );
 #else
-    (_("Downloading stock prices from Yahoo"), this);
+    (_t("Downloading stock prices from Yahoo"), this);
 #endif
     wxString msg;
     getOnlineCurrencyRates(msg);
@@ -3686,9 +3700,9 @@
             }
             Model_StockHistory::instance().ReleaseSavepoint();
             wxString strLastUpdate;
-            strLastUpdate.Printf(_("%1$s on %2$s"), wxDateTime::Now().FormatTime()
+            strLastUpdate.Printf(_t("%1$s on %2$s"), wxDateTime::Now().FormatTime()
                 , mmGetDateTimeForDisplay(wxDateTime::Now().FormatISODate()));
-            Model_Infotable::instance().Set("STOCKS_LAST_REFRESH_DATETIME", strLastUpdate);
+            Model_Infotable::instance().setString("STOCKS_LAST_REFRESH_DATETIME", strLastUpdate);
         }
 
         wxLogDebug("%s", msg);
@@ -3702,11 +3716,11 @@
 {
     const auto &accounts = Model_Account::instance().all(Model_Account::COL_ACCOUNTNAME);
     if (accounts.empty()) {
-        wxMessageBox(_("No account available to edit!"), _("Accounts"), wxOK | wxICON_WARNING);
+        wxMessageBox(_t("No account available to edit!"), _t("Accounts"), wxOK | wxICON_WARNING);
         return;
     }
 
-    mmSingleChoiceDialog scd(this, _("Choose Account to Edit"), _("Accounts"), accounts);
+    mmSingleChoiceDialog scd(this, _t("Choose Account to Edit"), _t("Accounts"), accounts);
     if (scd.ShowModal() == wxID_OK) {
         Model_Account::Data* account = Model_Account::instance().get(scd.GetStringSelection());
         mmNewAcctDialog dlg(account, this);
@@ -3720,23 +3734,23 @@
 {
     const auto &accounts = Model_Account::instance().all(Model_Account::COL_ACCOUNTNAME);
     if (accounts.empty()) {
-        wxMessageBox(_("No account available to delete!"), _("Accounts"), wxOK | wxICON_WARNING);
+        wxMessageBox(_t("No account available to delete!"), _t("Accounts"), wxOK | wxICON_WARNING);
         return;
     }
 
-    mmSingleChoiceDialog scd(this, _("Choose Account to Delete"), _("Accounts"), accounts);
+    mmSingleChoiceDialog scd(this, _t("Choose Account to Delete"), _t("Accounts"), accounts);
     if (scd.ShowModal() == wxID_OK) {
         Model_Account::Data* account = Model_Account::instance().get(scd.GetStringSelection());
         wxString deletingAccountName = wxString::Format(
-            _("Are you sure you want to delete\n%1$s account: %2$s?"),
+            _t("Do you you want to delete\n%1$s account: %2$s?"),
             wxGetTranslation(account->ACCOUNTTYPE),
             account->ACCOUNTNAME
         );
-        wxMessageDialog msgDlg(this, deletingAccountName, _("Confirm Account Deletion"),
+        wxMessageDialog msgDlg(this, deletingAccountName, _t("Confirm Account Deletion"),
             wxYES_NO | wxNO_DEFAULT | wxICON_EXCLAMATION);
         if (msgDlg.ShowModal() == wxID_YES) {
             Model_Account::instance().remove(account->id());
-            mmAttachmentManage::DeleteAllAttachments(Model_Attachment::REFTYPE_STR_BANKACCOUNT, account->id());
+            mmAttachmentManage::DeleteAllAttachments(Model_Account::refTypeName, account->id());
         }
     }
     DoRecreateNavTreeControl(true);
@@ -3747,7 +3761,7 @@
 {
     mmSingleChoiceDialog account_choice(
         this,
-        _("Select account"), _("Change Account Type"),
+        _t("Select account"), _t("Change Account Type"),
         Model_Account::instance().all_checking_account_names()
     );
 
@@ -3761,19 +3775,21 @@
 void mmGUIFrame::ReallocateAccount(int64 accountID)
 {
     Model_Account::Data* account = Model_Account::instance().get(accountID);
-
-    wxArrayString types = Model_Account::TYPE_STR;
-    types.Remove(Model_Account::TYPE_STR_INVESTMENT);
-    types.Remove(account->ACCOUNTTYPE);
-    wxArrayString t;
+    int accountTypeId = Model_Account::type_id(account);
+    wxArrayString types;
+    for (int i = 0; i < Model_Account::TYPE_ID_size; ++i) {
+        if (i != Model_Account::TYPE_ID_INVESTMENT && i != accountTypeId)
+            types.Add(Model_Account::type_name(i));
+    }
+    wxArrayString types_loc;
     for (const auto &entry : types)
-        t.Add(wxGetTranslation(entry));
+        types_loc.Add(wxGetTranslation(entry));
 
     mmSingleChoiceDialog type_choice(
         this,
-        wxString::Format(_("Select new account type for %s"), account->ACCOUNTNAME),
-        _("Change Account Type"),
-        t
+        wxString::Format(_t("Select new account type for %s"), account->ACCOUNTNAME),
+        _t("Change Account Type"),
+        types_loc
     );
 
     if (type_choice.ShowModal() == wxID_OK) {
@@ -3788,7 +3804,7 @@
 {
     m_mgr.GetPane("toolbar").Show(event.IsChecked());
     m_mgr.Update();
-    Model_Setting::instance().Set("SHOWTOOLBAR", event.IsChecked());
+    Model_Setting::instance().setBool("SHOWTOOLBAR", event.IsChecked());
 }
 
 void mmGUIFrame::OnViewLinks(wxCommandEvent &event)
@@ -3809,13 +3825,13 @@
 
 void mmGUIFrame::OnHideShareAccounts(wxCommandEvent &WXUNUSED(event))
 {
-    Option::instance().HideShareAccounts(!Option::instance().HideShareAccounts());
+    Option::instance().setHideShareAccounts(!Option::instance().getHideShareAccounts());
     RefreshNavigationTree();
 }
 
 void mmGUIFrame::OnHideDeletedTransactions(wxCommandEvent& WXUNUSED(event))
 {
-    Option::instance().HideDeletedTransactions(!Option::instance().HideDeletedTransactions());
+    Option::instance().setHideDeletedTransactions(!Option::instance().getHideDeletedTransactions());
     RefreshNavigationTree();
 }
 
@@ -3881,37 +3897,37 @@
 
 void mmGUIFrame::OnViewBudgetFinancialYears(wxCommandEvent& WXUNUSED(event))
 {
-    Option::instance().BudgetFinancialYears(!Option::instance().BudgetFinancialYears());
+    Option::instance().setBudgetFinancialYears(!Option::instance().getBudgetFinancialYears());
     refreshPanelData();
 }
 
 void mmGUIFrame::OnViewBudgetTransferTotal(wxCommandEvent& WXUNUSED(event))
 {
-    Option::instance().BudgetIncludeTransfers(!Option::instance().BudgetIncludeTransfers());
+    Option::instance().setBudgetIncludeTransfers(!Option::instance().getBudgetIncludeTransfers());
     refreshPanelData();
 }
 
 void mmGUIFrame::OnViewBudgetCategorySummary(wxCommandEvent& WXUNUSED(event))
 {
-    Option::instance().BudgetReportWithSummaries(!Option::instance().BudgetReportWithSummaries());
+    Option::instance().setBudgetSummaryWithoutCategories(!Option::instance().getBudgetSummaryWithoutCategories());
     refreshPanelData();
 }
 
 void mmGUIFrame::OnViewIgnoreFutureTransactions(wxCommandEvent& WXUNUSED(event))
 {
-    Option::instance().IgnoreFutureTransactions(!Option::instance().getIgnoreFutureTransactions());
+    Option::instance().setIgnoreFutureTransactions(!Option::instance().getIgnoreFutureTransactions());
     RefreshNavigationTree();
 }
 
 void mmGUIFrame::OnViewShowToolTips(wxCommandEvent& WXUNUSED(event))
 {
-    Option::instance().ShowToolTips(!Option::instance().getShowToolTips());
+    Option::instance().setShowToolTips(!Option::instance().getShowToolTips());
     RefreshNavigationTree();
 }
 
 void mmGUIFrame::OnViewShowMoneyTips(wxCommandEvent& WXUNUSED(event))
 {
-    Option::instance().ShowMoneyTips(!Option::instance().getShowMoneyTips());
+    Option::instance().setShowMoneyTips(!Option::instance().getShowMoneyTips());
     RefreshNavigationTree();
 }
 //----------------------------------------------------------------------------
@@ -3921,10 +3937,10 @@
     relocateCategoryDialog dlg(this);
     if (dlg.ShowModal() == wxID_OK) {
         wxString msgStr;
-        msgStr << _("Merge categories completed") << "\n\n"
-            << wxString::Format(_("Records have been updated in the database: %i"),
+        msgStr << _t("Merge categories completed") << "\n\n"
+            << wxString::Format(_t("Records have been updated in the database: %i"),
                 dlg.updatedCategoriesCount());
-        wxMessageBox(msgStr, _("Merge categories result"));
+        wxMessageBox(msgStr, _t("Merge categories result"));
         refreshPanelData();
     }
 }
@@ -3935,11 +3951,11 @@
     relocatePayeeDialog dlg(this);
     if (dlg.ShowModal() == wxID_OK) {
         wxString msgStr;
-        msgStr << _("Merge payees completed") << "\n\n"
-            << wxString::Format(_("Records have been updated in the database: %i"),
+        msgStr << _t("Merge payees completed") << "\n\n"
+            << wxString::Format(_t("Records have been updated in the database: %i"),
                 dlg.updatedPayeesCount())
             << "\n\n";
-        wxMessageBox(msgStr, _("Merge payees result"));
+        wxMessageBox(msgStr, _t("Merge payees result"));
         refreshPanelData();
     }
 }
@@ -3950,11 +3966,11 @@
     relocateTagDialog dlg(this);
     if (dlg.ShowModal() == wxID_OK) {
         wxString msgStr;
-        msgStr << _("Merge tags completed") << "\n\n"
-            << wxString::Format(_("Records have been updated in the database: %i"),
+        msgStr << _t("Merge tags completed") << "\n\n"
+            << wxString::Format(_t("Records have been updated in the database: %i"),
                 dlg.updatedTagsCount())
             << "\n\n";
-        wxMessageBox(msgStr, _("Merge tags result"));
+        wxMessageBox(msgStr, _t("Merge tags result"));
         refreshPanelData();
     }
 }
@@ -3972,7 +3988,7 @@
 //----------------------------------------------------------------------------
 
 void mmGUIFrame::autocleanDeletedTransactions() {
-    wxDateSpan days = wxDateSpan::Days(Model_Setting::instance().GetIntSetting("DELETED_TRANS_RETAIN_DAYS", 30));
+    wxDateSpan days = wxDateSpan::Days(Model_Setting::instance().getInt("DELETED_TRANS_RETAIN_DAYS", 30));
     wxDateTime earliestDate = wxDateTime().Now().ToUTC().Subtract(days);
     Model_Checking::Data_Set deletedTransactions = Model_Checking::instance().find(Model_Checking::DELETEDTIME(earliestDate.FormatISOCombined(), LESS_OR_EQUAL), Model_Checking::DELETEDTIME(wxEmptyString, NOT_EQUAL));
     if (!deletedTransactions.empty()) {
@@ -3985,7 +4001,7 @@
             Model_Checking::instance().remove(transaction.TRANSID);
 
             // remove also any attachments for the transaction
-            const wxString& RefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+            const wxString& RefType = Model_Checking::refTypeName;
             mmAttachmentManage::DeleteAllAttachments(RefType, transaction.TRANSID);
 
             // remove also any custom fields for the transaction
@@ -4027,8 +4043,8 @@
     }
     else {
         wxMessageBox(
-            wxString::Format(_("File %s not found"), file_name),
-            _("Error"),
+            wxString::Format(_t("File %s not found."), file_name),
+            _t("Error"),
             wxOK | wxICON_ERROR
         );
         m_recentFiles->RemoveFileFromHistory(fileNum);
@@ -4038,7 +4054,7 @@
 
 void mmGUIFrame::OnClearRecentFiles(wxCommandEvent& /*event*/)
 {
-    m_recentFiles->Clear();
+    m_recentFiles->ClearHistory();
     m_recentFiles->AddFileToHistory(m_filename);
 }
 
@@ -4057,7 +4073,7 @@
 
 void mmGUIFrame::OnResetView(wxCommandEvent& WXUNUSED(event))
 {
-    Model_Setting::instance().Set("SHOWTOOLBAR", true);
+    Model_Setting::instance().setBool("SHOWTOOLBAR", true);
     m_mgr.GetPane("toolbar").Show(true).Dock().Top().Position(0);
     m_mgr.GetPane("Navigation").Show(true).Dock().Left();
     m_mgr.Update();
@@ -4074,9 +4090,9 @@
     if (lang != m_app->getGUILanguage() && m_app->setGUILanguage(lang))
         mmErrorDialogs::MessageWarning(
             this,
-            _("The language for this application has been changed. "
+            _t("The language for this application has been changed. "
                 "The change will take effect the next time the application is started."),
-            _("Language change")
+            _t("Language change")
         );
 }
 
diff -Naur a/src/mmframe.h b/src/mmframe.h
--- a/src/mmframe.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmframe.h	2025-07-09 01:46:59.652940532 +0200
@@ -32,6 +32,7 @@
 #include "constants.h"
 #include "util.h"
 #include "paths.h"
+#include "model/Model_Account.h"
 #include "fusedtransaction.h"
 
 //----------------------------------------------------------------------------
@@ -66,8 +67,8 @@
     void setGotoAccountID(int64 account_id, Fused_Transaction::IdRepeat fused_id = {-1, 0});
     bool financialYearIsDifferent()
     {
-        return (Option::instance().FinancialYearStartDay() != "1" ||
-                Option::instance().FinancialYearStartMonth() != "1");
+        return Option::instance().getFinancialFirstDay() != 1 ||
+            Option::instance().getFinancialFirstMonth() != wxDateTime::Month::Jan;
     }
     /// return the index (mmex::EDocFile) to return the correct file.
     int getHelpFileIndex() const;
@@ -145,7 +146,7 @@
     void InitializeModelTables();
     bool createDataStore(const wxString& fileName, const wxString &passwd, bool openingNew);
     void createMenu();
-    void CreateToolBar();
+    void createToolBar();
     void createReportsPage(mmPrintableBase* rb, bool cleanup);
     void createHelpPage(int index = mmex::HTML_INDEX);
     void refreshPanelData();
@@ -350,7 +351,7 @@
         MENU_CURRENCY,
         MENU_RATES,
         MENU_LANG,
-        MENU_LANG_MAX = MENU_LANG + wxLANGUAGE_USER_DEFINED,
+        MENU_LANG_MAX = MENU_LANG + static_cast<int>(wxLANGUAGE_USER_DEFINED),
 
         MENU_IMPORT_MMNETCSV,
         MENU_IMPORT_QIF,
diff -Naur a/src/mmframereport.cpp b/src/mmframereport.cpp
--- a/src/mmframereport.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmframereport.cpp	2025-07-09 01:46:59.656940555 +0200
@@ -24,6 +24,7 @@
 #include "images_list.h"
 #include "mmframe.h"
 #include "reports/allreport.h"
+#include "mmTreeItemData.h"
 #include "model/Model_Budgetyear.h"
 #include "model/Model_Report.h"
 
@@ -77,7 +78,7 @@
 class mmGeneralGroupReport : public mmPrintableBase
 {
 public:
-    mmGeneralGroupReport(const wxString& groupname) : mmPrintableBase(wxTRANSLATE("General Group Report"))
+    mmGeneralGroupReport(const wxString& groupname) : mmPrintableBase(_n("General Group Report"))
         , m_group_name(groupname)
     {
         m_sub_reports = Model_Report::instance().find(Model_Report::GROUPNAME(groupname));
@@ -104,7 +105,7 @@
         }
         catch (...)
         {
-            return _("Caught exception");
+            return _t("Caught exception");
         }
 
         return out;
@@ -116,20 +117,20 @@
 
 void mmGUIFrame::DoUpdateReportNavigation(wxTreeItemId& parent_item)
 {
-    wxArrayString hidden_reports = Model_Infotable::instance().GetArrayStringSetting("HIDDEN_REPORTS");
+    wxArrayString hidden_reports = Model_Infotable::instance().getArrayString("HIDDEN_REPORTS");
 
     if (hidden_reports.Index("Cash Flow") == wxNOT_FOUND)
     {
-        wxTreeItemId cashFlow = m_nav_tree_ctrl->AppendItem(parent_item, _("Cash Flow"), img::PIECHART_PNG, img::PIECHART_PNG);
+        wxTreeItemId cashFlow = m_nav_tree_ctrl->AppendItem(parent_item, _t("Cash Flow"), img::PIECHART_PNG, img::PIECHART_PNG);
         m_nav_tree_ctrl->SetItemData(cashFlow, new mmTreeItemData(mmTreeItemData::MENU_REPORT, "Cash Flow"));
 
-        wxTreeItemId cashflowWithBankAccounts = m_nav_tree_ctrl->AppendItem(cashFlow, _("Daily"), img::PIECHART_PNG, img::PIECHART_PNG);
+        wxTreeItemId cashflowWithBankAccounts = m_nav_tree_ctrl->AppendItem(cashFlow, _t("Daily"), img::PIECHART_PNG, img::PIECHART_PNG);
         m_nav_tree_ctrl->SetItemData(cashflowWithBankAccounts, new mmTreeItemData("Cash Flow - Daily", new mmReportCashFlowDaily()));
 
-        wxTreeItemId cashflowWithTermAccounts = m_nav_tree_ctrl->AppendItem(cashFlow, _("Monthly"), img::PIECHART_PNG, img::PIECHART_PNG);
+        wxTreeItemId cashflowWithTermAccounts = m_nav_tree_ctrl->AppendItem(cashFlow, _t("Monthly"), img::PIECHART_PNG, img::PIECHART_PNG);
         m_nav_tree_ctrl->SetItemData(cashflowWithTermAccounts, new mmTreeItemData("Cash Flow - Monthly", new mmReportCashFlowMonthly()));
 
-        wxTreeItemId cashflowWithTransactions = m_nav_tree_ctrl->AppendItem(cashFlow, _("Transactions"), img::PIECHART_PNG, img::PIECHART_PNG);
+        wxTreeItemId cashflowWithTransactions = m_nav_tree_ctrl->AppendItem(cashFlow, _t("Transactions"), img::PIECHART_PNG, img::PIECHART_PNG);
         m_nav_tree_ctrl->SetItemData(cashflowWithTransactions, new mmTreeItemData("Cash Flow - Transactions", new mmReportCashFlowTransactions()));
     }
 
@@ -137,19 +138,19 @@
 
     if (hidden_reports.Index("Categories") == wxNOT_FOUND)
     {
-        wxTreeItemId categs = m_nav_tree_ctrl->AppendItem(parent_item, _("Categories"), img::PIECHART_PNG, img::PIECHART_PNG);
+        wxTreeItemId categs = m_nav_tree_ctrl->AppendItem(parent_item, _t("Categories"), img::PIECHART_PNG, img::PIECHART_PNG);
         m_nav_tree_ctrl->SetItemData(categs, new mmTreeItemData(mmTreeItemData::MENU_REPORT, "Categories"));
 
-        wxTreeItemId categsMonthly = m_nav_tree_ctrl->AppendItem(categs, _("Monthly"), img::PIECHART_PNG, img::PIECHART_PNG);
+        wxTreeItemId categsMonthly = m_nav_tree_ctrl->AppendItem(categs, _t("Monthly"), img::PIECHART_PNG, img::PIECHART_PNG);
         m_nav_tree_ctrl->SetItemData(categsMonthly, new mmTreeItemData("Categories Monthly", new mmReportCategoryOverTimePerformance()));
 
-        wxTreeItemId categsSummary = m_nav_tree_ctrl->AppendItem(categs, _("Summary"), img::PIECHART_PNG, img::PIECHART_PNG);
+        wxTreeItemId categsSummary = m_nav_tree_ctrl->AppendItem(categs, _t("Summary"), img::PIECHART_PNG, img::PIECHART_PNG);
         m_nav_tree_ctrl->SetItemData(categsSummary, new mmTreeItemData("Categories Summary", new  mmReportCategoryExpensesCategories()));
 
-        wxTreeItemId categsGoes = m_nav_tree_ctrl->AppendItem(categs, _("Where the Money Goes"), img::PIECHART_PNG, img::PIECHART_PNG);
+        wxTreeItemId categsGoes = m_nav_tree_ctrl->AppendItem(categs, _t("Where the Money Goes"), img::PIECHART_PNG, img::PIECHART_PNG);
         m_nav_tree_ctrl->SetItemData(categsGoes, new mmTreeItemData("Where the Money Goes", new mmReportCategoryExpensesGoes()));
 
-        wxTreeItemId categsComes = m_nav_tree_ctrl->AppendItem(categs, _("Where the Money Comes From"), img::PIECHART_PNG, img::PIECHART_PNG);
+        wxTreeItemId categsComes = m_nav_tree_ctrl->AppendItem(categs, _t("Where the Money Comes From"), img::PIECHART_PNG, img::PIECHART_PNG);
         m_nav_tree_ctrl->SetItemData(categsComes, new mmTreeItemData("Where the Money Comes From", new mmReportCategoryExpensesComes()));
     }
 
@@ -157,7 +158,7 @@
 
     if (hidden_reports.Index("Forecast Report") == wxNOT_FOUND)
     {
-        wxTreeItemId forecastReport = m_nav_tree_ctrl->AppendItem(parent_item, _("Forecast Report"), img::PIECHART_PNG, img::PIECHART_PNG);
+        wxTreeItemId forecastReport = m_nav_tree_ctrl->AppendItem(parent_item, _t("Forecast Report"), img::PIECHART_PNG, img::PIECHART_PNG);
         m_nav_tree_ctrl->SetItemData(forecastReport, new mmTreeItemData("Forecast Report", new mmReportForecast()));
     }
 
@@ -165,10 +166,10 @@
 
     if (hidden_reports.Index("Income vs Expenses") == wxNOT_FOUND)
     {
-        wxTreeItemId incexpOverTime = m_nav_tree_ctrl->AppendItem(parent_item, _("Income vs. Expenses"), img::PIECHART_PNG, img::PIECHART_PNG);
+        wxTreeItemId incexpOverTime = m_nav_tree_ctrl->AppendItem(parent_item, _t("Income vs. Expenses"), img::PIECHART_PNG, img::PIECHART_PNG);
         m_nav_tree_ctrl->SetItemData(incexpOverTime, new mmTreeItemData("Income vs Expenses", new mmReportIncomeExpenses()));
 
-        wxTreeItemId incexpMonthly = m_nav_tree_ctrl->AppendItem(incexpOverTime, _("Monthly"), img::PIECHART_PNG, img::PIECHART_PNG);
+        wxTreeItemId incexpMonthly = m_nav_tree_ctrl->AppendItem(incexpOverTime, _t("Monthly"), img::PIECHART_PNG, img::PIECHART_PNG);
         m_nav_tree_ctrl->SetItemData(incexpMonthly, new mmTreeItemData("Income vs Expenses - Monthly", new mmReportIncomeExpensesMonthly()));
     }
 
@@ -176,7 +177,7 @@
 
     if (hidden_reports.Index("My Usage") == wxNOT_FOUND)
     {
-        wxTreeItemId myusage = m_nav_tree_ctrl->AppendItem(parent_item, _("My Usage"), img::PIECHART_PNG, img::PIECHART_PNG);
+        wxTreeItemId myusage = m_nav_tree_ctrl->AppendItem(parent_item, _t("My Usage"), img::PIECHART_PNG, img::PIECHART_PNG);
         m_nav_tree_ctrl->SetItemData(myusage, new mmTreeItemData("My Usage", new mmReportMyUsage()));
     }
 
@@ -184,7 +185,7 @@
 
     if (hidden_reports.Index("Payees") == wxNOT_FOUND)
     {
-        wxTreeItemId payeesOverTime = m_nav_tree_ctrl->AppendItem(parent_item, _("Payees"), img::PIECHART_PNG, img::PIECHART_PNG);
+        wxTreeItemId payeesOverTime = m_nav_tree_ctrl->AppendItem(parent_item, _t("Payees"), img::PIECHART_PNG, img::PIECHART_PNG);
         m_nav_tree_ctrl->SetItemData(payeesOverTime, new mmTreeItemData("Payee Report", new mmReportPayeeExpenses()));
     }
 
@@ -192,13 +193,13 @@
 
     if (hidden_reports.Index("Summary of Accounts") == wxNOT_FOUND)
     {
-        wxTreeItemId reportsSummary = m_nav_tree_ctrl->AppendItem(parent_item, _("Summary of Accounts"), img::PIECHART_PNG, img::PIECHART_PNG);
+        wxTreeItemId reportsSummary = m_nav_tree_ctrl->AppendItem(parent_item, _t("Summary of Accounts"), img::PIECHART_PNG, img::PIECHART_PNG);
         m_nav_tree_ctrl->SetItemData(reportsSummary, new mmTreeItemData(mmTreeItemData::MENU_REPORT, "Summary of Accounts"));
 
-        wxTreeItemId accMonthly = m_nav_tree_ctrl->AppendItem(reportsSummary, _("Monthly"), img::PIECHART_PNG, img::PIECHART_PNG);
+        wxTreeItemId accMonthly = m_nav_tree_ctrl->AppendItem(reportsSummary, _t("Monthly"), img::PIECHART_PNG, img::PIECHART_PNG);
         m_nav_tree_ctrl->SetItemData(accMonthly, new mmTreeItemData("Monthly Summary of Accounts", new mmReportSummaryByDateMontly()));
 
-        wxTreeItemId accYearly = m_nav_tree_ctrl->AppendItem(reportsSummary, _("Yearly"), img::PIECHART_PNG, img::PIECHART_PNG);
+        wxTreeItemId accYearly = m_nav_tree_ctrl->AppendItem(reportsSummary, _t("Yearly"), img::PIECHART_PNG, img::PIECHART_PNG);
         m_nav_tree_ctrl->SetItemData(accYearly, new mmTreeItemData("Yearly Summary of Accounts", new mmReportSummaryByDateYearly()));
     }
 
@@ -209,28 +210,28 @@
     {
         if (hidden_reports.Index("Budgets") == wxNOT_FOUND)
         {
-            wxTreeItemId budgetReports = m_nav_tree_ctrl->AppendItem(parent_item, _("Budgets"), img::PIECHART_PNG, img::PIECHART_PNG);
+            wxTreeItemId budgetReports = m_nav_tree_ctrl->AppendItem(parent_item, _t("Budgets"), img::PIECHART_PNG, img::PIECHART_PNG);
             m_nav_tree_ctrl->SetItemData(budgetReports, new mmTreeItemData(mmTreeItemData::MENU_REPORT, "Budgets"));
 
-            wxTreeItemId budgetPerformance = m_nav_tree_ctrl->AppendItem(budgetReports, _("Budget Performance"), img::PIECHART_PNG, img::PIECHART_PNG);
+            wxTreeItemId budgetPerformance = m_nav_tree_ctrl->AppendItem(budgetReports, _t("Budget Performance"), img::PIECHART_PNG, img::PIECHART_PNG);
             m_nav_tree_ctrl->SetItemData(budgetPerformance, new mmTreeItemData("Budget Performance", new mmReportBudgetingPerformance()));
 
-            wxTreeItemId budgetSetupPerformance = m_nav_tree_ctrl->AppendItem(budgetReports, _("Budget Category Summary"), img::PIECHART_PNG, img::PIECHART_PNG);
+            wxTreeItemId budgetSetupPerformance = m_nav_tree_ctrl->AppendItem(budgetReports, _t("Budget Category Summary"), img::PIECHART_PNG, img::PIECHART_PNG);
             m_nav_tree_ctrl->SetItemData(budgetSetupPerformance, new mmTreeItemData("Budget Category Summary", new mmReportBudgetCategorySummary()));
         }
     }
 
     ///////////////////////////////////////////////////////////////////
 
-    Model_Account::Data_Set investments_account = Model_Account::instance().find(Model_Account::ACCOUNTTYPE(Model_Account::TYPE_STR_INVESTMENT, EQUAL));
+    Model_Account::Data_Set investments_account = Model_Account::instance().find(Model_Account::ACCOUNTTYPE(Model_Account::TYPE_NAME_INVESTMENT, EQUAL));
     if (!investments_account.empty())
     {
         if (hidden_reports.Index("Stocks Report") == wxNOT_FOUND)
         {
-            wxTreeItemId stocksReport = m_nav_tree_ctrl->AppendItem(parent_item, _("Stocks Report"), img::PIECHART_PNG, img::PIECHART_PNG);
+            wxTreeItemId stocksReport = m_nav_tree_ctrl->AppendItem(parent_item, _t("Stocks Report"), img::PIECHART_PNG, img::PIECHART_PNG);
             m_nav_tree_ctrl->SetItemData(stocksReport, new mmTreeItemData("Stocks Report", new mmReportChartStocks()));
 
-            wxTreeItemId stocksReportSummary = m_nav_tree_ctrl->AppendItem(stocksReport, _("Summary"), img::PIECHART_PNG, img::PIECHART_PNG);
+            wxTreeItemId stocksReportSummary = m_nav_tree_ctrl->AppendItem(stocksReport, _t("Summary"), img::PIECHART_PNG, img::PIECHART_PNG);
             m_nav_tree_ctrl->SetItemData(stocksReportSummary, new mmTreeItemData("Summary of Stocks", new mmReportSummaryStocks()));
         }
     }
@@ -267,7 +268,7 @@
 void mmGUIFrame::DoUpdateFilterNavigation(wxTreeItemId& parent_item)
 {
 
-    wxArrayString filter_settings = Model_Infotable::instance().GetArrayStringSetting("TRANSACTIONS_FILTER", true);
+    wxArrayString filter_settings = Model_Infotable::instance().getArrayString("TRANSACTIONS_FILTER", true);
     for (const auto& data : filter_settings)
     {
         Document j_doc;
@@ -300,7 +301,7 @@
         "Stocks Report",
     };
 
-    wxArrayString stored_items = Model_Infotable::instance().GetArrayStringSetting("HIDDEN_REPORTS");
+    wxArrayString stored_items = Model_Infotable::instance().getArrayString("HIDDEN_REPORTS");
     wxArrayInt hidden_reports;
     wxArrayString reports_name;
     wxArrayString reports_name_i10n;
@@ -313,17 +314,17 @@
         }
     }
 
-    mmMultiChoiceDialog reports(this, _("Hide"), _("Reports"), reports_name_i10n);
+    mmMultiChoiceDialog reports(this, _t("Hide"), _t("Reports"), reports_name_i10n);
     reports.SetSelections(hidden_reports);
 
     if (reports.ShowModal() == wxID_OK)
     {
-        Model_Infotable::instance().Set("HIDDEN_REPORTS", "[]");
+        Model_Infotable::instance().setString("HIDDEN_REPORTS", "[]");
         const auto sel = reports.GetSelections();
         for (const auto& i : sel)
         {
             const auto& report_name = reports_name[i];
-            Model_Infotable::instance().Prepend("HIDDEN_REPORTS", report_name, -1);
+            Model_Infotable::instance().prependArrayItem("HIDDEN_REPORTS", report_name, -1);
         }
     }
     DoRecreateNavTreeControl();
diff -Naur a/src/mmhelppanel.cpp b/src/mmhelppanel.cpp
--- a/src/mmhelppanel.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmhelppanel.cpp	2025-07-09 01:46:59.656940555 +0200
@@ -62,11 +62,11 @@
     wxBoxSizer* itemBoxSizerHeader = new wxBoxSizer(wxHORIZONTAL);
     itemPanel3->SetSizer(itemBoxSizerHeader);
 
-    wxButton* buttonBack = new wxButton(itemPanel3, wxID_BACKWARD, _("&Back"));
-    wxButton* buttonFordward = new wxButton(itemPanel3, wxID_FORWARD, _("&Forward"));
+    wxButton* buttonBack = new wxButton(itemPanel3, wxID_BACKWARD, _t("&Back"));
+    wxButton* buttonFordward = new wxButton(itemPanel3, wxID_FORWARD, _t("&Forward"));
 
     wxStaticText* itemStaticText9 = new wxStaticText(itemPanel3, wxID_ANY
-        , mmex::getCaption(_("Help")));
+        , mmex::getCaption(_t("Help")));
     itemStaticText9->SetFont(this->GetFont().Larger().Bold());
 
     itemBoxSizerHeader->Add(buttonBack, 0, wxLEFT, 5);
@@ -93,7 +93,7 @@
     itemBoxSizer2->Add(browser_, 1, wxGROW | wxALL, 1);
 }
 
-void mmHelpPanel::sortTable()
+void mmHelpPanel::sortList()
 {
 }
 
diff -Naur a/src/mmhelppanel.h b/src/mmhelppanel.h
--- a/src/mmhelppanel.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmhelppanel.h	2025-07-09 01:46:59.656940555 +0200
@@ -53,7 +53,7 @@
         , const wxString& name = "mmHelpPanel");
 
     void CreateControls();
-    virtual void sortTable();
+    virtual void sortList();
 
     void OnHelpPageBack(wxCommandEvent& event);
     void OnHelpPageForward(wxCommandEvent& event);
diff -Naur a/src/mmhomepage.cpp b/src/mmhomepage.cpp
--- a/src/mmhomepage.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmhomepage.cpp	2025-07-09 01:46:59.656940555 +0200
@@ -17,14 +17,15 @@
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  ********************************************************/
 
+#include <algorithm>
+#include <cmath>
 #include "mmhomepage.h"
 #include "html_template.h"
 #include "billsdepositspanel.h"
 #include "option.h"
 #include "optionsettingshome.h"
 #include "constants.h"
-#include <algorithm>
-#include <cmath>
+#include "reports/reportbase.h"
 
 #include "model/Model_Stock.h"
 #include "model/Model_StockHistory.h"
@@ -59,9 +60,8 @@
 
 
 htmlWidgetStocks::htmlWidgetStocks()
-    : title_(_("Stocks"))
+    : title_(_t("Stocks"))
 {
-    grand_gain_lost_ = 0.0;
     grand_total_ = 0.0;
 }
 
@@ -71,43 +71,67 @@
 
 const wxString htmlWidgetStocks::getHTMLText()
 {
+    double grand_gain_lost    = 0;
+    double grand_market_value = 0;  // Track the grand total of market values
+    double grand_cash_balance = 0;  // Track the grand total of cash balances
+    const wxDate today = wxDate::Today();
+
     wxString output = "";
-    std::map<int64, std::pair<double, double> > stockStats;
-    calculate_stats(stockStats);
-    if (!stockStats.empty())
+    const auto &accounts = Model_Account::instance().find(Model_Account::ACCOUNTTYPE(Model_Account::TYPE_NAME_INVESTMENT, EQUAL));
+    if (!accounts.empty())
     {
         output = R"(<div class="shadow">)";
-        output += "<table class ='sortable table'><col style='width: 50%'><col style='width: 25%'><col style='width: 25%'><thead><tr class='active'><th>\n";
-        output += _("Stocks") + "</th><th class = 'text-right'>" + _("Gain/Loss");
-        output += "</th>\n<th class='text-right'>" + _("Total") + "</th>\n";
+        output += "<table class ='sortable table'><col style='width: 50%'><col style='width: 12.5%'><col style='width: 12.5%'><col style='width: 12.5%'><col style='width: 12.5%'><thead><tr class='active'><th>\n";
+        output += _t("Stocks") + "</th><th class = 'text-right'>" + _t("Gain/Loss") + "</th>\n";
+        output += "<th class='text-right'>" + _t("Market Value") + "</th>\n";
+        output += "<th class='text-right'>" + _t("Cash Balance") + "</th>\n";
+        output += "<th class='text-right'>" + _t("Total") + "</th>\n";
         output += wxString::Format("<th nowrap class='text-right sorttable_nosort'><a id='%s_label' onclick='toggleTable(\"%s\");' href='#%s' oncontextmenu='return false;'>[-]</a></th>\n"
             , "INVEST", "INVEST", "INVEST");
         output += "</tr></thead><tbody id='INVEST'>\n";
-        const auto &accounts = Model_Account::instance().all(Model_Account::COL_ACCOUNTNAME);
         wxString body = "";
         for (const auto& account : accounts)
         {
-            if (Model_Account::type_id(account) != Model_Account::TYPE_ID_INVESTMENT) continue;
             if (Model_Account::status_id(account) != Model_Account::STATUS_ID_OPEN) continue;
+            
+            double conv_rate = Model_CurrencyHistory::getDayRate(account.CURRENCYID, today);
+            auto inv_bal = Model_Account::investment_balance(account);
+            double cash_bal = Model_Account::balance(account);
+    
+            grand_gain_lost    += (inv_bal.first - inv_bal.second) * conv_rate;
+            grand_market_value += inv_bal.first * conv_rate;
+            grand_cash_balance += cash_bal * conv_rate;
+            grand_total_       += (inv_bal.first + cash_bal) * conv_rate; 
+
             body += "<tr>";
             body += wxString::Format("<td sorttable_customkey='*%s*'><a href='stock:%lld' oncontextmenu='return false;' target='_blank'>%s</a>%s</td>\n"
                 , account.ACCOUNTNAME, account.ACCOUNTID, account.ACCOUNTNAME,
                 account.WEBSITE.empty() ? "" : wxString::Format("&nbsp;&nbsp;&nbsp;&nbsp;(<a href='%s' oncontextmenu='return false;' target='_blank'>WWW</a>)", account.WEBSITE));
             body += wxString::Format("<td class='money' sorttable_customkey='%f'>%s</td>\n"
-                , stockStats[account.ACCOUNTID].first
-                , Model_Account::toCurrency(stockStats[account.ACCOUNTID].first, &account));
+                , inv_bal.first - inv_bal.second
+                , Model_Account::toCurrency(inv_bal.first - inv_bal.second, &account));
+            body += wxString::Format("<td class='money' sorttable_customkey='%f'>%s</td>\n"
+                , inv_bal.first
+                , Model_Account::toCurrency(inv_bal.first, &account));
+            body += wxString::Format("<td class='money' sorttable_customkey='%f'>%s</td>\n"
+                , cash_bal
+                , Model_Account::toCurrency(cash_bal, &account));
             body += wxString::Format("<td colspan='2' class='money' sorttable_customkey='%f'>%s</td>"
-                , stockStats[account.ACCOUNTID].second
-                , Model_Account::toCurrency(stockStats[account.ACCOUNTID].second, &account));
+                , inv_bal.first + cash_bal
+                , Model_Account::toCurrency(inv_bal.first + cash_bal, &account));
             body += "</tr>";
         }
 
         if (!body.empty())
         {
             output += body;
-            output += "</tbody><tfoot><tr class = 'total'><td>" + _("Total:") + "</td>";
+            output += "</tbody><tfoot><tr class = 'total'><td>" + _t("Total:") + "</td>";
             output += wxString::Format("<td class='money'>%s</td>"
-                , Model_Currency::toCurrency(grand_gain_lost_));
+                , Model_Currency::toCurrency(grand_gain_lost));
+            output += wxString::Format("<td class='money'>%s</td>"
+                , Model_Currency::toCurrency(grand_market_value));
+            output += wxString::Format("<td class='money'>%s</td>"
+                , Model_Currency::toCurrency(grand_cash_balance));
             output += wxString::Format("<td colspan='2' class='money'>%s</td></tr></tfoot></table>\n"
                 , Model_Currency::toCurrency(grand_total_));
             output += "</div>";
@@ -116,50 +140,18 @@
     return output;
 }
 
-void htmlWidgetStocks::calculate_stats(std::map<int64, std::pair<double, double> > &stockStats)
-{
-    this->grand_total_ = 0;
-    this->grand_gain_lost_ = 0;
-    const auto &stocks = Model_Stock::instance().all();
-    const wxDate today = wxDate::Today();
-    for (const auto& stock : stocks)
-    {
-        double conv_rate = 1;
-        Model_Account::Data *account = Model_Account::instance().get(stock.HELDAT);
-        if (account)
-        {
-            conv_rate = Model_CurrencyHistory::getDayRate(account->CURRENCYID, today);
-        }
-        std::pair<double, double>& values = stockStats[stock.HELDAT];
-        double current_value = Model_Stock::CurrentValue(stock);
-        double gain_lost = current_value - Model_Stock::InvestmentValue(stock);
-        values.first += gain_lost;
-        values.second += current_value;
-        if (account && account->STATUS == VIEW_ACCOUNTS_OPEN_STR)
-        {
-            grand_total_ += current_value * conv_rate;
-            grand_gain_lost_ += Model_Stock::UnrealGainLoss(stock, true);
-        }
-    }
-}
-
 double htmlWidgetStocks::get_total()
 {
     return grand_total_;
 }
 
-double htmlWidgetStocks::get_total_gein_lost()
-{
-    return grand_gain_lost_;
-}
-
 ////////////////////////////////////////////////////////
 
 
 htmlWidgetTop7Categories::htmlWidgetTop7Categories()
 {
     date_range_ = new mmLast30Days();
-    title_ = wxString::Format(_("Top Withdrawals: %s"), date_range_->local_title());
+    title_ = wxString::Format(_t("Top Withdrawals: %s"), date_range_->local_title());
 }
 
 htmlWidgetTop7Categories::~htmlWidgetTop7Categories()
@@ -187,7 +179,7 @@
             data += "</tr>\n";
         }
         const wxString idStr = "TOP_CATEGORIES";
-        output += wxString::Format(TOP_CATEGS, title_, idStr, idStr, idStr, idStr, _("Category"), _("Summary"), data);
+        output += wxString::Format(TOP_CATEGS, title_, idStr, idStr, idStr, idStr, _t("Category"), _t("Summary"), data);
         output += "</div>";
     }
 
@@ -215,11 +207,9 @@
             continue;
 
         bool withdrawal = Model_Checking::type_id(trx) == Model_Checking::TYPE_ID_WITHDRAWAL;
-        const auto it = split.find(trx.TRANSID);
-
         double convRate = Model_CurrencyHistory::getDayRate(Model_Account::instance().get(trx.ACCOUNTID)->CURRENCYID, trx.TRANSDATE);
 
-        if (it == split.end())
+        if (const auto it = split.find(trx.TRANSID); it == split.end())
         {
             int64 category = trx.CATEGID;
             if (withdrawal)
@@ -350,7 +340,7 @@
 
         output += wxString::Format("<table class='table' id='%s'>\n", idStr);
         output += wxString::Format("<thead><tr><th>%s</th>\n<th class='text-right'>%s</th>\n<th class='text-right'>%s</th></tr></thead>\n"
-            , _("Account/Payee"), _("Amount"), _("Payment"));
+            , _t("Account/Payee"), _t("Amount"), _t("Payment"));
 
         for (const auto& item : bd_days)
         {
@@ -420,25 +410,25 @@
     PrettyWriter<StringBuffer> json_writer(json_buffer);
     json_writer.StartObject();
     json_writer.Key("0");
-    json_writer.String(wxString::Format(_("Income vs. Expenses: %s"), date_range.get()->local_title()).utf8_str());
+    json_writer.String(wxString::Format(_t("Income vs. Expenses: %s"), date_range.get()->local_title()).utf8_str());
     json_writer.Key("1");
-    json_writer.String(_("Type").utf8_str());
+    json_writer.String(_t("Type").utf8_str());
     json_writer.Key("2");
-    json_writer.String(_("Amount").utf8_str());
+    json_writer.String(_t("Amount").utf8_str());
     json_writer.Key("3");
-    json_writer.String(_("Income").utf8_str());
+    json_writer.String(_t("Income").utf8_str());
     json_writer.Key("4");
     json_writer.String(Model_Currency::toCurrency(tIncome).utf8_str());
     json_writer.Key("5");
-    json_writer.String(_("Expenses").utf8_str());
+    json_writer.String(_t("Expenses").utf8_str());
     json_writer.Key("6");
     json_writer.String(Model_Currency::toCurrency(tExpenses).utf8_str());
     json_writer.Key("7");
-    json_writer.String(_("Difference:").utf8_str());
+    json_writer.String(_t("Difference:").utf8_str());
     json_writer.Key("8");
     json_writer.String(Model_Currency::toCurrency(tIncome - tExpenses).utf8_str());
     json_writer.Key("9");
-    json_writer.String(_("Income/Expenses").utf8_str());
+    json_writer.String(_t("Income/Expenses").utf8_str());
     json_writer.Key("10");
     json_writer.String(wxString::FromCDouble(tIncome, 2).utf8_str());
     json_writer.Key("11");
@@ -462,7 +452,7 @@
     json_writer.StartObject();
 
     json_writer.Key("NAME");
-    json_writer.String(_("Transaction Statistics").utf8_str());
+    json_writer.String(_t("Transaction Statistics").utf8_str());
 
     wxSharedPtr<mmDateRange> date_range;
     if (Option::instance().getIgnoreFutureTransactions())
@@ -509,11 +499,11 @@
 
     if (countFollowUp > 0)
     {
-        json_writer.Key(_("Follow Up On Transactions: ").utf8_str());
+        json_writer.Key(_t("Follow Up On Transactions: ").utf8_str());
         json_writer.Double(countFollowUp);
     }
 
-    json_writer.Key(_("Total Transactions: ").utf8_str());
+    json_writer.Key(_t("Total Transactions: ").utf8_str());
     json_writer.Int(total_transactions);
     json_writer.EndObject();
 
@@ -531,23 +521,23 @@
 {
 
     const wxString tReconciledStr  = wxString::Format("%s: <span class='money'>%s</span>"
-                                        , _("Reconciled")
+                                        , _t("Reconciled")
                                         , Model_Currency::toCurrency(tReconciled));
     const wxString tAssetStr  = wxString::Format("%s: <span class='money'>%s</span>"
-                                        , _("Assets")
+                                        , _t("Assets")
                                         , Model_Currency::toCurrency(tAssets));
     const wxString tStockStr  = wxString::Format("%s: <span class='money'>%s</span>"
-                                        , _("Stock")
+                                        , _t("Stock")
                                         , Model_Currency::toCurrency(tStocks));
     const wxString tBalanceStr  = wxString::Format("%s: <span class='money'>%s</span>"
-                                        , _("Balance")
+                                        , _t("Balance")
                                         , Model_Currency::toCurrency(tBalance));
 
     StringBuffer json_buffer;
     PrettyWriter<StringBuffer> json_writer(json_buffer);
     json_writer.StartObject();
     json_writer.Key("NAME");
-    json_writer.String(_("Total Net Worth").utf8_str());
+    json_writer.String(_t("Total Net Worth").utf8_str());
     json_writer.Key("RECONVALUE");
     json_writer.String(tReconciledStr.utf8_str());
     json_writer.Key("ASSETVALUE");
@@ -572,67 +562,79 @@
 
 const wxString htmlWidgetAssets::getHTMLText()
 {
-    Model_Asset::Data_Set assets = Model_Asset::instance().all();
-    if (assets.empty())
+    Model_Account::Data_Set asset_accounts = Model_Account::instance().find(Model_Account::ACCOUNTTYPE(Model_Account::TYPE_NAME_ASSET));
+    if (asset_accounts.empty())
         return wxEmptyString;
-    std::stable_sort(assets.begin(), assets.end(), SorterByVALUE());
-    std::reverse(assets.begin(), assets.end());
+
+    std::stable_sort(asset_accounts.begin(), asset_accounts.end(), SorterByACCOUNTNAME());
 
     static const int MAX_ASSETS = 10;
-    wxString output = "";
-    output = R"(<div class="shadow">)";
-    output += "<table class ='sortable table'><col style='width: 50%'><col style='width: 25%'><col style='width: 25%'><thead><tr class='active'>\n";
-    output += "<th>" + _("Assets") + "</th>";
-    output += "<th class='text-right'>" + _("Initial Value") + "</th>\n";
-    output += "<th class='text-right'>" + _("Current Value") + "</th>\n";
-    output += wxString::Format("<th nowrap class='text-right sorttable_nosort'><a id='%s_label' onclick='toggleTable(\"%s\");' href='#%s' oncontextmenu='return false;'>[-]</a></th>\n"
-        , "ASSETS", "ASSETS", "ASSETS");
-    output += "</tr></thead><tbody id='ASSETS'>\n";
+    wxString output;
+    output << R"(<div class="shadow">)"
+           << R"(<table class='sortable table'><col style='width: 50%'><col style='width: 12.5%'><col style='width: 12.5%'><col style='width: 12.5%'><col style='width: 12.5%'>)"
+           << "<thead><tr class='active'>\n"
+           << "<th>" << _t("Assets") << "</th>"
+           << "<th class='text-right'>" << _t("Initial Value") << "</th>\n"
+           << "<th class='text-right'>" << _t("Current Value") << "</th>\n"
+           << "<th class='text-right'>" << _t("Cash Balance") << "</th>\n"
+           << "<th class='text-right'>" << _t("Total") << "</th>\n"
+           << wxString::Format("<th nowrap class='text-right sorttable_nosort'><a id='%s_label' onclick='toggleTable(\"%s\");' href='#%s' oncontextmenu='return false;'>[-]</a></th>\n",
+                               "ASSETS", "ASSETS", "ASSETS")
+           << "</tr></thead><tbody id='ASSETS'>\n";
 
     int rows = 0;
-    double initialDisplayed = 0.0;
-    double initialTotal = 0.0;
-    double currentDisplayed = 0.0;
-    double currentTotal = 0.0;
-    for (const auto& asset : assets)
+    double initialDisplayed = 0.0, initialTotal = 0.0;
+    double currentDisplayed = 0.0, currentTotal = 0.0;
+    double cashDisplayed = 0.0, cashTotal = 0.0;
+
+    auto renderRow = [](const wxString& name, double initial, double current, double cash) -> wxString {
+        wxString row;
+        row << "<tr>";
+        row << wxString::Format("<td sorttable_customkey='*%s*'>%s</td>\n", name, name);
+        row << wxString::Format("<td class='money' sorttable_customkey='%.2f'>%s</td>\n", initial, Model_Currency::toCurrency(initial));
+        row << wxString::Format("<td class='money' sorttable_customkey='%.2f'>%s</td>\n", current, Model_Currency::toCurrency(current));
+        row << wxString::Format("<td class='money' sorttable_customkey='%.2f'>%s</td>\n", cash, Model_Currency::toCurrency(cash));
+        row << wxString::Format("<td colspan='2' class='money' sorttable_customkey='%.2f'>%s</td>\n", current + cash, Model_Currency::toCurrency(current + cash));
+        row << "</tr>\n";
+        return row;
+    };
+
+    for (const auto& asset : asset_accounts)
     {
-        double initial = Model_Asset::instance().valueAtDate(&asset, Model_Asset::STARTDATE(asset));
-        double current = Model_Asset::value(asset);
+        double cash = Model_Account::balance(asset);
+        auto inv = Model_Account::investment_balance(asset);
+        double current = inv.first;
+        double initial = inv.second;
+
         initialTotal += initial;
         currentTotal += current;
+        cashTotal += cash;
+
         if (rows++ < MAX_ASSETS)
         {
             initialDisplayed += initial;
             currentDisplayed += current;
-            output += "<tr>";
-            output += wxString::Format("<td sorttable_customkey='*%s*'>%s</td>\n"
-                , asset.ASSETNAME, asset.ASSETNAME);
-            output += wxString::Format("<td class='money' sorttable_customkey='%f'>%s</td>\n"
-                , initial, Model_Currency::toCurrency(initial));
-            output += wxString::Format("<td colspan='2' class='money' sorttable_customkey='%f'>%s</td>\n"
-                , current, Model_Currency::toCurrency(current));
-            output += "</tr>";
+            cashDisplayed += cash;
+            output << renderRow(asset.ACCOUNTNAME, initial, current, cash);
         }
     }
+
     if (rows > MAX_ASSETS)
-    {       
-            output += "<tr>";
-            output += wxString::Format("<td sorttable_customkey='*%s*'>%s (%i)</td>\n"
-                , _("Other Assets"), _("Other Assets"), rows - MAX_ASSETS);
-            output += wxString::Format("<td class='money' sorttable_customkey='%f'>%s</td>\n"
-                , initialTotal - initialDisplayed, Model_Currency::toCurrency(initialTotal - initialDisplayed));
-            output += wxString::Format("<td colspan='2' class='money' sorttable_customkey='%f'>%s</td>\n"
-                , currentTotal - currentDisplayed, Model_Currency::toCurrency(currentTotal - currentDisplayed));
-            output += "</tr>";
-    }
-
-    output += "</tbody><tfoot><tr class = 'total'><td>" + _("Total:") + "</td>";
-    output += wxString::Format("<td class='money'>%s</td>\n"
-        , Model_Currency::toCurrency(initialTotal));
-    output += wxString::Format("<td colspan='2' class='money'>%s</td></tr></tfoot></table>\n"
-        , Model_Currency::toCurrency(currentTotal));
+    {
+        wxString otherAssets = _t("Other Assets");
+        output << renderRow(wxString::Format("%s (%d)", otherAssets, rows - MAX_ASSETS),
+                            initialTotal - initialDisplayed,
+                            currentTotal - currentDisplayed,
+                            cashTotal - cashDisplayed);
+    }
 
-    output += "</div>";
+    output << "<tfoot><tr class='total'><td>" << _t("Total:") << "</td>\n"
+           << wxString::Format("<td class='money'>%s</td>\n", Model_Currency::toCurrency(initialTotal))
+           << wxString::Format("<td class='money'>%s</td>\n", Model_Currency::toCurrency(currentTotal))
+           << wxString::Format("<td class='money'>%s</td>\n", Model_Currency::toCurrency(cashTotal))
+           << wxString::Format("<td colspan='2' class='money'>%s</td></tr></tfoot></table>\n",
+                               Model_Currency::toCurrency(currentTotal + cashTotal))
+           << "</div>";
 
     return output;
 }
@@ -686,14 +688,14 @@
 {
     static const std::vector < std::pair <wxString, wxString> > typeStr
     {
-        { "CASH_ACCOUNTS_INFO",   _("Cash Accounts") },
-        { "ACCOUNTS_INFO",        _("Bank Accounts") },
-        { "CARD_ACCOUNTS_INFO",   _("Credit Card Accounts") },
-        { "LOAN_ACCOUNTS_INFO",   _("Loan Accounts") },
-        { "TERM_ACCOUNTS_INFO",   _("Term Accounts") },
-        { "INVEST_ACCOUNTS_INFO", _("Investment Accounts") },
-        { "ASSET_ACCOUNTS_INFO",  _("Asset Accounts") },
-        { "SHARE_ACCOUNTS_INFO",  _("Share Accounts") },
+        { "CASH_ACCOUNTS_INFO",   _t("Cash Accounts") },
+        { "ACCOUNTS_INFO",        _t("Bank Accounts") },
+        { "CARD_ACCOUNTS_INFO",   _t("Credit Card Accounts") },
+        { "LOAN_ACCOUNTS_INFO",   _t("Loan Accounts") },
+        { "TERM_ACCOUNTS_INFO",   _t("Term Accounts") },
+        { "INVEST_ACCOUNTS_INFO", _t("Investment Accounts") },
+        { "ASSET_ACCOUNTS_INFO",  _t("Asset Accounts") },
+        { "SHARE_ACCOUNTS_INFO",  _t("Share Accounts") },
     };
 
     const wxString idStr = typeStr[type].first;
@@ -702,8 +704,8 @@
     output += "<thead><tr><th nowrap>\n";
     output += typeStr[type].second;
 
-    output += "</th><th class = 'text-right'>" + _("Reconciled") + "</th>\n";
-    output += "<th class = 'text-right'>" + _("Balance") + "</th>\n";
+    output += "</th><th class = 'text-right'>" + _t("Reconciled") + "</th>\n";
+    output += "<th class = 'text-right'>" + _t("Balance") + "</th>\n";
     output += wxString::Format("<th nowrap class='text-right sorttable_nosort'><a id='%s_label' onclick=\"toggleTable('%s'); \" href='#%s' oncontextmenu='return false;'>[-]</a></th>\n"
         , idStr, idStr, idStr);
     output += "</tr></thead>\n";
@@ -711,10 +713,11 @@
 
     wxString body = "";
     const wxDate today = wxDate::Today();
-    wxString vAccts = Model_Setting::instance().GetViewAccounts();
+    wxString vAccts = Model_Setting::instance().getViewAccounts();
     auto accounts = Model_Account::instance().find(
-        Model_Account::ACCOUNTTYPE(Model_Account::TYPE_STR[type])
-        , Model_Account::STATUS(Model_Account::STATUS_ID_CLOSED, NOT_EQUAL));
+        Model_Account::ACCOUNTTYPE(Model_Account::type_name(type)),
+        Model_Account::STATUS(Model_Account::STATUS_ID_CLOSED, NOT_EQUAL)
+    );
     std::stable_sort(accounts.begin(), accounts.end(), SorterByACCOUNTNAME());
     for (const auto& account : accounts)
     {
@@ -741,7 +744,7 @@
         }
     }
     output += body;
-    output += "</tbody><tfoot><tr class ='total'><td>" + _("Total:") + "</td>\n";
+    output += "</tbody><tfoot><tr class ='total'><td>" + _t("Total:") + "</td>\n";
     output += "<td class='money'>" + Model_Currency::toCurrency(tReconciled) + "</td>\n";
     output += "<td class='money' colspan='2'>" + Model_Currency::toCurrency(tBalance) + "</td></tr></tfoot></table>\n";
     if (body.empty()) output.clear();
@@ -789,7 +792,6 @@
 
 
     const wxString today = wxDate::Today().FormatISODate();
-    const wxString baseCurrencySymbol = Model_Currency::GetBaseCurrency()->CURRENCY_SYMBOL;
     std::map<wxString, double> usedRates;
     const auto currencies = Model_Currency::instance().all();
 
@@ -832,7 +834,7 @@
     }
     mm_html_template report(currencyRatesTemplate);
     report(L"CONTENTS") = contents;
-    report(L"FRAME_NAME") = _("Currency Exchange Rates");
+    report(L"FRAME_NAME") = _t("Currency Exchange Rates");
     report(L"HEADER") = header;
 
     wxString out = wxEmptyString;
@@ -846,7 +848,7 @@
     }
     catch (...)
     {
-        return _("Caught exception");
+        return _t("Caught exception");
     }
 
     return out;
diff -Naur a/src/mmhomepage.h b/src/mmhomepage.h
--- a/src/mmhomepage.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmhomepage.h	2025-07-09 01:46:59.656940555 +0200
@@ -31,7 +31,6 @@
     ~htmlWidgetStocks();
     htmlWidgetStocks();
     double get_total();
-    double get_total_gein_lost();
 
     const wxString getHTMLText();
 
@@ -39,8 +38,6 @@
 
     wxString title_;
     double grand_total_;
-    double grand_gain_lost_;
-    void calculate_stats(std::map<int64, std::pair<double, double> > &stockStats);
 };
 
 class htmlWidgetTop7Categories
diff -Naur a/src/mmhomepagepanel.cpp b/src/mmhomepagepanel.cpp
--- a/src/mmhomepagepanel.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmhomepagepanel.cpp	2025-07-09 01:46:59.656940555 +0200
@@ -129,7 +129,21 @@
 
 void mmHomePagePanel::insertDataIntoTemplate()
 {
-    m_frames["HTMLSCALE"] = wxString::Format("%d", Option::instance().getHtmlFontSize());
+    m_frames["HTMLSCALE"] = wxString::Format("%d", Option::instance().getHtmlScale());
+
+    // Get curreny details to pass to report for Apexcharts
+    int64 baseCurrencyID = Option::instance().getBaseCurrencyID();
+    Model_Currency::Data* baseCurrency = Model_Currency::instance().get(baseCurrencyID);
+
+    // Get locale to pass to reports for Apexcharts
+    wxString locale = Model_Infotable::instance().getString("LOCALE", "en-US"); // Stay blank of not set, currency override handled in Apexcharts call.
+    wxString adjustedLocale = locale;
+    if (adjustedLocale == "")
+    {
+        adjustedLocale = "en-US";
+    }
+    adjustedLocale.Replace("_", "-");
+    m_frames["LOCALE"] = adjustedLocale;
 
     double tBalance = 0.0, tReconciled = 0.0;
     double cardBalance = 0.0, cardReconciled = 0.0;
@@ -185,8 +199,14 @@
     m_frames["INCOME_VS_EXPENSES_FORECOLOR"] = mmThemeMetaString(meta::COLOR_REPORT_FORECOLOR);
     m_frames["INCOME_VS_EXPENSES_COLORS"] = wxString::Format("'%s', '%s'", mmThemeMetaString(meta::COLOR_REPORT_CREDIT)
                                                 , mmThemeMetaString(meta::COLOR_REPORT_DEBIT));
+    m_frames["INCOME_VS_EXPENSES_CURR_PFX_SYMBOL"] = baseCurrency ? baseCurrency->PFX_SYMBOL : "$";
+    m_frames["INCOME_VS_EXPENSES_CURR_SFX_SYMBOL"] = baseCurrency ? baseCurrency->SFX_SYMBOL : "";
+    m_frames["INCOME_VS_EXPENSES_CURR_GROUP_SEPARATOR"] = baseCurrency ? baseCurrency->GROUP_SEPARATOR : ",";
+    m_frames["INCOME_VS_EXPENSES_CURR_DECIMAL_POINT"] = baseCurrency ? baseCurrency->DECIMAL_POINT : ".";
+    m_frames["INCOME_VS_EXPENSES_CURR_SCALE"] = baseCurrency ? wxString::Format("%d", static_cast<int>(log10(baseCurrency->SCALE.GetValue()))) : "";
+
 
-    htmlWidgetBillsAndDeposits bills_and_deposits(_("Upcoming Transactions"));
+    htmlWidgetBillsAndDeposits bills_and_deposits(_t("Upcoming Transactions"));
     m_frames["BILLS_AND_DEPOSITS"] = bills_and_deposits.getHTMLText();
 
     htmlWidgetTop7Categories top_trx;
@@ -202,7 +222,7 @@
 
 const wxString mmHomePagePanel::getToggles()
 {
-    const wxString json = Model_Infotable::instance().GetStringInfo("HOME_PAGE_STATUS", "{}");
+    const wxString json = Model_Infotable::instance().getString("HOME_PAGE_STATUS", "{}");
     return json;
 }
 
@@ -234,13 +254,13 @@
     }
     else if (uri.StartsWith("assets:", &sData))
     {
-        m_frame->setNavTreeSection(_("Assets"));
+        m_frame->setNavTreeSection(_t("Assets"));
         wxCommandEvent event(wxEVT_COMMAND_MENU_SELECTED, MENU_ASSETS);
         m_frame->GetEventHandler()->AddPendingEvent(event);
     }
     else if (uri.StartsWith("billsdeposits:", &sData))
     {
-        m_frame->setNavTreeSection(_("Scheduled Transactions"));
+        m_frame->setNavTreeSection(_t("Scheduled Transactions"));
         wxCommandEvent event(wxEVT_COMMAND_MENU_SELECTED, MENU_BILLSDEPOSITS);
         m_frame->GetEventHandler()->AddPendingEvent(event);
     }
@@ -249,7 +269,8 @@
         wxLongLong_t id = -1;
         sData.ToLongLong(&id);
         const Model_Account::Data* account = Model_Account::instance().get(id);
-        if (account) {
+        if (account)
+        {
             m_frame->setGotoAccountID(account->id());
             m_frame->setNavTreeAccount(account->ACCOUNTNAME);
             wxCommandEvent event(wxEVT_COMMAND_MENU_SELECTED, MENU_GOTOACCOUNT);
@@ -261,7 +282,8 @@
         wxLongLong_t id = -1;
         sData.ToLongLong(&id);
         const Model_Account::Data* account = Model_Account::instance().get(id);
-        if (account) {
+        if (account)
+        {
             m_frame->setGotoAccountID(account->id());
             m_frame->setNavTreeAccount(account->ACCOUNTNAME);
             wxCommandEvent event(wxEVT_COMMAND_MENU_SELECTED, MENU_STOCKS);
@@ -275,47 +297,40 @@
 void mmHomePagePanel::OnLinkClicked(wxWebViewEvent& event)
 {
     const wxString& url = wxURI::Unescape(event.GetURL());
+    if (!url.Contains("#"))
+        return;
 
-    if (url.Contains("#"))
-    {
-        wxString name = url.AfterLast('#');
-
-        //Convert the JSON string from database to a json object
-        wxString str = Model_Infotable::instance().GetStringInfo("HOME_PAGE_STATUS", "{}");
-
-        wxLogDebug("======= mmHomePagePanel::OnLinkClicked =======");
-        wxLogDebug("Name = %s", name);
-
-        Document json_doc;
-        if (json_doc.Parse(str.c_str()).HasParseError())
-            return;
-
-        Document::AllocatorType& json_allocator = json_doc.GetAllocator();
-        wxLogDebug("RapidJson Input\n%s", JSON_PrettyFormated(json_doc));
-
-        const wxString type[] = { "TOP_CATEGORIES", "INVEST", "ACCOUNTS_INFO"
-            ,"CARD_ACCOUNTS_INFO" ,"CASH_ACCOUNTS_INFO", "LOAN_ACCOUNTS_INFO"
-            , "TERM_ACCOUNTS_INFO", "ASSETS", "SHARE_ACCOUNTS_INFO"
-            , "CURRENCY_RATES", "BILLS_AND_DEPOSITS" };
-
-        for (const auto& entry : type)
-        {
-            if (name != entry) continue;
-
-            Value v_type(entry.c_str(), json_allocator);
-            if (json_doc.HasMember(v_type) && json_doc[v_type].IsBool())
-            {
-                json_doc[v_type] = !json_doc[v_type].GetBool();
-            }
-            else
-            {
-                json_doc.AddMember(v_type, true, json_allocator);
-            }
+    wxLogDebug("{{{ mmHomePagePanel::OnLinkClicked()");
+    wxString name = url.AfterLast('#');
+    wxLogDebug("Name = %s", name);
+
+    //Convert the JSON string from database to a json object
+    const wxString key = "HOME_PAGE_STATUS";
+    wxString j_str = Model_Infotable::instance().getString(key, "{}");
+    Document j_doc;
+    if (j_doc.Parse(j_str.c_str()).HasParseError())
+        return;
+
+    Document::AllocatorType& json_allocator = j_doc.GetAllocator();
+    wxLogDebug("Old %s:\n%s", key, JSON_PrettyFormated(j_doc));
+
+    const wxString type[] = { "TOP_CATEGORIES", "INVEST", "ACCOUNTS_INFO"
+        ,"CARD_ACCOUNTS_INFO" ,"CASH_ACCOUNTS_INFO", "LOAN_ACCOUNTS_INFO"
+        , "TERM_ACCOUNTS_INFO", "ASSETS", "SHARE_ACCOUNTS_INFO"
+        , "CURRENCY_RATES", "BILLS_AND_DEPOSITS" };
+
+    for (const auto& entry : type) {
+        if (name != entry) continue;
+        Value v_type(entry.c_str(), json_allocator);
+        if (j_doc.HasMember(v_type) && j_doc[v_type].IsBool()) {
+            j_doc[v_type] = !j_doc[v_type].GetBool();
+        }
+        else {
+            j_doc.AddMember(v_type, true, json_allocator);
         }
-
-        wxLogDebug("Saving updated RapidJson\n%s", JSON_PrettyFormated(json_doc));
-        wxLogDebug("======= mmHomePagePanel::OnLinkClicked =======");
-
-        Model_Infotable::instance().Set("HOME_PAGE_STATUS", JSON_PrettyFormated(json_doc));
     }
+
+    wxLogDebug("New %s:\n%s", key, JSON_PrettyFormated(j_doc));
+    Model_Infotable::instance().setJdoc(key, j_doc);
+    wxLogDebug("}}}");
 }
diff -Naur a/src/mmhomepagepanel.h b/src/mmhomepagepanel.h
--- a/src/mmhomepagepanel.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmhomepagepanel.h	2025-07-09 01:46:59.656940555 +0200
@@ -57,7 +57,7 @@
     wxString GetHomePageText() const;
     wxWebView* browser_ = nullptr;
     void createControls();
-    void sortTable() {}
+    void sortList() {}
     void OnNewWindow(wxWebViewEvent& evt);
 
     wxString m_templateText;
diff -Naur a/src/mmHook.h b/src/mmHook.h
--- a/src/mmHook.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmHook.h	2025-07-09 01:46:59.648940508 +0200
@@ -23,7 +23,7 @@
 public:
     virtual bool CommitCallback()
     {
-        Option::instance().DatabaseUpdated(true);
+        Option::instance().setDatabaseUpdated(true);
         return false;
     }
 };
diff -Naur a/src/mmpanelbase.cpp b/src/mmpanelbase.cpp
--- a/src/mmpanelbase.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmpanelbase.cpp	2025-07-09 01:46:59.656940555 +0200
@@ -1,22 +1,23 @@
 /*******************************************************
-Copyright (C) 2006 Madhan Kanagavel
-Copyright (C) 2015 James Higley
-Copyright (C) 2021 Mark Whalley (mark@ipx.co.uk)
-
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation; either version 2 of the License, or
-(at your option) any later version.
-
-This program is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with this program; if not, write to the Free Software
-Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-********************************************************/
+ Copyright (C) 2006 Madhan Kanagavel
+ Copyright (C) 2015 James Higley
+ Copyright (C) 2021 Mark Whalley (mark@ipx.co.uk)
+ Copyright (C) 2025 George Ef (george.a.ef@gmail.com)
+
+ This program is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2 of the License, or
+ (at your option) any later version.
+
+ This program is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program; if not, write to the Free Software
+ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ ********************************************************/
 
 #include "images_list.h"
 #include "mmpanelbase.h"
@@ -24,54 +25,58 @@
 #include "mmreportspanel.h"
 
 wxBEGIN_EVENT_TABLE(mmListCtrl, wxListCtrl)
-EVT_LIST_COL_END_DRAG(wxID_ANY, mmListCtrl::OnItemResize)
-EVT_LIST_COL_CLICK(wxID_ANY, mmListCtrl::OnColClick)
-EVT_LIST_COL_RIGHT_CLICK(wxID_ANY, mmListCtrl::OnColRightClick)
-EVT_MENU(wxID_ANY, mmListCtrl::PopupSelected)
+    EVT_LIST_COL_END_DRAG(wxID_ANY,    mmListCtrl::onItemResize)
+    EVT_LIST_COL_CLICK(wxID_ANY,       mmListCtrl::OnColClick)
+    EVT_LIST_COL_RIGHT_CLICK(wxID_ANY, mmListCtrl::onColRightClick)
+    EVT_MENU(wxID_ANY,                 mmListCtrl::onHeaderPopup)
 wxEND_EVENT_TABLE()
 
-mmListCtrl::mmListCtrl(wxWindow *parent, wxWindowID winid)
-    : wxListCtrl(parent, winid, wxDefaultPosition, wxDefaultSize
-        , wxLC_REPORT | wxLC_HRULES | wxLC_VRULES | wxLC_VIRTUAL | wxLC_SINGLE_SEL | wxLC_AUTOARRANGE)
-    , attr1_(new wxListItemAttr(*bestFontColour(mmThemeMetaColour(meta::COLOR_LISTALT0)), mmThemeMetaColour(meta::COLOR_LISTALT0), wxNullFont))
-    , attr2_(new wxListItemAttr(*bestFontColour(mmThemeMetaColour(meta::COLOR_LIST)), mmThemeMetaColour(meta::COLOR_LIST), wxNullFont))
+const std::vector<int> ListColumnInfo::getListId(const std::vector<ListColumnInfo>& a_info)
+{
+    std::vector<int> a_id;
+    for (int i = 0; i < static_cast<int>(a_info.size()); ++i)
+        a_id.push_back(a_info[i].id);
+    return a_id;
+}
+
+//----------------------------------------------------------------------------
+
+mmListCtrl::mmListCtrl(wxWindow* parent, wxWindowID winid) :
+    wxListCtrl(
+        parent, winid, wxDefaultPosition, wxDefaultSize,
+        wxLC_REPORT | wxLC_HRULES | wxLC_VRULES | wxLC_VIRTUAL | wxLC_SINGLE_SEL | wxLC_AUTOARRANGE
+    ),
+    attr1_(new wxListItemAttr(
+        *bestFontColour(mmThemeMetaColour(meta::COLOR_LISTALT0)),
+        mmThemeMetaColour(meta::COLOR_LISTALT0),
+        wxNullFont
+    )),
+    attr2_(new wxListItemAttr(
+        *bestFontColour(mmThemeMetaColour(meta::COLOR_LIST)),
+        mmThemeMetaColour(meta::COLOR_LIST),
+        wxNullFont
+    ))
 {
 }
 
 mmListCtrl::~mmListCtrl()
 {
-    /*
-      Save the column widths of the list control. This will ensure that the
-      column widths get set incase the OnItemResize does not work on some systems.
-    */
-    std::vector<int> columnOrder;
-    for (int column_number = 0; column_number < GetColumnCount(); ++column_number)
-    {
-        int column_width = GetColumnWidth(column_number);
-        if (GetColumnWidthSetting(column_number) != column_width)
-        {
-            SetColumnWidthSetting(column_number, column_width);
-        }
-
-#ifdef wxHAS_LISTCTRL_COLUMN_ORDER
-        if (m_real_columns.size() > 0)
-            columnOrder.push_back(m_real_columns[GetColumnIndexFromOrder(column_number)]);
-#endif
-
-    }
-
-    if (!columnOrder.empty())
-        SetColumnOrder(columnOrder);
+    savePreferences();
 }
 
-wxListItemAttr* mmListCtrl::OnGetItemAttr(long row) const
-{
-    return (row % 2) ? attr2_.get() : attr1_.get();
-}
+//----------------------------------------------------------------------------
 
-int mmListCtrl::GetRealColumn(int col)
+void mmListCtrl::createColumns()
 {
-    return (0 == m_real_columns.size()) ? col : m_real_columns[col];
+    loadPreferences();
+    for (int col_nr = 0; col_nr < getColNrSize(); ++col_nr) {
+        int col_id = getColId_Nr(col_nr);
+        ListColumnInfo col_info = m_col_info_id[col_id];
+        int col_width = m_col_width_id[col_id];
+        if (isDisabledColId(col_id) || isHiddenColId(col_id)) col_width = 0;
+        InsertColumn(col_nr, getColHeader(col_id), col_info.format, col_width);
+    }
+    updateSortIcon();
 }
 
 wxString mmListCtrl::BuildPage(const wxString &title) const
@@ -81,25 +86,30 @@
     text << "<head>" + eol + "<title>" + title + "</title>" + eol;
     text << "<meta charset = 'utf-8'>" + eol + "</head>" + eol;
     text << "<body>" << eol;
-    text << wxString::Format("<table border=%s cellpadding=4 cellspacing=0 >"
-        , (GetWindowStyle() & wxLC_HRULES) || (GetWindowStyle() & wxLC_VRULES) ? "1" : "0") + eol;
+    text << wxString::Format(
+        "<table border=%s cellpadding=4 cellspacing=0 >",
+        (GetWindowStyle() & wxLC_HRULES) || (GetWindowStyle() & wxLC_VRULES) ? "1" : "0"
+    ) + eol;
 
     text << "<tr>" << eol;
-    for (int c = 0; c < GetColumnCount(); c++)
-    {
-        wxListItem col;
-        col.SetMask(wxLIST_MASK_TEXT);
-        GetColumn(c, col);
-        text << "<th><i>" << col.GetText() << "</i></th>" << eol;
+    for (int col_vo = 0; col_vo < GetColumnCount(); ++col_vo) {
+        int col_nr = getColNr_Vo(col_vo);
+        if (isDisabledColNr(col_nr))
+            continue;
+        wxListItem col_item;
+        col_item.SetMask(wxLIST_MASK_TEXT);
+        GetColumn(col_nr, col_item);
+        text << "<th><i>" << col_item.GetText() << "</i></th>" << eol;
     }
     text << "</tr>" << eol;
 
-    for (int i = 0; i < GetItemCount(); i++)
-    {
+    for (int row_nr = 0; row_nr < GetItemCount(); ++row_nr) {
         text << "<tr>" << eol;
-        for (int col = 0; col < GetColumnCount(); col++)
-        {
-            text << "<td>" << wxListCtrl::GetItemText(i, col) << "</td>" << eol;
+        for (int col_vo = 0; col_vo < GetColumnCount(); ++col_vo) {
+            int col_nr = getColNr_Vo(col_vo);
+            if (isDisabledColNr(col_nr))
+                continue;
+            text << "<td>" << wxListCtrl::GetItemText(row_nr, col_nr) << "</td>" << eol;
         }
         text << eol << "</tr>" << eol;
     }
@@ -110,278 +120,568 @@
     return text;
 }
 
-void mmListCtrl::OnItemResize(wxListEvent& event)
+//----------------------------------------------------------------------------
+
+const wxString mmListCtrl::getColHeader(int col_id, bool show_icon) const
 {
-    int i = event.GetColumn();
-    int width = GetColumnWidth(i);
-    if (!m_col_width.IsEmpty())
-        Model_Setting::instance().Set(wxString::Format(m_col_width, GetRealColumn(i)), width);
-}
-
-void mmListCtrl::CreateColumns()
-{
-    std::vector<int> columnOrder = GetColumnOrder();
-    std::vector<PANEL_COLUMN> sortedColumns = {};
-    for (unsigned int i = 0; i < columnOrder.size(); i++)
-    {
-        unsigned int index = std::find(m_real_columns.begin(), m_real_columns.end(), columnOrder[i]) - m_real_columns.begin();
-        if (index < m_columns.size())
-            sortedColumns.push_back(m_columns[index]);
-    }
-    
-    m_real_columns = columnOrder;
-    m_columns = sortedColumns;
-
-    for (const auto& entry : m_columns)
-    {
-        int count = GetColumnCount();
-        InsertColumn(count, entry.HEADER, entry.FORMAT,
-                     Model_Setting::instance().GetIntSetting(wxString::Format(m_col_width, GetRealColumn(count)), entry.WIDTH));
-    }
+    ListColumnInfo col_info = m_col_info_id[col_id];
+    if (!show_icon && col_id == 0 && col_info.header == "Icon")
+        return " ";
+    return col_info.translate ? wxGetTranslation(col_info.header) : col_info.header;
 }
 
-void mmListCtrl::OnColClick(wxListEvent& WXUNUSED(event))
+//----------------------------------------------------------------------------
+
+void mmListCtrl::savePreferences()
 {
-    // Default to do nothing and implement in derived class
+    if (m_setting_name.empty())
+        return;
+
+    StringBuffer json_buffer;
+    Writer<StringBuffer> json_writer(json_buffer);
+    json_writer.StartObject();
+    json_writer.Key("version");
+    json_writer.Int(m_setting_version);
+
+    if (!m_col_id_nr.empty()) {
+        json_writer.Key("col_id_vo");
+        json_writer.StartArray();
+        for (int col_vo = 0; col_vo < getColNrSize(); ++col_vo)
+            json_writer.Int(getColId_Vo(col_vo));
+        json_writer.EndArray();
+    }
+
+    if (static_cast<int>(m_col_width_id.size()) == getColIdSize()) {
+        for (int col_nr = 0; col_nr < GetColumnCount(); ++col_nr) {
+            int col_id = getColId_Nr(col_nr);
+            int new_width = GetColumnWidth(col_nr);
+            if (new_width != 0)
+                m_col_width_id[col_id] = new_width;
+        }
+        json_writer.Key("col_width_id");
+        json_writer.StartArray();
+        for (int col_id = 0; col_id < getColIdSize(); ++col_id)
+            json_writer.Int(m_col_width_id[col_id]);
+        json_writer.EndArray();
+    }
+
+    if (!m_col_hidden_id.empty()) {
+        json_writer.Key("col_hidden_id");
+        json_writer.StartArray();
+        for (int col_id = 0; col_id < getColIdSize(); ++col_id)
+            if (isHiddenColId(col_id)) json_writer.Int(col_id);
+        json_writer.EndArray();
+    }
+
+    if (!m_sort_col_id.empty() && m_sort_col_id.size() == m_sort_asc.size()) {
+        json_writer.Key("sort_col_id");
+        json_writer.StartArray();
+        for (int i = 0; i < static_cast<int>(m_sort_col_id.size()); ++i)
+            json_writer.Int(m_sort_col_id[i]);
+        json_writer.EndArray();
+        json_writer.Key("sort_asc");
+        json_writer.StartArray();
+        for (int i = 0; i < static_cast<int>(m_sort_asc.size()); ++i)
+            json_writer.Bool(m_sort_asc[i]);
+        json_writer.EndArray();
+    }
+
+    json_writer.EndObject();
+    const wxString& key = "LIST_" + m_setting_name;
+    const wxString& value = wxString::FromUTF8(json_buffer.GetString());
+    Model_Setting::instance().setRaw(key, value);
+}
+
+void mmListCtrl::loadPreferences()
+{
+    const wxString& key = "LIST_" + m_setting_name;
+    Document json_doc = Model_Setting::instance().getJdoc(key, "{}");
+    int version = 0;
+    if (!json_doc.HasParseError()) {
+        JSON_GetIntValue(json_doc, "version", version);
+    }
+
+    if (version < 1) {
+        loadPreferences_v190();
+        savePreferences();
+        return;
+    }
+    else if (version != m_setting_version) {
+        return;
+    }
+
+    // load m_col_id_nr if columns can be ordered
+    Value* col_id_a = JSON_GetValue(json_doc, "col_id_vo");
+    if (!m_col_id_nr.empty() && col_id_a != nullptr && col_id_a->IsArray()) {
+        std::vector<int> col_id_nr;
+        for (SizeType i = 0; i < col_id_a->Size(); ++i) {
+            int col_id = (*col_id_a)[i].GetInt();
+            if (isValidColId(col_id) &&
+                std::find(m_col_id_nr.begin(), m_col_id_nr.end(), col_id) != m_col_id_nr.end() &&
+                std::find(col_id_nr.begin(), col_id_nr.end(), col_id) == col_id_nr.end()
+            )
+                col_id_nr.push_back(col_id);
+        }
+        // assertion: col_id_nr is a subset of m_col_id_nr
+        for (int col_id : m_col_id_nr) {
+            if (std::find(col_id_nr.begin(), col_id_nr.end(), col_id) == col_id_nr.end())
+                col_id_nr.push_back(col_id);
+        }
+        // assertion: col_id_nr is a permutation of m_col_id_nr
+        m_col_id_nr = col_id_nr;
+    }
+
+    // load m_col_width_id
+    m_col_width_id.clear();
+    Value* col_width_a = JSON_GetValue(json_doc, "col_width_id");
+    if (col_width_a != nullptr && col_width_a->IsArray()) {
+        for (SizeType col_id = 0; col_id < col_width_a->Size(); ++col_id) {
+            if (static_cast<int>(col_id) >= getColIdSize())
+                break;
+            int col_width = (*col_width_a)[col_id].GetInt();
+            m_col_width_id.push_back(col_width);
+        }
+    }
+    for (int col_id = static_cast<int>(m_col_width_id.size()); col_id < getColIdSize(); ++col_id) {
+        int col_width = m_col_info_id[col_id].default_width;
+        m_col_width_id.push_back(col_width);
+    }
+
+    // load m_col_hidden_id
+    m_col_hidden_id.clear();
+    Value* col_hidden_a = JSON_GetValue(json_doc, "col_hidden_id");
+    if (col_hidden_a != nullptr && col_hidden_a->IsArray()) {
+        for (SizeType i = 0; i < col_hidden_a->Size(); ++i) {
+            int col_id = (*col_hidden_a)[i].GetInt();
+            if (isValidColId(col_id))
+                m_col_hidden_id.insert(col_id);
+        }
+    }
+
+    // load m_sort_col_id, m_sort_asc
+    if (c_sort_col_nr.size() != m_sort_col_id.size())
+        c_sort_col_nr = std::vector<int>(m_sort_col_id.size(), -1);
+    if (m_sort_asc.size() != m_sort_col_id.size())
+        m_sort_asc = std::vector<bool>(m_sort_col_id.size(), true);
+    Value* sort_col_a = JSON_GetValue(json_doc, "sort_col_id");
+    Value* sort_asc_a = JSON_GetValue(json_doc, "sort_asc");
+    if (sort_col_a != nullptr && sort_col_a->IsArray() &&
+        sort_asc_a != nullptr && sort_asc_a->IsArray() &&
+        sort_col_a->Size() == sort_asc_a->Size()
+    ) {
+        for (SizeType i = 0; i < sort_col_a->Size(); ++i) {
+            if (static_cast<int>(i) >= static_cast<int>(m_sort_col_id.size()))
+                break;
+            int col_id = (*sort_col_a)[i].GetInt();
+            if (isValidColId(col_id)) {
+                m_sort_col_id[i] = col_id;
+                m_sort_asc[i] = (*sort_asc_a)[i].GetBool();
+            }
+        }
+    }
 }
 
-void mmListCtrl::OnColRightClick(wxListEvent& event)
+void mmListCtrl::savePreferences_v190()
 {
-    if (m_columns.size() > 0 && !m_col_width.IsEmpty())
-    {
-        m_ColumnHeaderNbr = event.GetColumn();
-        if (0 > m_ColumnHeaderNbr || m_ColumnHeaderNbr >= static_cast<int>(m_columns.size())) return;
-        wxMenu menu;
-        wxMenu *submenu = new wxMenu;
-        for (int i = 0; i < static_cast<int>(m_columns.size()); i++)
-        {
-            int id = MENU_HEADER_COLUMN + i;
-            submenu->AppendCheckItem(id, m_columns[i].HEADER);
-            int width = Model_Setting::instance().GetIntSetting(wxString::Format(m_col_width, GetRealColumn(i)), m_columns[i].WIDTH);
-            submenu->Check(id, width != 0);
-        }
-        menu.AppendSubMenu(submenu, _("Hide/Show Columns"));
-        menu.Append(MENU_HEADER_HIDE, _("Hide this column"));
-        if (m_default_sort_column >= 0 && (m_columns[m_ColumnHeaderNbr].SORTABLE == true))
-            menu.Append(MENU_HEADER_SORT, _("Order by this column"));
-        // Do not show e.g. for Assets root list. Only for sublists.
-        if(m_real_columns.size() > 0) {
-            menu.Append(MENU_HEADER_MOVE_LEFT, _("Move column left"));
-            menu.Append(MENU_HEADER_MOVE_RIGHT, _("Move column right"));
-        }
-        menu.Append(MENU_HEADER_RESET, _("Reset columns"));
-        PopupMenu(&menu);
-        this->SetFocus();
-    }
-}
-
-void mmListCtrl::PopupSelected(wxCommandEvent& event)
-{
-    switch (event.GetId())
-    {
-    case MENU_HEADER_HIDE:
-        OnHeaderHide(event);
-        break;
-    case MENU_HEADER_SORT:
-        OnHeaderSort(event);
-        break;
-    case MENU_HEADER_MOVE_LEFT:
-        OnHeaderMove(event, -1);
-        break;
-    case MENU_HEADER_MOVE_RIGHT:
-        OnHeaderMove(event, 1);
-        break;
-    case MENU_HEADER_RESET:
-        OnHeaderReset(event);
-        break;
-    default:
-        OnHeaderColumn(event);
-    }
-}
-
-void mmListCtrl::OnHeaderHide(wxCommandEvent& WXUNUSED(event))
-{
-    if (m_ColumnHeaderNbr >= 0 && !m_col_width.IsEmpty())
-    {
-        SetColumnWidth(m_ColumnHeaderNbr, 0);
-        const wxString parameter_name = wxString::Format(m_col_width, GetRealColumn(m_ColumnHeaderNbr));
-        Model_Setting::instance().Set(parameter_name, 0);
+    // save m_col_id_nr
+    if (!m_col_id_nr.empty() && !o_col_order_prefix.empty()) {
+        wxString order_str;
+        for (int col_id : m_col_id_nr)
+            order_str.Append((order_str.IsEmpty() ? "" : "|") + wxString::Format("%i", col_id));
+        Model_Setting::instance().setString(getColOrderKey_v190(), order_str);
+    }
+
+    // save m_col_width_id, m_col_hidden_id
+    if (!o_col_width_prefix.IsEmpty()) {
+        for (int col_nr = 0; col_nr < GetColumnCount(); ++col_nr) {
+            int col_id = getColId_Nr(col_nr);
+            Model_Setting::instance().setInt(
+                getColWidthKey_v190(col_id), GetColumnWidth(col_nr)
+            );
+        }
+    }
+
+    // save m_sort_col_id, m_sort_asc
+    bool asc_isInt = (m_sort_col_id.size() == 2);
+    for (int i = 0; i < static_cast<int>(m_sort_col_id.size()); ++i) {
+        Model_Setting::instance().setInt(getSortColKey_v190(i), getSortColNr(i));
+        saveBoolInt(getSortAscKey_v190(i), getSortAsc(i), asc_isInt);
     }
 }
 
-void mmListCtrl::OnHeaderSort(wxCommandEvent& WXUNUSED(event))
+void mmListCtrl::loadPreferences_v190()
+{
+    // load m_col_id_nr if columns can be ordered
+    if (!m_col_id_nr.empty() && !o_col_order_prefix.empty()) {
+        wxString order_str = Model_Setting::instance().getString(getColOrderKey_v190(), "");
+        wxArrayString col_idstr_nr = wxSplit(order_str, '|');
+        std::vector<int> col_id_nr;
+        for (const auto& col_idstr : col_idstr_nr) {
+            int col_id = wxAtoi(col_idstr);
+            if (isValidColId(col_id) &&
+                std::find(m_col_id_nr.begin(), m_col_id_nr.end(), col_id) != m_col_id_nr.end() &&
+                std::find(col_id_nr.begin(), col_id_nr.end(), col_id) == col_id_nr.end()
+            )
+                col_id_nr.push_back(col_id);
+        }
+        // assertion: col_id_nr is a subset of m_col_id_nr
+        for (int col_id : m_col_id_nr) {
+            if (std::find(col_id_nr.begin(), col_id_nr.end(), col_id) == col_id_nr.end())
+                col_id_nr.push_back(col_id);
+        }
+        // assertion: col_id_nr is a permutation of m_col_id_nr
+        m_col_id_nr = col_id_nr;
+    }
+
+    // load m_col_width_id, m_col_hidden_id
+    m_col_width_id.clear();
+    m_col_hidden_id.clear();
+    for (int col_id = 0; col_id < getColIdSize(); ++col_id) {
+        ListColumnInfo col_info = m_col_info_id[col_id];
+        int col_width = col_info.default_width;
+        if (!o_col_width_prefix.empty()) {
+            col_width = Model_Setting::instance().getInt(
+                getColWidthKey_v190(col_id), col_info.default_width
+            );
+        }
+        if (col_width == 0) {
+            m_col_hidden_id.insert(col_id);
+            col_width = col_info.default_width;
+        }
+        m_col_width_id.push_back(col_width);
+    }
+
+    // load m_sort_col_id, m_sort_asc
+    // NOTE:
+    //   *_SORT_COL* represents a col_nr in TransactionListCtrl (others have a bug).
+    //   *_ASC* is stored as Int in TransactionListCtrl, or as Bool otherwise.
+    //   Only TransactionListCtrl has two sorting columns.
+    bool asc_isInt = (m_sort_col_id.size() == 2);
+    if (c_sort_col_nr.size() != m_sort_col_id.size())
+        c_sort_col_nr = std::vector<int>(m_sort_col_id.size(), -1);
+    if (m_sort_asc.size() != m_sort_col_id.size())
+        m_sort_asc = std::vector<bool>(m_sort_col_id.size(), true);
+    for (int i = 0; i < static_cast<int>(m_sort_col_id.size()); ++i) {
+        int col_nr = Model_Setting::instance().getInt(getSortColKey_v190(i), -1);
+        int col_id = isValidColNr(col_nr) ? getColId_Nr(col_nr) : m_sort_col_id[i];
+        bool asc = loadBoolInt(getSortAscKey_v190(i), m_sort_asc[i], asc_isInt);
+        if (isValidColId(col_id)) {
+            m_sort_col_id[i] = col_id;
+            m_sort_asc[i] = asc;
+        }
+    }
+}
+
+void mmListCtrl::saveBoolInt(const wxString& key, bool value, bool isInt)
 {
-    wxListEvent e;
-    e.SetId(MENU_HEADER_SORT);
-    OnColClick(e);
+    if (isInt)
+        Model_Setting::instance().setInt(key, (value ? 1 : 0));
+    else
+        Model_Setting::instance().setBool(key, value);
 }
 
-void mmListCtrl::OnHeaderMove(wxCommandEvent& WXUNUSED(event), int direction)
+bool mmListCtrl::loadBoolInt(const wxString& key, bool default_value, bool isInt) const
 {
-    Freeze();
-#ifdef wxHAS_LISTCTRL_COLUMN_ORDER
-    // on Windows the visual order can differ from the array order due to drag/drop
-    // so we need to realign them before adjusting the column orders programatically
-    std::vector<int> realColumns, widths;
-
-    wxArrayInt columnorder;
-
-    std::vector<PANEL_COLUMN> columns;
-    bool reindexSelection = false;
-    for (int i = 0; i < m_columns.size(); i++)
-    {
-        // we will reset the visual indices in sequential order
-        columnorder.push_back(i);
-
-        // get the true index from the visual column position
-        int index = GetColumnIndexFromOrder(i);
-
-        // update the selected column index
-        if (index == m_ColumnHeaderNbr && !reindexSelection)
-        {
-            m_ColumnHeaderNbr = i;
-            reindexSelection = true;
-        }
-
-        realColumns.push_back(m_real_columns[index]);
-        columns.push_back(m_columns[index]);
-        int width = GetColumnWidth(i);
-        wxListItem column;
-        column.SetText(m_columns[index].HEADER);
-        column.SetAlign(static_cast<wxListColumnFormat>(m_columns[index].FORMAT));
-        SetColumn(i, column);
-        SetColumnWidth(i, width);
-    }
-
-    SetColumnsOrder(columnorder);
-    m_real_columns = realColumns;
-    m_columns = columns;
-#endif
-
-    // find the next visible column
-    int distance = direction;
-    while (m_ColumnHeaderNbr + distance > 0
-        && m_ColumnHeaderNbr + distance < static_cast<int>(m_columns.size()) - 1
-        && GetColumnWidth(m_ColumnHeaderNbr + distance) == 0)
-    {
-        distance += direction;
-    }
-    wxLogDebug("Moving column %d (%s) %d", m_ColumnHeaderNbr, m_columns[m_ColumnHeaderNbr].HEADER.c_str(), distance);
-    if (0 <= m_ColumnHeaderNbr + distance
-        && static_cast<int>(m_columns.size()) > m_ColumnHeaderNbr + distance
-        && static_cast<int>(m_real_columns.size()) > m_ColumnHeaderNbr + distance)
-    {
-        // swap order of column data
-        std::swap(m_real_columns[m_ColumnHeaderNbr + distance], m_real_columns[m_ColumnHeaderNbr]);
-        std::swap(m_columns[m_ColumnHeaderNbr + distance], m_columns[m_ColumnHeaderNbr]);
-        SetColumnOrder(m_real_columns);
-    
-        // swap column headers & widths
-        wxListItem col1, col2;
-        col1.SetText(m_columns[m_ColumnHeaderNbr].HEADER);
-        col1.SetAlign(static_cast<wxListColumnFormat>(m_columns[m_ColumnHeaderNbr].FORMAT));
-        col2.SetText(m_columns[m_ColumnHeaderNbr + distance].HEADER);
-        col2.SetAlign(static_cast<wxListColumnFormat>(m_columns[m_ColumnHeaderNbr + distance].FORMAT));
-        int width = GetColumnWidth(m_ColumnHeaderNbr);
-        SetColumn(m_ColumnHeaderNbr, col1);
-        SetColumnWidth(m_ColumnHeaderNbr, GetColumnWidth(m_ColumnHeaderNbr + distance));
-        SetColumn(m_ColumnHeaderNbr + distance, col2);
-        SetColumnWidth(m_ColumnHeaderNbr + distance, width);
-        Thaw();
-    }
+    return isInt ?
+        Model_Setting::instance().getInt(key, (default_value ? 1 : 0)) != 0 :
+        Model_Setting::instance().getBool(key, default_value);
 }
 
-void mmListCtrl::OnHeaderReset(wxCommandEvent& WXUNUSED(event))
+//----------------------------------------------------------------------------
+
+int mmListCtrl::cacheSortColNr(int i)
 {
-    wxString parameter_name;
-    Freeze();
-    for (int i = 0; i < static_cast<int>(m_columns.size()); i++)
-    {
-        SetColumnWidth(i, m_columns[i].WIDTH);
-        if (!m_col_width.IsEmpty())
-        {
-            parameter_name = wxString::Format(m_col_width, GetRealColumn(i));
-            Model_Setting::instance().Set(parameter_name, GetColumnWidth(i));
-        }
-    }
-    wxListEvent e;
-    e.SetId(MENU_HEADER_SORT);
-    m_ColumnHeaderNbr = m_default_sort_column;
-    m_asc = true;
-    OnColClick(e);
-    Thaw();
+    int col_id = m_sort_col_id[i];
+    int col_nr = isValidColId(col_id) ? getColNr_Id(col_id) : -1;
+    c_sort_col_nr[i] = col_nr;
+    return col_nr;
 }
 
-void mmListCtrl::OnHeaderColumn(wxCommandEvent& event)
+//----------------------------------------------------------------------------
+
+wxListItemAttr* mmListCtrl::OnGetItemAttr(long row) const
 {
-    int id = event.GetId();
-    int columnNbr = id - MENU_HEADER_COLUMN;
-    if (columnNbr >= 0 && columnNbr < static_cast<int>(m_columns.size()) && !m_col_width.IsEmpty())
-    {
-        int default_width = m_columns[columnNbr].WIDTH;
-        if (default_width == 0)
-            default_width = wxLIST_AUTOSIZE_USEHEADER;
-        const wxString parameter_name = wxString::Format(m_col_width, GetRealColumn(columnNbr));
-        int cur_width = Model_Setting::instance().GetIntSetting(parameter_name, default_width);
-        int new_width = (cur_width != 0 ? 0 : default_width);
-        SetColumnWidth(columnNbr, new_width);
-        Model_Setting::instance().Set(parameter_name, GetColumnWidth(columnNbr));
-    }
+    return (row % 2) ? attr2_.get() : attr1_.get();
 }
 
-int mmListCtrl::GetColumnWidthSetting(int column_number, int default_size)
+void mmListCtrl::OnColClick(wxListEvent& WXUNUSED(event))
 {
-    return Model_Setting::instance().GetIntSetting(wxString::Format(m_col_width, GetRealColumn(column_number)), default_size);
+    // To be implemented in derived class
 }
 
-void mmListCtrl::SetColumnWidthSetting(int column_number, int column_width)
+int mmListCtrl::getSortIcon(bool WXUNUSED(asc)) const
 {
-    if (!m_col_width.IsEmpty())
-        Model_Setting::instance().Set(wxString::Format(m_col_width, GetRealColumn(column_number)), column_width);
+    return -1;
 }
 
-// Set new column order. Called when closing the dialog using the "OK" button
-void mmListCtrl::SetColumnOrder(std::vector<int> columnList)
+void mmListCtrl::updateSortIcon()
+{
+    if (m_sort_col_id.empty())
+        return;
+
+    wxListItem item;
+    item.SetMask(wxLIST_MASK_IMAGE);
+
+    // clear sort icon in c_icon_col_nr
+    if (isValidColNr(c_icon_col_nr)) {
+        item.SetImage(-1);
+        SetColumn(c_icon_col_nr, item);
+    }
+
+    c_icon_col_nr = getSortColNr();
+
+    // show sort icon in c_icon_col_nr
+    if (isValidColNr(c_icon_col_nr)) {
+        item.SetImage(getSortIcon(getSortAsc()));
+        SetColumn(c_icon_col_nr, item);
+    }
+}
+
+//----------------------------------------------------------------------------
+
+void mmListCtrl::shiftColumn(int col_vo, int offset)
+{
+    if (m_col_id_nr.empty() || offset == 0)
+        return;
+
+    int col_nr = getColNr_Vo(col_vo);
+    int col_id = m_col_id_nr[col_nr];
+    wxLogDebug("mmListCtrl::shiftColumn(): save column %d:%d (%s)",
+        col_vo, col_nr, m_col_info_id[col_id].header
+    );
+    wxListItem col_item;
+    col_item.SetText(getColHeader(col_id));
+    col_item.SetAlign(static_cast<wxListColumnFormat>(m_col_info_id[col_id].format));
+    int col_width = GetColumnWidth(col_nr);
+
+    int dir = offset > 0 ? 1 : -1;
+    int dst_vo = col_vo;
+    int dst_nr = getColNr_Vo(dst_vo);
+    while (offset != 0) {
+        int src_vo = dst_vo + dir;
+        int src_nr = getColNr_Vo(src_vo);
+        if (!isValidColNr(src_nr))
+            break;
+        int src_id = m_col_id_nr[src_nr];
+        wxLogDebug("mmListCtrl::shiftColumn(): move column %d:%d (%s) -> %d:%d",
+            src_vo, src_nr, m_col_info_id[src_id].header, dst_vo, dst_nr
+        );
+        wxListItem src_item;
+        src_item.SetText(getColHeader(src_id));
+        src_item.SetAlign(static_cast<wxListColumnFormat>(m_col_info_id[src_id].format));
+        int src_width = GetColumnWidth(src_nr);
+        SetColumn(dst_nr, src_item);
+        SetColumnWidth(dst_nr, src_width);
+        m_col_id_nr[dst_nr] = src_id;
+        dst_vo = src_vo;
+        dst_nr = src_nr;
+        offset -= dir;
+    }
+
+    wxLogDebug("mmListCtrl::shiftColumn(): restore column (%s) -> %d:%d",
+        m_col_info_id[col_id].header, dst_vo, dst_nr
+    );
+    SetColumn(dst_nr, col_item);
+    SetColumnWidth(dst_nr, col_width);
+    m_col_id_nr[dst_nr] = col_id;
+}
+
+//----------------------------------------------------------------------------
+
+void mmListCtrl::onItemResize(wxListEvent& event)
+{
+    // update m_col_width_id but do not save in Setting
+    int col_nr = event.GetColumn();
+    int col_id = getColId_Nr(col_nr);
+    int col_width = GetColumnWidth(col_nr);
+    m_col_width_id[col_id] = col_width;
+}
+
+void mmListCtrl::onColRightClick(wxListEvent& event)
+{
+    m_sel_col_nr = event.GetColumn();
+    if (!isValidColNr(m_sel_col_nr))
+        return;
+
+    wxMenu menu;
+    // hide and show columns
+    wxMenu* menu_toggle = new wxMenu;
+    for (int col_vo = 0; col_vo < getColNrSize(); col_vo++) {
+        int col_nr = getColNr_Vo(col_vo);
+        int col_id = getColId_Nr(col_nr);
+        if (isDisabledColId(col_id))
+            continue;
+        int event_id = MENU_HEADER_TOGGLE_MIN + col_nr;
+        if (event_id > MENU_HEADER_TOGGLE_MAX)
+            break;
+        menu_toggle->AppendCheckItem(event_id, getColHeader(col_id, true));
+        menu_toggle->Check(event_id, !isHiddenColId(col_id));
+    }
+    menu.AppendSubMenu(menu_toggle, _t("Hide/Show column"));
+    menu.Append(MENU_HEADER_HIDE, _t("Hide this column"));
+
+    // move columns
+    if (m_col_id_nr.size() > 0) {
+        wxMenu* menu_show = new wxMenu;
+        bool found = false;
+        for (int col_vo = 0; col_vo < getColNrSize(); col_vo++) {
+            int col_nr = getColNr_Vo(col_vo);
+            int col_id = getColId_Nr(col_nr);
+            if (isDisabledColId(col_id))
+                continue;
+            int event_id = MENU_HEADER_SHOW_MIN + col_nr;
+            if (event_id > MENU_HEADER_SHOW_MAX)
+                break;
+            if (isHiddenColId(col_id)) {
+                menu_show->Append(event_id, getColHeader(col_id, true));
+                found = true;
+            }
+        }
+        if (found)
+            menu.AppendSubMenu(menu_show, _t("Move hidden column"));
+        if (m_sel_col_nr > 0)
+            menu.Append(MENU_HEADER_MOVE_LEFT, _t("Move column left"));
+        if (m_sel_col_nr < getColNrSize() - 1)
+            menu.Append(MENU_HEADER_MOVE_RIGHT, _t("Move column right"));
+    }
+
+    if (m_col_info_id[getColId_Nr(m_sel_col_nr)].sortable)
+        menu.Append(MENU_HEADER_SORT, _t("Sort by this column"));
+
+    menu.Append(MENU_HEADER_RESET, _t("Reset column widths"));
+
+    PopupMenu(&menu);
+    SetFocus();
+}
+
+void mmListCtrl::onHeaderPopup(wxCommandEvent& event)
+{
+    int event_id = event.GetId();
+    if (event_id == MENU_HEADER_SORT)
+        onHeaderSort(event);
+    else if (event_id >= MENU_HEADER_TOGGLE_MIN && event_id <= MENU_HEADER_TOGGLE_MAX)
+        onHeaderToggle(event);
+    else if (event_id == MENU_HEADER_HIDE)
+        onHeaderHide(event);
+    else if (event_id >= MENU_HEADER_SHOW_MIN && event_id <= MENU_HEADER_SHOW_MAX)
+        onHeaderShow(event);
+    else if (event_id == MENU_HEADER_MOVE_LEFT)
+        onHeaderMove(event, -1);
+    else if (event_id == MENU_HEADER_MOVE_RIGHT)
+        onHeaderMove(event, 1);
+    else if (event_id == MENU_HEADER_RESET)
+        onHeaderReset(event);
+}
+
+void mmListCtrl::onHeaderSort(wxCommandEvent& WXUNUSED(event))
 {
-    if (columnList.empty())
-        columnList = m_real_columns;
+    wxListEvent e;
+    e.SetId(MENU_HEADER_SORT);
+    OnColClick(e);
+}
 
-    wxString columnOrder;
-    for (int col_enum : columnList)
-    {
-        columnOrder.Append((columnOrder.IsEmpty() ? "" : "|") + wxString::Format("%i", col_enum));
+void mmListCtrl::onHeaderToggle(wxCommandEvent& event)
+{
+    int col_nr = event.GetId() - MENU_HEADER_TOGGLE_MIN;
+    if (!isValidColNr(col_nr))
+        return;
+    Freeze();
+    int col_id = getColId_Nr(col_nr);
+    int new_width;
+    if (isHiddenColId(col_id)) {
+        m_col_hidden_id.erase(col_id);
+        new_width = m_col_width_id[col_id];
+        if (new_width == 0) new_width = m_col_info_id[col_id].default_width;
+    }
+    else {
+        m_col_width_id[col_id] = GetColumnWidth(col_nr);
+        m_col_hidden_id.insert(col_id);
+        new_width = 0;
     }
-    Model_Setting::instance().Set(m_col_idstr + "_COLUMNORDER", columnOrder);
+    SetColumnWidth(col_nr, new_width);
+    savePreferences();
+    Thaw();
 }
 
+void mmListCtrl::onHeaderHide(wxCommandEvent& WXUNUSED(event))
+{
+    if (!isValidColNr(m_sel_col_nr))
+        return;
+    Freeze();
+    int col_id = getColId_Nr(m_sel_col_nr);
+    m_col_width_id[col_id] = GetColumnWidth(m_sel_col_nr);
+    m_col_hidden_id.insert(col_id);
+    SetColumnWidth(m_sel_col_nr, 0);
+    savePreferences();
+    Thaw();
+}
 
-// Get the current column order from the settings, or initialize a default order
-std::vector<int> mmListCtrl::GetColumnOrder()
+void mmListCtrl::onHeaderShow(wxCommandEvent& event)
 {
-    wxArrayString columnStringList = wxSplit(Model_Setting::instance().GetStringSetting(m_col_idstr + "_COLUMNORDER", ""), '|');
+    int col_nr = event.GetId() - MENU_HEADER_SHOW_MIN;
+    if (m_col_id_nr.empty() || !isValidColNr(m_sel_col_nr) || !isValidColNr(col_nr))
+        return;
+    Freeze();
 
-    // if there is no defined setting, use default order of the listctrl
-    if(columnStringList.IsEmpty())
-        return m_real_columns;
+    // show col_nr
+    int col_id = getColId_Nr(col_nr);
+    m_col_hidden_id.erase(col_id);
+    int col_width = m_col_width_id[col_id];
+    if (col_width == 0) col_width = m_col_info_id[col_id].default_width;
+    SetColumnWidth(col_nr, col_width);
+
+    // move col_nr to the right of m_sel_col_nr
+    int col_vo = getColVo_Nr(col_nr);
+    int offset = getColVo_Nr(m_sel_col_nr) - col_vo;
+    if (offset < 0) offset++;
+    shiftColumn(col_vo, offset);
 
-    // otherwise, read order from settings db
-    std::vector<int> columnOrder;
-    for (const auto& col_enum : columnStringList)
-    {
-        if (std::find(m_real_columns.begin(), m_real_columns.end(), wxAtoi(col_enum)) != m_real_columns.end())
-            columnOrder.push_back(wxAtoi(col_enum));
-    }
+    updateSortIcon();
+    savePreferences();
+    Thaw();
+}
 
-    // add missing column enums
-    for (int i : m_real_columns)
-    {
-        if (std::find(columnOrder.begin(), columnOrder.end(), i) == columnOrder.end())
-            columnOrder.push_back(i);
+void mmListCtrl::onHeaderMove(wxCommandEvent& WXUNUSED(event), int dir)
+{
+    if (m_col_id_nr.empty())
+        return;
+    Freeze();
+
+    // find the next visible column after m_sel_col_nr in direction dir
+    int src_nr = m_sel_col_nr;
+    int src_vo = getColVo_Nr(src_nr);
+    int dst_vo = src_vo;
+    int dst_nr = src_nr;
+    do { dst_vo += dir; dst_nr = getColNr_Vo(dst_vo); } while (
+        isValidColNr(dst_nr) && (isDisabledColNr(dst_nr) || isHiddenColNr(dst_nr))
+    );
+    // shift src_vo to dst_vo
+    if (isValidColNr(dst_nr)) {
+        shiftColumn(src_vo, dst_vo - src_vo);
+        updateSortIcon();
+        savePreferences();
     }
 
-    return columnOrder;
+    Thaw();
 }
 
+void mmListCtrl::onHeaderReset(wxCommandEvent& WXUNUSED(event))
+{
+    Freeze();
+    m_col_hidden_id.clear();
+    for (int col_nr = 0; col_nr < getColNrSize(); ++col_nr) {
+        int col_id = getColId_Nr(col_nr);
+        if (isDisabledColId(col_id))
+            continue;
+        int col_width = m_col_info_id[col_id].default_width;
+        m_col_width_id[col_id] = col_width;
+        SetColumnWidth(col_nr, col_width);
+    }
+    savePreferences();
+    Thaw();
+}
+
+//----------------------------------------------------------------------------
 
 mmPanelBase::mmPanelBase()
 {
@@ -399,10 +699,10 @@
 
 void mmPanelBase::PrintPage()
 {
-   //this->Freeze();
-    wxWebView * htmlWindow = wxWebView::New(this, wxID_ANY);
+    //this->Freeze();
+    wxWebView*  htmlWindow = wxWebView::New(this, wxID_ANY);
     htmlWindow->SetPage(BuildPage(), "");
-    htmlWindow->GetPageSource();    // Needed to generate the page - at least on Mac anyway!
+    htmlWindow->GetPageSource(); // Needed to generate the page - at least on Mac anyway!
     htmlWindow->Print();
     htmlWindow->Destroy();
     //this->Thaw();
@@ -410,12 +710,13 @@
 
 void mmPanelBase::windowsFreezeThaw()
 {
-#ifdef __WXGTK__
+    #ifdef __WXGTK__
     return;
-#endif
+    #endif
 
     if (this->IsFrozen())
         this->Thaw();
     else
         this->Freeze();
 }
+
diff -Naur a/src/mmpanelbase.h b/src/mmpanelbase.h
--- a/src/mmpanelbase.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmpanelbase.h	2025-07-09 01:46:59.656940555 +0200
@@ -2,6 +2,7 @@
  Copyright (C) 2006 Madhan Kanagavel
  Copyright (C) 2015 James Higley
  Copyright (C) 2021 Mark Whalley (mark@ipx.co.uk)
+ Copyright (C) 2025 George Ef (george.a.ef@gmail.com)
 
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
@@ -20,76 +21,271 @@
 
 #pragma once
 
+#include <unordered_set>
 #include "util.h"
-#include "wx/event.h"
+#include <wx/event.h>
 #include <wx/webview.h>
 #include <wx/webviewfshandler.h>
-//----------------------------------------------------------------------------
 
-struct PANEL_COLUMN
+// short names for wx macros
+#define _WA wxLIST_AUTOSIZE
+#define _WH wxLIST_AUTOSIZE_USEHEADER
+#define _FL wxLIST_FORMAT_LEFT
+#define _FR wxLIST_FORMAT_RIGHT
+#define _FC wxLIST_FORMAT_CENTER
+
+struct ListColumnInfo
 {
-    PANEL_COLUMN(const wxString & header, int width, int format, bool sortable)
-        : HEADER(header), WIDTH(width), FORMAT(format), SORTABLE(sortable)
-    {}
-    wxString HEADER;
-    int WIDTH;
-    int FORMAT;
-    bool SORTABLE;
+    int id;
+    bool translate;
+    wxString header;
+    int default_width;
+    int format;
+    bool sortable;
+
+    static const std::vector<int> getListId(const std::vector<ListColumnInfo>& a_info);
 };
 
+//----------------------------------------------------------------------------
+
 class mmListCtrl : public wxListCtrl
 {
+protected:
     wxDECLARE_EVENT_TABLE();
+    enum {
+        MENU_HEADER_SORT = wxID_HIGHEST + 2000,
+        MENU_HEADER_TOGGLE_MIN,
+        MENU_HEADER_TOGGLE_MAX = MENU_HEADER_TOGGLE_MIN + 99,
+        MENU_HEADER_HIDE,
+        MENU_HEADER_SHOW_MIN,
+        MENU_HEADER_SHOW_MAX = MENU_HEADER_SHOW_MIN + 99,
+        MENU_HEADER_MOVE_LEFT,
+        MENU_HEADER_MOVE_RIGHT,
+        MENU_HEADER_RESET,
+    };
+
+public:
+    // const
+    const int m_setting_version = 1;
+
+    // configured by constructor (cannot be updated)
+    const wxSharedPtr<wxListItemAttr> attr1_, attr2_; // style1, style2
+
+    // configured by constructor (but may be updated)
+    wxString m_setting_name;                   // name for settings
+    wxString o_col_order_prefix;               // v1.9.0 prefix for column order
+    wxString o_col_width_prefix;               // v1.9.0 prefix for column width
+    wxString o_sort_prefix;                    // v1.9.0 prefix for sort
+    std::vector<ListColumnInfo> m_col_info_id; // map: col_id -> col_info
+    std::unordered_set<int> m_col_disabled_id; // set: col_id -> isDisabled
+
+    // dynamic
+    std::vector<int> m_col_id_nr;              // map: col_nr -> col_id; or empty
+    std::vector<int> m_col_width_id;           // map: col_id -> col_width (lazy)
+    std::unordered_set<int> m_col_hidden_id;   // map (set): col_id -> isHidden
+    std::vector<int> m_sort_col_id;            // sorting col_id; can be empty
+    std::vector<bool> m_sort_asc;              // sorting direction
+    int m_sel_col_nr = -1;                     // set by onColRightClick()
+
+private:
+    std::vector<int> c_sort_col_nr;            // sorting col_nr (cache)
+    int c_icon_col_nr = -1;                    // sort icon col_nr (cache)
 
 public:
     mmListCtrl(wxWindow *parent, wxWindowID winid);
     virtual ~mmListCtrl();
 
-    wxSharedPtr<wxListItemAttr> attr1_, attr2_; // style1, style2
-    long m_selected_row = -1;
-    int m_selected_col = 0;
-    bool m_asc = true;
-    std::vector<PANEL_COLUMN> m_columns;
-    std::vector<int> m_real_columns; // map from actual column to EColumn when list can have optional columns
-    wxString m_col_width;
-    wxString m_col_idstr;
-    int m_default_sort_column = -1;
-
-    virtual wxListItemAttr* OnGetItemAttr(long row) const;
+    void createColumns();
     wxString BuildPage(const wxString &title) const;
-    int GetColumnWidthSetting(int column_number, int default_size = wxLIST_AUTOSIZE);
-    void SetColumnWidthSetting(int column_number, int column_width);
 
-    void SetColumnOrder(std::vector<int> columnList);
-    std::vector<int> GetColumnOrder();
+public:
+    int getColIdSize() const;
+    int getColNrSize() const;
+    bool isValidColId(int col_id) const;
+    bool isValidColNr(int col_nr) const;
+    int getColId_Nr(int col_nr) const;
+    int getColNr_Id(int col_id) const;
+    int getColNr_Vo(int col_vo) const;
+    int getColVo_Nr(int col_nr) const;
+    int getColId_Vo(int col_vo) const;
+    int getColVo_Id(int col_id) const;
+    const wxString getColHeader(int col_id, bool show_icon = false) const;
+    bool isDisabledColId(int col_id) const;
+    bool isDisabledColNr(int col_nr) const;
+    bool isHiddenColId(int col_id) const;
+    bool isHiddenColNr(int col_nr) const;
+    bool isHiddenColVo(int col_vo) const;
+    int getSortColId(int i = 0) const;
+    int getSortColNr(int i = 0);
+    bool getSortAsc(int i = 0) const;
+    void savePreferences();
+    void loadPreferences();
+
+private:
+    // backwards compatibility
+    const wxString getColOrderKey_v190() const;
+    const wxString getColWidthKey_v190(int col_id) const;
+    const wxString getSortColKey_v190(int i = 0) const;
+    const wxString getSortAscKey_v190(int i = 0) const;
+    void savePreferences_v190();
+    void loadPreferences_v190();
+    void saveBoolInt(const wxString& key, bool value, bool isInt);
+    bool loadBoolInt(const wxString& key, bool default_value, bool isInt) const;
+
+private:
+    int cacheSortColNr(int i);
 
 protected:
-    void CreateColumns();
-    void OnItemResize(wxListEvent& event);
+    virtual wxListItemAttr* OnGetItemAttr(long row) const;
     virtual void OnColClick(wxListEvent& event);
-    void OnColRightClick(wxListEvent& event);
-    /* Headers Right Click*/
-    void PopupSelected(wxCommandEvent& event);
-    void OnHeaderColumn(wxCommandEvent& event);
-    void OnHeaderHide(wxCommandEvent& WXUNUSED(event));
-    void OnHeaderSort(wxCommandEvent& event);
-    void OnHeaderReset(wxCommandEvent& WXUNUSED(event));
-    void OnHeaderMove(wxCommandEvent& WXUNUSED(event), int direction);
-    int GetRealColumn(int col);
-    int m_ColumnHeaderNbr = -1;
-    enum {
-        HEADER = 0,
-        WIDTH,
-        FORMAT,
-        MENU_HEADER_HIDE = wxID_HIGHEST + 2000,
-        MENU_HEADER_SORT,
-        MENU_HEADER_RESET,
-        MENU_HEADER_MOVE_LEFT,
-        MENU_HEADER_MOVE_RIGHT,
-        MENU_HEADER_COLUMN, // Must be last in list
-    };
+    virtual int getSortIcon(bool asc) const;
+    void updateSortIcon();
+
+private:
+    void shiftColumn(int col_vo, int offset);
+
+    void onItemResize(wxListEvent& event);
+    void onColRightClick(wxListEvent& event);
+    // Headers Right Click
+    void onHeaderPopup(wxCommandEvent& event);
+    void onHeaderSort(wxCommandEvent& event);
+    void onHeaderToggle(wxCommandEvent& event);
+    void onHeaderHide(wxCommandEvent& WXUNUSED(event));
+    void onHeaderShow(wxCommandEvent& WXUNUSED(event));
+    void onHeaderMove(wxCommandEvent& WXUNUSED(event), int dir);
+    void onHeaderReset(wxCommandEvent& WXUNUSED(event));
 };
 
+inline int mmListCtrl::getColIdSize() const
+{
+    return static_cast<int>(m_col_info_id.size());
+}
+
+inline int mmListCtrl::getColNrSize() const
+{
+    return !m_col_id_nr.empty() ?
+        static_cast<int>(m_col_id_nr.size()) :
+        static_cast<int>(m_col_info_id.size());
+}
+
+inline bool mmListCtrl::isValidColId(int col_id) const
+{
+    return (col_id >= 0 && col_id < getColIdSize());
+}
+
+inline bool mmListCtrl::isValidColNr(int col_nr) const
+{
+    return (col_nr >= 0 && col_nr < getColNrSize());
+}
+
+inline int mmListCtrl::getColId_Nr(int col_nr) const
+{
+    return m_col_id_nr.empty() ? col_nr : m_col_id_nr[col_nr];
+}
+
+inline int mmListCtrl::getColNr_Id(int col_id) const
+{
+    return m_col_id_nr.empty() ? col_id :
+        std::find(m_col_id_nr.begin(), m_col_id_nr.end(), col_id) - m_col_id_nr.begin();
+}
+
+inline int mmListCtrl::getColNr_Vo(int col_vo) const
+{
+    // Return the column number (index) from the visual order.
+    // The column number and the visual order are always equal on Linux/macOS,
+    // but on Windows they may differ due to drag/drop actions.
+    #ifdef wxHAS_LISTCTRL_COLUMN_ORDER
+        return GetColumnCount() == 0 ? col_vo : GetColumnIndexFromOrder(col_vo);
+    #else
+        return col_vo;
+    #endif
+}
+
+inline int mmListCtrl::getColVo_Nr(int col_nr) const
+{
+    // Return the visual order from the column number (index).
+    #ifdef wxHAS_LISTCTRL_COLUMN_ORDER
+        return GetColumnCount() == 0 ? col_nr : GetColumnOrder(col_nr);
+    #else
+        return col_nr;
+    #endif
+}
+
+inline int mmListCtrl::getColId_Vo(int col_vo) const
+{
+    return getColId_Nr(getColNr_Vo(col_vo));
+}
+
+inline int mmListCtrl::getColVo_Id(int col_id) const
+{
+    return getColVo_Nr(getColNr_Id(col_id));
+}
+
+inline bool mmListCtrl::isDisabledColId(int col_id) const
+{
+    return m_col_disabled_id.find(col_id) != m_col_disabled_id.end();
+}
+
+inline bool mmListCtrl::isDisabledColNr(int col_nr) const
+{
+    return isDisabledColId(getColId_Nr(col_nr));
+}
+
+inline bool mmListCtrl::isHiddenColId(int col_id) const
+{
+    return m_col_hidden_id.find(col_id) != m_col_hidden_id.end();
+}
+
+inline bool mmListCtrl::isHiddenColNr(int col_nr) const
+{
+    return isHiddenColId(getColId_Nr(col_nr));
+}
+
+inline bool mmListCtrl::isHiddenColVo(int col_vo) const
+{
+    return isHiddenColId(getColId_Vo(col_vo));
+}
+
+inline int mmListCtrl::getSortColId(int i) const
+{
+    return m_sort_col_id[i];
+}
+
+inline int mmListCtrl::getSortColNr(int i)
+{
+    int col_id = m_sort_col_id[i];
+    int col_nr = c_sort_col_nr[i];
+    return (isValidColNr(col_nr) && getColId_Nr(col_nr) == col_id) ? col_nr :
+        cacheSortColNr(i);
+}
+
+inline bool mmListCtrl::getSortAsc(int i) const
+{
+    return m_sort_asc[i];
+}
+
+inline const wxString mmListCtrl::getColOrderKey_v190() const
+{
+    return o_col_order_prefix + "_COLUMNORDER";
+}
+
+inline const wxString mmListCtrl::getColWidthKey_v190(int col_id) const
+{
+    return wxString::Format(o_col_width_prefix + "%d_WIDTH", col_id);
+}
+
+inline const wxString mmListCtrl::getSortColKey_v190(int i) const
+{
+    return wxString::Format("%s_SORT_COL%s", o_sort_prefix, (i == 1 ? "2" : ""));
+}
+
+inline const wxString mmListCtrl::getSortAscKey_v190(int i) const
+{
+    return wxString::Format("%s_ASC%s", o_sort_prefix, (i == 1 ? "2" : ""));
+}
+
+//----------------------------------------------------------------------------
+
 class mmPanelBase : public wxPanel
 {
 public:
@@ -98,8 +294,8 @@
 
     virtual wxString BuildPage() const;
     virtual void PrintPage();
-    void windowsFreezeThaw();
+    virtual void sortList() = 0;
 
-    virtual void sortTable() = 0;
+    void windowsFreezeThaw();
 };
-//----------------------------------------------------------------------------
+
diff -Naur a/src/mmreportspanel.cpp b/src/mmreportspanel.cpp
--- a/src/mmreportspanel.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmreportspanel.cpp	2025-07-09 01:46:59.656940555 +0200
@@ -128,7 +128,7 @@
             wxStringClientData* obj =
                 static_cast<wxStringClientData*>(m_date_ranges->GetClientObject(selectedItem));
             if (obj) id_str = obj->GetData();
-            int id = wxAtoi(id_str);
+            int64 id = std::stoll(id_str.ToStdString());
             rb_->setSelection(id);
         }
     }
@@ -196,7 +196,7 @@
         if (rp & rb_->RepParams::DATE_RANGE)
         {
             wxStaticText* itemStaticTextH1 = new wxStaticText(itemPanel3
-                , wxID_ANY, _("Period:"));
+                , wxID_ANY, _t("Period:"));
             mmSetOwnFont(itemStaticTextH1, GetFont().Larger());
             itemBoxSizerHeader->Add(itemStaticTextH1, 0, wxALL | wxALIGN_CENTER_VERTICAL, 1);
             itemBoxSizerHeader->AddSpacer(5);
@@ -213,6 +213,7 @@
             m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmCurrentYear()));
             m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmCurrentYearToDate()));
             m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmLastYear()));
+            m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmLastYearBefore()));
             m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmCurrentFinancialYear()));
             m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmCurrentFinancialYearToDate()));
             m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmLastFinancialYear()));
@@ -252,7 +253,7 @@
         else if (rp & rb_->RepParams::SINGLE_DATE)
         {
             wxStaticText* itemStaticTextH1 = new wxStaticText(itemPanel3
-                , wxID_ANY, _("Date:"));
+                , wxID_ANY, _t("Date:"));
             mmSetOwnFont(itemStaticTextH1, GetFont().Larger());
             itemBoxSizerHeader->Add(itemStaticTextH1, 0, wxALL | wxALIGN_CENTER_VERTICAL, 1);
             itemBoxSizerHeader->AddSpacer(5);
@@ -268,7 +269,7 @@
         else if (rp & rb_->RepParams::MONTHES)
         {
             wxStaticText* itemStaticTextH1 = new wxStaticText(itemPanel3
-                , wxID_ANY, _("Date:"));
+                , wxID_ANY, _t("Date:"));
             mmSetOwnFont(itemStaticTextH1, GetFont().Larger());
             itemBoxSizerHeader->Add(itemStaticTextH1, 0, wxALL | wxALIGN_CENTER_VERTICAL, 1);
             itemBoxSizerHeader->AddSpacer(5);
@@ -284,7 +285,7 @@
         if (rp & rb_->RepParams::TIME)
         {
             wxStaticText* itemStaticTextH1 = new wxStaticText(itemPanel3
-                , wxID_ANY, _("Time:"));
+                , wxID_ANY, _t("Time:"));
             mmSetOwnFont(itemStaticTextH1, GetFont().Larger());
             itemBoxSizerHeader->Add(itemStaticTextH1, 0, wxALL | wxALIGN_CENTER_VERTICAL, 1);
             itemBoxSizerHeader->AddSpacer(5);
@@ -299,7 +300,7 @@
         {
             cleanupmem_ = true;
             wxStaticText* itemStaticTextH1 = new wxStaticText(itemPanel3
-                , wxID_ANY, _("Year:"));
+                , wxID_ANY, _t("Year:"));
             mmSetOwnFont(itemStaticTextH1, GetFont().Larger());
             itemBoxSizerHeader->Add(itemStaticTextH1, 0, wxALL | wxALIGN_CENTER_VERTICAL, 1);
             itemBoxSizerHeader->AddSpacer(5);
@@ -322,7 +323,7 @@
         {
             cleanupmem_ = true;
             wxStaticText* itemStaticTextH1 = new wxStaticText(itemPanel3
-                , wxID_ANY, _("Budget:"));
+                , wxID_ANY, _t("Budget:"));
             mmSetOwnFont(itemStaticTextH1, GetFont().Larger());
             itemBoxSizerHeader->Add(itemStaticTextH1, 0, wxALL | wxALIGN_CENTER_VERTICAL, 1);
             itemBoxSizerHeader->AddSpacer(5);
@@ -354,18 +355,16 @@
 
         if (rp & rb_->RepParams::ACCOUNTS_LIST)
         {
-            wxStaticText* itemStaticTextH1 = new wxStaticText(itemPanel3, wxID_ANY, _("Accounts:"));
+            wxStaticText* itemStaticTextH1 = new wxStaticText(itemPanel3, wxID_ANY, _t("Accounts:"));
             mmSetOwnFont(itemStaticTextH1, GetFont().Larger());
             itemBoxSizerHeader->Add(itemStaticTextH1, 0, wxALL | wxALIGN_CENTER_VERTICAL, 1);
             itemBoxSizerHeader->AddSpacer(5);
             m_accounts = new wxChoice(itemPanel3, ID_CHOICE_ACCOUNTS);
-            m_accounts->Append(_("All Accounts"));
-            m_accounts->Append(_u("Specific Accounts…"));
-            for (const auto& e : Model_Account::TYPE_CHOICES)
-            {
-                if (e.first != Model_Account::TYPE_ID_INVESTMENT) {
-                    m_accounts->Append(wxGetTranslation(e.second), new wxStringClientData(e.second));
-                }
+            m_accounts->Append(_t("All Accounts"));
+            m_accounts->Append(_tu("Specific Accounts…"));
+            for (int i = 0; i < Model_Account::TYPE_ID_size; ++i) {
+                wxString type = Model_Account::type_name(i);
+                m_accounts->Append(wxGetTranslation(type), new wxStringClientData(type));
             }
             m_accounts->SetSelection(rb_->getAccountSelection());
 
@@ -376,7 +375,7 @@
         if (rp & rb_->RepParams::FORWARD_MONTHS)
         {
             wxStaticText* itemStaticTextH1 = new wxStaticText(itemPanel3
-                , wxID_ANY, _("Future Months:"));
+                , wxID_ANY, _t("Future Months:"));
             mmSetOwnFont(itemStaticTextH1, GetFont().Larger());
             itemBoxSizerHeader->Add(itemStaticTextH1, 0, wxALL | wxALIGN_CENTER_VERTICAL, 1);
             itemBoxSizerHeader->AddSpacer(5);
@@ -391,13 +390,13 @@
         if (rp & rb_->RepParams::CHART)
         {
             wxStaticText* itemStaticTextH1 = new wxStaticText(itemPanel3
-                , wxID_ANY, _("Chart:"));
+                , wxID_ANY, _t("Chart:"));
             mmSetOwnFont(itemStaticTextH1, GetFont().Larger());
             itemBoxSizerHeader->Add(itemStaticTextH1, 0, wxALL | wxALIGN_CENTER_VERTICAL, 1);
             itemBoxSizerHeader->AddSpacer(5);
             m_chart = new wxChoice(itemPanel3, ID_CHOICE_CHART);
-            m_chart->Append(_("Show"));
-            m_chart->Append(_("Hide"));
+            m_chart->Append(_t("Show"));
+            m_chart->Append(_t("Hide"));
             m_chart->SetSelection(rb_->getChartSelection());
 
             itemBoxSizerHeader->Add(m_chart, 0, wxALL | wxALIGN_CENTER_VERTICAL, 1);
@@ -561,9 +560,9 @@
     {
         wxStringTokenizer tokenizer(sData, ":");
         int i =0;
-        int catID = -1;
-        int subCatID = -1;
-        int payeeID = -1;
+        int64 catID = -1;
+        int64 subCatID = -1;
+        int64 payeeID = -1;
         // categoryID, subcategoryID, payeeID
         //      subcategoryID = -2 means inlude all sub categories for the given category
         while ( tokenizer.HasMoreTokens() )
@@ -636,7 +635,7 @@
                 if (Model_Checking::foreignTransaction(*transaction))
                 {
                     Model_Translink::Data translink = Model_Translink::TranslinkRecord(transId);
-                    if (translink.LINKTYPE == Model_Attachment::REFTYPE_STR_STOCK)
+                    if (translink.LINKTYPE == Model_Stock::refTypeName)
                     {
                         ShareTransactionDialog dlg(m_frame, &translink, transaction);
                         if (dlg.ShowModal() == wxID_OK)
@@ -647,7 +646,7 @@
                     }
                     else
                     {
-                        mmAssetDialog dlg(m_frame, m_frame, &translink, transaction);
+                        mmAssetDialog dlg(m_frame, &translink, transaction);
                         if (dlg.ShowModal() == wxID_OK)
                         {
                             rb_->getHTMLText();
@@ -672,11 +671,12 @@
     else if (uri.StartsWith("attachment:", &sData))
     {
         const wxString RefType = sData.BeforeFirst('|');
-        int RefId = wxAtoi(sData.AfterFirst('|'));
+        long long refId;
+        sData.AfterFirst('|').ToLongLong(&refId);
 
-        if (Model_Attachment::REFTYPE_STR.Index(RefType) != wxNOT_FOUND && RefId > 0)
+        if (Model_Attachment::reftype_id(RefType) != -1 && refId > 0)
         {
-            mmAttachmentManage::OpenAttachmentFromPanelIcon(m_frame, RefType, RefId);
+            mmAttachmentManage::OpenAttachmentFromPanelIcon(m_frame, RefType, refId);
             const auto name = getVFname4print("rep", getPrintableBase()->getHTMLText());
             browser_->LoadURL(name);
         }
diff -Naur a/src/mmreportspanel.h b/src/mmreportspanel.h
--- a/src/mmreportspanel.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmreportspanel.h	2025-07-09 01:46:59.656940555 +0200
@@ -51,7 +51,7 @@
         const wxString& name = "mmReportsPanel");
 
     void CreateControls();
-    void sortTable() {}
+    void sortList() {}
 
     bool saveReportText(bool initial = true);
     mmPrintableBase* getPrintableBase();
diff -Naur a/src/mmSimpleDialogs.cpp b/src/mmSimpleDialogs.cpp
--- a/src/mmSimpleDialogs.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmSimpleDialogs.cpp	2025-07-09 01:46:59.648940508 +0200
@@ -18,6 +18,13 @@
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ********************************************************/
 
+#include "wx/dcbuffer.h"
+#include "wx/popupwin.h"
+#include "wx/spinctrl.h"
+#include <wx/graphics.h>
+#include <wx/renderer.h>
+#include <wx/richtooltip.h>
+
 #include "mmSimpleDialogs.h"
 #include "constants.h"
 #include "images_list.h"
@@ -28,20 +35,15 @@
 #include "util.h"
 #include "validators.h"
 
-#include "model/Model_Account.h"
 #include "model/Model_Setting.h"
-
-#include "wx/graphics.h"
-#include <wx/renderer.h>
-#include <wx/richtooltip.h>
+#include "model/Model_Account.h"
+#include "model/Model_Payee.h"
+#include "model/Model_Category.h"
+#include "model/Model_Tag.h"
 
 //------- Pop-up calendar, currently only used for MacOS only
 // See: https://github.com/moneymanagerex/moneymanagerex/issues/3139
 
-#include "wx/dcbuffer.h"
-#include "wx/popupwin.h"
-#include "wx/spinctrl.h"
-
 //----------------------------------------------------------------------------
 // mmCalendarPopup
 //----------------------------------------------------------------------------
@@ -426,7 +428,7 @@
     else if (event.GetId() == mmID_CATEGORY && event.GetUnicodeKey() == ':')
     {
         this->SetEvtHandlerEnabled(false);
-        ChangeValue(text.Trim().Append(Model_Infotable::instance().GetStringInfo("CATEG_DELIMITER", ":")));
+        ChangeValue(text.Trim().Append(Model_Infotable::instance().getString("CATEG_DELIMITER", ":")));
         SetInsertionPointEnd();
         this->SetEvtHandlerEnabled(true);
     }
@@ -771,10 +773,10 @@
     if (GetSize().GetX() > 40)
     {
         if (m_color_value <= 0) {
-            SetLabel(wxString::Format(_("&Clear color")));
+            SetLabel(wxString::Format(_t("&Clear color")));
         }
         else {
-            SetLabel(wxString::Format(_("Color #&%i"), m_color_value));
+            SetLabel(wxString::Format(_t("Color #&%i"), m_color_value));
         }
     }
     event.Skip();
@@ -783,19 +785,18 @@
 void mmColorButton::OnColourButton(wxCommandEvent& event)
 {
     wxMenu mainMenu;
-    wxMenuItem* menuItem = new wxMenuItem(&mainMenu, wxID_HIGHEST, wxString::Format(_("&Clear color"), 0));
+    wxMenuItem* menuItem = new wxMenuItem(&mainMenu, wxID_HIGHEST, wxString::Format(_t("&Clear color"), 0));
     mainMenu.Append(menuItem);
 
     for (int i = 1; i <= 7; ++i)
     {
-        menuItem = new wxMenuItem(&mainMenu, wxID_HIGHEST + i, wxString::Format(_("Color #&%i"), i));
+        menuItem = new wxMenuItem(&mainMenu, wxID_HIGHEST + i, wxString::Format(_t("Color #&%i"), i));
 #ifdef __WXMSW__
         menuItem->SetBackgroundColour(getUDColour(i)); //only available for the wxMSW port.
         menuItem->SetTextColour(*bestFontColour(getUDColour(i)));
 #endif
         wxBitmap bitmap(mmBitmapBundle(png::EMPTY, mmBitmapButtonSize).GetDefaultSize());
         wxMemoryDC memoryDC(bitmap);
-        wxRect rect(memoryDC.GetSize());
 
         memoryDC.SetBackground(wxBrush(getUDColour(i)));
         memoryDC.Clear();
@@ -827,14 +828,13 @@
     : wxChoice(parent, id)
 {
     static const std::vector <std::pair<wxString, wxString> > DATA = {
-          {".", "."}
-        , {",", ","}
-        , {wxTRANSLATE("None"), ""}
+        { ".", "." },
+        { ",", "," },
+        { _n("None"), "" }
     };
 
     for (const auto& entry : DATA) {
-        this->Append(wxGetTranslation(entry.first)
-            , new wxStringClientData(entry.second));
+        this->Append(wxGetTranslation(entry.first), new wxStringClientData(entry.second));
     }
 
     Model_Currency::Data* base_currency = Model_Currency::GetBaseCurrency();
@@ -946,10 +946,10 @@
     wxButton* button12Right = new wxButton(this, wxID_FORWARD, ">>");
     button12Right->SetMinSize(wxSize(y, -1));
 
-    mmToolTip(button12Left, _("Subtract one year"));
-    mmToolTip(buttonLeft, _("Subtract one month"));
-    mmToolTip(buttonRight, _("Add one month"));
-    mmToolTip(button12Right, _("Add one year"));
+    mmToolTip(button12Left, _t("Subtract one year"));
+    mmToolTip(buttonLeft, _t("Subtract one month"));
+    mmToolTip(buttonRight, _t("Add one month"));
+    mmToolTip(button12Right, _t("Add one year"));
 
     box_sizer->Add(button12Left);
     box_sizer->Add(buttonLeft);
@@ -1005,36 +1005,36 @@
 
 void mmErrorDialogs::MessageInvalid(wxWindow *parent, const wxString &message)
 {
-    const wxString& msg = wxString::Format(_("Entry %s is invalid"), message, wxICON_ERROR);
-    MessageError(parent, msg, _("Invalid Entry"));
+    const wxString& msg = wxString::Format(_t("Entry %s is invalid"), message, wxICON_ERROR);
+    MessageError(parent, msg, _t("Invalid Entry"));
 }
 
 void mmErrorDialogs::InvalidCategory(wxWindow *win)
 {
-    ToolTip4Object(win, _("Please select an existing category"), _("Invalid Category"), wxICON_ERROR);
+    ToolTip4Object(win, _t("Please select an existing category"), _t("Invalid Category"), wxICON_ERROR);
 }
 
 void mmErrorDialogs::InvalidFile(wxWindow *object, bool open)
 {
-    const wxString errorHeader = open ? _("Unable to open file.") : _("File name is empty.");
-    const wxString errorMessage = _("Please select the file for this operation.");
+    const wxString errorHeader = open ? _t("Unable to open file.") : _t("File name is empty.");
+    const wxString errorMessage = _t("Please select the file for this operation.");
 
     ToolTip4Object(object, errorMessage, errorHeader, wxICON_ERROR);
 }
 
 void mmErrorDialogs::InvalidAccount(wxWindow *object, bool transfer, TOOL_TIP tm)
 {
-    const wxString errorHeader = _("Invalid Account");
+    const wxString errorHeader = _t("Invalid Account");
     wxString errorMessage;
     if (!transfer)
-        errorMessage = _("Please select the account for this transaction.");
+        errorMessage = _t("Please select the account for this transaction.");
     else
-        errorMessage = _("Please specify which account the transfer is going to.");
+        errorMessage = _t("Please specify which account the transfer is going to.");
 
-    wxString errorTips = _("Selection can be made by using the dropdown button.");
+    wxString errorTips = _t("Selection can be made by using the dropdown button.");
     if (tm == TOOL_TIP::MESSAGE_POPUP_BOX)
     {
-        errorTips = _("Activating the button will provide a selection box where the account can be selected.");
+        errorTips = _t("Activating the button will provide a selection box where the account can be selected.");
     }
     errorMessage = errorMessage + "\n\n" + errorTips + "\n";
 
@@ -1043,8 +1043,8 @@
 
 void mmErrorDialogs::InvalidPayee(wxWindow *object)
 {
-    const wxString errorHeader = _("Invalid Payee");
-    const wxString errorMessage = _("Please type in a new payee,\n"
+    const wxString errorHeader = _t("Invalid Payee");
+    const wxString errorMessage = _t("Please type in a new payee,\n"
         "or make a selection using the dropdown button.")
         + "\n";
     ToolTip4Object(object, errorMessage, errorHeader, wxICON_ERROR);
@@ -1052,24 +1052,24 @@
 
 void mmErrorDialogs::InvalidName(wxTextCtrl *textBox, bool alreadyexist)
 {
-    const wxString errorHeader = _("Invalid Name");
+    const wxString errorHeader = _t("Invalid Name");
     wxString errorMessage;
     if (alreadyexist)
-        errorMessage = _("Already exist!");
+        errorMessage = _t("Already exist!");
     else
-        errorMessage = _("Please type in a non empty name.");
+        errorMessage = _t("Please type in a non empty name.");
 
     ToolTip4Object(textBox, errorMessage, errorHeader, wxICON_ERROR);
 }
 
 void mmErrorDialogs::InvalidSymbol(wxTextCtrl *textBox, bool alreadyexist)
 {
-    const wxString errorHeader = _("Invalid Name");
+    const wxString errorHeader = _t("Invalid Name");
     wxString errorMessage;
     if (alreadyexist)
-        errorMessage = _("Already exist!");
+        errorMessage = _t("Already exist!");
     else
-        errorMessage = _("Please type in a non empty symbol.");
+        errorMessage = _t("Please type in a non empty symbol.");
 
     ToolTip4Object(textBox, errorMessage, errorHeader, wxICON_ERROR);
 }
@@ -1101,7 +1101,7 @@
     SetIcon(mmex::getProgramIcon());
 
     wxButton* ok = static_cast<wxButton*>(FindWindow(wxID_OK));
-    if (ok) ok->SetLabel(_("&OK "));
+    if (ok) ok->SetLabel(_t("&OK "));
     wxButton* ca = static_cast<wxButton*>(FindWindow(wxID_CANCEL));
     if (ca) ca->SetLabel(wxGetTranslation(g_CancelLabel));
     Fit();
@@ -1172,8 +1172,8 @@
     textCtrl_ = new wxStyledTextCtrl(this, wxID_DEFAULT, wxDefaultPosition, wxDefaultSize, wxBORDER_NONE);
     if (operatorAllowed_)
         mmToolTip(textCtrl_,
-            _("Enter tags to search, optionally separated by the operators '&' and '|'.") + "\n" +
-            _("The default operator between consecutive tags is AND, use '|' to change the operator to OR.")
+            _t("Enter tags to search, optionally separated by the operators '&' and '|'.") + "\n" +
+            _t("The default operator between consecutive tags is AND, use '|' to change the operator to OR.")
         );
     // Set options for the text ctrl
     textCtrl_->SetLexer(wxSTC_LEX_NULL);
@@ -1428,7 +1428,7 @@
 #ifndef __WXMAC__    
     if (!popupWindow_->dismissedByButton_)
     {
-        Validate();
+        ValidateTagText();
         wxPoint pos = ClientToScreen(textCtrl_->GetPosition());
         pos.y += (textCtrl_->GetSize().GetHeight() + panelHeight_) / 2;
         pos.x -= textOffset_;
@@ -1484,7 +1484,7 @@
             textCtrl_->AutoCompComplete();
         }
 
-        Validate();
+        ValidateTagText();
         return;
     }
     else if (keyCode == WXK_TAB && !event.AltDown())
@@ -1501,7 +1501,7 @@
     {
         textCtrl_->AutoCompCancel();
         textCtrl_->InsertText(textCtrl_->GetInsertionPoint(), " ");
-        Validate();
+        ValidateTagText();
         return;
     }
     event.Skip();
@@ -1578,13 +1578,13 @@
             pos = end + 1;
         }
     }
-    Validate();
+    ValidateTagText();
 }
 
 void mmTagTextCtrl::OnPaste(wxStyledTextEvent& event)
 {
     wxString currText = textCtrl_->GetText();
-    Validate(currText.insert(textCtrl_->GetInsertionPoint(), event.GetString()));
+    ValidateTagText(currText.insert(textCtrl_->GetInsertionPoint(), event.GetString()));
     event.SetString("");
 }
 
@@ -1592,7 +1592,7 @@
 {
     textCtrl_->AutoCompCancel();
     // Remove any non-tags
-    Validate();
+    ValidateTagText();
     wxString tagString;
     wxArrayString tags = parseTags(textCtrl_->GetText());
     for (const auto& tag : tags)
@@ -1644,9 +1644,8 @@
         int wordEnd = textCtrl_->WordEndPosition(position, true);
         wxString word = textCtrl_->GetTextRange(wordStart, wordEnd);
 
-        auto it = tag_map_.find(word);
         // If the word is a valid tag, color it
-        if (it != tag_map_.end())
+        if (auto it = tag_map_.find(word); it != tag_map_.end())
         {
             textCtrl_->StartStyling(wordStart);
             textCtrl_->SetStyling(wordEnd - wordStart, 1);
@@ -1743,7 +1742,7 @@
 }
 
 /* Validates all tags passed in tagText, or the contents of the text control if tagText is blank */
-bool mmTagTextCtrl::Validate(const wxString& tagText)
+bool mmTagTextCtrl::ValidateTagText(const wxString& tagText)
 {
     // Clear stored tags
     tags_.clear();
@@ -1773,7 +1772,7 @@
         if (tag_map_.find(tag) == tag_map_.end())
         {
             // Prompt user to create a new tag
-            if (wxMessageDialog(nullptr, wxString::Format(_("Create new tag '%s'?"), tag), _("New tag entered"), wxYES_NO).ShowModal() == wxID_YES)
+            if (wxMessageDialog(nullptr, wxString::Format(_t("Create new tag '%s'?"), tag), _t("New tag entered"), wxYES_NO).ShowModal() == wxID_YES)
             {
                 Model_Tag::Data* newTag = Model_Tag::instance().create();
                 newTag->TAGNAME = tag;
@@ -1782,6 +1781,13 @@
                 // Save the new tag to reference
                 tag_map_[tag] = newTag->TAGID;
                 tagCheckListBox_->Append(tag);
+
+                // Generate an event to tell the parent that a new tag has been added
+                // This is necessary for dialogs that contain multiple tag controls (e.g. split transaction)
+                // since the parent must reinitialize other tag controls to include the new tag
+                wxListEvent evt(wxEVT_COMMAND_LIST_INSERT_ITEM);
+                evt.SetId(GetId());
+                GetEventHandler()->AddPendingEvent(evt);
             }
             else
             {
@@ -1838,8 +1844,7 @@
 
         if (tagUsed) continue;
 
-        auto it = tag_map_.find(token);
-        if (it != tag_map_.end())
+        if (auto it = tag_map_.find(token); it != tag_map_.end())
             // case correction for existing tag
             tags.push_back((*it).first);
         else
diff -Naur a/src/mmSimpleDialogs.h b/src/mmSimpleDialogs.h
--- a/src/mmSimpleDialogs.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmSimpleDialogs.h	2025-07-09 01:46:59.648940508 +0200
@@ -47,7 +47,7 @@
     virtual ~mmCalculatorPopup();
 
     void SetValue(wxString& value); 
-    void SetFocus();
+    void SetFocus() override;
     void SetTarget(mmTextCtrl* target);
 
     virtual void Popup(wxWindow* focus = NULL) override
@@ -424,7 +424,7 @@
         const wxSize& size = wxDefaultSize, long style = 0
     );
     bool IsValid();
-    bool Validate(const wxString& tagText = wxEmptyString);
+    bool ValidateTagText(const wxString& tagText = wxEmptyString);
     const wxArrayInt64 GetTagIDs() const;
     const wxArrayString GetTagStrings();
     void Reinitialize();
@@ -466,7 +466,7 @@
     wxColour bgColorDisabled_ = wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE);
 };
 
-inline bool mmTagTextCtrl::IsValid() { return Validate(); }
+inline bool mmTagTextCtrl::IsValid() { return ValidateTagText(); }
 inline const wxArrayString mmTagTextCtrl::GetTagStrings() { return parseTags(textCtrl_->GetText()); }
 inline void mmTagTextCtrl::Reinitialize() { init(); }
 inline void mmTagTextCtrl::SetText(const wxString& text) { textCtrl_->SetText(text); }
diff -Naur a/src/mmTextCtrl.cpp b/src/mmTextCtrl.cpp
--- a/src/mmTextCtrl.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmTextCtrl.cpp	2025-07-09 01:46:59.648940508 +0200
@@ -85,7 +85,7 @@
         {
             err = pattern.GetMatch(err, 1);
         }
-        mmErrorDialogs::ToolTip4Object(this, err, _("Invalid Value"));
+        mmErrorDialogs::ToolTip4Object(this, err, _t("Invalid Value"));
         this->ChangeValue(str);
         return false;
     }
@@ -111,10 +111,10 @@
     if (!GetDouble(amount) || (positive_value && amount < 0))
     {
         mmErrorDialogs::ToolTip4Object(this
-            , wxString(positive_value ? _("Please enter a positive or calculated value.") : _("Please enter a calculated value."))
+            , wxString(positive_value ? _t("Please enter a positive or calculated value.") : _t("Please enter a calculated value."))
             + "\n\n"
-            + _("Tip: For calculations, enter expressions like (2+2)*(2+2)\nCalculations will be evaluated and the result used as the entry.")
-            , _("Invalid Amount.")
+            + _t("Tip: For calculations, enter expressions like (2+2)*(2+2)\nCalculations will be evaluated and the result used as the entry.")
+            , _t("Invalid Amount.")
             , wxICON_ERROR);
         //SetFocus();
         return false;
@@ -126,7 +126,7 @@
 {
     wxString dp;
 
-    auto localeStr = Model_Infotable::instance().GetStringInfo("LOCALE", "");
+    auto localeStr = Model_Infotable::instance().getString("LOCALE", "");
 
     // If there is no defined locale, use the currency decimal
     if (localeStr.empty())
diff -Naur a/src/mmTips.h b/src/mmTips.h
--- a/src/mmTips.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/mmTips.h	2025-07-09 01:46:59.648940508 +0200
@@ -19,60 +19,57 @@
 
 static const wxString TIPS [] =
 {
-    wxTRANSLATE("Recommendation: Always backup your .mmb database file regularly."),
-    wxTRANSLATE("Recommendation: If upgrading to a new version of MMEX, make sure you backup your .mmb database file before doing so."),
-    wxTRANSLATE("Recommendation: Use copy (Ctrl+C) and paste (Ctrl+V) for frequently used transactions."),
-    wxTRANSLATE("Tip: Remember to make backups of your .mmb database file."),
-    wxTRANSLATE("Tip: The .mmb database file is not encrypted. That means anyone else having the proper know how can actually open the file and read the contents. So make sure that if you are storing any sensitive financial information it is properly guarded."),
-    wxTRANSLATE("Tip: To mark a transaction as reconciled, select the transaction and press the “R” key. To mark a transaction as unreconciled, select the transaction and press the “U” key."),
-    wxTRANSLATE("Tip: To mark a transaction as requiring followup, select the transaction and press the “F” key."),
-    wxTRANSLATE("Tip: MMEX supports printing of all reports that can be viewed. The print options are available under the menu, File → Print."),
-    wxTRANSLATE("Tip: You can modify some runtime behavior of MMEX by changing the settings in Options."),
-    wxTRANSLATE("Tip: To print a statement with transactions from any arbitrary set of criteria, use the transaction filter to select the transactions you want and then do a print from the menu."),
-    wxTRANSLATE("Tip: Set exchange rate for currencies in case if you have accounts with different currencies."),
-
-    wxTRANSLATE("Category Manager tip: Pressing the “H” key will cycle through all categories starting with the letter h."),
-    wxTRANSLATE("Category Manager tip: Pressing 2 key combination will cycle through all categories starting with that key combination. Example: Pressing ho will select Homeneeds, Home, House Tax, etc…"),
-
-    wxTRANSLATE("Never endorse a loan. If the borrower—your friend, family member, significant other, whoever—misses payments, your credit score will take a plunge, the lender can come after you for the money, and it will likely destroy your relationship. Plus, if the bank is requiring a cosigner, the bank does not trust the person to make the payments."),
-
-    wxTRANSLATE("Grocery tip: Avoid grocery shopping when hungry or stressed. Hunger and stress can make you do strange things, like buying lots of chocolate or gimmicky processed foods. Plan to go to the store when you are well-fed and relaxed. That way, you can stick to your list and not overspend on food you do not need."),
-    wxTRANSLATE("Grocery tip: Make a shopping list. A shopping list saves money by helping you avoid buying products you do not need. The simplest way is to track consumables as you use them. Keep a magnetic notepad on the fridge and jot down what you need as you run out."),
-    wxTRANSLATE("Grocery tip: Buy fruits and vegetables in season."),
-    wxTRANSLATE("Grocery tip: Make sure your family consumes everything you purchase. Every month or so, hold a pantry challenge during which you use up as many pantry goods as possible before you shop again. A pantry challenge cuts down on waste and lets you get a sense of how much you are overbuying."),
-    wxTRANSLATE("Grocery tip: Reduce waste. Adopting better grocery shopping habits is one way to cut back on wasted food and money. Make a list of everything you throw out without using, such as spoiled leftovers or soggy lettuce, to get a sense of the full scale of the issue."),
-    wxTRANSLATE("Grocery tip: Read sales flyers. Review each store’s flyer and match what is on sale with what is on your list or plan meals around sale items.  It is sometimes more cost-effective to visit multiple stores in one week to get the best value."),
-
-    wxTRANSLATE("Cut back on subscriptions. Do you really need to subscribe to every streaming service? Are you using a paid service enough to justify the expense, or can you survive with the ad-supported free one? Do you need that monthly book club, or can you head to the library once per month instead?"),
-    wxTRANSLATE("Use open source alternatives to proprietary software. Search at https://www.opensourcealternative.to/"),
-
-    wxTRANSLATE("Parent tip: If you are asked to be a guarantor for a loan for your college student, first check to see if your child has maxed out federal loan, grant, and scholarship options."),
-
-    wxTRANSLATE("Get out of debt tip: Pay yourself 10% first. Put this into an account that is hard to touch. Make sure it is a chore to get the money out (you have to drive to the bank), so you will only tap it consciously and for major expenses."),
-    wxTRANSLATE("Get out of debt tip: Establish an emergency fund."),
-    wxTRANSLATE("Get out of debt tip: Stop acquiring new debt."),
-    wxTRANSLATE("Get out of debt tip: Create a realistic budget for your expenses."),
-    wxTRANSLATE("Get out of debt tip: Spend less than you earn."),
-    wxTRANSLATE("Get out of debt tip: Pay more than the minimum."),
-    wxTRANSLATE("Get out of debt tip: If you have a mountain of debt, studies show paying off the smallest debts can give you the confidence to tackle the larger ones."),
-    wxTRANSLATE("Before going to a shop and buy something: take the time making a list of what you really need. In the shop buy what is in your list.")
+    _n("Recommendation: Back up the .mmb database file regularly."),
+    _n("Recommendation: If upgrading to a new version of MMEX, ensure the .mmb database file is backed up before doing so."),
+    _n("Recommendation: Use copy (Ctrl+C) and paste (Ctrl+V) for frequently used transactions."),
+    _n("Tip: Remember to make backups of the .mmb database file."),
+    _n("Tip: If the .mmb database file is unencrypted, anyone who has the knowledge can open the database file and read the contents. Ensure that any sensitive financial information stored is properly secured."),
+    _n("Tip: To mark a transaction as reconciled, select the transaction and press the “R” key. To mark a transaction as unreconciled, select the transaction and press the “U” key."),
+    _n("Tip: To mark a transaction as requiring followup, select the transaction and press the “F” key."),
+    _n("Tip: MMEX supports printing of all reports that can be viewed. The print options are available under the menu, File → Print."),
+    _n("Tip: MMEX runtime behavior can be changed by modifying the settings in Options."),
+    _n("Tip: To print a statement with transactions from any arbitrary set of criteria, use the transaction filter to select the transactions required and then select print from the menu."),
+    _n("Tip: Set the currency exchange rates if there are accounts with different currencies."),
+
+    _n("Category Manager tip: Pressing the “H” key will cycle through all categories starting with the letter h."),
+    _n("Category Manager tip: Pressing 2 key combination will cycle through all categories starting with that key combination. Example: Pressing ho will select Homeneeds, Home, House Tax, etc…"),
+
+    _n("Never endorse a loan. If the borrower—a friend, a family member, a significant other, or whoever—misses payments, your credit score will take a plunge, the lender can come after you for the money, and it will likely destroy your relationship. Plus, if the bank is requiring a cosigner, the bank does not trust the person to make the payments."),
+
+    _n("Grocery tip: Avoid grocery shopping when hungry or stressed. Hunger and stress can make you do strange things, like buying lots of chocolate or gimmicky processed foods. Plan to go to the store when you are well-fed and relaxed. That way, you can stick to your list and not overspend on food you do not need."),
+    _n("Grocery tip: Make a shopping list. A shopping list saves money by helping to avoid buying products that are not required. The simplest way is to track consumables as they are used. A magnetic notepad on the fridge can help to write down items that need to be bought."),
+    _n("Grocery tip: Buy fruits and vegetables in season."),
+    _n("Grocery tip: Ensure your family consumes everything you purchase. Every month or so, hold a pantry challenge during which you use up as many pantry goods as possible before you shop again. A pantry challenge cuts down on waste and lets you get a sense of how much you are overbuying."),
+    _n("Grocery tip: Reduce waste. Adopting better grocery shopping habits is one way to cut back on wasted food and money. Make a list of everything you throw out without using, such as spoiled leftovers or soggy lettuce, to get a sense of the full scale of the issue."),
+    _n("Grocery tip: Read sales flyers. Review each store’s flyer and match what is on sale with what is on your list or plan meals around sale items.  It is sometimes more cost-effective to visit multiple stores in one week to get the best value."),
+
+    _n("Cut back on subscriptions. Is a subscription to every streaming service required? Is the paid service expense required, or is an advertising-supported free service sufficient? Is the book club membership required, or is a visit to the library once per month sufficient?"),
+    _n("Use open source alternatives to proprietary software. Search at https://www.opensourcealternative.to/"),
+
+    _n("Parent tip: If you are asked to be a guarantor for a loan for your college student, first check to see if your child has maxed out federal loan, grant, and scholarship options."),
+
+    _n("Get out of debt tip: Pay yourself 10% first. Put this into an account that is hard to touch. Ensure it is a chore to get the money out (you have to drive to the bank), so you will only tap it consciously and for major expenses."),
+    _n("Get out of debt tip: Establish an emergency fund."),
+    _n("Get out of debt tip: Stop acquiring new debt."),
+    _n("Get out of debt tip: Create a realistic budget for the expenses."),
+    _n("Get out of debt tip: Spend less than you earn."),
+    _n("Get out of debt tip: Pay more than the minimum."),
+    _n("Get out of debt tip: If you have a mountain of debt, studies show paying off the smallest debts can give you the confidence to tackle the larger ones."),
+    _n("Before going to a shop and buying something, take the time to make a list of what you really need. In the shop, only buy what is on your list.")
 };
 
 static const wxString STOCKTIPS[] = {
-    wxTRANSLATE("Using MMEX it is possible to track stocks/mutual funds investments."),
-    wxTRANSLATE("To create new stocks entry the Symbol, Number of shares and Purchase prise should be entered."),
-    wxTRANSLATE("Sample of UK (HSBC HLDG) share: HSBA.L"),
-    wxTRANSLATE("Before you start investing, have a fully-funded emergency fund."),
-    
-    wxTRANSLATE("Before you start investing, have a fully-funded emergency fund."),
-    wxTRANSLATE("Before you start investing, know your cash flow (have a budget)."),
-    wxTRANSLATE("Before you start investing, pay off consumer debt — especially credit cards."),
-    wxTRANSLATE("Before you start investing, make net worth your primary tracking metric."),
-    wxTRANSLATE("Before you start investing, clarify your goals and priorities."),
-    wxTRANSLATE("Before you start investing, make sure you understand investing basics."),
-    wxTRANSLATE("Common mistake of investors: only buying companies you know."),
-    wxTRANSLATE("Common mistake of investors: buying companies you like."),
-    wxTRANSLATE("Common mistake of investors: buying buzzworthy companies."),
-    wxTRANSLATE("Common mistake of investors: forgetting to rebalance."),
-
+    _n("Using MMEX it is possible to track stocks/mutual funds investments."),
+    _n("To create new stocks entry the Symbol, Number of shares and Purchase prise should be entered."),
+    _n("Sample of UK (HSBC HLDG) share: HSBA.L"),
+    _n("Before starting to invest, have a fully funded emergency fund."),
+    _n("Before starting to invest, know your cash flow (have a budget)."),
+    _n("Before starting to invest, pay off consumer debt—especially credit cards."),
+    _n("Before starting to invest, make net worth the primary tracking metric."),
+    _n("Before starting to invest, clarify the goals and the priorities."),
+    _n("Before starting to invest, understand the investing basics."),
+    _n("Common mistake of investors: only buying known companies."),
+    _n("Common mistake of investors: only buying companies you like."),
+    _n("Common mistake of investors: only buying buzzworthy companies."),
+    _n("Common mistake of investors: forgetting to rebalance."),
 };
diff -Naur a/src/mmTreeItemData.cpp b/src/mmTreeItemData.cpp
--- a/src/mmTreeItemData.cpp	1970-01-01 01:00:00.000000000 +0100
+++ b/src/mmTreeItemData.cpp	2025-07-09 01:46:59.648940508 +0200
@@ -0,0 +1,65 @@
+/*******************************************************
+ Copyright (C) 2006 Madhan Kanagavel
+ Copyright (C) 2013-2022 Nikolay Akimov
+ Copyright (C) 2021-2024 Mark Whalley (mark@ipx.co.uk)
+
+ This program is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2 of the License, or
+ (at your option) any later version.
+
+ This program is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program; if not, write to the Free Software
+ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ ********************************************************/
+
+#ifdef _MSC_VER
+#pragma comment(lib,"ws2_32.lib")
+#pragma comment(lib,"crypt32.lib")
+#pragma comment(lib,"wldap32.lib")
+#endif
+
+#include "mmTreeItemData.h"
+
+mmTreeItemData::mmTreeItemData(int type, int64 id)
+    : type_(type)
+    , id_(id)
+    , stringData_(wxString::Format("%lld", id))
+    , report_(nullptr)
+{
+}
+
+mmTreeItemData::mmTreeItemData(int type, const wxString& data)
+    : type_(type)
+    , stringData_(data)
+    , report_(nullptr)
+{}
+
+mmTreeItemData::mmTreeItemData(int type, int64 id, const wxString& data)
+    : type_(type)
+    , id_(id)
+    , stringData_(data)
+    , report_(nullptr)
+{}
+
+mmTreeItemData::mmTreeItemData(const wxString& data, mmPrintableBase* report)
+    : type_(mmTreeItemData::REPORT)
+    , stringData_(data)
+    , report_(report)
+{
+    const wxString& n = wxString::Format("REPORT_%d", report_->getReportId());
+    const wxString& settings = Model_Infotable::instance().getString(n, "");
+    report_->initReportSettings(settings);
+}
+
+mmTreeItemData::mmTreeItemData(mmPrintableBase* report, const wxString& data)
+    : type_(mmTreeItemData::GRM)
+    , stringData_(data)
+    , report_(report)
+{}
+
diff -Naur a/src/mmTreeItemData.h b/src/mmTreeItemData.h
--- a/src/mmTreeItemData.h	1970-01-01 01:00:00.000000000 +0100
+++ b/src/mmTreeItemData.h	2025-07-09 01:46:59.648940508 +0200
@@ -0,0 +1,86 @@
+/*******************************************************
+ Copyright (C) 2006 Madhan Kanagavel
+ Copyright (C) 2013-2022 Nikolay Akimov
+ Copyright (C) 2021,2024 Mark Whalley (mark@ipx.co.uk)
+
+ This program is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2 of the License, or
+ (at your option) any later version.
+
+ This program is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program; if not, write to the Free Software
+ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ ********************************************************/
+
+#pragma once
+
+#include "defs.h"
+#include "primitive.h"
+#include "option.h"
+#include "reports/reportbase.h"
+
+class mmTreeItemData : public wxTreeItemData
+{
+public:
+    enum {
+        HOME_PAGE,
+        HELP_PAGE_MAIN,
+        HELP_PAGE_STOCKS,
+        HELP_PAGE_GRM,
+        HELP_BUDGET,
+        HELP_REPORT,
+        CHECKING,
+        BUDGET,
+        INVESTMENT,
+        REPORT,
+        GRM,
+        ASSETS,
+        BILLS,
+        FILTER,
+        FILTER_REPORT,
+        MENU_REPORT,
+        DO_NOTHING
+    };
+
+private:
+    int type_;
+    int64 id_ = -1;
+    wxString stringData_;
+    wxSharedPtr<mmPrintableBase> report_;
+
+public:
+    mmTreeItemData(int type, int64 id);
+    mmTreeItemData(int type, const wxString& data);
+    mmTreeItemData(int type, int64 id, const wxString& data);
+    mmTreeItemData(const wxString& data, mmPrintableBase* report);
+    mmTreeItemData(mmPrintableBase* report, const wxString& data);
+    
+    ~mmTreeItemData() {}
+
+    int getType() const;
+    int64 getId() const;
+    const wxString getString() const;
+    mmPrintableBase* getReport() const;
+    bool isReadOnly() const;
+};
+
+inline int mmTreeItemData::getType() const { return type_; }
+inline int64 mmTreeItemData::getId() const { return id_; }
+inline const wxString mmTreeItemData::getString() const { return stringData_; }
+inline mmPrintableBase* mmTreeItemData::getReport() const { return report_.get(); }
+
+inline bool operator==(const mmTreeItemData& lhs, const mmTreeItemData& rhs)
+{
+    return (
+        lhs.getType()   == rhs.getType() &&
+        lhs.getId()     == rhs.getId() &&
+        lhs.getString() == rhs.getString()
+    );
+};
+
diff -Naur a/src/model/Model_Account.cpp b/src/model/Model_Account.cpp
--- a/src/model/Model_Account.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Account.cpp	2025-07-09 01:46:59.656940555 +0200
@@ -22,38 +22,35 @@
 #include "Model_Stock.h"
 #include "Model_Translink.h"
 #include "Model_Shareinfo.h"
+#include <unordered_set>
 
-const std::vector<std::pair<Model_Account::TYPE_ID, wxString> > Model_Account::TYPE_CHOICES =
-{
-    { Model_Account::TYPE_ID_CASH,        wxString(wxTRANSLATE("Cash")) },
-    { Model_Account::TYPE_ID_CHECKING,    wxString(wxTRANSLATE("Checking")) },
-    { Model_Account::TYPE_ID_CREDIT_CARD, wxString(wxTRANSLATE("Credit Card")) },
-    { Model_Account::TYPE_ID_LOAN,        wxString(wxTRANSLATE("Loan")) },
-    { Model_Account::TYPE_ID_TERM,        wxString(wxTRANSLATE("Term")) },
-    { Model_Account::TYPE_ID_INVESTMENT,  wxString(wxTRANSLATE("Investment")) },
-    { Model_Account::TYPE_ID_ASSET,       wxString(wxTRANSLATE("Asset")) },
-    { Model_Account::TYPE_ID_SHARES,      wxString(wxTRANSLATE("Shares")) },
-};
-
-const std::vector<std::pair<Model_Account::STATUS_ID, wxString> > Model_Account::STATUS_CHOICES =
-{
-    { Model_Account::STATUS_ID_OPEN,   wxString(wxTRANSLATE("Open")) },
-    { Model_Account::STATUS_ID_CLOSED, wxString(wxTRANSLATE("Closed")) }
-};
-
-wxArrayString Model_Account::TYPE_STR = type_str_all();
-const wxString Model_Account::TYPE_STR_CASH        = TYPE_STR[TYPE_ID_CASH];
-const wxString Model_Account::TYPE_STR_CHECKING    = TYPE_STR[TYPE_ID_CHECKING];
-const wxString Model_Account::TYPE_STR_CREDIT_CARD = TYPE_STR[TYPE_ID_CREDIT_CARD];
-const wxString Model_Account::TYPE_STR_LOAN        = TYPE_STR[TYPE_ID_LOAN];
-const wxString Model_Account::TYPE_STR_TERM        = TYPE_STR[TYPE_ID_TERM];
-const wxString Model_Account::TYPE_STR_INVESTMENT  = TYPE_STR[TYPE_ID_INVESTMENT];
-const wxString Model_Account::TYPE_STR_ASSET       = TYPE_STR[TYPE_ID_ASSET];
-const wxString Model_Account::TYPE_STR_SHARES      = TYPE_STR[TYPE_ID_SHARES];
-
-wxArrayString Model_Account::STATUS_STR = status_str_all();
-const wxString Model_Account::STATUS_STR_OPEN   = STATUS_STR[STATUS_ID_OPEN];
-const wxString Model_Account::STATUS_STR_CLOSED = STATUS_STR[STATUS_ID_CLOSED];
+ChoicesName Model_Account::TYPE_CHOICES = ChoicesName({
+    { TYPE_ID_CASH,        _n("Cash") },
+    { TYPE_ID_CHECKING,    _n("Checking") },
+    { TYPE_ID_CREDIT_CARD, _n("Credit Card") },
+    { TYPE_ID_LOAN,        _n("Loan") },
+    { TYPE_ID_TERM,        _n("Term") },
+    { TYPE_ID_INVESTMENT,  _n("Investment") },
+    { TYPE_ID_ASSET,       _n("Asset") },
+    { TYPE_ID_SHARES,      _n("Shares") },
+});
+
+ChoicesName Model_Account::STATUS_CHOICES = ChoicesName({
+    { STATUS_ID_OPEN,   _n("Open") },
+    { STATUS_ID_CLOSED, _n("Closed") }
+});
+
+const wxString Model_Account::TYPE_NAME_CASH        = type_name(TYPE_ID_CASH);
+const wxString Model_Account::TYPE_NAME_CHECKING    = type_name(TYPE_ID_CHECKING);
+const wxString Model_Account::TYPE_NAME_CREDIT_CARD = type_name(TYPE_ID_CREDIT_CARD);
+const wxString Model_Account::TYPE_NAME_LOAN        = type_name(TYPE_ID_LOAN);
+const wxString Model_Account::TYPE_NAME_TERM        = type_name(TYPE_ID_TERM);
+const wxString Model_Account::TYPE_NAME_INVESTMENT  = type_name(TYPE_ID_INVESTMENT);
+const wxString Model_Account::TYPE_NAME_ASSET       = type_name(TYPE_ID_ASSET);
+const wxString Model_Account::TYPE_NAME_SHARES      = type_name(TYPE_ID_SHARES);
+
+const wxString Model_Account::STATUS_NAME_OPEN   = status_name(STATUS_ID_OPEN);
+const wxString Model_Account::STATUS_NAME_CLOSED = status_name(STATUS_ID_CLOSED);
 
 Model_Account::Model_Account()
 : Model<DB_Table_ACCOUNTLIST_V1>()
@@ -92,7 +89,7 @@
     {
         if (skip_closed && status_id(account) == STATUS_ID_CLOSED)
             continue;
-        if (type_id(account) == TYPE_ID_INVESTMENT)
+        if (type_id(account) == TYPE_ID_SHARES)
             continue;
         if (account.ACCOUNTNAME.empty())
             continue;
@@ -108,7 +105,7 @@
     {
         if (skip_closed && status_id(account) == STATUS_ID_CLOSED)
             continue;
-        if (type_id(account) == TYPE_ID_INVESTMENT)
+        if (type_id(account) == TYPE_ID_SHARES)
             continue;
         if (account.ACCOUNTNAME.empty())
             continue;
@@ -117,30 +114,6 @@
     return accounts;
 }
 
-wxArrayString Model_Account::type_str_all()
-{
-    wxArrayString type;
-    int i = 0;
-    for (const auto& item : TYPE_CHOICES)
-    {
-        wxASSERT_MSG(item.first == i++, "Wrong order in Model_Account::TYPE_CHOICES");
-        type.Add(item.second);
-    }
-    return type;
-}
-
-wxArrayString Model_Account::status_str_all()
-{
-    wxArrayString status;
-    int i = 0;
-    for (const auto& item : STATUS_CHOICES)
-    {
-        wxASSERT_MSG(item.first == i++, "Wrong order in Model_Account::STATUS_CHOICES");
-        status.Add(item.second);
-    }
-    return status;
-}
-
 /** Get the Data record instance in memory. */
 Model_Account::Data* Model_Account::get(const wxString& name)
 {
@@ -169,7 +142,7 @@
     if (account)
         return account->ACCOUNTNAME;
     else
-        return _("Account Error");
+        return _t("Account Error");
 }
 
 /** Remove the Data record instance from memory and the database. */
@@ -191,7 +164,7 @@
 
     for (const auto& r : Model_Stock::instance().find(Model_Stock::HELDAT(id)))
     {
-        Model_Translink::RemoveTransLinkRecords(Model_Attachment::REFTYPE_ID_STOCK, r.STOCKID);
+        Model_Translink::RemoveTransLinkRecords<Model_Stock>(r.STOCKID);
         Model_Stock::instance().remove(r.STOCKID);
     }
     this->ReleaseSavepoint();
@@ -252,6 +225,7 @@
     {
         sum += Model_Checking::account_flow(tran, r->ACCOUNTID); 
     }
+
     return sum;
 }
 
@@ -262,12 +236,19 @@
 
 std::pair<double, double> Model_Account::investment_balance(const Data* r)
 {
-    std::pair<double /*origianl input value*/, double /**/> sum;
+    std::pair<double /*market value*/, double /*invest value*/> sum;
     for (const auto& stock: Model_Stock::instance().find(Model_Stock::HELDAT(r->ACCOUNTID)))
     {
         sum.first += Model_Stock::CurrentValue(stock);
         sum.second += Model_Stock::InvestmentValue(stock);
     }
+
+    for (const auto& asset: Model_Asset::instance().find_or(Model_Asset::ASSETNAME(r->ACCOUNTNAME), DB_Table_ASSETS_V1::ASSETTYPE(r->ACCOUNTNAME)))
+    {
+        auto asset_bal = Model_Asset::value(asset);
+        sum.first += asset_bal.second;
+        sum.second += asset_bal.first;
+    }
     return sum;
 }
 
@@ -291,45 +272,9 @@
     return toString(value, &r, precision);
 }
 
-Model_Account::STATUS_ID Model_Account::status_id(const Data* account)
-{
-    if (account->STATUS.CmpNoCase(status_str_all()[STATUS_ID_OPEN]) == 0)
-        return STATUS_ID_OPEN;
-    return STATUS_ID_CLOSED;
-}
-
-Model_Account::STATUS_ID Model_Account::status_id(const Data& account)
-{
-    return status_id(&account);
-}
-
 DB_Table_ACCOUNTLIST_V1::STATUS Model_Account::STATUS(STATUS_ID status, OP op)
 {
-    return DB_Table_ACCOUNTLIST_V1::STATUS(status_str_all()[status], op);
-}
-
-Model_Account::TYPE_ID Model_Account::type_id(const Data* account)
-{
-    static std::unordered_map<wxString, TYPE_ID> cache;
-    const auto it = cache.find(account->ACCOUNTTYPE);
-    if (it != cache.end()) return it->second;
-
-    for (const auto& t : TYPE_CHOICES) 
-    {
-        if (account->ACCOUNTTYPE.CmpNoCase(t.second) == 0)
-        {
-            cache.insert(std::make_pair(account->ACCOUNTTYPE, t.first));
-            return t.first;
-        }
-    }
-
-    cache.insert(std::make_pair(account->ACCOUNTTYPE, TYPE_ID_CHECKING));
-    return TYPE_ID_CHECKING;
-}
-
-Model_Account::TYPE_ID Model_Account::type_id(const Data& account)
-{
-    return type_id(&account);
+    return DB_Table_ACCOUNTLIST_V1::STATUS(status_name(status), op);
 }
 
 bool Model_Account::FAVORITEACCT(const Data* r)
@@ -359,13 +304,13 @@
 int Model_Account::money_accounts_num()
 {
     return
-        Model_Account::instance().find(ACCOUNTTYPE(TYPE_STR_CASH)).size()
-        + Model_Account::instance().find(ACCOUNTTYPE(TYPE_STR_CHECKING)).size()
-        + Model_Account::instance().find(ACCOUNTTYPE(TYPE_STR_CREDIT_CARD)).size()
-        + Model_Account::instance().find(ACCOUNTTYPE(TYPE_STR_LOAN)).size()
-        + Model_Account::instance().find(ACCOUNTTYPE(TYPE_STR_TERM)).size()
-        + Model_Account::instance().find(ACCOUNTTYPE(TYPE_STR_ASSET)).size()
-        + Model_Account::instance().find(ACCOUNTTYPE(TYPE_STR_SHARES)).size();
+        Model_Account::instance().find(ACCOUNTTYPE(TYPE_NAME_CASH)).size()
+        + Model_Account::instance().find(ACCOUNTTYPE(TYPE_NAME_CHECKING)).size()
+        + Model_Account::instance().find(ACCOUNTTYPE(TYPE_NAME_CREDIT_CARD)).size()
+        + Model_Account::instance().find(ACCOUNTTYPE(TYPE_NAME_LOAN)).size()
+        + Model_Account::instance().find(ACCOUNTTYPE(TYPE_NAME_TERM)).size()
+        + Model_Account::instance().find(ACCOUNTTYPE(TYPE_NAME_ASSET)).size()
+        + Model_Account::instance().find(ACCOUNTTYPE(TYPE_NAME_SHARES)).size();
 }
 
 bool Model_Account::Exist(const wxString& account_name)
diff -Naur a/src/model/Model_Account.h b/src/model/Model_Account.h
--- a/src/model/Model_Account.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Account.h	2025-07-09 01:46:59.656940555 +0200
@@ -20,9 +20,10 @@
 #ifndef MODEL_ACCOUNT_H
 #define MODEL_ACCOUNT_H
 
-#include "Model.h"
+#include "choices.h"
 #include "db/DB_Table_Accountlist_V1.h"
-#include "Model_Currency.h" // detect base currency
+#include "Model.h"
+#include "Model_Currency.h"
 #include "Model_Checking.h"
 #include "Model_Billsdeposits.h"
 
@@ -47,28 +48,23 @@
     enum STATUS_ID
     {
         STATUS_ID_OPEN = 0,
-        STATUS_ID_CLOSED
+        STATUS_ID_CLOSED,
+        STATUS_ID_size
     };
-    static wxArrayString TYPE_STR;
-    static const wxString TYPE_STR_CASH;
-    static const wxString TYPE_STR_CHECKING;
-    static const wxString TYPE_STR_CREDIT_CARD;
-    static const wxString TYPE_STR_LOAN;
-    static const wxString TYPE_STR_TERM;
-    static const wxString TYPE_STR_INVESTMENT;
-    static const wxString TYPE_STR_ASSET;
-    static const wxString TYPE_STR_SHARES;
-    static wxArrayString STATUS_STR;
-    static const wxString STATUS_STR_OPEN;
-    static const wxString STATUS_STR_CLOSED;
-
-public:
-    static const std::vector<std::pair<TYPE_ID, wxString> > TYPE_CHOICES;
-    static const std::vector<std::pair<STATUS_ID, wxString> > STATUS_CHOICES;
-
-private:
-    static wxArrayString type_str_all();
-    static wxArrayString status_str_all();
+    static const wxString TYPE_NAME_CASH;
+    static const wxString TYPE_NAME_CHECKING;
+    static const wxString TYPE_NAME_CREDIT_CARD;
+    static const wxString TYPE_NAME_LOAN;
+    static const wxString TYPE_NAME_TERM;
+    static const wxString TYPE_NAME_INVESTMENT;
+    static const wxString TYPE_NAME_ASSET;
+    static const wxString TYPE_NAME_SHARES;
+    static const wxString STATUS_NAME_OPEN;
+    static const wxString STATUS_NAME_CLOSED;
+
+public:
+    static ChoicesName TYPE_CHOICES;
+    static ChoicesName STATUS_CHOICES;
 
 public:
     Model_Account();
@@ -124,13 +120,17 @@
     static wxString toString(double value, const Data* r, int precision = 2);
     static wxString toString(double value, const Data& r, int precision = 2);
 
+    static const wxString type_name(int id);
+    static int type_id(const wxString& name, int default_id = TYPE_ID_CHECKING);
+    static TYPE_ID type_id(const Data* account);
+    static TYPE_ID type_id(const Data& account);
+
+    static const wxString status_name(int id);
+    static int status_id(const wxString& name, int default_id = STATUS_ID_CLOSED);
     static STATUS_ID status_id(const Data* account);
     static STATUS_ID status_id(const Data& account);
     static DB_Table_ACCOUNTLIST_V1::STATUS STATUS(STATUS_ID status, OP op = EQUAL);
 
-    static TYPE_ID type_id(const Data* account);
-    static TYPE_ID type_id(const Data& account);
-
     static bool FAVORITEACCT(const Data* r);
     static bool FAVORITEACCT(const Data& r);
 
@@ -148,9 +148,60 @@
 
     const Data_Set FilterAccounts(const wxString& account_pattern, bool skip_closed = false);
 
+public:
+    static const wxString refTypeName;
 };
 
-inline wxDateTime Model_Account::get_date_by_string(const wxString& date_str) { return Model::to_date(date_str); }
-inline bool Model_Account::is_positive(int value) { return value > 0 ? true : false; }
+//----------------------------------------------------------------------------
+
+inline const wxString Model_Account::type_name(int id)
+{
+    return TYPE_CHOICES.getName(id);
+}
+
+inline int Model_Account::type_id(const wxString& name, int default_id)
+{
+    return TYPE_CHOICES.findName(name, default_id);
+}
+
+inline Model_Account::TYPE_ID Model_Account::type_id(const Data* account)
+{
+    return static_cast<TYPE_ID>(type_id(account->ACCOUNTTYPE));
+}
+
+inline Model_Account::TYPE_ID Model_Account::type_id(const Data& account)
+{
+    return type_id(&account);
+}
+
+inline const wxString Model_Account::status_name(int id)
+{
+    return STATUS_CHOICES.getName(id);
+}
+
+inline int Model_Account::status_id(const wxString& name, int default_id)
+{
+    return STATUS_CHOICES.findName(name, default_id);
+}
+
+inline Model_Account::STATUS_ID Model_Account::status_id(const Data* account)
+{
+    return static_cast<STATUS_ID>(status_id(account->STATUS));
+}
+
+inline Model_Account::STATUS_ID Model_Account::status_id(const Data& account)
+{
+    return status_id(&account);
+}
+
+inline wxDateTime Model_Account::get_date_by_string(const wxString& date_str)
+{
+    return Model::to_date(date_str);
+}
+
+inline bool Model_Account::is_positive(int value)
+{
+    return value > 0 ? true : false;
+}
 
-#endif // 
+#endif
diff -Naur a/src/model/Model_Asset.cpp b/src/model/Model_Asset.cpp
--- a/src/model/Model_Asset.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Asset.cpp	2025-07-09 01:46:59.656940555 +0200
@@ -21,40 +21,31 @@
 #include "Model_Translink.h"
 #include "Model_CurrencyHistory.h"
 
-const std::vector<std::pair<Model_Asset::TYPE_ID, wxString> > Model_Asset::TYPE_CHOICES = 
-{
-    { Model_Asset::TYPE_ID_PROPERTY,  wxString(wxTRANSLATE("Property")) },
-    { Model_Asset::TYPE_ID_AUTO,      wxString(wxTRANSLATE("Automobile")) },
-    { Model_Asset::TYPE_ID_HOUSE,     wxString(wxTRANSLATE("Household Object")) },
-    { Model_Asset::TYPE_ID_ART,       wxString(wxTRANSLATE("Art")) },
-    { Model_Asset::TYPE_ID_JEWELLERY, wxString(wxTRANSLATE("Jewellery")) },
-    { Model_Asset::TYPE_ID_CASH,      wxString(wxTRANSLATE("Cash")) },
-    { Model_Asset::TYPE_ID_OTHER,     wxString(wxTRANSLATE("Other")) }
-};
-
-const std::vector<std::pair<Model_Asset::STATUS_ID, wxString> > Model_Asset::STATUS_CHOICES = 
-{
-    { Model_Asset::STATUS_ID_CLOSED, wxString(wxTRANSLATE("Closed")) },
-    { Model_Asset::STATUS_ID_OPEN,   wxString(wxTRANSLATE("Open")) }
-};
-
-const std::vector<std::pair<Model_Asset::CHANGE_ID, wxString> > Model_Asset::CHANGE_CHOICES = 
-{
-    { Model_Asset::CHANGE_ID_NONE,       wxString(wxTRANSLATE("None")) },
-    { Model_Asset::CHANGE_ID_APPRECIATE, wxString(wxTRANSLATE("Appreciates")) },
-    { Model_Asset::CHANGE_ID_DEPRECIATE, wxString(wxTRANSLATE("Depreciates")) }
-};
-
-const std::vector<std::pair<Model_Asset::CHANGEMODE_ID, wxString> > Model_Asset::CHANGEMODE_CHOICES = 
-{
-    { Model_Asset::CHANGEMODE_ID_PERCENTAGE, wxString(wxTRANSLATE("Percentage")) },
-    { Model_Asset::CHANGEMODE_ID_LINEAR,     wxString(wxTRANSLATE("Linear")) }
-};
-
-wxArrayString Model_Asset::TYPE_STR = type_str_all();
-wxArrayString Model_Asset::STATUS_STR = status_str_all();
-wxArrayString Model_Asset::CHANGE_STR = change_str_all();
-wxArrayString Model_Asset::CHANGEMODE_STR = changemode_str_all();
+ChoicesName Model_Asset::TYPE_CHOICES = ChoicesName({
+    { TYPE_ID_PROPERTY,  _n("Property") },
+    { TYPE_ID_AUTO,      _n("Automobile") },
+    { TYPE_ID_HOUSE,     _n("Household Object") },
+    { TYPE_ID_ART,       _n("Art") },
+    { TYPE_ID_JEWELLERY, _n("Jewellery") },
+    { TYPE_ID_CASH,      _n("Cash") },
+    { TYPE_ID_OTHER,     _n("Other") }
+});
+
+ChoicesName Model_Asset::STATUS_CHOICES = ChoicesName({
+    { STATUS_ID_CLOSED, _n("Closed") },
+    { STATUS_ID_OPEN,   _n("Open") }
+});
+
+ChoicesName Model_Asset::CHANGE_CHOICES = ChoicesName({
+    { CHANGE_ID_NONE,       _n("None") },
+    { CHANGE_ID_APPRECIATE, _n("Appreciates") },
+    { CHANGE_ID_DEPRECIATE, _n("Depreciates") }
+});
+
+ChoicesName Model_Asset::CHANGEMODE_CHOICES = ChoicesName({
+    { CHANGEMODE_ID_PERCENTAGE, _n("Percentage") },
+    { CHANGEMODE_ID_LINEAR,     _n("Linear") }
+});
 
 Model_Asset::Model_Asset()
 : Model<DB_Table_ASSETS_V1>()
@@ -91,55 +82,7 @@
     if (asset)
         return asset->ASSETNAME;
     else
-        return _("Asset Error");
-}
-
-wxArrayString Model_Asset::type_str_all()
-{
-    wxArrayString types;
-    int i = 0;
-    for (const auto& item: TYPE_CHOICES)
-    {
-        wxASSERT_MSG(item.first == i++, "Wrong order in Model_Asset::TYPE_CHOICES");
-        types.Add(item.second);
-    }
-    return types;
-}
-
-wxArrayString Model_Asset::status_str_all()
-{
-    wxArrayString statusList;
-    int i = 0;
-    for (const auto& item: STATUS_CHOICES)
-    {
-        wxASSERT_MSG(item.first == i++, "Wrong order in Model_Asset::STATUS_CHOICES");
-        statusList.Add(item.second);
-    }
-    return statusList;
-}
-
-wxArrayString Model_Asset::change_str_all()
-{
-    wxArrayString rates;
-    int i = 0;
-    for (const auto& item: CHANGE_CHOICES)
-    {
-        wxASSERT_MSG(item.first == i++, "Wrong order in Model_Asset::CHANGE_CHOICES");
-        rates.Add(item.second);
-    }
-    return rates;
-}
-
-wxArrayString Model_Asset::changemode_str_all()
-{
-    wxArrayString changemodes;
-    int i = 0;
-    for (const auto& item: CHANGEMODE_CHOICES)
-    {
-        wxASSERT_MSG(item.first == i++, "Wrong order in Model_Asset::CHANGEMODE_CHOICES");
-        changemodes.Add(item.second);
-    }
-    return changemodes;
+        return _t("Asset Error");
 }
 
 double Model_Asset::balance()
@@ -147,14 +90,14 @@
     double balance = 0.0;
     for (const auto& r: this->all())
     {
-        balance += value(r);
+        balance += value(r).second;
     }
     return balance;
 }
 
 DB_Table_ASSETS_V1::ASSETTYPE Model_Asset::ASSETTYPE(TYPE_ID type, OP op)
 {
-    return DB_Table_ASSETS_V1::ASSETTYPE(TYPE_STR[type], op);
+    return DB_Table_ASSETS_V1::ASSETTYPE(type_name(type), op);
 }
 
 DB_Table_ASSETS_V1::STARTDATE Model_Asset::STARTDATE(const wxDate& date, OP op)
@@ -172,123 +115,99 @@
     return Model::to_date(r.STARTDATE);
 }
 
-Model_Asset::TYPE_ID Model_Asset::type_id(const Data* r)
-{
-    for (const auto& item : TYPE_CHOICES)
-        if (item.second.CmpNoCase(r->ASSETTYPE) == 0) return item.first;
-    return TYPE_ID(-1);
-}
-Model_Asset::TYPE_ID Model_Asset::type_id(const Data& r)
-{
-    return type_id(&r);
-}
-
-Model_Asset::STATUS_ID Model_Asset::status_id(const Data* r)
-{
-    for (const auto & item : STATUS_CHOICES)
-        if (item.second.CmpNoCase(r->ASSETSTATUS) == 0) return item.first;
-    return STATUS_ID(-1);
-}
-Model_Asset::STATUS_ID Model_Asset::status_id(const Data& r)
-{
-    return status_id(&r);
-}
-
-Model_Asset::CHANGE_ID Model_Asset::change_id(const Data* r)
-{
-    for (const auto & item : CHANGE_CHOICES)
-        if (item.second.CmpNoCase(r->VALUECHANGE) == 0) return item.first;
-    return CHANGE_ID(-1);
-}
-Model_Asset::CHANGE_ID Model_Asset::change_id(const Data& r)
-{
-    return change_id(&r);
-}
-
-Model_Asset::CHANGEMODE_ID Model_Asset::changemode_id(const Data* r)
-{
-    for (const auto & item : CHANGEMODE_CHOICES)
-        if (item.second.CmpNoCase(r->VALUECHANGEMODE) == 0) return item.first;
-    return CHANGEMODE_ID(-1);
-}
-Model_Asset::CHANGEMODE_ID Model_Asset::changemode_id(const Data& r)
-{
-    return changemode_id(&r);
-}
-
 Model_Currency::Data* Model_Asset::currency(const Data* /* r */)
 {
     return Model_Currency::instance().GetBaseCurrency();
 }
 
-double Model_Asset::value(const Data* r)
+std::pair<double, double> Model_Asset::value(const Data* r)
 {
     return instance().valueAtDate(r, wxDate::Today());
 }
 
-double Model_Asset::value(const Data& r)
+std::pair<double, double> Model_Asset::value(const Data& r)
 {
     return instance().valueAtDate(&r, wxDate::Today());
 }
 
-double Model_Asset::valueAtDate(const Data* r, const wxDate date)
+std::pair<double, double> Model_Asset::valueAtDate(const Data* r, const wxDate& date)
 {
-    double balance = 0;
-    if (date >= STARTDATE(r)) {
-        Model_Translink::Data_Set translink_records = Model_Translink::instance().find(
-            Model_Translink::LINKRECORDID(r->ASSETID),
-            Model_Translink::LINKTYPE(Model_Attachment::REFTYPE_STR_ASSET)
-        );
-        if (!translink_records.empty())
+    std::pair<double /*initial*/, double /*market*/> balance;
+    if (date < STARTDATE(r)) return balance;
+
+    Model_Translink::Data_Set translink_records = Model_Translink::instance().find(
+        Model_Translink::LINKRECORDID(r->ASSETID),
+        Model_Translink::LINKTYPE(this->refTypeName)
+    );
+
+    double dailyRate = r->VALUECHANGERATE / 36500.0;
+    int changeType = change_id(r);
+
+    auto applyChangeRate = [changeType, dailyRate](double& value, double days) 
+    {
+        if (changeType == CHANGE_ID_APPRECIATE) 
+        {
+            value *= exp(dailyRate * days);
+        } 
+        else if (changeType == CHANGE_ID_DEPRECIATE) 
+        {
+            value *= exp(-dailyRate * days);
+        }
+    };
+
+    if (!translink_records.empty())
+    {
+        Model_Checking::Data_Set trans;
+        for (const auto& link : translink_records)
+        {
+            const Model_Checking::Data* tran = Model_Checking::instance().get(link.CHECKINGACCOUNTID);
+            if(tran && tran->DELETEDTIME.IsEmpty()) trans.push_back(*tran);
+        }
+
+        std::stable_sort(trans.begin(), trans.end(), SorterByTRANSDATE());
+
+        wxDate last = date;
+        for (const auto& tran: trans)
         {
-            for (const auto& link : translink_records)
+            const wxDate tranDate = Model_Checking::TRANSDATE(tran);
+            if (tranDate > date) break;
+
+            if (last == date) last = tranDate;
+            if (last < tranDate)
             {
-                const Model_Checking::Data* tran = Model_Checking::instance().get(link.CHECKINGACCOUNTID);
-                const wxDate tranDate = Model_Checking::TRANSDATE(tran);
-                if (tranDate <= date)
-                {
-                    double amount = -1 * Model_Checking::account_flow(tran, tran->ACCOUNTID) *
-                        Model_CurrencyHistory::getDayRate(Model_Account::instance().get(tran->ACCOUNTID)->CURRENCYID, tranDate);
-                    wxTimeSpan diff_time = date - tranDate;
-                    double diff_time_in_days = static_cast<double>(diff_time.GetDays());
-
-                    switch (change_id(r))
-                    {
-                    case CHANGE_ID_NONE:
-                        break;
-                    case CHANGE_ID_APPRECIATE:
-                        amount *= pow(1.0 + (r->VALUECHANGERATE / 36500.0), diff_time_in_days);
-                        break;
-                    case CHANGE_ID_DEPRECIATE:
-                        amount *= pow(1.0 - (r->VALUECHANGERATE / 36500.0), diff_time_in_days);
-                        break;
-                    default:
-                        break;
-                    }
+                applyChangeRate(balance.second, static_cast<double>((tranDate - last).GetDays()));
+                last = tranDate;
+            }
+
+            double amount = -1 * Model_Checking::account_flow(tran, tran.ACCOUNTID) *
+                Model_CurrencyHistory::getDayRate(Model_Account::instance().get(tran.ACCOUNTID)->CURRENCYID, tranDate);
 
-                    balance += amount;
-                }
+            if (amount >= 0) 
+            { 
+                balance.first += amount;
             }
-        }
-        else {
-            balance = r->VALUE;
-            wxTimeSpan diff_time = date - STARTDATE(r);
-            double diff_time_in_days = static_cast<double>(diff_time.GetDays());
+            else 
+            {
+                double unrealized_gl = balance.second - balance.first;
+                balance.first += std::min(unrealized_gl + amount, 0.0);
+            }
+
+            balance.second += amount;
 
-            switch (change_id(r))
+            // Self Transfer as Revaluation
+            if (tran.ACCOUNTID == tran.TOACCOUNTID && Model_Checking::type_id(tran.TRANSCODE) == Model_Checking::TYPE_ID_TRANSFER)
             {
-            case CHANGE_ID_NONE:
-                break;
-            case CHANGE_ID_APPRECIATE:
-                balance *= pow(1.0 + (r->VALUECHANGERATE / 36500.0), diff_time_in_days);
-                break;
-            case CHANGE_ID_DEPRECIATE:
-                balance *= pow(1.0 - (r->VALUECHANGERATE / 36500.0), diff_time_in_days);
-                break;
-            default:
-                break;
+                // TODO honor TRANSAMOUNT => TOTRANSAMOUNT
+                balance.second = tran.TOTRANSAMOUNT;
             }
         }
+
+        applyChangeRate(balance.second, static_cast<double>((date - last).GetDays()));
+    }
+    else
+    {
+        balance = {r->VALUE, r->VALUE};
+        applyChangeRate(balance.second, static_cast<double>((date - STARTDATE(r)).GetDays()));
     }
     return balance;
 }
diff -Naur a/src/model/Model_Asset.h b/src/model/Model_Asset.h
--- a/src/model/Model_Asset.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Asset.h	2025-07-09 01:46:59.656940555 +0200
@@ -20,9 +20,10 @@
 #ifndef MODEL_ASSET_H
 #define MODEL_ASSET_H
 
-#include "Model.h"
+#include "choices.h"
 #include "db/DB_Table_Assets_V1.h"
-#include "Model_Currency.h" // detect base currency
+#include "Model.h"
+#include "Model_Currency.h"
 
 class Model_Asset : public Model<DB_Table_ASSETS_V1>
 {
@@ -35,36 +36,32 @@
         TYPE_ID_ART,
         TYPE_ID_JEWELLERY,
         TYPE_ID_CASH,
-        TYPE_ID_OTHER
+        TYPE_ID_OTHER,
+        TYPE_ID_size
     };
     enum STATUS_ID {
         STATUS_ID_CLOSED = 0,
-        STATUS_ID_OPEN
+        STATUS_ID_OPEN,
+        STATUS_ID_size
     };
     enum CHANGE_ID
     {
         CHANGE_ID_NONE = 0,
         CHANGE_ID_APPRECIATE,
-        CHANGE_ID_DEPRECIATE
+        CHANGE_ID_DEPRECIATE,
+        CHANGE_ID_size
     };
     enum CHANGEMODE_ID {
         CHANGEMODE_ID_PERCENTAGE = 0,
-        CHANGEMODE_ID_LINEAR
+        CHANGEMODE_ID_LINEAR,
+        CHANGEMODE_ID_size
     };
-    static wxArrayString TYPE_STR;
-    static wxArrayString STATUS_STR;
-    static wxArrayString CHANGE_STR;
-    static wxArrayString CHANGEMODE_STR;
 
 private:
-    static const std::vector<std::pair<TYPE_ID, wxString> > TYPE_CHOICES;
-    static const std::vector<std::pair<STATUS_ID, wxString> > STATUS_CHOICES;
-    static const std::vector<std::pair<CHANGE_ID, wxString> > CHANGE_CHOICES;
-    static const std::vector<std::pair<CHANGEMODE_ID, wxString> > CHANGEMODE_CHOICES;
-    static wxArrayString type_str_all();
-    static wxArrayString status_str_all();
-    static wxArrayString change_str_all();
-    static wxArrayString changemode_str_all();
+    static ChoicesName TYPE_CHOICES;
+    static ChoicesName STATUS_CHOICES;
+    static ChoicesName CHANGE_CHOICES;
+    static ChoicesName CHANGEMODE_CHOICES;
 
 public:
     Model_Asset();
@@ -95,23 +92,119 @@
     static wxDate STARTDATE(const Data* r);
     static wxDate STARTDATE(const Data& r);
 
+    static const wxString type_name(int id);
+    static int type_id(const wxString& name, int default_id = -1);
     static TYPE_ID type_id(const Data* r);
     static TYPE_ID type_id(const Data& r);
+
+    static const wxString status_name(int id);
+    static int status_id(const wxString& name, int default_id = -1);
     static STATUS_ID status_id(const Data* r);
     static STATUS_ID status_id(const Data& r);
+
+    static const wxString change_name(int id);
+    static int change_id(const wxString& name, int default_id = -1);
     static CHANGE_ID change_id(const Data* r);
     static CHANGE_ID change_id(const Data& r);
+
+    static const wxString changemode_name(int id);
+    static int changemode_id(const wxString& name, int default_id = -1);
     static CHANGEMODE_ID changemode_id(const Data* r);
     static CHANGEMODE_ID changemode_id(const Data& r);
 
     /** Returns the base currency Data record pointer*/
     static Model_Currency::Data* currency(const Data* /* r */);
     /** Returns the calculated current value */
-    static double value(const Data* r);
+    static std::pair<double, double> value(const Data* r);
     /** Returns the calculated current value */
-    static double value(const Data& r);
+    static std::pair<double, double> value(const Data& r);
     /** Returns the calculated value at a given date */
-    double valueAtDate(const Data* r, const wxDate date);
+    std::pair<double, double> valueAtDate(const Data* r, const wxDate& date);
+
+public:
+    static const wxString refTypeName;
 };
 
-#endif // 
+//----------------------------------------------------------------------------
+
+inline const wxString Model_Asset::type_name(int id)
+{
+    return TYPE_CHOICES.getName(id);
+}
+
+inline int Model_Asset::type_id(const wxString& name, int default_id)
+{
+    return TYPE_CHOICES.findName(name, default_id);
+}
+
+inline Model_Asset::TYPE_ID Model_Asset::type_id(const Data* asset)
+{
+    return static_cast<TYPE_ID>(type_id(asset->ASSETTYPE));
+}
+
+inline Model_Asset::TYPE_ID Model_Asset::type_id(const Data& asset)
+{
+    return type_id(&asset);
+}
+
+inline const wxString Model_Asset::status_name(int id)
+{
+    return STATUS_CHOICES.getName(id);
+}
+
+inline int Model_Asset::status_id(const wxString& name, int default_id)
+{
+    return STATUS_CHOICES.findName(name, default_id);
+}
+
+inline Model_Asset::STATUS_ID Model_Asset::status_id(const Data* asset)
+{
+    return static_cast<STATUS_ID>(status_id(asset->ASSETSTATUS));
+}
+
+inline Model_Asset::STATUS_ID Model_Asset::status_id(const Data& asset)
+{
+    return status_id(&asset);
+}
+
+inline const wxString Model_Asset::change_name(int id)
+{
+    return CHANGE_CHOICES.getName(id);
+}
+
+inline int Model_Asset::change_id(const wxString& name, int default_id)
+{
+    return CHANGE_CHOICES.findName(name, default_id);
+}
+
+inline Model_Asset::CHANGE_ID Model_Asset::change_id(const Data* asset)
+{
+    return static_cast<CHANGE_ID>(change_id(asset->VALUECHANGE));
+}
+
+inline Model_Asset::CHANGE_ID Model_Asset::change_id(const Data& asset)
+{
+    return change_id(&asset);
+}
+
+inline const wxString Model_Asset::changemode_name(int id)
+{
+    return CHANGEMODE_CHOICES.getName(id);
+}
+
+inline int Model_Asset::changemode_id(const wxString& name, int default_id)
+{
+    return CHANGEMODE_CHOICES.findName(name, default_id);
+}
+
+inline Model_Asset::CHANGEMODE_ID Model_Asset::changemode_id(const Data* asset)
+{
+    return static_cast<CHANGEMODE_ID>(changemode_id(asset->VALUECHANGEMODE));
+}
+
+inline Model_Asset::CHANGEMODE_ID Model_Asset::changemode_id(const Data& asset)
+{
+    return changemode_id(&asset);
+}
+
+#endif
diff -Naur a/src/model/Model_Attachment.cpp b/src/model/Model_Attachment.cpp
--- a/src/model/Model_Attachment.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Attachment.cpp	2025-07-09 01:46:59.656940555 +0200
@@ -16,30 +16,10 @@
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  ********************************************************/
 
+#include "defs.h"
 #include "Model_Attachment.h"
 #include <wx/string.h>
 
-const std::vector<std::pair<Model_Attachment::REFTYPE_ID, wxString> > Model_Attachment::REFTYPE_CHOICES =
-{
-    { Model_Attachment::REFTYPE_ID_TRANSACTION,       wxTRANSLATE("Transaction") },
-    { Model_Attachment::REFTYPE_ID_STOCK,             wxTRANSLATE("Stock") },
-    { Model_Attachment::REFTYPE_ID_ASSET,             wxTRANSLATE("Asset") },
-    { Model_Attachment::REFTYPE_ID_BANKACCOUNT,       wxTRANSLATE("BankAccount") },
-    { Model_Attachment::REFTYPE_ID_BILLSDEPOSIT,      wxTRANSLATE("RecurringTransaction") },
-    { Model_Attachment::REFTYPE_ID_PAYEE,             wxTRANSLATE("Payee") },
-    { Model_Attachment::REFTYPE_ID_TRANSACTIONSPLIT,  wxTRANSLATE("TransactionSplit") },
-    { Model_Attachment::REFTYPE_ID_BILLSDEPOSITSPLIT, wxTRANSLATE("RecurringTransactionSplit") },
-};
-wxArrayString Model_Attachment::REFTYPE_STR = reftype_str_all();
-const wxString Model_Attachment::REFTYPE_STR_TRANSACTION       = REFTYPE_STR[REFTYPE_ID_TRANSACTION];
-const wxString Model_Attachment::REFTYPE_STR_STOCK             = REFTYPE_STR[REFTYPE_ID_STOCK];
-const wxString Model_Attachment::REFTYPE_STR_ASSET             = REFTYPE_STR[REFTYPE_ID_ASSET];
-const wxString Model_Attachment::REFTYPE_STR_BANKACCOUNT       = REFTYPE_STR[REFTYPE_ID_BANKACCOUNT];
-const wxString Model_Attachment::REFTYPE_STR_BILLSDEPOSIT      = REFTYPE_STR[REFTYPE_ID_BILLSDEPOSIT];
-const wxString Model_Attachment::REFTYPE_STR_PAYEE             = REFTYPE_STR[REFTYPE_ID_PAYEE];
-const wxString Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT  = REFTYPE_STR[REFTYPE_ID_TRANSACTIONSPLIT];
-const wxString Model_Attachment::REFTYPE_STR_BILLSDEPOSITSPLIT = REFTYPE_STR[REFTYPE_ID_BILLSDEPOSITSPLIT];
-
 Model_Attachment::Model_Attachment()
 : Model<DB_Table_ATTACHMENT_V1>()
 {
@@ -69,18 +49,6 @@
     return Singleton<Model_Attachment>::instance();
 }
 
-wxArrayString Model_Attachment::reftype_str_all()
-{
-    wxArrayString reftype;
-    int i = 0;
-    for (const auto& item : REFTYPE_CHOICES)
-    {
-        wxASSERT_MSG(item.first == i++, "Wrong order in Model_Attachment::REFTYPE_CHOICES");
-        reftype.Add(item.second);
-    }
-    return reftype;
-}
-
 /** Return a dataset with attachments linked to a specific object */
 const Model_Attachment::Data_Set Model_Attachment::FilterAttachments(const wxString& RefType, const int64 RefId)
 {
@@ -117,11 +85,10 @@
 }
 
 /** Return a dataset with attachments linked to a specific type*/
-std::map<int64, Model_Attachment::Data_Set> Model_Attachment::get_all(REFTYPE_ID reftype)
+std::map<int64, Model_Attachment::Data_Set> Model_Attachment::get_all(const wxString& reftype)
 {
     std::map<int64, Model_Attachment::Data_Set> data;
-    wxString reftype_str = Model_Attachment::REFTYPE_STR[reftype];
-    for (const auto & attachment : this->find(Model_Attachment::DB_Table_ATTACHMENT_V1::REFTYPE(reftype_str)))
+    for (const auto & attachment : this->find(Model_Attachment::DB_Table_ATTACHMENT_V1::REFTYPE(reftype)))
     {
         data[attachment.REFID].push_back(attachment);
     }
diff -Naur a/src/model/Model_Attachment.h b/src/model/Model_Attachment.h
--- a/src/model/Model_Attachment.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Attachment.h	2025-07-09 01:46:59.656940555 +0200
@@ -19,37 +19,14 @@
 #ifndef MODEL_ATTACHMENT_H
 #define MODEL_ATTACHMENT_H
 
-#include "Model.h"
+#include "choices.h"
 #include "db/DB_Table_Attachment_V1.h"
+#include "Model.h"
 
 class Model_Attachment : public Model<DB_Table_ATTACHMENT_V1>
 {
 public:
     using Model<DB_Table_ATTACHMENT_V1>::get;
-    enum REFTYPE_ID {
-        REFTYPE_ID_TRANSACTION = 0,
-        REFTYPE_ID_STOCK,
-        REFTYPE_ID_ASSET,
-        REFTYPE_ID_BANKACCOUNT,
-        REFTYPE_ID_BILLSDEPOSIT,
-        REFTYPE_ID_PAYEE,
-        REFTYPE_ID_TRANSACTIONSPLIT,
-        REFTYPE_ID_BILLSDEPOSITSPLIT
-    };
-    static wxArrayString REFTYPE_STR;
-    static const wxString REFTYPE_STR_TRANSACTION;
-    static const wxString REFTYPE_STR_STOCK;
-    static const wxString REFTYPE_STR_ASSET;
-    static const wxString REFTYPE_STR_BANKACCOUNT;
-    static const wxString REFTYPE_STR_BILLSDEPOSIT;
-    static const wxString REFTYPE_STR_PAYEE;
-    static const wxString REFTYPE_STR_TRANSACTIONSPLIT;
-    static const wxString REFTYPE_STR_BILLSDEPOSITSPLIT;
-
-    static const std::vector<std::pair<REFTYPE_ID, wxString> > REFTYPE_CHOICES;
-
-private:
-    static wxArrayString reftype_str_all();
 
 public:
     Model_Attachment();
@@ -81,10 +58,10 @@
     static int LastAttachmentNumber(const wxString& RefType, const int64 RefId);
 
     /** Return a dataset with attachments linked to a specific type*/
-    std::map<int64, Data_Set> get_all(REFTYPE_ID reftype);
+    std::map<int64, Data_Set> get_all(const wxString& reftype);
 
     /** Return all attachments descriptions*/
     wxArrayString allDescriptions();
 };
 
-#endif // 
+#endif
diff -Naur a/src/model/Model_Billsdeposits.cpp b/src/model/Model_Billsdeposits.cpp
--- a/src/model/Model_Billsdeposits.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Billsdeposits.cpp	2025-07-09 01:46:59.660940578 +0200
@@ -65,7 +65,6 @@
 {
     return Model::to_date(r->TRANSDATE);
 }
-
 wxDate Model_Billsdeposits::TRANSDATE(const Data& r)
 {
     return Model::to_date(r.TRANSDATE);
@@ -75,28 +74,27 @@
 {
     return Model::to_date(r->NEXTOCCURRENCEDATE);
 }
-
 wxDate Model_Billsdeposits::NEXTOCCURRENCEDATE(const Data& r)
 {
     return Model::to_date(r.NEXTOCCURRENCEDATE);
 }
 
-Model_Checking::TYPE_ID Model_Billsdeposits::type_id(const Data& r)
+Model_Checking::TYPE_ID Model_Billsdeposits::type_id(const Data* r)
 {
-    return Model_Checking::type_id(r.TRANSCODE);
+    return static_cast<Model_Checking::TYPE_ID>(Model_Checking::type_id(r->TRANSCODE));
 }
-Model_Checking::TYPE_ID Model_Billsdeposits::type_id(const Data* r)
+Model_Checking::TYPE_ID Model_Billsdeposits::type_id(const Data& r)
 {
-    return Model_Checking::type_id(r->TRANSCODE);
+    return type_id(&r);
 }
 
-Model_Checking::STATUS_ID Model_Billsdeposits::status_id(const Data& r)
+Model_Checking::STATUS_ID Model_Billsdeposits::status_id(const Data* r)
 {
-    return Model_Checking::status_id(r.STATUS);
+    return static_cast<Model_Checking::STATUS_ID>(Model_Checking::status_id(r->STATUS));
 }
-Model_Checking::STATUS_ID Model_Billsdeposits::status_id(const Data* r)
+Model_Checking::STATUS_ID Model_Billsdeposits::status_id(const Data& r)
 {
-    return Model_Checking::status_id(r->STATUS);
+    return status_id(&r);
 }
 
 /**
@@ -108,18 +106,18 @@
     for (auto &item : Model_Billsdeposits::split(get(id)))
         Model_Budgetsplittransaction::instance().remove(item.SPLITTRANSID);
     // Delete tags for the scheduled transaction
-    Model_Taglink::instance().DeleteAllTags(Model_Attachment::REFTYPE_STR_BILLSDEPOSIT, id);
+    Model_Taglink::instance().DeleteAllTags(this->refTypeName, id);
     return this->remove(id, db_);
 }
 
 DB_Table_BILLSDEPOSITS_V1::STATUS Model_Billsdeposits::STATUS(Model_Checking::STATUS_ID status, OP op)
 {
-    return DB_Table_BILLSDEPOSITS_V1::STATUS(Model_Checking::STATUS_KEY[status], op);
+    return DB_Table_BILLSDEPOSITS_V1::STATUS(Model_Checking::status_key(status), op);
 }
 
 DB_Table_BILLSDEPOSITS_V1::TRANSCODE Model_Billsdeposits::TRANSCODE(Model_Checking::TYPE_ID type, OP op)
 {
-    return DB_Table_BILLSDEPOSITS_V1::TRANSCODE(Model_Checking::TYPE_STR[type], op);
+    return DB_Table_BILLSDEPOSITS_V1::TRANSCODE(Model_Checking::type_name(type), op);
 }
 
 const Model_Budgetsplittransaction::Data_Set Model_Billsdeposits::split(const Data* r)
@@ -136,7 +134,7 @@
 const Model_Taglink::Data_Set Model_Billsdeposits::taglink(const Data* r)
 {
     return Model_Taglink::instance().find(
-        Model_Taglink::REFTYPE(Model_Attachment::REFTYPE_STR_BILLSDEPOSIT),
+        Model_Taglink::REFTYPE(Model_Billsdeposits::refTypeName),
         Model_Taglink::REFID(r->BDID));
 }
 
@@ -188,7 +186,7 @@
 {
     if (r.STATUS == Model_Checking::STATUS_KEY_VOID)
         return true;
-    if (r.TRANSCODE != Model_Checking::TYPE_STR_WITHDRAWAL && r.TRANSCODE != Model_Checking::TYPE_STR_TRANSFER)
+    if (r.TRANSCODE != Model_Checking::TYPE_NAME_WITHDRAWAL && r.TRANSCODE != Model_Checking::TYPE_NAME_TRANSFER)
         return true;
 
     const int64 acct_id = r.ACCOUNTID;
@@ -206,28 +204,27 @@
     if (account->MINIMUMBALANCE != 0 && new_balance < account->MINIMUMBALANCE)
     {
         allow_transaction = false;
-        limitDescription = _("Minimum Balance");
+        limitDescription = _t("Minimum Balance");
         limitAmount = account->MINIMUMBALANCE;
     }
     else if (account->CREDITLIMIT != 0 && new_balance < -(account->CREDITLIMIT))
     {
         allow_transaction = false;
-        limitDescription = _("Credit Limit");
+        limitDescription = _t("Credit Limit");
         limitAmount = account->CREDITLIMIT;
     }
 
     if (!allow_transaction)
     {
-        wxString message = _("A scheduled transaction will exceed your account limit.\n\n"
+        wxString message = _t("A scheduled transaction will exceed the account limit.\n\n"
             "Account: %1$s\n"
             "Current Balance: %2$6.2f\n"
             "Transaction amount: %3$6.2f\n"
-            "%4$s: %5$6.2f\n\n"
-            "Do you wish to continue?"
-        );
+            "%4$s: %5$6.2f") + "\n\n" +
+            _t("Do you want to continue?");
         message.Printf(message, account->ACCOUNTNAME, current_balance, r.TRANSAMOUNT, limitDescription, limitAmount);
 
-        if (wxMessageBox(message, _("MMEX Scheduled Transaction Check"), wxYES_NO | wxICON_WARNING) == wxYES)
+        if (wxMessageBox(message, _t("MMEX Scheduled Transaction Check"), wxYES_NO | wxICON_WARNING) == wxYES)
             allow_transaction = true;
     }
 
@@ -244,7 +241,7 @@
 
     if ((repeats == REPEAT_TYPE::REPEAT_ONCE) || ((repeats < REPEAT_TYPE::REPEAT_IN_X_DAYS || repeats > REPEAT_TYPE::REPEAT_EVERY_X_MONTHS) && numRepeats == 1))
     {
-        mmAttachmentManage::DeleteAllAttachments(Model_Attachment::REFTYPE_STR_BILLSDEPOSIT, bdID);
+        mmAttachmentManage::DeleteAllAttachments(this->refTypeName, bdID);
         remove(bdID);
         return;
     }
@@ -372,7 +369,7 @@
     Data(r),
     m_bill_splits(split(r)),
     m_tags(Model_Taglink::instance().find(
-        Model_Taglink::REFTYPE(Model_Attachment::REFTYPE_STR_BILLSDEPOSIT),
+        Model_Taglink::REFTYPE(Model_Billsdeposits::refTypeName),
         Model_Taglink::REFID(r.BDID)))
 {
     if (!m_tags.empty()) {
@@ -393,7 +390,7 @@
                 + Model_Category::full_name(entry.CATEGID);
 
             wxString splitTags;
-            for (const auto& tag : Model_Taglink::instance().get(Model_Attachment::REFTYPE_STR_BILLSDEPOSITSPLIT, entry.SPLITTRANSID))
+            for (const auto& tag : Model_Taglink::instance().get(Model_Budgetsplittransaction::refTypeName, entry.SPLITTRANSID))
                 splitTags.Append(tag.first + " ");
             if (!splitTags.IsEmpty())
                 TAGNAMES.Append((TAGNAMES.IsEmpty() ? "" : ", ") + splitTags.Trim());
diff -Naur a/src/model/Model_Billsdeposits.h b/src/model/Model_Billsdeposits.h
--- a/src/model/Model_Billsdeposits.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Billsdeposits.h	2025-07-09 01:46:59.660940578 +0200
@@ -76,10 +76,10 @@
         int64 BDID = 0;
         // This relates the 'Date Due' field.
         wxString TRANSDATE = wxDateTime::Now().FormatISOCombined();
-        wxString STATUS = Model_Checking::STATUS_STR_NONE;
+        wxString STATUS = Model_Checking::STATUS_NAME_NONE;
         int64 ACCOUNTID = -1;
         int64 TOACCOUNTID = -1;
-        wxString TRANSCODE = Model_Checking::TYPE_STR_WITHDRAWAL;
+        wxString TRANSCODE = Model_Checking::TYPE_NAME_WITHDRAWAL;
         int64 CATEGID = -1;
         double TRANSAMOUNT = 0;
         double TOTRANSAMOUNT = 0;
@@ -174,6 +174,9 @@
 
     void completeBDInSeries(int64 bdID);
     static const wxDateTime nextOccurDate(int type, int numRepeats, wxDateTime nextOccurDate, bool reverse = false);
+
+public:
+    static const wxString refTypeName;
 };
 
 #endif // 
diff -Naur a/src/model/Model_Budget.cpp b/src/model/Model_Budget.cpp
--- a/src/model/Model_Budget.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Budget.cpp	2025-07-09 01:46:59.660940578 +0200
@@ -24,20 +24,17 @@
 #include "db/DB_Table_Budgettable_V1.h"
 #include "option.h"
 
-const std::vector<std::pair<Model_Budget::PERIOD_ID, wxString> > Model_Budget::PERIOD_CHOICES =
-{
-    { Model_Budget::PERIOD_ID_NONE,       wxString(wxTRANSLATE("None")) },
-    { Model_Budget::PERIOD_ID_WEEKLY,     wxString(wxTRANSLATE("Weekly")) },
-    { Model_Budget::PERIOD_ID_BIWEEKLY,   wxString(wxTRANSLATE("Fortnightly")) },
-    { Model_Budget::PERIOD_ID_MONTHLY,    wxString(wxTRANSLATE("Monthly")) },
-    { Model_Budget::PERIOD_ID_BIMONTHLY,  wxString(wxTRANSLATE("Every 2 Months")) },
-    { Model_Budget::PERIOD_ID_QUARTERLY,  wxString(wxTRANSLATE("Quarterly")) },
-    { Model_Budget::PERIOD_ID_HALFYEARLY, wxString(wxTRANSLATE("Half-Yearly")) },
-    { Model_Budget::PERIOD_ID_YEARLY,     wxString(wxTRANSLATE("Yearly")) },
-    { Model_Budget::PERIOD_ID_DAILY,      wxString(wxTRANSLATE("Daily")) }
-};
-
-wxArrayString Model_Budget::PERIOD_STR = period_str_all();
+ChoicesName Model_Budget::PERIOD_CHOICES = ChoicesName({
+    { PERIOD_ID_NONE,       _n("None") },
+    { PERIOD_ID_WEEKLY,     _n("Weekly") },
+    { PERIOD_ID_BIWEEKLY,   _n("Fortnightly") },
+    { PERIOD_ID_MONTHLY,    _n("Monthly") },
+    { PERIOD_ID_BIMONTHLY,  _n("Every 2 Months") },
+    { PERIOD_ID_QUARTERLY,  _n("Quarterly") },
+    { PERIOD_ID_HALFYEARLY, _n("Half-Yearly") },
+    { PERIOD_ID_YEARLY,     _n("Yearly") },
+    { PERIOD_ID_DAILY,      _n("Daily") }
+});
 
 Model_Budget::Model_Budget()
     : Model<DB_Table_BUDGETTABLE_V1>()
@@ -68,45 +65,9 @@
     return Singleton<Model_Budget>::instance();
 }
 
-wxArrayString Model_Budget::period_str_all()
-{
-    wxArrayString period;
-    int i = 0;
-    for (const auto& item : PERIOD_CHOICES)
-    {
-        wxASSERT_MSG(item.first == i++, "Wrong order in Model_Budget::PERIOD_CHOICES");
-        period.Add(item.second);
-    }
-    return period;
-}
-
-wxArrayString Model_Budget::period_loc_all()
-{
-    wxArrayString period;
-    for (const auto& item : PERIOD_CHOICES)
-    {
-        period.Add(wxGetTranslation(item.second));
-    }
-    return period;
-}
-
-Model_Budget::PERIOD_ID Model_Budget::period_id(const Data* r)
-{
-    for (const auto &entry : PERIOD_CHOICES)
-    {
-        if (r->PERIOD.CmpNoCase(entry.second) == 0) return entry.first;
-    }
-    return PERIOD_ID_NONE;
-}
-
-Model_Budget::PERIOD_ID Model_Budget::period_id(const Data& r)
-{
-    return period_id(&r);
-}
-
 DB_Table_BUDGETTABLE_V1::PERIOD Model_Budget::PERIOD(PERIOD_ID period, OP op)
 {
-    return DB_Table_BUDGETTABLE_V1::PERIOD(PERIOD_STR[period], op);
+    return DB_Table_BUDGETTABLE_V1::PERIOD(period_name(period), op);
 }
 
 void Model_Budget::getBudgetEntry(int64 budgetYearID
@@ -165,8 +126,8 @@
         // Store the yearly budget to use in reporting. Monthly budgets are stored in index 0-11, so use index 12 for year
         budgetStats[budget.CATEGID][12] = yearlyBudgetValue[budget.CATEGID];
     }
-    bool budgetOverride = Option::instance().BudgetOverride();
-    bool budgetDeductMonthly = Option::instance().BudgetDeductMonthly();
+    bool budgetOverride = Option::instance().getBudgetOverride();
+    bool budgetDeductMonthly = Option::instance().getBudgetDeductMonthly();
     for (int month = 0; month < 12; month++)
     {
         const wxString budgetYearMonth = wxString::Format("%s-%02d", year, month + 1);
@@ -233,7 +194,7 @@
 {
     std::map<int64, double> yearDeduction;
     int budgetedMonths = 0;
-    bool optionDeductMonthly = Option::instance().BudgetDeductMonthly();
+    bool optionDeductMonthly = Option::instance().getBudgetDeductMonthly();
     const wxString baseBudgetYearName = Model_Budgetyear::instance().get(baseYearID)->BUDGETYEARNAME;
     const wxString newBudgetYearName = Model_Budgetyear::instance().get(newYearID)->BUDGETYEARNAME;
 
@@ -262,7 +223,7 @@
         double yearAmount = getEstimate(false, period_id(data), data.AMOUNT);
         if (optionDeductMonthly && budgetedMonths > 0)
         {
-            budgetEntry->PERIOD = PERIOD_STR[PERIOD_ID_MONTHLY];
+            budgetEntry->PERIOD = period_name(PERIOD_ID_MONTHLY);
             if (yearDeduction[budgetEntry->CATEGID] / yearAmount < 1)
                 budgetEntry->AMOUNT = (yearAmount - yearDeduction[budgetEntry->CATEGID]) / (12 - budgetedMonths);
             else budgetEntry->AMOUNT = 0;
@@ -273,7 +234,7 @@
 
 double Model_Budget::getEstimate(bool is_monthly, const PERIOD_ID period, const double amount)
 {
-    int p[PERIOD_ID_MAX] = { 0, 52, 26, 12, 6, 4, 2, 1, 365 };
+    int p[PERIOD_ID_size] = { 0, 52, 26, 12, 6, 4, 2, 1, 365 };
     double estimated = amount * p[period];
     if (is_monthly) estimated = estimated / 12;
     return estimated;
diff -Naur a/src/model/Model_Budget.h b/src/model/Model_Budget.h
--- a/src/model/Model_Budget.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Budget.h	2025-07-09 01:46:59.660940578 +0200
@@ -20,8 +20,9 @@
 #ifndef MODEL_BUDGET_H
 #define MODEL_BUDGET_H
 
-#include "Model.h"
+#include "choices.h"
 #include "db/DB_Table_Budgettable_V1.h"
+#include "Model.h"
 #include "reports/mmDateRange.h"
 #include <float.h>
 
@@ -58,18 +59,18 @@
         PERIOD_ID_HALFYEARLY,
         PERIOD_ID_YEARLY,
         PERIOD_ID_DAILY,
-        PERIOD_ID_MAX
+        PERIOD_ID_size
     };
-    static wxArrayString PERIOD_STR;
 
 private:
-    static const std::vector<std::pair<PERIOD_ID, wxString> > PERIOD_CHOICES;
-    static wxArrayString period_str_all();
+    static ChoicesName PERIOD_CHOICES;
 
 public:
-    static wxArrayString period_loc_all();
+    static const wxString period_name(int id);
+    static int period_id(const wxString& name, int default_id = PERIOD_ID_NONE);
     static PERIOD_ID period_id(const Data* r);
     static PERIOD_ID period_id(const Data& r);
+
     static DB_Table_BUDGETTABLE_V1::PERIOD PERIOD(PERIOD_ID period, OP op = EQUAL);
 
     static void getBudgetEntry(int64 budgetYearID,
@@ -84,4 +85,26 @@
     static double getEstimate(bool is_monthly, const PERIOD_ID period, const double amount);
 };
 
-#endif // 
+//----------------------------------------------------------------------------
+
+inline const wxString Model_Budget::period_name(int id)
+{
+    return PERIOD_CHOICES.getName(id);
+}
+
+inline int Model_Budget::period_id(const wxString& name, int default_id)
+{
+    return PERIOD_CHOICES.findName(name, default_id);
+}
+
+inline Model_Budget::PERIOD_ID Model_Budget::period_id(const Data* r)
+{
+    return static_cast<PERIOD_ID>(period_id(r->PERIOD));
+}
+
+inline Model_Budget::PERIOD_ID Model_Budget::period_id(const Data& r)
+{
+    return period_id(&r);
+}
+
+#endif
diff -Naur a/src/model/Model_Budgetsplittransaction.cpp b/src/model/Model_Budgetsplittransaction.cpp
--- a/src/model/Model_Budgetsplittransaction.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Budgetsplittransaction.cpp	2025-07-09 01:46:59.660940578 +0200
@@ -61,7 +61,7 @@
 bool Model_Budgetsplittransaction::remove(int64 id)
 {
     // Delete all tags for the split before removing it
-    Model_Taglink::instance().DeleteAllTags(Model_Attachment::REFTYPE_STR_BILLSDEPOSITSPLIT, id);
+    Model_Taglink::instance().DeleteAllTags(Model_Budgetsplittransaction::refTypeName, id);
     return this->remove(id, db_);
 }
 
@@ -100,7 +100,7 @@
         instance().save(split_items);
 
         // Send back the new SPLITTRANSID which is needed to update taglinks
-        for (int i = 0; i < rows.size(); i++)
+        for (int i = 0; i < static_cast<int>(rows.size()); i++)
             rows.at(i).SPLITTRANSID = split_items.at(i).SPLITTRANSID;
     }
     return rows.size();
diff -Naur a/src/model/Model_Budgetsplittransaction.h b/src/model/Model_Budgetsplittransaction.h
--- a/src/model/Model_Budgetsplittransaction.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Budgetsplittransaction.h	2025-07-09 01:46:59.660940578 +0200
@@ -50,6 +50,9 @@
     std::map<int64, Data_Set> get_all();
     int update(Data_Set& rows, int64 transactionID);
     bool remove(int64 id);
+
+public:
+    static const wxString refTypeName;
 };
 
 #endif // 
diff -Naur a/src/model/Model_Category.cpp b/src/model/Model_Category.cpp
--- a/src/model/Model_Category.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Category.cpp	2025-07-09 01:46:59.660940578 +0200
@@ -142,7 +142,7 @@
 {
     static wxString delimiter;
     if (delimiter.empty()) {
-        delimiter = Model_Infotable::instance().GetStringInfo("CATEG_DELIMITER", ":");
+        delimiter = Model_Infotable::instance().getString("CATEG_DELIMITER", ":");
     }
     if (!category) return "";
     if (category->PARENTID == -1)
@@ -283,7 +283,7 @@
     for (int m = 0; m < columns; m++)
     {
         const wxDateTime d = start_date.Add(wxDateSpan::Months(m));
-        monthMap.push_back(std::make_pair(d,m));
+        monthMap.emplace_back(d, m);
     }
     std::reverse(monthMap.begin(), monthMap.end());
 
diff -Naur a/src/model/Model_Checking.cpp b/src/model/Model_Checking.cpp
--- a/src/model/Model_Checking.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Checking.cpp	2025-07-09 01:46:59.660940578 +0200
@@ -29,40 +29,41 @@
 #include "attachmentdialog.h"
 #include "util.h"
 
-const std::vector<std::pair<Model_Checking::TYPE_ID, wxString> > Model_Checking::TYPE_CHOICES =
-{
-    { Model_Checking::TYPE_ID_WITHDRAWAL, wxString(wxTRANSLATE("Withdrawal")) },
-    { Model_Checking::TYPE_ID_DEPOSIT,    wxString(wxTRANSLATE("Deposit")) },
-    { Model_Checking::TYPE_ID_TRANSFER,   wxString(wxTRANSLATE("Transfer")) }
-};
-
-const std::vector<std::tuple<Model_Checking::STATUS_ID, wxString, wxString> > Model_Checking::STATUS_CHOICES =
-{
-    { Model_Checking::STATUS_ID_NONE,       wxString(""),  wxString(wxTRANSLATE("Unreconciled")) },
-    { Model_Checking::STATUS_ID_RECONCILED, wxString("R"), wxString(wxTRANSLATE("Reconciled")) },
-    { Model_Checking::STATUS_ID_VOID,       wxString("V"), wxString(wxTRANSLATE("Void")) },
-    { Model_Checking::STATUS_ID_FOLLOWUP,   wxString("F"), wxString(wxTRANSLATE("Follow Up")) },
-    { Model_Checking::STATUS_ID_DUPLICATE,  wxString("D"), wxString(wxTRANSLATE("Duplicate")) }
-};
-
-wxArrayString Model_Checking::TYPE_STR = type_str_all();
-const wxString Model_Checking::TYPE_STR_WITHDRAWAL = TYPE_STR[TYPE_ID_WITHDRAWAL];
-const wxString Model_Checking::TYPE_STR_DEPOSIT    = TYPE_STR[TYPE_ID_DEPOSIT];
-const wxString Model_Checking::TYPE_STR_TRANSFER   = TYPE_STR[TYPE_ID_TRANSFER];
-
-wxArrayString Model_Checking::STATUS_KEY = status_key_all();
-const wxString Model_Checking::STATUS_KEY_NONE       = STATUS_KEY[STATUS_ID_NONE];
-const wxString Model_Checking::STATUS_KEY_RECONCILED = STATUS_KEY[STATUS_ID_RECONCILED];
-const wxString Model_Checking::STATUS_KEY_VOID       = STATUS_KEY[STATUS_ID_VOID];
-const wxString Model_Checking::STATUS_KEY_FOLLOWUP   = STATUS_KEY[STATUS_ID_FOLLOWUP];
-const wxString Model_Checking::STATUS_KEY_DUPLICATE  = STATUS_KEY[STATUS_ID_DUPLICATE];
-
-wxArrayString Model_Checking::STATUS_STR = status_str_all();
-const wxString Model_Checking::STATUS_STR_NONE       = STATUS_STR[STATUS_ID_NONE];
-const wxString Model_Checking::STATUS_STR_RECONCILED = STATUS_STR[STATUS_ID_RECONCILED];
-const wxString Model_Checking::STATUS_STR_VOID       = STATUS_STR[STATUS_ID_VOID];
-const wxString Model_Checking::STATUS_STR_FOLLOWUP   = STATUS_STR[STATUS_ID_FOLLOWUP];
-const wxString Model_Checking::STATUS_STR_DUPLICATE  = STATUS_STR[STATUS_ID_DUPLICATE];
+ChoicesName Model_Checking::TYPE_CHOICES = ChoicesName({
+    { TYPE_ID_WITHDRAWAL, _n("Withdrawal") },
+    { TYPE_ID_DEPOSIT,    _n("Deposit") },
+    { TYPE_ID_TRANSFER,   _n("Transfer") }
+});
+
+ChoicesName Model_Checking::TRADE_TYPE_CHOICES = ChoicesName({
+    { TYPE_ID_WITHDRAWAL,  _n("Buy") },
+    { TYPE_ID_DEPOSIT, _n("Sell") },
+    { TYPE_ID_TRANSFER, _n("Revalue") }
+});
+
+ChoicesKeyName Model_Checking::STATUS_CHOICES = ChoicesKeyName({
+    { STATUS_ID_NONE,       "",  _n("Unreconciled") },
+    { STATUS_ID_RECONCILED, "R", _n("Reconciled") },
+    { STATUS_ID_VOID,       "V", _n("Void") },
+    { STATUS_ID_FOLLOWUP,   "F", _n("Follow Up") },
+    { STATUS_ID_DUPLICATE,  "D", _n("Duplicate") }
+});
+
+const wxString Model_Checking::TYPE_NAME_WITHDRAWAL = type_name(TYPE_ID_WITHDRAWAL);
+const wxString Model_Checking::TYPE_NAME_DEPOSIT    = type_name(TYPE_ID_DEPOSIT);
+const wxString Model_Checking::TYPE_NAME_TRANSFER   = type_name(TYPE_ID_TRANSFER);
+
+const wxString Model_Checking::STATUS_KEY_NONE       = status_key(STATUS_ID_NONE);
+const wxString Model_Checking::STATUS_KEY_RECONCILED = status_key(STATUS_ID_RECONCILED);
+const wxString Model_Checking::STATUS_KEY_VOID       = status_key(STATUS_ID_VOID);
+const wxString Model_Checking::STATUS_KEY_FOLLOWUP   = status_key(STATUS_ID_FOLLOWUP);
+const wxString Model_Checking::STATUS_KEY_DUPLICATE  = status_key(STATUS_ID_DUPLICATE);
+
+const wxString Model_Checking::STATUS_NAME_NONE       = status_name(STATUS_ID_NONE);
+const wxString Model_Checking::STATUS_NAME_RECONCILED = status_name(STATUS_ID_RECONCILED);
+const wxString Model_Checking::STATUS_NAME_VOID       = status_name(STATUS_ID_VOID);
+const wxString Model_Checking::STATUS_NAME_FOLLOWUP   = status_name(STATUS_ID_FOLLOWUP);
+const wxString Model_Checking::STATUS_NAME_DUPLICATE  = status_name(STATUS_ID_DUPLICATE);
 
 Model_Checking::Model_Checking() : Model<DB_Table_CHECKINGACCOUNT_V1>()
 {
@@ -72,42 +73,6 @@
 {
 }
 
-wxArrayString Model_Checking::type_str_all()
-{
-    wxArrayString types;
-    int i = 0;
-    for (const auto& r : TYPE_CHOICES)
-    {
-        wxASSERT_MSG(r.first == i++, "Wrong order in Model_Checking::TYPE_CHOICES");
-        types.Add(r.second);
-    }
-    return types;
-}
-
-wxArrayString Model_Checking::status_key_all()
-{
-    wxArrayString status;
-    int i = 0;
-    for (const auto& r : STATUS_CHOICES)
-    {
-        wxASSERT_MSG(std::get<0>(r) == i++, "Wrong order in Model_Checking::STATUS_CHOICES");
-        status.Add(std::get<1>(r));
-    }
-    return status;
-}
-
-wxArrayString Model_Checking::status_str_all()
-{
-    wxArrayString status;
-    int i = 0;
-    for (const auto& r : STATUS_CHOICES)
-    {
-        wxASSERT_MSG(std::get<0>(r) == i++, "Wrong order in Model_Checking::STATUS_CHOICES");
-        status.Add(std::get<2>(r));
-    }
-    return status;
-}
-
 /**
 * Initialize the global Model_Checking table.
 * Reset the Model_Checking table or create the table if it does not exist.
@@ -136,7 +101,7 @@
         Model_Splittransaction::instance().remove(r.SPLITTRANSID);
     if(foreignTransaction(*instance().get(id))) Model_Translink::RemoveTranslinkEntry(id);
 
-    const wxString& RefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+    const wxString& RefType = Model_Checking::refTypeName;
     // remove all attachments
     mmAttachmentManage::DeleteAllAttachments(RefType, id);
     // remove all custom fields for the transaction
@@ -205,12 +170,12 @@
 
 DB_Table_CHECKINGACCOUNT_V1::STATUS Model_Checking::STATUS(STATUS_ID status, OP op)
 {
-    return DB_Table_CHECKINGACCOUNT_V1::STATUS(STATUS_KEY[status], op);
+    return DB_Table_CHECKINGACCOUNT_V1::STATUS(status_key(status), op);
 }
 
 DB_Table_CHECKINGACCOUNT_V1::TRANSCODE Model_Checking::TRANSCODE(TYPE_ID type, OP op)
 {
-    return DB_Table_CHECKINGACCOUNT_V1::TRANSCODE(TYPE_STR[type], op);
+    return DB_Table_CHECKINGACCOUNT_V1::TRANSCODE(type_name(type), op);
 }
 
 DB_Table_CHECKINGACCOUNT_V1::TRANSACTIONNUMBER Model_Checking::TRANSACTIONNUMBER(const wxString& num, OP op)
@@ -245,65 +210,10 @@
     return Model::to_date(r.TRANSDATE);
 }
 
-Model_Checking::TYPE_ID Model_Checking::type_id(const wxString& r)
-{
-    if (r.empty()) return TYPE_ID_WITHDRAWAL;
-    static std::unordered_map<wxString, TYPE_ID> cache;
-    const auto it = cache.find(r);
-    if (it != cache.end()) return it->second;
-
-    for (const auto& t : TYPE_CHOICES)
-    {
-        if (r.CmpNoCase(t.second) == 0)
-        {
-            cache.insert(std::make_pair(r, t.first));
-            return t.first;
-        }
-    }
-
-    cache.insert(std::make_pair(r, TYPE_ID_WITHDRAWAL));
-    return TYPE_ID_WITHDRAWAL;
-}
-Model_Checking::TYPE_ID Model_Checking::type_id(const Data& r)
-{
-    return type_id(r.TRANSCODE);
-}
-Model_Checking::TYPE_ID Model_Checking::type_id(const Data* r)
-{
-    return type_id(r->TRANSCODE);
-}
-
-Model_Checking::STATUS_ID Model_Checking::status_id(const wxString& r)
-{
-    static std::unordered_map<wxString, STATUS_ID> cache;
-    const auto it = cache.find(r);
-    if (it != cache.end()) return it->second;
-
-    for (const auto & s : STATUS_CHOICES)
-    {
-        if (r.CmpNoCase(std::get<1>(s)) == 0 || r.CmpNoCase(std::get<2>(s)) == 0)
-        {
-            STATUS_ID ret = std::get<0>(s);
-            cache.insert(std::make_pair(r, ret));
-            return ret;
-        }
-    }
-
-    STATUS_ID ret = STATUS_ID_NONE;
-    cache.insert(std::make_pair(r, ret));
-    return ret;
-}
-Model_Checking::STATUS_ID Model_Checking::status_id(const Data& r)
-{
-    return status_id(r.STATUS);
-}
-Model_Checking::STATUS_ID Model_Checking::status_id(const Data* r)
-{
-    return status_id(r->STATUS);
-}
-
 double Model_Checking::account_flow(const Data* r, int64 account_id)
 {
+    if (r->ACCOUNTID == r->TOACCOUNTID && type_id(r->TRANSCODE) == TYPE_ID_TRANSFER)
+        return 0.0;  // Self Transfer as Revaluation
     if (Model_Checking::status_id(r->STATUS) == Model_Checking::STATUS_ID_VOID || !r->DELETEDTIME.IsEmpty())
         return 0.0;
     if (account_id == r->ACCOUNTID && type_id(r->TRANSCODE) == TYPE_ID_WITHDRAWAL)
@@ -392,27 +302,22 @@
     return is_deposit(r->TRANSCODE);
 }
 
-wxString Model_Checking::status_key(const wxString& r)
-{
-    return STATUS_KEY[status_id(r)];
-}
-
 Model_Checking::Full_Data::Full_Data() :
     Data(0), TAGNAMES(""),
-    SN(0), ACCOUNTID_W(-1), ACCOUNTID_D(-1), TRANSAMOUNT_W(0), TRANSAMOUNT_D(0),
-    ACCOUNT_FLOW(0), ACCOUNT_BALANCE(0)
+    ACCOUNTID_W(-1), ACCOUNTID_D(-1), TRANSAMOUNT_W(0), TRANSAMOUNT_D(0),
+    SN(0), ACCOUNT_FLOW(0), ACCOUNT_BALANCE(0)
 {
 }
 
 Model_Checking::Full_Data::Full_Data(const Data& r) :
     Data(r),
-    SN(0), ACCOUNTID_W(-1), ACCOUNTID_D(-1), TRANSAMOUNT_W(0), TRANSAMOUNT_D(0),
-    ACCOUNT_FLOW(0), ACCOUNT_BALANCE(0),
     m_splits(Model_Splittransaction::instance().find(
         Model_Splittransaction::TRANSID(r.TRANSID))),
     m_tags(Model_Taglink::instance().find(
-        Model_Taglink::REFTYPE(Model_Attachment::REFTYPE_STR_TRANSACTION),
-        Model_Taglink::REFID(r.TRANSID)))
+        Model_Taglink::REFTYPE(Model_Checking::refTypeName),
+        Model_Taglink::REFID(r.TRANSID))),
+    ACCOUNTID_W(-1), ACCOUNTID_D(-1), TRANSAMOUNT_W(0), TRANSAMOUNT_D(0),
+    SN(0), ACCOUNT_FLOW(0), ACCOUNT_BALANCE(0)
 {
     fill_data();
 }
@@ -423,14 +328,12 @@
     const std::map<int64 /* TRANSID */, Model_Taglink::Data_Set>& tags
 ) :
     Data(r),
-    SN(0), ACCOUNTID_W(-1), ACCOUNTID_D(-1), TRANSAMOUNT_W(0), TRANSAMOUNT_D(0),
-    ACCOUNT_FLOW(0), ACCOUNT_BALANCE(0)
+    ACCOUNTID_W(-1), ACCOUNTID_D(-1), TRANSAMOUNT_W(0), TRANSAMOUNT_D(0),
+    SN(0), ACCOUNT_FLOW(0), ACCOUNT_BALANCE(0)
 {
-    const auto it = splits.find(this->id());
-    if (it != splits.end()) m_splits = it->second;
+    if (const auto it = splits.find(this->id()); it != splits.end()) m_splits = it->second;
 
-    const auto tag_it = tags.find(this->id());
-    if (tag_it != tags.end()) m_tags = tag_it->second;
+    if (const auto tag_it = tags.find(this->id()); tag_it != tags.end()) m_tags = tag_it->second;
 
     fill_data();
 }
@@ -571,15 +474,16 @@
     std::map <wxString, std::pair<int, wxString> > counterMap;
     for (const auto& entry : notes)
     {
-        counterMap[entry.NOTES].first--;
-        if (entry.TRANSDATE > counterMap[entry.NOTES].second)
-            counterMap[entry.NOTES].second = entry.TRANSDATE;
+        auto& counter = counterMap[entry.NOTES];
+        counter.first--;
+        if (entry.TRANSDATE > counter.second)
+            counter.second = entry.TRANSDATE;
     }
 
     // Convert to vector
     std::vector<std::tuple<int, wxString, wxString> > vec;
-    for (const auto& entry : counterMap)
-        vec.push_back(std::make_tuple(entry.second.first, entry.second.second, entry.first));
+    for (const auto& [note, counter] : counterMap)
+        vec.emplace_back(counter.first, counter.second, note);
 
     // Sort by frequency then date
     std::sort(vec.begin(), vec.end(), CompareUsedNotes);
@@ -599,7 +503,7 @@
     data.PAYEEID = -1;
     const wxString today_date = wxDate::Now().FormatISOCombined();
     wxString max_trx_date;
-    if (Option::instance().TransDateDefault() != Option::NONE)
+    if (Option::instance().getTransDateDefault() != Option::NONE)
     {
         auto trans = instance().find_or(ACCOUNTID(accountID), TOACCOUNTID(accountID));
 
@@ -616,8 +520,8 @@
 
     data.TRANSDATE = max_trx_date;
     data.ACCOUNTID = accountID;
-    data.STATUS = STATUS_KEY[Option::instance().TransStatusReconciled()];
-    data.TRANSCODE = TYPE_STR_WITHDRAWAL;
+    data.STATUS = status_key(Option::instance().getTransStatusReconciled());
+    data.TRANSCODE = TYPE_NAME_WITHDRAWAL;
     data.CATEGID = -1;
     data.FOLLOWUPID = -1;
     data.TRANSAMOUNT = 0;
@@ -729,12 +633,12 @@
 
 bool Model_Checking::foreignTransaction(const Data& data)
 {
-    return (data.TOACCOUNTID > 0) && (data.TRANSCODE == TYPE_STR_DEPOSIT || data.TRANSCODE == TYPE_STR_WITHDRAWAL);
+    return (data.TOACCOUNTID > 0) && (data.TRANSCODE == TYPE_NAME_DEPOSIT || data.TRANSCODE == TYPE_NAME_WITHDRAWAL);
 }
 
 bool Model_Checking::foreignTransactionAsTransfer(const Data& data)
 {
-    return foreignTransaction(data) && (data.TOACCOUNTID == Model_Translink::AS_TRANSFER);
+    return foreignTransaction(data) && (data.TOACCOUNTID == Model_Translink::AS_TRANSFER || data.TOACCOUNTID == data.ACCOUNTID);
 }
 
 void Model_Checking::updateTimestamp(int64 id)
diff -Naur a/src/model/Model_Checking.h b/src/model/Model_Checking.h
--- a/src/model/Model_Checking.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Checking.h	2025-07-09 01:46:59.660940578 +0200
@@ -19,8 +19,9 @@
 #ifndef MODEL_CHECKING_H
 #define MODEL_CHECKING_H
 
-#include "Model.h"
+#include "choices.h"
 #include "db/DB_Table_Checkingaccount_V1.h"
+#include "Model.h"
 #include "Model_Splittransaction.h"
 #include "Model_CustomField.h"
 #include "Model_Taglink.h"
@@ -40,7 +41,8 @@
     {
         TYPE_ID_WITHDRAWAL = 0,
         TYPE_ID_DEPOSIT,
-        TYPE_ID_TRANSFER
+        TYPE_ID_TRANSFER,
+        TYPE_ID_size
     };
     enum STATUS_ID
     {
@@ -48,31 +50,27 @@
         STATUS_ID_RECONCILED,
         STATUS_ID_VOID,
         STATUS_ID_FOLLOWUP,
-        STATUS_ID_DUPLICATE
+        STATUS_ID_DUPLICATE,
+        STATUS_ID_size
     };
-    static wxArrayString TYPE_STR;
-    static const wxString TYPE_STR_WITHDRAWAL;
-    static const wxString TYPE_STR_DEPOSIT;
-    static const wxString TYPE_STR_TRANSFER;
-    static wxArrayString STATUS_KEY;
+    static const wxString TYPE_NAME_WITHDRAWAL;
+    static const wxString TYPE_NAME_DEPOSIT;
+    static const wxString TYPE_NAME_TRANSFER;
     static const wxString STATUS_KEY_NONE;
     static const wxString STATUS_KEY_RECONCILED;
     static const wxString STATUS_KEY_VOID;
     static const wxString STATUS_KEY_FOLLOWUP;
     static const wxString STATUS_KEY_DUPLICATE;
-    static wxArrayString STATUS_STR;
-    static const wxString STATUS_STR_NONE;
-    static const wxString STATUS_STR_RECONCILED;
-    static const wxString STATUS_STR_VOID;
-    static const wxString STATUS_STR_FOLLOWUP;
-    static const wxString STATUS_STR_DUPLICATE;
+    static const wxString STATUS_NAME_NONE;
+    static const wxString STATUS_NAME_RECONCILED;
+    static const wxString STATUS_NAME_VOID;
+    static const wxString STATUS_NAME_FOLLOWUP;
+    static const wxString STATUS_NAME_DUPLICATE;
 
 private:
-    static const std::vector<std::pair<TYPE_ID, wxString> > TYPE_CHOICES;
-    static const std::vector<std::tuple<STATUS_ID, wxString, wxString> > STATUS_CHOICES;
-    static wxArrayString type_str_all();
-    static wxArrayString status_key_all();
-    static wxArrayString status_str_all();
+    static ChoicesName TYPE_CHOICES;
+    static ChoicesName TRADE_TYPE_CHOICES;
+    static ChoicesKeyName STATUS_CHOICES;
 
 public:
     struct Full_Data: public Data
@@ -226,15 +224,23 @@
     static DB_Table_CHECKINGACCOUNT_V1::TRANSACTIONNUMBER TRANSACTIONNUMBER(const wxString& num, OP op = EQUAL);
 
 public:
-    static wxDate TRANSDATE(const Data* r);
-    static wxDate TRANSDATE(const Data& r);
-    static TYPE_ID type_id(const wxString& r);
+    static const wxString type_name(int id);
+    static const wxString trade_type_name(int id);
+    static int type_id(const wxString& name, int default_id = TYPE_ID_WITHDRAWAL);
     static TYPE_ID type_id(const Data* r);
     static TYPE_ID type_id(const Data& r);
-    static wxString status_key(const wxString& r);
-    static STATUS_ID status_id(const wxString& r);
+
+    static const wxString status_key(int id);
+    static const wxString status_key(const wxString& keyOrName);
+    static const wxString status_name(int id);
+    static const wxString status_name(const wxString& keyOrName);
+    static int status_id(const wxString& keyOrName, int default_id = STATUS_ID_NONE);
     static STATUS_ID status_id(const Data* r);
     static STATUS_ID status_id(const Data& r);
+
+    static wxDate TRANSDATE(const Data* r);
+    static wxDate TRANSDATE(const Data& r);
+
     static double account_flow(const Data* r, int64 account_id);
     static double account_flow(const Data& r, int64 account_id);
     static double account_outflow(const Data* r, int64 account_id);
@@ -255,10 +261,87 @@
     static void putDataToTransaction(Data *r, const Data &data);
     static bool foreignTransaction(const Data& data);
     static bool foreignTransactionAsTransfer(const Data& data);
+
+public:
+    static const wxString refTypeName;
 };
 
-inline bool Model_Checking::Full_Data::has_split() const { return !this->m_splits.empty(); }
-inline bool Model_Checking::Full_Data::has_tags() const { return !this->m_tags.empty(); }
-inline bool Model_Checking::Full_Data::has_attachment() const { return !ATTACHMENT_DESCRIPTION.empty(); }
+//----------------------------------------------------------------------------
+
+inline const wxString Model_Checking::type_name(int id)
+{
+    return TYPE_CHOICES.getName(id);
+}
+
+inline const wxString Model_Checking::trade_type_name(int id)
+{
+    return TRADE_TYPE_CHOICES.getName(id);
+}
+
+inline int Model_Checking::type_id(const wxString& name, int default_id)
+{
+    return TYPE_CHOICES.findName(name, default_id);
+}
+
+inline Model_Checking::TYPE_ID Model_Checking::type_id(const Data* r)
+{
+    return static_cast<TYPE_ID>(type_id(r->TRANSCODE));
+}
+
+inline Model_Checking::TYPE_ID Model_Checking::type_id(const Data& r)
+{
+    return type_id(&r);
+}
+
+inline const wxString Model_Checking::status_key(int id)
+{
+    return STATUS_CHOICES.getKey(id);
+}
+
+inline const wxString Model_Checking::status_key(const wxString& keyOrName)
+{
+    return status_key(status_id(keyOrName));
+}
+
+inline const wxString Model_Checking::status_name(int id)
+{
+    return STATUS_CHOICES.getName(id);
+}
+
+inline const wxString Model_Checking::status_name(const wxString& keyOrName)
+{
+    return status_name(status_id(keyOrName));
+}
+
+inline int Model_Checking::status_id(const wxString& keyOrName, int default_id)
+{
+    return STATUS_CHOICES.findKeyName(keyOrName, default_id);
+}
+
+inline Model_Checking::STATUS_ID Model_Checking::status_id(const Data* r)
+{
+    return static_cast<STATUS_ID>(status_id(r->STATUS));
+}
+
+inline Model_Checking::STATUS_ID Model_Checking::status_id(const Data& r)
+{
+    return status_id(&r);
+}
+
+inline bool Model_Checking::Full_Data::has_split() const
+{
+    return !this->m_splits.empty();
+}
+
+inline bool Model_Checking::Full_Data::has_tags() const
+
+{
+    return !this->m_tags.empty();
+}
+
+inline bool Model_Checking::Full_Data::has_attachment() const
+{
+    return !ATTACHMENT_DESCRIPTION.empty();
+}
 
 #endif // 
diff -Naur a/src/model/Model.cpp b/src/model/Model.cpp
--- a/src/model/Model.cpp	1970-01-01 01:00:00.000000000 +0100
+++ b/src/model/Model.cpp	2025-07-09 01:46:59.656940555 +0200
@@ -0,0 +1,52 @@
+/*******************************************************
+ Copyright (C) 2025 George Ef (george.a.ef@gmail.com)
+
+ This program is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2 of the License, or
+ (at your option) any later version.
+
+ This program is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program; if not, write to the Free Software
+ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ ********************************************************/
+
+#include "model/Model.h"
+#include "model/allmodel.h"
+
+ChoicesName ModelBase::REFTYPE_CHOICES = ChoicesName({
+    { REFTYPE_ID_TRANSACTION,       _n("Transaction") },
+    { REFTYPE_ID_STOCK,             _n("Stock") },
+    { REFTYPE_ID_ASSET,             _n("Asset") },
+    { REFTYPE_ID_BANKACCOUNT,       _n("BankAccount") },
+    { REFTYPE_ID_BILLSDEPOSIT,      _n("RecurringTransaction") },
+    { REFTYPE_ID_PAYEE,             _n("Payee") },
+    { REFTYPE_ID_TRANSACTIONSPLIT,  _n("TransactionSplit") },
+    { REFTYPE_ID_BILLSDEPOSITSPLIT, _n("RecurringTransactionSplit") },
+});
+
+const wxString ModelBase::REFTYPE_NAME_TRANSACTION       = reftype_name(REFTYPE_ID_TRANSACTION);
+const wxString ModelBase::REFTYPE_NAME_STOCK             = reftype_name(REFTYPE_ID_STOCK);
+const wxString ModelBase::REFTYPE_NAME_ASSET             = reftype_name(REFTYPE_ID_ASSET);
+const wxString ModelBase::REFTYPE_NAME_BANKACCOUNT       = reftype_name(REFTYPE_ID_BANKACCOUNT);
+const wxString ModelBase::REFTYPE_NAME_BILLSDEPOSIT      = reftype_name(REFTYPE_ID_BILLSDEPOSIT);
+const wxString ModelBase::REFTYPE_NAME_PAYEE             = reftype_name(REFTYPE_ID_PAYEE);
+const wxString ModelBase::REFTYPE_NAME_TRANSACTIONSPLIT  = reftype_name(REFTYPE_ID_TRANSACTIONSPLIT);
+const wxString ModelBase::REFTYPE_NAME_BILLSDEPOSITSPLIT = reftype_name(REFTYPE_ID_BILLSDEPOSITSPLIT);
+
+// Model_*::refTypeName are initialized here because they depend on REFTYPE_NAME_,
+// which depend on REFTYPE_CHOICES.
+const wxString Model_Account::refTypeName                = REFTYPE_NAME_BANKACCOUNT;
+const wxString Model_Asset::refTypeName                  = REFTYPE_NAME_ASSET;
+const wxString Model_Stock::refTypeName                  = REFTYPE_NAME_STOCK;
+const wxString Model_Payee::refTypeName                  = REFTYPE_NAME_PAYEE;
+const wxString Model_Checking::refTypeName               = REFTYPE_NAME_TRANSACTION;
+const wxString Model_Splittransaction::refTypeName       = REFTYPE_NAME_TRANSACTIONSPLIT;
+const wxString Model_Billsdeposits::refTypeName          = REFTYPE_NAME_BILLSDEPOSIT;
+const wxString Model_Budgetsplittransaction::refTypeName = REFTYPE_NAME_BILLSDEPOSITSPLIT;
+
diff -Naur a/src/model/Model_Currency.cpp b/src/model/Model_Currency.cpp
--- a/src/model/Model_Currency.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Currency.cpp	2025-07-09 01:46:59.660940578 +0200
@@ -33,15 +33,13 @@
 static wxString s_locale;
 static wxString s_use_locale;
 
-const std::vector<std::pair<Model_Currency::TYPE_ID, wxString> > Model_Currency::TYPE_CHOICES =
-{
-    { Model_Currency::TYPE_ID_FIAT,   wxString(wxTRANSLATE("Fiat")) },
-    { Model_Currency::TYPE_ID_CRYPTO, wxString(wxTRANSLATE("Crypto")) }
-};
-
-wxArrayString Model_Currency::TYPE_STR = type_str_all();
-const wxString Model_Currency::TYPE_STR_FIAT   = TYPE_STR[TYPE_ID_FIAT];
-const wxString Model_Currency::TYPE_STR_CRYPTO = TYPE_STR[TYPE_ID_CRYPTO];
+ChoicesName Model_Currency::TYPE_CHOICES = ChoicesName({
+    { TYPE_ID_FIAT,   _n("Fiat") },
+    { TYPE_ID_CRYPTO, _n("Crypto") }
+});
+
+const wxString Model_Currency::TYPE_NAME_FIAT   = type_name(TYPE_ID_FIAT);
+const wxString Model_Currency::TYPE_NAME_CRYPTO = type_name(TYPE_ID_CRYPTO);
 
 Model_Currency::Model_Currency()
     : Model<DB_Table_CURRENCYFORMATS_V1>()
@@ -74,35 +72,9 @@
     return Singleton<Model_Currency>::instance();
 }
 
-wxArrayString Model_Currency::type_str_all()
-{
-    wxArrayString types;
-    int i = 0;
-    for (const auto& item : TYPE_CHOICES)
-    {
-        wxASSERT_MSG(item.first == i++, "Wrong order in Model_Currency::TYPE_CHOICES");
-        types.Add(item.second);
-    }
-    return types;
-}
-
-Model_Currency::TYPE_ID Model_Currency::type_id(const Data* r)
-{
-    for (const auto &entry : TYPE_CHOICES)
-    {
-        if (r->CURRENCY_TYPE.CmpNoCase(entry.second) == 0) return entry.first;
-    }
-    return TYPE_ID_FIAT;
-}
-
-Model_Currency::TYPE_ID Model_Currency::type_id(const Data& r)
-{
-    return type_id(&r);
-}
-
 DB_Table_CURRENCYFORMATS_V1::CURRENCY_TYPE Model_Currency::CURRENCY_TYPE(TYPE_ID currencytype, OP op)
 {
-    return DB_Table_CURRENCYFORMATS_V1::CURRENCY_TYPE(Model_Currency::TYPE_STR[currencytype], op);
+    return DB_Table_CURRENCYFORMATS_V1::CURRENCY_TYPE(Model_Currency::type_name(currencytype), op);
 }
 
 const wxArrayString Model_Currency::all_currency_names()
@@ -239,7 +211,7 @@
     static wxString d; //default Locale Support Y/N
 
     if (s_locale.empty()) {
-        s_locale = Model_Infotable::instance().GetStringInfo("LOCALE", " ");
+        s_locale = Model_Infotable::instance().getString("LOCALE", " ");
         if (s_locale.empty()) {
             s_locale = " ";
         }
@@ -349,7 +321,7 @@
     wxRegEx pattern(R"([^0-9.,+-/*()])");
     pattern.ReplaceAll(&str, wxEmptyString);
 
-    auto locale = Model_Infotable::instance().GetStringInfo("LOCALE", "");
+    auto locale = Model_Infotable::instance().getString("LOCALE", "");
 
     if (locale.empty())
     {
diff -Naur a/src/model/Model_Currency.h b/src/model/Model_Currency.h
--- a/src/model/Model_Currency.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Currency.h	2025-07-09 01:46:59.660940578 +0200
@@ -20,8 +20,9 @@
 #ifndef MODEL_CURRENCY_H
 #define MODEL_CURRENCY_H
 
-#include "Model.h"
+#include "choices.h"
 #include "db/DB_Table_Currencyformats_V1.h"
+#include "Model.h"
 #include "Model_Infotable.h" // detect base currency setting BASECURRENCYID
 #include <map>
 
@@ -51,21 +52,22 @@
     enum TYPE_ID
     {
         TYPE_ID_FIAT = 0,
-        TYPE_ID_CRYPTO
+        TYPE_ID_CRYPTO,
+        TYPE_ID_size
     };
-    static wxArrayString TYPE_STR;
-    static const wxString TYPE_STR_FIAT;
-    static const wxString TYPE_STR_CRYPTO;
+    static const wxString TYPE_NAME_FIAT;
+    static const wxString TYPE_NAME_CRYPTO;
 
 private:
-    static const std::vector<std::pair<TYPE_ID, wxString> > TYPE_CHOICES;
-    static wxArrayString type_str_all();
+    static ChoicesName TYPE_CHOICES;
 
 public:
+    static const wxString type_name(int id);
+    static int type_id(const wxString& name, int default_id = TYPE_ID_FIAT);
     static TYPE_ID type_id(const Data* r);
     static TYPE_ID type_id(const Data& r);
-    static DB_Table_CURRENCYFORMATS_V1::CURRENCY_TYPE CURRENCY_TYPE(TYPE_ID currencytype, OP op = EQUAL);
 
+    static DB_Table_CURRENCYFORMATS_V1::CURRENCY_TYPE CURRENCY_TYPE(TYPE_ID currencytype, OP op = EQUAL);
     const wxArrayString all_currency_names();
     const std::map<wxString, int64>  all_currency();
     const wxArrayString all_currency_symbols();
@@ -102,4 +104,27 @@
     static int precision(const Data& r);
     static int precision(int64 account_id);
 };
-#endif // 
+
+//----------------------------------------------------------------------------
+
+inline const wxString Model_Currency::type_name(int id)
+{
+    return TYPE_CHOICES.getName(id);
+}
+
+inline int Model_Currency::type_id(const wxString& name, int default_id)
+{
+    return TYPE_CHOICES.findName(name, default_id);
+}
+
+inline Model_Currency::TYPE_ID Model_Currency::type_id(const Data* r)
+{
+    return static_cast<TYPE_ID>(type_id(r->CURRENCY_TYPE));
+}
+
+inline Model_Currency::TYPE_ID Model_Currency::type_id(const Data& r)
+{
+    return type_id(&r);
+}
+
+#endif
diff -Naur a/src/model/Model_CurrencyHistory.cpp b/src/model/Model_CurrencyHistory.cpp
--- a/src/model/Model_CurrencyHistory.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_CurrencyHistory.cpp	2025-07-09 01:46:59.660940578 +0200
@@ -86,7 +86,7 @@
 /** Return the rate for a specific currency in a specific day*/
 double Model_CurrencyHistory::getDayRate(int64 currencyID, const wxString& DateISO)
 {
-    if (!Option::instance().getCurrencyHistoryEnabled()) {
+    if (!Option::instance().getUseCurrencyHistory()) {
         auto c = Model_Currency::instance().get(currencyID);
         return c ? c->BASECONVRATE : 1.0;
     }
@@ -105,7 +105,7 @@
     if (currencyID == Model_Currency::GetBaseCurrency()->CURRENCYID || currencyID == -1)
         return 1;
 
-    if (!Option::instance().getCurrencyHistoryEnabled())
+    if (!Option::instance().getUseCurrencyHistory())
         return Model_Currency::instance().get(currencyID)->BASECONVRATE;
 
     Model_CurrencyHistory::Data_Set Data = Model_CurrencyHistory::instance().find(Model_CurrencyHistory::CURRENCYID(currencyID), Model_CurrencyHistory::CURRDATE(Date));
@@ -143,7 +143,7 @@
 /** Return the last rate for specified currency */
 double Model_CurrencyHistory::getLastRate(const int64& currencyID)
 {
-    if (!Option::instance().getCurrencyHistoryEnabled())
+    if (!Option::instance().getUseCurrencyHistory())
         return Model_Currency::instance().get(currencyID)->BASECONVRATE;
 
     Model_CurrencyHistory::Data_Set histData = Model_CurrencyHistory::instance().find(Model_CurrencyHistory::CURRENCYID(currencyID));
diff -Naur a/src/model/Model_CustomField.cpp b/src/model/Model_CustomField.cpp
--- a/src/model/Model_CustomField.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_CustomField.cpp	2025-07-09 01:46:59.660940578 +0200
@@ -16,23 +16,22 @@
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  ********************************************************/
 
+#include "defs.h"
 #include "Model_CustomField.h"
 #include "Model_CustomFieldData.h"
+#include "Model_Checking.h"
 #include <wx/string.h>
 
-const std::vector<std::pair<Model_CustomField::TYPE_ID, wxString> > Model_CustomField::TYPE_CHOICES =
-{
-    { Model_CustomField::TYPE_ID_STRING,       wxString(wxTRANSLATE("String")) },
-    { Model_CustomField::TYPE_ID_INTEGER,      wxString(wxTRANSLATE("Integer")) },
-    { Model_CustomField::TYPE_ID_DECIMAL,      wxString(wxTRANSLATE("Decimal")) },
-    { Model_CustomField::TYPE_ID_BOOLEAN,      wxString(wxTRANSLATE("Boolean")) },
-    { Model_CustomField::TYPE_ID_DATE,         wxString(wxTRANSLATE("Date")) },
-    { Model_CustomField::TYPE_ID_TIME,         wxString(wxTRANSLATE("Time")) },
-    { Model_CustomField::TYPE_ID_SINGLECHOICE, wxString(wxTRANSLATE("SingleChoice")) },
-    { Model_CustomField::TYPE_ID_MULTICHOICE,  wxString(wxTRANSLATE("MultiChoice")) }
-};
-
-wxArrayString Model_CustomField::TYPE_STR = type_str_all();
+ChoicesName Model_CustomField::TYPE_CHOICES = ChoicesName({
+    { TYPE_ID_STRING,       _n("String") },
+    { TYPE_ID_INTEGER,      _n("Integer") },
+    { TYPE_ID_DECIMAL,      _n("Decimal") },
+    { TYPE_ID_BOOLEAN,      _n("Boolean") },
+    { TYPE_ID_DATE,         _n("Date") },
+    { TYPE_ID_TIME,         _n("Time") },
+    { TYPE_ID_SINGLECHOICE, _n("SingleChoice") },
+    { TYPE_ID_MULTICHOICE,  _n("MultiChoice") }
+});
 
 Model_CustomField::Model_CustomField()
     : Model<DB_Table_CUSTOMFIELD_V1>()
@@ -67,7 +66,7 @@
 //const Model_CustomField::Data_Set Model_CustomField::GetFields(Model_Attachment::REFTYPE_ID RefType)
 //{
 //    Data_Set fields;
-//    wxString reftype_str = Model_Attachment::REFTYPE_STR[RefType];
+//    wxString reftype_str = ModelBase::reftype_name(RefType);
 //    for (const auto & field : this->find(Model_CustomField::DB_Table_CUSTOMFIELD::REFTYPE(RefType)))
 //    {
 //        fields.push_back(field);
@@ -85,42 +84,10 @@
     return this->remove(FieldID, db_);
 }
 
-Model_CustomField::TYPE_ID Model_CustomField::type_id(const wxString& value)
-{
-    for (const auto& item : TYPE_CHOICES)
-    {
-        if (item.second.CmpNoCase(value) == 0)
-            return item.first;
-    }
-    return TYPE_ID_UNKNOWN;
-}
-
-Model_CustomField::TYPE_ID Model_CustomField::type_id(const Data* r)
-{
-    return type_id(r->TYPE);
-}
-
-Model_CustomField::TYPE_ID Model_CustomField::type_id(const Data& r)
-{
-    return type_id(&r);
-}
-
-const wxArrayString Model_CustomField::type_str_all()
-{
-    wxArrayString types;
-    int i = 0;
-    for (const auto& item : TYPE_CHOICES)
-    {
-        wxASSERT_MSG(item.first == i++, "Wrong order in Model_CustomField::TYPE_CHOICES");
-        types.Add(item.second);
-    }
-    return types;
-}
-
-const wxString Model_CustomField::getTooltip(const wxString& Properties)
+const wxString Model_CustomField::getTooltip(const wxString& properties)
 {
     Document json_doc;
-    if (!json_doc.Parse(Properties.utf8_str()).HasParseError())
+    if (!json_doc.Parse(properties.utf8_str()).HasParseError())
     {
         if (json_doc.HasMember("Tooltip") && json_doc["Tooltip"].IsString()) {
             Value& s = json_doc["Tooltip"];
@@ -130,16 +97,10 @@
     return "";
 }
 
-int Model_CustomField::getReference(const wxString& Properties)
-{
-    int ref_type_id = Model_Attachment::REFTYPE_STR.Index(Properties);
-    return ref_type_id;
-}
-
-const wxString Model_CustomField::getRegEx(const wxString& Properties)
+const wxString Model_CustomField::getRegEx(const wxString& properties)
 {
     Document json_doc;
-    if (!json_doc.Parse(Properties.utf8_str()).HasParseError())
+    if (!json_doc.Parse(properties.utf8_str()).HasParseError())
     {
         if (json_doc.HasMember("RegEx") && json_doc["RegEx"].IsString()) {
             Value& s = json_doc["RegEx"];
@@ -149,10 +110,10 @@
     return "";
 }
 
-bool Model_CustomField::getAutocomplete(const wxString& Properties)
+bool Model_CustomField::getAutocomplete(const wxString& properties)
 {
     Document json_doc;
-    if (!json_doc.Parse(Properties.utf8_str()).HasParseError())
+    if (!json_doc.Parse(properties.utf8_str()).HasParseError())
     {
         if (json_doc.HasMember("Autocomplete") && json_doc["Autocomplete"].IsBool()) {
             Value& b = json_doc["Autocomplete"];
@@ -162,10 +123,10 @@
     return false;
 }
 
-const wxString Model_CustomField::getDefault(const wxString& Properties)
+const wxString Model_CustomField::getDefault(const wxString& properties)
 {
     Document json_doc;
-    if (!json_doc.Parse(Properties.utf8_str()).HasParseError())
+    if (!json_doc.Parse(properties.utf8_str()).HasParseError())
     {
         if (json_doc.HasMember("Default") && json_doc["Default"].IsString()) {
             Value& s = json_doc["Default"];
@@ -175,11 +136,11 @@
     return "";
 }
 
-const wxArrayString Model_CustomField::getChoices(const wxString& Properties)
+const wxArrayString Model_CustomField::getChoices(const wxString& properties)
 {
     wxArrayString choices;
     Document json_doc;
-    if (!json_doc.Parse(Properties.utf8_str()).HasParseError())
+    if (!json_doc.Parse(properties.utf8_str()).HasParseError())
     {
         if (json_doc.HasMember("Choice") && json_doc["Choice"].IsArray())
         {
@@ -194,10 +155,10 @@
     return choices;
 }
 
-const wxString Model_CustomField::getUDFC(const wxString& Properties)
+const wxString Model_CustomField::getUDFC(const wxString& properties)
 {
     Document json_doc;
-    if (!json_doc.Parse(Properties.utf8_str()).HasParseError())
+    if (!json_doc.Parse(properties.utf8_str()).HasParseError())
     {
         if (json_doc.HasMember("UDFC") && json_doc["UDFC"].IsString()) {
             Value& s = json_doc["UDFC"];
@@ -207,14 +168,13 @@
     return "";
 }
 
-const std::map<wxString, int64> Model_CustomField::getMatrix(Model_Attachment::REFTYPE_ID reftype)
+const std::map<wxString, int64> Model_CustomField::getMatrix(const wxString& reftype)
 {
     std::map<wxString, int64> m;
-    const wxString& reftype_str = Model_Attachment::REFTYPE_STR[reftype];
     for (const auto& entry : UDFC_FIELDS())
     {
         if (entry.empty()) continue;
-        m[entry] = getUDFCID(reftype_str, entry);
+        m[entry] = getUDFCID(reftype, entry);
     }
     return m;
 }
@@ -274,7 +234,7 @@
                 Value& s = json_doc["UDFC"];
                 const wxString& desc = s.GetString();
                 if (desc == name) {
-                    return type_id(item.TYPE);
+                    return static_cast<TYPE_ID>(type_id(item.TYPE));
                 }
             }
         }
@@ -317,7 +277,7 @@
 
 const wxArrayString Model_CustomField::getUDFCList(DB_Table_CUSTOMFIELD_V1::Data* r)
 {
-    const wxString& ref_type = Model_Attachment::REFTYPE_STR_TRANSACTION;
+    const wxString& ref_type = Model_Checking::refTypeName;
     const auto& a = Model_CustomField::instance().find(Model_CustomField::DB_Table_CUSTOMFIELD_V1::REFTYPE(ref_type));
 
     wxArrayString choices = UDFC_FIELDS();
@@ -355,10 +315,10 @@
     return choices;
 }
 
-int Model_CustomField::getDigitScale(const wxString& Properties)
+int Model_CustomField::getDigitScale(const wxString& properties)
 {
     Document json_doc;
-    if (!json_doc.Parse(Properties.utf8_str()).HasParseError())
+    if (!json_doc.Parse(properties.utf8_str()).HasParseError())
     {
         if (json_doc.HasMember("DigitScale") && json_doc["DigitScale"].IsInt()) {
             Value& s = json_doc["DigitScale"];
diff -Naur a/src/model/Model_CustomFieldData.cpp b/src/model/Model_CustomFieldData.cpp
--- a/src/model/Model_CustomFieldData.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_CustomFieldData.cpp	2025-07-09 01:46:59.660940578 +0200
@@ -57,11 +57,10 @@
     return nullptr;
 }
 
-std::map<int64, Model_CustomFieldData::Data_Set> Model_CustomFieldData::get_all(Model_Attachment::REFTYPE_ID reftype)
+std::map<int64, Model_CustomFieldData::Data_Set> Model_CustomFieldData::get_all(const wxString& reftype)
 {
-    const wxString& reftype_str = Model_Attachment::REFTYPE_STR[reftype];
     Model_CustomField::Data_Set custom_fields = Model_CustomField::instance()
-        .find(Model_CustomField::DB_Table_CUSTOMFIELD_V1::REFTYPE(reftype_str));
+        .find(Model_CustomField::DB_Table_CUSTOMFIELD_V1::REFTYPE(reftype));
     std::map<int64, Model_CustomFieldData::Data_Set> data;
     for (const auto& entry : custom_fields)
     {
diff -Naur a/src/model/Model_CustomFieldData.h b/src/model/Model_CustomFieldData.h
--- a/src/model/Model_CustomFieldData.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_CustomFieldData.h	2025-07-09 01:46:59.660940578 +0200
@@ -20,7 +20,6 @@
 #define MODEL_CUSTOMFIELDDATA_H
 
 #include "Model.h"
-#include "Model_Attachment.h"
 #include "db/DB_Table_Customfielddata_V1.h"
 
 class Model_CustomFieldData : public Model<DB_Table_CUSTOMFIELDDATA_V1>
@@ -48,7 +47,7 @@
     static Model_CustomFieldData& instance();
 
 public:
-    std::map<int64, Data_Set> get_all(Model_Attachment::REFTYPE_ID reftype);
+    std::map<int64, Data_Set> get_all(const wxString& reftype);
     Data* get(int64 FieldID, int64 RefID);
     wxArrayString allValue(const int64 FieldID);
     static bool DeleteAllData(const wxString& RefType, int64 RefID);
diff -Naur a/src/model/Model_CustomField.h b/src/model/Model_CustomField.h
--- a/src/model/Model_CustomField.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_CustomField.h	2025-07-09 01:46:59.660940578 +0200
@@ -15,10 +15,11 @@
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  ********************************************************/
+
 #pragma once
 
+#include "choices.h"
 #include "Model.h"
-#include "Model_Attachment.h"
 #include "db/DB_Table_Customfield_V1.h"
 
 class Model_CustomField : public Model<DB_Table_CUSTOMFIELD_V1>
@@ -28,6 +29,7 @@
 
     enum TYPE_ID
     {
+        TYPE_ID_UNKNOWN = -1,
         TYPE_ID_STRING = 0,
         TYPE_ID_INTEGER,
         TYPE_ID_DECIMAL,
@@ -36,13 +38,11 @@
         TYPE_ID_TIME,
         TYPE_ID_SINGLECHOICE,
         TYPE_ID_MULTICHOICE,
-        TYPE_ID_UNKNOWN = -1
+        TYPE_ID_size
     };
-    static wxArrayString TYPE_STR;
 
 private:
-    static const std::vector<std::pair<TYPE_ID, wxString> > TYPE_CHOICES;
-    static const wxArrayString type_str_all();
+    static ChoicesName TYPE_CHOICES;
 
 public:
     Model_CustomField();
@@ -64,26 +64,50 @@
     static Model_CustomField& instance();
 
 public:
-    bool Delete(const int64& FieldID);
+    static const wxString type_name(int id);
+    static int type_id(const wxString& name, int default_id = TYPE_ID_UNKNOWN);
     static TYPE_ID type_id(const Data* r);
     static TYPE_ID type_id(const Data& r);
-    static TYPE_ID type_id(const wxString& value);
-    static const wxString getRegEx(const wxString& Properties);
-    static const wxString getTooltip(const wxString& Properties);
-    static int getReference(const wxString& Properties);
-    static bool getAutocomplete(const wxString& Properties);
-    static const wxString getDefault(const wxString& Properties);
-    static const wxArrayString getChoices(const wxString& Properties);
+
+    bool Delete(const int64& FieldID);
+    static const wxString getRegEx(const wxString& properties);
+    static const wxString getTooltip(const wxString& properties);
+    static bool getAutocomplete(const wxString& properties);
+    static const wxString getDefault(const wxString& properties);
+    static const wxArrayString getChoices(const wxString& properties);
     static const wxArrayString getUDFCList(DB_Table_CUSTOMFIELD_V1::Data* r);
-    static const wxString getUDFC(const wxString& Properties);
+    static const wxString getUDFC(const wxString& properties);
     static const wxString getUDFCName(const wxString& ref_type, const wxString& name);
     static TYPE_ID getUDFCType(const wxString& ref_type, const wxString& name);
     static const wxString getUDFCProperties(const wxString& ref_type, const wxString& name);
     static int64 getUDFCID(const wxString& ref_type, const wxString& name);
-    static const std::map<wxString, int64> getMatrix(Model_Attachment::REFTYPE_ID reftype);
+    static const std::map<wxString, int64> getMatrix(const wxString& reftype);
     static int getDigitScale(const wxString& Properties);
     static const wxString formatProperties(const wxString& Tooltip, const wxString& RegEx
         , bool Autocomplete, const wxString& Default, const wxArrayString& Choices
         , const int DigitScale, const wxString& udfc_str);
     static const wxArrayString UDFC_FIELDS();
 };
+
+//----------------------------------------------------------------------------
+
+inline const wxString Model_CustomField::type_name(int id)
+{
+    return TYPE_CHOICES.getName(id);
+}
+
+inline int Model_CustomField::type_id(const wxString& name, int default_id)
+{
+    return TYPE_CHOICES.findName(name, default_id);
+}
+
+inline Model_CustomField::TYPE_ID Model_CustomField::type_id(const Data* r)
+{
+    return static_cast<TYPE_ID>(type_id(r->TYPE));
+}
+
+inline Model_CustomField::TYPE_ID Model_CustomField::type_id(const Data& r)
+{
+    return type_id(&r);
+}
+
diff -Naur a/src/model/Model.h b/src/model/Model.h
--- a/src/model/Model.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model.h	2025-07-09 01:46:59.656940555 +0200
@@ -25,6 +25,7 @@
 #include <wx/log.h>
 #include "db/DB_Table.h"
 #include "singleton.h"
+#include "choices.h"
 
 class wxSQLite3Statement;
 class wxSQLite3Database;
@@ -97,8 +98,43 @@
 
 protected:
     wxSQLite3Database* db_;
+
+public:
+    enum REFTYPE_ID {
+        REFTYPE_ID_TRANSACTION = 0,
+        REFTYPE_ID_STOCK,
+        REFTYPE_ID_ASSET,
+        REFTYPE_ID_BANKACCOUNT,
+        REFTYPE_ID_BILLSDEPOSIT,
+        REFTYPE_ID_PAYEE,
+        REFTYPE_ID_TRANSACTIONSPLIT,
+        REFTYPE_ID_BILLSDEPOSITSPLIT,
+        REFTYPE_ID_size
+    };
+
+    static ChoicesName REFTYPE_CHOICES;
+    static const wxString REFTYPE_NAME_TRANSACTION;
+    static const wxString REFTYPE_NAME_STOCK;
+    static const wxString REFTYPE_NAME_ASSET;
+    static const wxString REFTYPE_NAME_BANKACCOUNT;
+    static const wxString REFTYPE_NAME_BILLSDEPOSIT;
+    static const wxString REFTYPE_NAME_PAYEE;
+    static const wxString REFTYPE_NAME_TRANSACTIONSPLIT;
+    static const wxString REFTYPE_NAME_BILLSDEPOSITSPLIT;
+    static const wxString reftype_name(int id);
+    static int reftype_id(const wxString& name, int default_id = -1);
 };
 
+inline const wxString ModelBase::reftype_name(int id)
+{
+    return REFTYPE_CHOICES.getName(id);
+}
+
+inline int ModelBase::reftype_id(const wxString& name, int default_id)
+{
+    return REFTYPE_CHOICES.findName(name, default_id);
+}
+
 template<class DB_TABLE>
 class Model : public ModelBase, public DB_TABLE
 {
diff -Naur a/src/model/Model_Infotable.cpp b/src/model/Model_Infotable.cpp
--- a/src/model/Model_Infotable.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Infotable.cpp	2025-07-09 01:46:59.660940578 +0200
@@ -31,10 +31,8 @@
 {
 }
 
-/**
-* Initialize the global Model_Infotable.
-* Reset the Model_Infotable or create the table if it does not exist.
-*/
+// Initialize the global Model_Infotable.
+// Reset the Model_Infotable or create the table if it does not exist.
 Model_Infotable& Model_Infotable::instance(wxSQLite3Database* db)
 {
     Model_Infotable& ins = Singleton<Model_Infotable>::instance();
@@ -42,361 +40,369 @@
     ins.destroy_cache();
     ins.ensure(db);
     ins.preload();
-    if (!ins.KeyExists("MMEXVERSION"))
-    {
-        ins.Set("MMEXVERSION", mmex::version::string);
-        ins.Set("DATAVERSION", mmex::DATAVERSION);
-        ins.Set("CREATEDATE", wxDateTime::Now());
-        ins.Set("DATEFORMAT", mmex::DEFDATEFORMAT);
+    if (!ins.contains("MMEXVERSION")) {
+        ins.setString("MMEXVERSION", mmex::version::string);
+        ins.setString("DATAVERSION", mmex::DATAVERSION);
+        ins.setDate("CREATEDATE", wxDateTime::Now());
+        ins.setString("DATEFORMAT", mmex::DEFDATEFORMAT);
     }
-
     return ins;
 }
 
-/** Return the static instance of Model_Infotable */
+// Return the static instance of Model_Infotable
 Model_Infotable& Model_Infotable::instance()
 {
     return Singleton<Model_Infotable>::instance();
 }
 
-// Setter
-void Model_Infotable::Set(const wxString& key, int64 value)
+// Returns true if key setting found
+bool Model_Infotable::contains(const wxString& key)
 {
-    this->Set(key, wxString::Format("%lld", value));
+    return !find(INFONAME(key)).empty();
 }
 
-void Model_Infotable::Set(const wxString& key, int value)
+// Raw (the raw value stored in Infotable is always string)
+void Model_Infotable::setRaw(const wxString& key, const wxString& newValue)
 {
-    this->Set(key, wxString::Format("%d", value));
+    // search in cache
+    Data* info = get_one(INFONAME(key));
+    if (!info) {
+        // not found in cache; search in db
+        Data_Set items = find(INFONAME(key));
+        if (!items.empty())
+            info = get(items[0].INFOID);
+        if (!info) {
+            // not found; create
+            info = create();
+            info->INFONAME = key;
+        }
+    }
+    info->INFOVALUE = newValue;
+    info->save(db_);
 }
-
-void Model_Infotable::Set(const wxString& key, bool value)
+wxString Model_Infotable::getRaw(const wxString& key, const wxString& defaultValue)
 {
-    this->Set(key, wxString::Format("%s", value ? "TRUE" : "FALSE"));
+    // search in cache
+    Data* info = get_one(INFONAME(key));
+    if (info)
+        return info->INFOVALUE;
+    // search in db
+    Data_Set items = find(INFONAME(key));
+    if (!items.empty())
+        return items[0].INFOVALUE;
+    // not found
+    return defaultValue;
 }
 
-void Model_Infotable::Set(const wxString& key, const wxDateTime& date)
+// String
+void Model_Infotable::setString(const wxString& key, const wxString& newValue)
 {
-    this->Set(key, date.FormatISODate());
+    setRaw(key, newValue);
 }
-
-void Model_Infotable::Set(const wxString& key, const wxSize& size)
+wxString Model_Infotable::getString(const wxString& key, const wxString& defaultValue)
 {
-    this->Set(key, wxString::Format("%i,%i", size.GetWidth(), size.GetHeight()));
+    return getRaw(key, defaultValue);
 }
 
-void Model_Infotable::Set(const wxString& key, const wxString& value)
+// Bool
+void Model_Infotable::setBool(const wxString& key, bool newValue)
 {
-    Data* info = this->get_one(INFONAME(key));
-    if (!info) // not cached
-    {
-        Data_Set items = this->find(INFONAME(key));
-        if (!items.empty()) info = this->get(items[0].INFOID);
-    }
-    if (info)
-    {
-        info->INFOVALUE= value;
-        info->save(this->db_);
-    }
+    setRaw(key, wxString::Format("%s", newValue ? "TRUE" : "FALSE"));
+}
+bool Model_Infotable::getBool(const wxString& key, bool defaultValue)
+{
+    const wxString rawValue = getRaw(key, "");
+    if (rawValue == "1" || rawValue.CmpNoCase("TRUE") == 0)
+        return true;
+    else if (rawValue == "0" || rawValue.CmpNoCase("FALSE") == 0)
+        return false;
     else
-    {
-        info = this->create();
-        info->INFONAME = key;
-        info->INFOVALUE = value;
-        info->save(this->db_);
-    }
+        return defaultValue;
 }
 
-void Model_Infotable::Set(const wxString& key, const wxColour& value)
+// Int
+void Model_Infotable::setInt(const wxString& key, int newValue)
 {
-    this->Set(key, wxString::Format("%d,%d,%d", value.Red(), value.Green(), value.Blue()));
+    setRaw(key, wxString::Format("%d", newValue));
 }
-
-void Model_Infotable::Prepend(const wxString& key, const wxString& value, int limit)
+int Model_Infotable::getInt(const wxString& key, int defaultValue)
 {
-    Data* setting = this->get_one(INFONAME(key));
-    if (!setting) // not cached
-    {
-        Data_Set items = this->find(INFONAME(key));
-        if (!items.empty()) setting = this->get(items[0].INFOID);
-    }
-
-    if (!setting)
-    {
-        setting = this->create();
-        setting->INFONAME = key;
-    }
-    int i = 1;
-    wxArrayString a;
-    if (!value.empty() && limit != 0)
-        a.Add(value);
+    const wxString rawValue = getRaw(key, "");
+    if (!rawValue.IsEmpty() && rawValue.IsNumber())
+        return wxAtoi(rawValue);
+    return defaultValue;
+}
 
-    Document j_doc;
-    if (j_doc.Parse(setting->INFOVALUE.utf8_str()).HasParseError()) {
-        j_doc.Parse("[]");
-    }
+// Int64
+void Model_Infotable::setInt64(const wxString& key, int64 newValue)
+{
+    setRaw(key, wxString::Format("%lld", newValue));
+}
+int64 Model_Infotable::getInt64(const wxString& key, int64 defaultValue)
+{
+    const wxString rawValue = getString(key, "");
+    if (!rawValue.IsEmpty() && rawValue.IsNumber())
+        return int64(wxAtol(rawValue));
+    return defaultValue;
+}
 
-    if (j_doc.IsArray())
-    {
-        for (auto& v : j_doc.GetArray())
-        {
-            if (i >= limit && limit != -1) break;
-            if (v.IsString()) {
-                const auto item = wxString::FromUTF8(v.GetString());
-                if (a.Index(item) == wxNOT_FOUND) {
-                    a.Add(item);
-                    i++;
-                }
-            }
+// Size
+void Model_Infotable::setSize(const wxString& key, const wxSize& newValue)
+{
+    setRaw(key, wxString::Format("%i,%i", newValue.GetWidth(), newValue.GetHeight()));
+}
+const wxSize Model_Infotable::getSize(const wxString& key)
+{
+    const wxString rawValue = getRaw(key, "");
+    if (!rawValue.IsEmpty()) {
+        wxRegEx pattern("^([0-9]+),([0-9]+)$");
+        if (pattern.Matches(rawValue)) {
+            const auto& x = pattern.GetMatch(rawValue, 1);
+            const auto& y = pattern.GetMatch(rawValue, 2);
+            return wxSize(wxAtoi(x), wxAtoi(y));
         }
     }
-
-    StringBuffer json_buffer;
-    PrettyWriter<StringBuffer> json_writer(json_buffer);
-    json_writer.StartArray();
-    for (const auto& entry : a)
-    {
-        json_writer.String(entry.utf8_str());
-    }
-    json_writer.EndArray();
-
-    setting->INFOVALUE = wxString::FromUTF8(json_buffer.GetString());
-    setting->save(this->db_);
+    return wxDefaultSize;
 }
 
-void Model_Infotable::Erase(const wxString& key, int row)
+// Colour
+void Model_Infotable::setColour(const wxString& key, const wxColour& newValue)
 {
-    Document j_doc;
-    if (j_doc.Parse(GetStringInfo(key, "[]").utf8_str()).HasParseError()) {
-        j_doc.Parse("[]");
-    }
-
-    if (j_doc.IsArray())
-    {
-        j_doc.Erase(j_doc.Begin() + row);
-
-        StringBuffer json_buffer;
-        PrettyWriter<StringBuffer> json_writer(json_buffer);
-        j_doc.Accept(json_writer);
-        const wxString json_string = wxString::FromUTF8(json_buffer.GetString());
-        Set(key, json_string);
-        wxLogDebug(json_string);
-    }
+    setRaw(key, wxString::Format("%d,%d,%d",
+        newValue.Red(), newValue.Green(), newValue.Blue()
+    ));
 }
-
-void Model_Infotable::Update(const wxString& key, int row, const wxString& value)
+const wxColour Model_Infotable::getColour(const wxString& key, const wxColour& defaultValue)
 {
-    Document j_doc, j_doc_new;
-    if (j_doc.Parse(GetStringInfo(key, "[]").utf8_str()).HasParseError()) {
-        j_doc.Parse("[]");
-    }
-
-    if (j_doc.IsArray())
-    {
-        StringBuffer json_buffer;
-        PrettyWriter<StringBuffer> json_writer(json_buffer);
-        json_writer.StartArray();
-        for (SizeType i = 0; i < j_doc.Size(); i++)
-        {
-            if (row == static_cast<int>(i))
-                json_writer.String(value.utf8_str());
-            else
-                json_writer.String(j_doc[i].GetString());
+    const wxString rawValue = getRaw(key, "");
+    if (!rawValue.IsEmpty()) {
+        wxRegEx pattern("([0-9]{1,3}),([0-9]{1,3}),([0-9]{1,3})");
+        if (pattern.Matches(rawValue)) {
+            const wxString r = pattern.GetMatch(rawValue, 1);
+            const wxString g = pattern.GetMatch(rawValue, 2);
+            const wxString b = pattern.GetMatch(rawValue, 3);
+            return wxColour(wxAtoi(r), wxAtoi(g), wxAtoi(b));
+        }
+        else {
+            return wxColour(rawValue);
         }
-        json_writer.EndArray();
-
-        const wxString& json_string = wxString::FromUTF8(json_buffer.GetString());
-        Set(key, json_string);
-        wxLogDebug(json_string);
     }
+    return defaultValue;
 }
 
-// Getter
-bool Model_Infotable::GetBoolInfo(const wxString& key, bool default_value)
+// Date
+void Model_Infotable::setDate(const wxString& key, const wxDateTime& newValue)
 {
-    const wxString value = this->GetStringInfo(key, "");
-    if (value == "1" || value.CmpNoCase("TRUE") == 0)
-        return true;
-    else if (value == "0" || value.CmpNoCase("FALSE") == 0)
-        return false;
-    else
-        return default_value;
+    setRaw(key, newValue.FormatISODate());
 }
 
-int Model_Infotable::GetIntInfo(const wxString& key, int default_value)
+//-------------------------------------------------------------------
+// Jdoc
+void Model_Infotable::setJdoc(const wxString& key, Document& newValue)
 {
-    const wxString value = this->GetStringInfo(key, "");
-    if (!value.IsEmpty() && value.IsNumber())
-        return wxAtoi(value);
-
-    return default_value;
+    wxString j_str = JSON_PrettyFormated(newValue);
+    setRaw(key, j_str);
 }
-
-int64 Model_Infotable::GetInt64Info(const wxString& key, int64 default_value)
+void Model_Infotable::setJdoc(const wxString& key, StringBuffer& newValue)
 {
-    const wxString value = this->GetStringInfo(key, "");
-    if (!value.IsEmpty() && value.IsNumber())
-        return int64(wxAtol(value));
+    wxString j_str = wxString::FromUTF8(newValue.GetString());
+    setRaw(key, j_str);
+}
+Document Model_Infotable::getJdoc(const wxString& key, const wxString& defaultValue)
+{
+    Document j_doc;
+    wxString j_str = getRaw(key, defaultValue);
+    j_doc.Parse(j_str.utf8_str());
+    return j_doc;
+}
 
-    return default_value;
+// ArrayString
+void Model_Infotable::setArrayString(const wxString& key, const wxArrayString& a)
+{
+    StringBuffer json_buffer;
+    PrettyWriter<StringBuffer> json_writer(json_buffer);
+    json_writer.StartArray();
+    for (const auto& value : a) {
+        json_writer.String(value.utf8_str());
+    }
+    json_writer.EndArray();
+    const wxString& json_string = wxString::FromUTF8(json_buffer.GetString());
+    setRaw(key, json_string);
+    wxLogDebug("Model_Infotable::setArrayString(%s): %s", key, json_string);
 }
 
-wxString Model_Infotable::GetStringInfo(const wxString& key, const wxString& default_value)
+const wxArrayString Model_Infotable::getArrayString(const wxString& key, bool sort)
 {
-    Data* info = this->get_one(INFONAME(key));
-    if (info)
-        return info->INFOVALUE;
-    else // not cached
-    {
-        Data_Set items = this->find(INFONAME(key));
-        if (!items.empty())
-            return items[0].INFOVALUE;
+    wxString rawValue = getRaw(key, "");
+    Document j_doc;
+    if (rawValue.IsEmpty() ||
+        j_doc.Parse(rawValue.utf8_str()).HasParseError() ||
+        !j_doc.IsArray()
+    )
+        return wxArrayString();
+
+    wxArrayString a;
+    wxLogDebug("{{{ Model_Infotable::getArrayString(%s)", key);
+    for (rapidjson::SizeType i = 0; i < j_doc.Size(); i++) {
+        wxASSERT(j_doc[i].IsString());
+        const auto value = wxString::FromUTF8(j_doc[i].GetString());
+        wxLogDebug("%s", value);
+        a.Add(value);
     }
+    wxLogDebug("}}}");
 
-    return default_value;
+    // Crude sort of JSON (case sensitive), could be improved by actually sorting by a field
+    // but this should be sufficient if you want to sort by first element
+    if (sort)
+        a.Sort();
+    return a;
 }
-const wxSize Model_Infotable::GetSizeSetting(const wxString& key)
+
+// Search through a set of JSON data for a particular label
+int Model_Infotable::findArrayItem(const wxString& key, const wxString& label)
 {
-    const wxString value = this->GetStringInfo(key, "");
-    if (!value.IsEmpty())
-    {
-        wxRegEx pattern("^([0-9]+),([0-9]+)$");
-        if (pattern.Matches(value))
-        {
-            const auto& x = pattern.GetMatch(value, 1);
-            const auto& y = pattern.GetMatch(value, 2);
-            return wxSize(wxAtoi(x), wxAtoi(y));
-        }
+    // Important: do not sort
+    wxArrayString a = Model_Infotable::instance().getArrayString(key);
+    int i = 0;
+    for (const auto& data : a) {
+        Document j_doc;
+        if (j_doc.Parse(data.utf8_str()).HasParseError())
+            j_doc.Parse("{}");
+        Value& j_label = GetValueByPointerWithDefault(j_doc, "/LABEL", "");
+        const wxString& s_label = j_label.IsString() ? wxString::FromUTF8(j_label.GetString()) : "";
+        if (s_label == label)
+            return i;
+        ++i;
     }
-    return wxDefaultSize;
+    return wxNOT_FOUND;
 }
 
-const wxColour Model_Infotable::GetColourSetting(const wxString& key, const wxColour& default_value)
+void Model_Infotable::updateArrayItem(const wxString& key, int i, const wxString& newValue)
 {
-    const wxString value = this->GetStringInfo(key, "");
-    if (!value.IsEmpty())
-    {
-        wxRegEx pattern("([0-9]{1,3}),([0-9]{1,3}),([0-9]{1,3})");
-        if (pattern.Matches(value))
-        {
-            const wxString red = pattern.GetMatch(value, 1);
-            const wxString green = pattern.GetMatch(value, 2);
-            const wxString blue = pattern.GetMatch(value, 3);
+    wxString rawValue = getRaw(key, "");
+    Document j_doc;
+    if (rawValue.IsEmpty() ||
+        j_doc.Parse(rawValue.utf8_str()).HasParseError() ||
+        !j_doc.IsArray()
+    )
+        return;
 
-            return wxColour(wxAtoi(red), wxAtoi(green), wxAtoi(blue));
-        }
-        else
-        {
-            return wxColour(value);
-        }
+    StringBuffer json_buffer;
+    PrettyWriter<StringBuffer> json_writer(json_buffer);
+    json_writer.StartArray();
+    for (SizeType j = 0; j < j_doc.Size(); j++) {
+        json_writer.String(
+            (i == static_cast<int>(j)) ? newValue.utf8_str() : j_doc[j].GetString()
+        );
     }
+    json_writer.EndArray();
+    const wxString& json_string = wxString::FromUTF8(json_buffer.GetString());
 
-    return default_value;
+    setRaw(key, json_string);
+    wxLogDebug("Model_Infotable::updateArrayItem(%s, %d): %s", key, i, json_string);
 }
 
-const wxArrayString Model_Infotable::GetArrayStringSetting(const wxString& key, bool sort)
+void Model_Infotable::prependArrayItem(const wxString& key, const wxString& value, int limit)
 {
-    wxString data;
-    Data* setting = this->get_one(INFONAME(key));
-    if (!setting) // not cached
-    {
-        Data_Set items = this->find(INFONAME(key));
-        if (items.empty()) {
-            return wxArrayString();
-        }
-        else {
-            data = items[0].INFOVALUE;
+    Data* info = get_one(INFONAME(key));
+    if (!info) { // not cached
+        Data_Set items = find(INFONAME(key));
+        if (!items.empty())
+            info = get(items[0].INFOID);
+        if (!info) {
+            info = create();
+            info->INFONAME = key;
         }
     }
-    else
-    {
-        data = setting->INFOVALUE;
-    }
-
     wxArrayString a;
+    if (!value.empty() && limit != 0)
+        a.Add(value);
+
     Document j_doc;
-    if (j_doc.Parse(data.utf8_str()).HasParseError()) {
-        j_doc.Parse("[]");
+    if (!j_doc.Parse(info->INFOVALUE.utf8_str()).HasParseError()
+        && j_doc.IsArray()
+    ) {
+        int i = 1;
+        for (auto& v : j_doc.GetArray()) {
+            if (i >= limit && limit != -1) break;
+            if (v.IsString()) {
+                const auto item = wxString::FromUTF8(v.GetString());
+                if (a.Index(item) == wxNOT_FOUND) {
+                    a.Add(item);
+                    i++;
+                }
+            }
+        }
     }
 
-    if (j_doc.IsArray())
-    {
-        for (rapidjson::SizeType i = 0; i < j_doc.Size(); i++)
-        {
-            wxASSERT(j_doc[i].IsString());
-            const auto item = wxString::FromUTF8(j_doc[i].GetString());
-            wxLogDebug("%s", item);
-            a.Add(item);
-        }
+    StringBuffer json_buffer;
+    PrettyWriter<StringBuffer> json_writer(json_buffer);
+    json_writer.StartArray();
+    for (const auto& entry : a) {
+        json_writer.String(entry.utf8_str());
     }
+    json_writer.EndArray();
 
-    // Crude sort of JSON (case sensitive), could be improved by actually sorting by a field
-    // but this should be sufficient if you want to sort by first element
-    if (sort)
-        a.Sort();
-    return a;
+    info->INFOVALUE = wxString::FromUTF8(json_buffer.GetString());
+    info->save(db_);
 }
 
-/* Returns true if key setting found */
-bool Model_Infotable::KeyExists(const wxString& key)
+void Model_Infotable::eraseArrayItem(const wxString& key, int i)
 {
-    return !this->find(INFONAME(key)).empty();
-}
+    wxString rawValue = getRaw(key, "");
+    Document j_doc;
+    if (rawValue.IsEmpty() ||
+        j_doc.Parse(rawValue.utf8_str()).HasParseError() ||
+        !j_doc.IsArray()
+    )
+        return;
 
-bool Model_Infotable::checkDBVersion()
-{
-    if (!this->KeyExists("DATAVERSION")) return false;
+    j_doc.Erase(j_doc.Begin() + i);
+    StringBuffer json_buffer;
+    PrettyWriter<StringBuffer> json_writer(json_buffer);
+    j_doc.Accept(json_writer);
 
-    return this->GetIntInfo("DATAVERSION", 0) >= mmex::MIN_DATAVERSION;
+    const wxString json_string = wxString::FromUTF8(json_buffer.GetString());
+    setRaw(key, json_string);
+    wxLogDebug("Model_Infotable::eraseArrayItem(%s, %d): %s", key, i, json_string);
 }
 
-loop_t Model_Infotable::to_loop_t()
+//-------------------------------------------------------------------
+// CUSTOMDIALOG_OPEN
+void Model_Infotable::setOpenCustomDialog(const wxString& refType, bool newValue)
 {
-    loop_t loop;
-    for (const auto &r: instance().all())
-        loop += r.to_row_t();
-    return loop;
+    setBool("CUSTOMDIALOG_OPEN:" + refType, newValue);
 }
-
-//-------------------------------------------------------------------
-bool Model_Infotable::OpenCustomDialog(const wxString& RefType)
+bool Model_Infotable::getOpenCustomDialog(const wxString& refType)
 {
-    return GetBoolInfo("CUSTOMDIALOG_OPEN:" + RefType, false);
+    return getBool("CUSTOMDIALOG_OPEN:" + refType, false);
 }
 
-void Model_Infotable::SetOpenCustomDialog(const wxString& RefType, bool Status)
+// CUSTOMDIALOG_SIZE
+void Model_Infotable::setCustomDialogSize(const wxString& refType, const wxSize& newValue)
 {
-    Set("CUSTOMDIALOG_OPEN:" + RefType, Status);
+    wxString rawValue;
+    rawValue << newValue.GetWidth() << ";" << newValue.GetHeight();
+    setRaw("CUSTOMDIALOG_SIZE:" + refType, rawValue);
 }
-
-wxSize Model_Infotable::CustomDialogSize(const wxString& RefType)
+wxSize Model_Infotable::getCustomDialogSize(const wxString& refType)
 {
-    wxString strSize = GetStringInfo("CUSTOMDIALOG_SIZE:" + RefType, "0;0");
-    return wxSize(wxAtoi(strSize.BeforeFirst(';')), wxAtoi(strSize.AfterFirst(';')));
+    wxString rawValue = getRaw("CUSTOMDIALOG_SIZE:" + refType, "0;0");
+    return wxSize(wxAtoi(rawValue.BeforeFirst(';')), wxAtoi(rawValue.AfterFirst(';')));
 }
 
-void Model_Infotable::SetCustomDialogSize(const wxString& RefType, const wxSize& Size)
+//-------------------------------------------------------------------
+bool Model_Infotable::checkDBVersion()
 {
-    wxString strSize;
-    strSize << Size.GetWidth() << ";" << Size.GetHeight();
-    Set("CUSTOMDIALOG_SIZE:" + RefType, strSize);
+    if (!contains("DATAVERSION"))
+        return false;
+    return getInt("DATAVERSION", 0) >= mmex::MIN_DATAVERSION;
 }
 
-int Model_Infotable::FindLabelInJSON(const wxString& entry, const wxString& labelID)
+loop_t Model_Infotable::to_loop_t()
 {
-    // Important: Get the unsorted array
-    wxArrayString settings = Model_Infotable::instance().GetArrayStringSetting(entry);
-    int sel = 0;
-    for (const auto& data : settings)
-    {
-        Document j_doc;
-        if (j_doc.Parse(data.utf8_str()).HasParseError())
-            j_doc.Parse("{}");
-        Value& j_label = GetValueByPointerWithDefault(j_doc, "/LABEL", "");
-        const wxString& s_label = j_label.IsString() ? wxString::FromUTF8(j_label.GetString()) : "";
-        if (s_label == labelID)
-            return sel;
-        ++sel;
-    }
-    return wxNOT_FOUND;
+    loop_t loop;
+    for (const auto &r: instance().all())
+        loop += r.to_row_t();
+    return loop;
 }
diff -Naur a/src/model/Model_Infotable.h b/src/model/Model_Infotable.h
--- a/src/model/Model_Infotable.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Infotable.h	2025-07-09 01:46:59.660940578 +0200
@@ -23,6 +23,7 @@
 #include "Model.h"
 #include "db/DB_Table_Infotable_V1.h"
 #include "defs.h"
+#include "util.h"
 
 class Model_Infotable : public Model<DB_Table_INFOTABLE_V1>
 {
@@ -31,57 +32,64 @@
     ~Model_Infotable();
 
 public:
-    /**
-    Initialize the global Model_Infotable table on initial call.
-    Resets the global table on subsequent calls.
-    * Return the static instance address for Model_Infotable table
-    * Note: Assigning the address to a local variable can destroy the instance.
-    */
+    // Initialize the global Model_Infotable table on initial call.
+    // Resets the global table on subsequent calls.
+    // Return the static instance address for Model_Infotable table.
+    // Note: Assigning the address to a local variable can destroy the instance.
     static Model_Infotable& instance(wxSQLite3Database* db);
 
-    /**
-    * Return the static instance address for Model_Infotable table
-    * Note: Assigning the address to a local variable can destroy the instance.
-    */
+    // Return the static instance address for Model_Infotable table.
+    // Note: Assigning the address to a local variable can destroy the instance.
     static Model_Infotable& instance();
 
 public:
-    // Setter
-    void Set(const wxString& key, int64 value);
-    void Set(const wxString& key, int value);
-    void Set(const wxString& key, bool value);
-    void Set(const wxString& key, const wxDateTime& date);
-    void Set(const wxString& key, const wxString& value);
-    void Set(const wxString& key, const wxColour& value);
-    void Set(const wxString& key, const wxSize& size);
-    void Prepend(const wxString& key, const wxString& value, int limit);
-    void Erase(const wxString& key, int row);
-    void Update(const wxString& key, int row, const wxString& value);
+    bool contains(const wxString& key);
+
+    void setRaw(const wxString& key, const wxString& newValue);
+    wxString getRaw(const wxString& key, const wxString& defaultValue);
+
+    void setString(const wxString& key, const wxString& newValue);
+    wxString getString(const wxString& key, const wxString& defaultValue);
+
+    void setBool(const wxString& key, bool newValue);
+    bool getBool(const wxString& key, bool defaultValue);
+
+    void setInt(const wxString& key, int newValue);
+    int getInt(const wxString& key, int defaultValue);
+
+    void setInt64(const wxString& key, int64 newValue);
+    int64 getInt64(const wxString& key, int64 defaultValue);
+
+    void setSize(const wxString& key, const wxSize& newValue);
+    const wxSize getSize(const wxString& key);
+
+    void setColour(const wxString& key, const wxColour& newValue);
+    const wxColour getColour(const wxString& key, const wxColour& defaultValue = wxColour(255, 255, 255));
+
+    void setDate(const wxString& key, const wxDateTime& newValue);
+
+    void setJdoc(const wxString& key, Document& newValue);
+    void setJdoc(const wxString& key, StringBuffer& newValue);
+    Document getJdoc(const wxString& key, const wxString& defaultValue);
+
+    void setArrayString(const wxString& key, const wxArrayString& a);
+    const wxArrayString getArrayString(const wxString& key, bool sort = false);
+
+    int findArrayItem(const wxString& key, const wxString& label);
+    void updateArrayItem(const wxString& key, int i, const wxString& newValue);
+    void prependArrayItem(const wxString& key, const wxString& value, int limit);
+    void eraseArrayItem(const wxString& key, int i);
 
 public:
-    // Getter
-    bool GetBoolInfo(const wxString& key, bool default_value);
-    int GetIntInfo(const wxString& key, int default_value);
-    int64 GetInt64Info(const wxString& key, int64 default_value);
-    wxString GetStringInfo(const wxString& key, const wxString& default_value);
-    const wxColour GetColourSetting(const wxString& key, const wxColour& default_value = wxColour(255, 255, 255));
-    const wxArrayString GetArrayStringSetting(const wxString& key, bool sort = false);
-    const wxSize GetSizeSetting(const wxString& key);
-
-    /* Returns true if key setting found */
-    bool KeyExists(const wxString& key);
-    /* Check database at minimum revision*/
-    bool checkDBVersion();
+    void setOpenCustomDialog(const wxString& refType, bool newValue);
+    bool getOpenCustomDialog(const wxString& refType);
 
-    static loop_t to_loop_t();
+    void setCustomDialogSize(const wxString& refType, const wxSize& newValue);
+    wxSize getCustomDialogSize(const wxString& refType);
 
 public:
-    bool OpenCustomDialog(const wxString& RefType);
-    void SetOpenCustomDialog(const wxString& RefType, bool Status);
-    wxSize CustomDialogSize(const wxString& RefType);
-    void SetCustomDialogSize(const wxString& RefType, const wxSize& Size);
-    //Use to search through a set of JSON data for a particular label
-    int FindLabelInJSON(const wxString& entry, const wxString& labelID);
+    bool checkDBVersion();
+    static loop_t to_loop_t();
 };
 
-#endif // 
+#endif
diff -Naur a/src/model/Model_Payee.cpp b/src/model/Model_Payee.cpp
--- a/src/model/Model_Payee.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Payee.cpp	2025-07-09 01:46:59.660940578 +0200
@@ -78,7 +78,7 @@
     if (payee)
         return payee->PAYEENAME;
     else
-        return _("Payee Error");
+        return _t("Payee Error");
 }
 
 bool Model_Payee::remove(int64 id)
diff -Naur a/src/model/Model_Payee.h b/src/model/Model_Payee.h
--- a/src/model/Model_Payee.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Payee.h	2025-07-09 01:46:59.660940578 +0200
@@ -71,6 +71,9 @@
     static bool is_used(int64 id);
     static bool is_used(const Data* record);
     static bool is_used(const Data& record);
+
+public:
+    static const wxString refTypeName;
 };
 
 #endif // 
diff -Naur a/src/model/Model_Report.cpp b/src/model/Model_Report.cpp
--- a/src/model/Model_Report.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Report.cpp	2025-07-09 01:46:59.660940578 +0200
@@ -83,11 +83,11 @@
     const wxString def_time = wxDateTime::Now().FormatISOTime();
 
     const std::vector<Model_Report::Values> v = {
-    {"&begin_date", "mmDatePickerCtrl", def_date, mmReportsPanel::RepPanel::ID_CHOICE_START_DATE, _("Begin date:")},
-    {"&single_date", "mmDatePickerCtrl", def_date, mmReportsPanel::RepPanel::ID_CHOICE_START_DATE, _("Date:")},
-    {"&end_date", "mmDatePickerCtrl", def_date, mmReportsPanel::RepPanel::ID_CHOICE_END_DATE, _("End date:")},
-    {"&single_time", "wxTimePickerCtrl", def_time, mmReportsPanel::RepPanel::ID_CHOICE_TIME, _("Time:")},
-    {"&only_years", "wxChoice", def_date, mmReportsPanel::RepPanel::ID_CHOICE_YEAR, _("Year:")},
+    {"&begin_date", "mmDatePickerCtrl", def_date, mmReportsPanel::RepPanel::ID_CHOICE_START_DATE, _t("Begin date:")},
+    {"&single_date", "mmDatePickerCtrl", def_date, mmReportsPanel::RepPanel::ID_CHOICE_START_DATE, _t("Date:")},
+    {"&end_date", "mmDatePickerCtrl", def_date, mmReportsPanel::RepPanel::ID_CHOICE_END_DATE, _t("End date:")},
+    {"&single_time", "wxTimePickerCtrl", def_time, mmReportsPanel::RepPanel::ID_CHOICE_TIME, _t("Time:")},
+    {"&only_years", "wxChoice", def_date, mmReportsPanel::RepPanel::ID_CHOICE_YEAR, _t("Year:")},
     };
     return v;
 }
@@ -97,7 +97,7 @@
     std::vector<std::pair<wxString, wxString>> v;
     for (const auto& entry : SqlPlaceHolders())
     {
-        v.push_back(std::make_pair(entry.label, entry.name));
+        v.emplace_back(entry.label, entry.name);
     }
     return v;
 }
@@ -237,7 +237,7 @@
     wxString sql = r->SQLCONTENT;
     wxString templatecontent = r->TEMPLATECONTENT;
     if (templatecontent.empty()) {
-        out = _("Template is empty");
+        out = _t("Template is empty");
         return 3;
     }
 
@@ -251,7 +251,7 @@
         wxSQLite3Statement stmt = this->db_->PrepareStatement(sql);
         if (!stmt.IsReadOnly())
         {
-            out = wxString::Format(_("The SQL script:\n%s\nwill modify database! Aborted!"), r->SQLCONTENT);
+            out = wxString::Format(_t("The SQL script:\n%s\nwill modify database! Aborted!"), r->SQLCONTENT);
             return -1;
         }
         else
@@ -392,7 +392,7 @@
         s.Replace("\\", "\\\\");
         report(L"FILESEPARATOR") = s;
         report(L"LANGUAGE") = Option::instance().getLanguageCode();
-        report(L"HTMLSCALE") = wxString::Format("%d", Option::instance().getHtmlFontSize());
+        report(L"HTMLSCALE") = wxString::Format("%d", Option::instance().getHtmlScale());
     }
     report(L"ERRORS") = errors;
 
@@ -407,7 +407,7 @@
     }
     catch (...)
     {
-        out = _("Caught exception");
+        out = _t("Caught exception");
         return 2;
     }
 
diff -Naur a/src/model/Model_Setting.cpp b/src/model/Model_Setting.cpp
--- a/src/model/Model_Setting.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Setting.cpp	2025-07-09 01:46:59.660940578 +0200
@@ -33,10 +33,8 @@
 {
 }
 
-/**
-* Initialize the global Model_Setting table.
-* Reset the Model_Setting table or create the table if it does not exist.
-*/
+// Initialize the global Model_Setting table.
+// Reset the Model_Setting table or create the table if it does not exist.
 Model_Setting& Model_Setting::instance(wxSQLite3Database* db)
 {
     Model_Setting& ins = Singleton<Model_Setting>::instance();
@@ -44,84 +42,195 @@
     ins.destroy_cache();
     ins.ensure(db);
     ins.preload();
-
     return ins;
 }
 
-/** Return the static instance of Model_Setting table. */
+// Return the static instance of Model_Setting table.
 Model_Setting& Model_Setting::instance()
 {
     return Singleton<Model_Setting>::instance();
 }
 
-// Setter
-void Model_Setting::Set(const wxString& key, int value)
+// Returns true if key setting found
+bool Model_Setting::contains(const wxString& key)
+{
+    return !find(SETTINGNAME(key)).empty();
+}
+
+// Raw
+void Model_Setting::setRaw(const wxString& key, const wxString& newValue)
+{
+    // search in cache
+    Data* setting = get_one(SETTINGNAME(key));
+    if (!setting) {
+        // not found in cache; search in db
+        Data_Set items = find(SETTINGNAME(key));
+        if (!items.empty())
+            setting = get(items[0].SETTINGID, db_);
+        if (!setting) {
+            // not found; create
+            setting = create();
+            setting->SETTINGNAME = key;
+        }
+    }
+    setting->SETTINGVALUE = newValue;
+    setting->save(db_);
+}
+const wxString Model_Setting::getRaw(const wxString& key, const wxString& defaultValue)
 {
-    this->Set(key, wxString::Format("%d", value));
+    // search in cache
+    Data* setting = get_one(SETTINGNAME(key));
+    if (setting)
+        return setting->SETTINGVALUE;
+    // search in db
+    Data_Set items = find(SETTINGNAME(key));
+    if (!items.empty())
+        return items[0].SETTINGVALUE;
+    // not found
+    return defaultValue;
 }
 
-void Model_Setting::Set(const wxString& key, bool value)
+// String
+void Model_Setting::setString(const wxString& key, const wxString& newValue)
+{
+    setRaw(key, newValue);
+}
+const wxString Model_Setting::getString(const wxString& key, const wxString& defaultValue)
 {
-    this->Set(key, wxString::Format("%s", value ? "TRUE" : "FALSE"));
+    return getRaw(key, defaultValue);
 }
 
-void Model_Setting::Set(const wxString& key, const wxColour& value)
+// Bool
+void Model_Setting::setBool(const wxString& key, bool newValue)
 {
-    this->Set(key, wxString::Format("%d,%d,%d", value.Red(), value.Green(), value.Blue()));
+    setRaw(key, wxString::Format("%s", newValue ? "TRUE" : "FALSE"));
+}
+bool Model_Setting::getBool(const wxString& key, bool defaultValue)
+{
+    wxString rawValue = getRaw(key, "");
+    if (rawValue == "TRUE") return true;
+    if (rawValue == "FALSE") return false;
+    return defaultValue; 
 }
 
-void Model_Setting::Set(const wxString& key, const wxString& value)
+// Int
+void Model_Setting::setInt(const wxString& key, int newValue)
+{
+    setRaw(key, wxString::Format("%d", newValue));
+}
+int Model_Setting::getInt(const wxString& key, int defaultValue)
 {
-    Data* setting = this->get_one(SETTINGNAME(key));
-    if (!setting) // not cached
-    {
-        Data_Set items = this->find(SETTINGNAME(key));
-        if (!items.empty()) setting = this->get(items[0].SETTINGID, this->db_);
+    wxString rawValue = getRaw(key, "");
+    if (!rawValue.IsEmpty() && rawValue.IsNumber())
+        return wxAtoi(rawValue);
+    return defaultValue;
+}
+
+// Colour
+void Model_Setting::setColour(const wxString& key, const wxColour& newValue)
+{
+    setRaw(key, wxString::Format("%d,%d,%d",
+        newValue.Red(), newValue.Green(), newValue.Blue()
+    ));
+}
+const wxColour Model_Setting::getColour(const wxString& key, const wxColour& defaultValue)
+{
+    const wxString rawValue = getRaw(key, "");
+    if (!rawValue.IsEmpty()) {
+        wxRegEx pattern("([0-9]{1,3}),([0-9]{1,3}),([0-9]{1,3})");
+        if (pattern.Matches(rawValue)) {
+            const wxString r = pattern.GetMatch(rawValue, 1);
+            const wxString g = pattern.GetMatch(rawValue, 2);
+            const wxString b = pattern.GetMatch(rawValue, 3);
+            return wxColour(wxAtoi(r), wxAtoi(g), wxAtoi(b));
+        }
+        else {
+            return wxColour(rawValue);
+        }
     }
-    if (setting)
-    {
-        setting->SETTINGVALUE = value;
-        setting->save(this->db_);
+    return defaultValue;
+}
+
+//-------------------------------------------------------------------
+// Jdoc
+void Model_Setting::setJdoc(const wxString& key, Document& newValue)
+{
+    wxString j_str = JSON_PrettyFormated(newValue);
+    setRaw(key, j_str);
+}
+void Model_Setting::setJdoc(const wxString& key, StringBuffer& newValue)
+{
+    wxString j_str = wxString::FromUTF8(newValue.GetString());
+    setRaw(key, j_str);
+}
+Document Model_Setting::getJdoc(const wxString& key, const wxString& defaultValue)
+{
+    Document j_doc;
+    wxString j_str = getRaw(key, defaultValue);
+    j_doc.Parse(j_str.utf8_str());
+    return j_doc;
+}
+
+// ArrayString
+void Model_Setting::setArrayString(const wxString& key, const wxArrayString& a)
+{
+    StringBuffer json_buffer;
+    PrettyWriter<StringBuffer> json_writer(json_buffer);
+    json_writer.StartArray();
+    for (const auto& value : a) {
+        json_writer.String(value.utf8_str());
     }
-    else
-    {
-        setting = this->create();
-        setting->SETTINGNAME = key;
-        setting->SETTINGVALUE = value;
-        setting->save(this->db_);
+    json_writer.EndArray();
+    const wxString& json_string = wxString::FromUTF8(json_buffer.GetString());
+    setRaw(key, json_string);
+    wxLogDebug("Model_Setting::setArrayString(%s): %s", key, json_string);
+}
+
+const wxArrayString Model_Setting::getArrayString(const wxString& key)
+{
+    wxString rawValue = getRaw(key, "");
+    Document j_doc;
+    if (rawValue.IsEmpty() ||
+        j_doc.Parse(rawValue.utf8_str()).HasParseError() ||
+        !j_doc.IsArray()
+    )
+        return wxArrayString();
+
+    wxArrayString a;
+    wxLogDebug("{{{ Model_Setting::getArrayString(%s)", key);
+    for (rapidjson::SizeType i = 0; i < j_doc.Size(); i++) {
+        wxASSERT(j_doc[i].IsString());
+        const auto value = wxString::FromUTF8(j_doc[i].GetString());
+        wxLogDebug("%s", value);
+        a.Add(value);
     }
+    wxLogDebug("}}}");
+    return a;
 }
 
-void Model_Setting::Prepend(const wxString& key, const wxString& value, int limit)
+void Model_Setting::prependArrayItem(const wxString& key, const wxString& value, int limit)
 {
     if (value.IsEmpty())
         return;
-    Data* setting = this->get_one(SETTINGNAME(key));
-    if (!setting) // not cached
-    {
-        Data_Set items = this->find(SETTINGNAME(key));
-        if (!items.empty()) setting = this->get(items[0].SETTINGID, this->db_);
-    }
-
-    if (!setting)
-    {
-        setting = this->create();
-        setting->SETTINGNAME = key;
+    Data* setting = get_one(SETTINGNAME(key));
+    if (!setting) { // not cached
+        Data_Set items = find(SETTINGNAME(key));
+        if (!items.empty())
+        setting = get(items[0].SETTINGID, db_);
+        if (!setting) {
+            setting = create();
+            setting->SETTINGNAME = key;
+        }
     }
-
-    int i = 1;
     wxArrayString a;
     a.Add(value);
 
     Document j_doc;
-    if (j_doc.Parse(setting->SETTINGVALUE.utf8_str()).HasParseError()) {
-        j_doc.Parse("[]");
-    }
-
-    if (j_doc.IsArray())
-    {
-        for (auto& v : j_doc.GetArray())
-        {
+    if (!j_doc.Parse(setting->SETTINGVALUE.utf8_str()).HasParseError()
+        && j_doc.IsArray()
+    ) {
+        int i = 1;
+        for (auto& v : j_doc.GetArray()) {
             if (i >= limit && limit != -1) break;
             if (v.IsString()) {
                 const auto item = wxString::FromUTF8(v.GetString());
@@ -136,180 +245,81 @@
     StringBuffer json_buffer;
     PrettyWriter<StringBuffer> json_writer(json_buffer);
     json_writer.StartArray();
-    for (const auto& entry : a)
-    {
+    for (const auto& entry : a) {
         json_writer.String(entry.utf8_str());
     }
     json_writer.EndArray();
 
     setting->SETTINGVALUE = wxString::FromUTF8(json_buffer.GetString());
-    setting->save(this->db_);
+    setting->save(db_);
 }
 
-// Getter
-bool Model_Setting::GetBoolSetting(const wxString& key, bool default_value)
+//-------------------------------------------------------------------
+// VIEWACCOUNTS
+void Model_Setting::setViewAccounts(const wxString& newValue)
 {
-    wxString value = this->GetStringSetting(key, "");
-    if (value == "TRUE") return true;
-    if (value == "FALSE") return false;
-
-    return default_value; 
+    setString("VIEWACCOUNTS", newValue);
 }
-
-int Model_Setting::GetIntSetting(const wxString& key, int default_value)
+wxString Model_Setting::getViewAccounts()
 {
-    wxString value = this->GetStringSetting(key, "");
-    if (!value.IsEmpty() && value.IsNumber()) return wxAtoi(value);
-
-    return default_value;
+    return getString("VIEWACCOUNTS", VIEW_ACCOUNTS_ALL_STR);
 }
 
-const wxString Model_Setting::GetStringSetting(const wxString& key, const wxString& default_value)
+// THEME
+void Model_Setting::setTheme(const wxString& newValue)
 {
-    Data* setting = this->get_one(SETTINGNAME(key));
-    if (!setting) // not cached
-    {
-        Data_Set items = this->find(SETTINGNAME(key));
-        if (!items.empty()) return items[0].SETTINGVALUE;
-    }
-    else
-    {
-        return setting->SETTINGVALUE;
-    }
-    return default_value;
+    setString("THEME", newValue);
 }
-
-const wxArrayString Model_Setting::GetArrayStringSetting(const wxString& key)
+wxString Model_Setting::getTheme()
 {
-    wxString data;
-    Data* setting = this->get_one(SETTINGNAME(key));
-    if (!setting) // not cached
-    {
-        Data_Set items = this->find(SETTINGNAME(key));
-        if (items.empty()) {
-            return wxArrayString();
-        }
-        else {
-            data = items[0].SETTINGVALUE;
-        }
-    }
-    else
-    {
-        data = setting->SETTINGVALUE;
-    }
-
-    wxArrayString a;
-    Document j_doc;
-    if (j_doc.Parse(data.utf8_str()).HasParseError()) {
-        j_doc.Parse("[]");
-    }
-
-    if (j_doc.IsArray())
-    {
-        for (rapidjson::SizeType i = 0; i < j_doc.Size(); i++)
-        {
-            wxASSERT(j_doc[i].IsString());
-            const auto item = wxString::FromUTF8(j_doc[i].GetString());
-            wxLogDebug("%s", item);
-            a.Add(item);
-        }
-    }
-
-    return a;
+    return getString("THEME", "default");
 }
 
+// LASTFILENAME
 wxString Model_Setting::getLastDbPath()
 {
-    wxString path = this->GetStringSetting("LASTFILENAME", "");
-
-    if (!mmex::isPortableMode()) return path;
-
+    wxString path = getString("LASTFILENAME", "");
+    if (!mmex::isPortableMode())
+        return path;
     wxString vol = wxFileName(wxStandardPaths::Get().GetExecutablePath()).GetVolume();
-
-    if (!vol.IsEmpty())
-    {
-
+    if (!vol.IsEmpty()) {
         wxFileName fname(path);
         fname.SetVolume(vol); // database should be on portable device
-
         if (fname.FileExists()) {
             path = fname.GetFullPath();
         }
     }
-
     return path;
 }
 
-/* Returns true if key setting found */
-bool Model_Setting::ContainsSetting(const wxString& key)
-{
-    return !this->find(SETTINGNAME(key)).empty();
-}
-
-row_t Model_Setting::to_row_t()
-{
-    row_t row;
-    for (const auto &r: instance().all())
-        row(r.SETTINGNAME.ToStdWstring()) = r.SETTINGVALUE;
-    return row;
-}
-
-//-------------------------------------------------------------------
-wxString Model_Setting::GetViewAccounts()
-{
-    return GetStringSetting("VIEWACCOUNTS", VIEW_ACCOUNTS_ALL_STR);
-}
-
-void Model_Setting::SetViewAccounts(const wxString& value)
-{
-    Set("VIEWACCOUNTS", value);
-}
-
-//-------------------------------------------------------------------
-wxString Model_Setting::Theme()
-{
-    return GetStringSetting("THEME", "default");
-}
-
-void Model_Setting::SetTheme(const wxString& value)
-{
-    Set("THEME", value);
-}
-
 //-------------------------------------------------------------------
-wxString Model_Setting::ViewTransactions()
-{
-    return GetStringSetting("VIEWTRANSACTIONS", mmCheckingPanel::FILTER_STR_ALL);
-}
-
-void Model_Setting::SetViewTransactions(const wxString& value)
-{
-    Set("VIEWTRANSACTIONS", value);
-}
-
 // Trim usage settings in case if values greater than 500k
-void Model_Setting::ShrinkUsageTable()
+void Model_Setting::shrinkUsageTable()
 {
     const wxULongLong max_size = 524287;
     const wxULongLong file_size = wxFileName(mmex::getPathUser(mmex::SETTINGS)).GetSize();
     if (file_size < max_size)
-    {
         return;
-    }
 
     const wxString save_point = "SETTINGS_TRIM_USAGE";
     wxDate date(wxDate::Now());
     date.Subtract(wxDateSpan::Months(2));
     db_->Savepoint(save_point);
-    try
-    {
+    try {
         wxString sql = wxString::Format("delete from USAGE_V1 where USAGEDATE < \"%s\";", date.FormatISODate());
         db_->ExecuteUpdate(sql);
     }
-    catch (const wxSQLite3Exception& /*e*/)
-    {
+    catch (const wxSQLite3Exception& /*e*/) {
         db_->Rollback(save_point);
     }
     db_->ReleaseSavepoint(save_point);
     db_->Vacuum();
 }
+
+row_t Model_Setting::to_row_t()
+{
+    row_t row;
+    for (const auto &r: instance().all())
+        row(r.SETTINGNAME.ToStdWstring()) = r.SETTINGVALUE;
+    return row;
+}
diff -Naur a/src/model/Model_Setting.h b/src/model/Model_Setting.h
--- a/src/model/Model_Setting.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Setting.h	2025-07-09 01:46:59.660940578 +0200
@@ -32,18 +32,14 @@
     ~Model_Setting();
 
 public:
-    /**
-    Initialize the global Model_Setting table on initial call.
-    Resets the global table on subsequent calls.
-    * Return the static instance address for Model_Setting table
-    * Note: Assigning the address to a local variable can destroy the instance.
-    */
+    // Initialize the global Model_Setting table on initial call.
+    // Resets the global table on subsequent calls.
+    // Return the static instance address for Model_Setting table.
+    // Note: Assigning the address to a local variable can destroy the instance.
     static Model_Setting& instance(wxSQLite3Database* db);
 
-    /**
-    * Return the static instance address for Model_Setting table
-    * Note: Assigning the address to a local variable can destroy the instance.
-    */
+    // Return the static instance address for Model_Setting table.
+    // Note: Assigning the address to a local variable can destroy the instance.
     static Model_Setting& instance();
     void Savepoint()
     {
@@ -59,39 +55,44 @@
     }
 
 public:
-    // Setter
-    void Set(const wxString& key, int value);
-    void Set(const wxString& key, bool value);
-    void Set(const wxString& key, const wxColour& value);
-    void Set(const wxString& key, const wxString& value);
-    void Prepend(const wxString& key, const wxString& value, int limit);
+    bool contains(const wxString& key);
 
-public:
-    // Getter
-    bool GetBoolSetting(const wxString& key, bool default_value);
-    int GetIntSetting(const wxString& key, int default_value);
-    const wxString GetStringSetting(const wxString& key, const wxString& default_value);
-    const wxArrayString GetArrayStringSetting(const wxString& key);
+    void setRaw(const wxString& key, const wxString& newValue);
+    const wxString getRaw(const wxString& key, const wxString& defaultValue);
 
-    wxString getLastDbPath();
+    void setString(const wxString& key, const wxString& newValue);
+    const wxString getString(const wxString& key, const wxString& defaultValue);
 
-    /* Returns true if key setting found */
-    bool ContainsSetting(const wxString& key);
+    void setBool(const wxString& key, bool newValue);
+    bool getBool(const wxString& key, bool defaultValue);
 
-    static row_t to_row_t();
+    void setInt(const wxString& key, int newValue);
+    int getInt(const wxString& key, int defaultValue);
+
+    void setColour(const wxString& key, const wxColour& newValue);
+    const wxColour getColour(const wxString& key, const wxColour& defaultValue);
+
+    void setJdoc(const wxString& key, Document& newValue);
+    void setJdoc(const wxString& key, StringBuffer& newValue);
+    Document getJdoc(const wxString& key, const wxString& defaultValue);
+
+    void setArrayString(const wxString& key, const wxArrayString& a);
+    const wxArrayString getArrayString(const wxString& key);
+
+    void prependArrayItem(const wxString& key, const wxString& value, int limit);
 
 public:
-    wxString GetViewAccounts();
-    void SetViewAccounts(const wxString& value);
+    void setViewAccounts(const wxString& newValue);
+    wxString getViewAccounts();
     
-    wxString Theme();
-    void SetTheme(const wxString& value);
+    void setTheme(const wxString& newValue);
+    wxString getTheme();
 
+    wxString getLastDbPath();
 
-    wxString ViewTransactions();
-    void SetViewTransactions(const wxString& value);
-    
-    void ShrinkUsageTable();
+public:
+    void shrinkUsageTable();
+    static row_t to_row_t();
 };
 
 #endif 
diff -Naur a/src/model/Model_Shareinfo.cpp b/src/model/Model_Shareinfo.cpp
--- a/src/model/Model_Shareinfo.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Shareinfo.cpp	2025-07-09 01:46:59.664940602 +0200
@@ -73,6 +73,7 @@
     , double share_number
     , double share_price
     , double share_commission
+    , const std::vector<Split>& commission_splits
     , const wxString& share_lot)
 {
     bool updateTimestamp = false;
@@ -96,7 +97,9 @@
     share_entry->SHAREPRICE = share_price;
     share_entry->SHARECOMMISSION = share_commission;
     share_entry->SHARELOT = share_lot;
-    Model_Shareinfo::instance().save(share_entry);
+    auto id = Model_Shareinfo::instance().save(share_entry);
+
+    Model_Splittransaction::instance().update(commission_splits, id);
 
     if(updateTimestamp || !share_entry->equals(&old_entry))
         Model_Checking::instance().updateTimestamp(checking_id);
diff -Naur a/src/model/Model_Shareinfo.h b/src/model/Model_Shareinfo.h
--- a/src/model/Model_Shareinfo.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Shareinfo.h	2025-07-09 01:46:59.664940602 +0200
@@ -20,6 +20,7 @@
 #pragma once
 
 #include "Model.h"
+#include "Model_Splittransaction.h"
 #include "db/DB_Table_Shareinfo_V1.h"
 
 class Model_Shareinfo : public Model<DB_Table_SHAREINFO_V1>
@@ -59,6 +60,7 @@
         , double share_number
         , double share_price
         , double share_commission
+        , const std::vector<Split>& commission_splits
         , const wxString& share_lot);
 
     /* Remove the share entry if it exists */
diff -Naur a/src/model/Model_Splittransaction.cpp b/src/model/Model_Splittransaction.cpp
--- a/src/model/Model_Splittransaction.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Splittransaction.cpp	2025-07-09 01:46:59.664940602 +0200
@@ -53,7 +53,7 @@
 bool Model_Splittransaction::remove(int64 id)
 {
     // Delete all tags for the split before removing it
-    Model_Taglink::instance().DeleteAllTags(Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT, id);
+    Model_Taglink::instance().DeleteAllTags(Model_Splittransaction::refTypeName, id);
     return this->remove(id, db_);
 }
 
@@ -131,6 +131,22 @@
     return rows.size();
 }
 
+int Model_Splittransaction::update(const std::vector<Split>& rows, int64 transactionID)
+{
+
+    Data_Set splits;
+    for (const auto& entry : rows)
+    {
+        Model_Splittransaction::Data *s = instance().create();
+        s->CATEGID = entry.CATEGID;
+        s->SPLITTRANSAMOUNT = entry.SPLITTRANSAMOUNT;
+        s->NOTES = entry.NOTES;
+        splits.push_back(*s);
+    }
+
+    return this->update(splits, transactionID);
+}
+
 const wxString Model_Splittransaction::get_tooltip(const std::vector<Split>& rows, const Model_Currency::Data* currency)
 {
     wxString split_tooltip = "";
diff -Naur a/src/model/Model_Splittransaction.h b/src/model/Model_Splittransaction.h
--- a/src/model/Model_Splittransaction.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Splittransaction.h	2025-07-09 01:46:59.664940602 +0200
@@ -61,7 +61,11 @@
     static const wxString get_tooltip(const std::vector<Split>& local_splits, const Model_Currency::Data* currency);
     std::map<int64, Model_Splittransaction::Data_Set> get_all();
     int update(Data_Set& rows, int64 transactionID);
+    int update(const std::vector<Split>& rows, int64 transactionID);
     bool remove(int64 id);
+
+public:
+    static const wxString refTypeName;
 };
 
 #endif // 
diff -Naur a/src/model/Model_Stock.cpp b/src/model/Model_Stock.cpp
--- a/src/model/Model_Stock.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Stock.cpp	2025-07-09 01:46:59.664940602 +0200
@@ -52,7 +52,7 @@
     if (stock)
         return stock->STOCKNAME;
     else
-        return _("Stock Error");
+        return _t("Stock Error");
 }
 
 /** Return the static instance of Model_Stock table */
@@ -188,7 +188,7 @@
 
         double numShares = 0.0;
 
-        Model_Translink::Data_Set linkrecords = Model_Translink::TranslinkList(Model_Attachment::REFTYPE_ID_STOCK, stock.STOCKID);
+        Model_Translink::Data_Set linkrecords = Model_Translink::TranslinkList<Model_Stock>(stock.STOCKID);
         for (const auto& linkrecord : linkrecords)
         {
             Model_Checking::Data* txn = Model_Checking::instance().get(linkrecord.CHECKINGACCOUNTID);
@@ -218,7 +218,7 @@
 double Model_Stock::RealGainLoss(const Data* r, bool to_base_curr)
 {
     Model_Currency::Data* currency = Model_Account::currency(Model_Account::instance().get(r->HELDAT));
-    Model_Translink::Data_Set trans_list = Model_Translink::TranslinkList(Model_Attachment::REFTYPE_ID_STOCK, r->STOCKID);
+    Model_Translink::Data_Set trans_list = Model_Translink::TranslinkList<Model_Stock>(r->STOCKID);
     double real_gain_loss = 0;
     double total_shares = 0;
     double total_initial_value = 0;
@@ -289,13 +289,12 @@
     {
         Model_Currency::Data* currency = Model_Account::currency(Model_Account::instance().get(r->HELDAT));
         double conv_rate = Model_CurrencyHistory::getDayRate(currency->CURRENCYID);
-        Model_Translink::Data_Set trans_list = Model_Translink::TranslinkList(Model_Attachment::REFTYPE_ID_STOCK, r->STOCKID);
+        Model_Translink::Data_Set trans_list = Model_Translink::TranslinkList<Model_Stock>(r->STOCKID);
         if (!trans_list.empty())
         {
             double total_shares = 0;
             double total_initial_value = 0;
             double avg_share_price = 0;
-            wxString earliest_date = wxDate::Today().FormatISODate();
 
             Model_Checking::Data_Set checking_list;
             for (const auto &trans : trans_list)
@@ -353,3 +352,63 @@
         }
     }
 }
+
+void Model_Stock::UpdatePosition(Model_Stock::Data* stock_entry)
+{
+    Model_Translink::Data_Set trans_list = Model_Translink::TranslinkList<Model_Stock>(stock_entry->STOCKID);
+    double total_shares = 0;
+    double total_initial_value = 0;
+    double total_commission = 0;
+    double avg_share_price = 0;
+    wxString earliest_date = wxDate::Today().FormatISODate();
+    Model_Checking::Data_Set checking_list;
+    for (const auto &trans : trans_list)
+    {
+        Model_Checking::Data* checking_entry = Model_Checking::instance().get(trans.CHECKINGACCOUNTID);
+        if (checking_entry && checking_entry->DELETEDTIME.IsEmpty() && Model_Checking::status_id(checking_entry->STATUS) != Model_Checking::STATUS_ID_VOID)
+            checking_list.push_back(*checking_entry);
+    }
+    std::stable_sort(checking_list.begin(), checking_list.end(), SorterByTRANSDATE());
+    for (const auto &trans : checking_list)
+    {
+        Model_Shareinfo::Data* share_entry = Model_Shareinfo::ShareEntry(trans.TRANSID);
+
+        total_shares += share_entry->SHARENUMBER;
+        if (total_shares < 0)
+            total_shares = 0;
+
+        if (share_entry->SHARENUMBER > 0)
+            total_initial_value += share_entry->SHARENUMBER * share_entry->SHAREPRICE + share_entry->SHARECOMMISSION;
+        else
+            total_initial_value += share_entry->SHARENUMBER * avg_share_price;
+
+        if (total_initial_value < 0)
+            total_initial_value = 0;
+        if (total_shares > 0)
+            avg_share_price = total_initial_value / total_shares;
+
+        total_commission += share_entry->SHARECOMMISSION;
+
+        wxString transdate = trans.TRANSDATE;
+        if (transdate < earliest_date)
+            earliest_date = transdate;
+    }
+
+    // The stock record contains the total of share transactions.
+    if (trans_list.empty())
+    {
+        stock_entry->PURCHASEPRICE = stock_entry->CURRENTPRICE;
+    }
+    else
+    {
+        wxDateTime purchasedate;
+        purchasedate.ParseDateTime(earliest_date) || purchasedate.ParseDate(earliest_date);
+        stock_entry->PURCHASEDATE = purchasedate.FormatISODate();
+        stock_entry->PURCHASEPRICE = avg_share_price;
+        stock_entry->NUMSHARES = total_shares;
+        stock_entry->VALUE = total_initial_value;
+        stock_entry->COMMISSION = total_commission;
+    }
+    Model_Stock::instance().save(stock_entry);
+}
+
diff -Naur a/src/model/Model_Stock.h b/src/model/Model_Stock.h
--- a/src/model/Model_Stock.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Stock.h	2025-07-09 01:46:59.664940602 +0200
@@ -89,6 +89,17 @@
     Returns the total stock balance at a given date
     */
     double getDailyBalanceAt(const Model_Account::Data *account, const wxDate& date);
+
+    /*
+    stock_entry.PURCHASEPRICE = avg price of shares purchased.
+    stock_entry.NUMSHARES = total amount of shares purchased.
+    stock_entry.VALUE     = value of shares based on:
+    ... share_entry.SHARENUMBER * share_entry.SHAREPRICE
+    */
+    static void UpdatePosition(Model_Stock::Data* stock_entry);
+
+public:
+    static const wxString refTypeName;
 };
 
 #endif // 
diff -Naur a/src/model/Model_Tag.cpp b/src/model/Model_Tag.cpp
--- a/src/model/Model_Tag.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Tag.cpp	2025-07-09 01:46:59.664940602 +0200
@@ -69,13 +69,13 @@
 
     for (const auto& link : taglink)
     {
-        if (link.REFTYPE == Model_Attachment::REFTYPE_STR_TRANSACTION)
+        if (link.REFTYPE == Model_Checking::refTypeName)
         {
             Model_Checking::Data* t = Model_Checking::instance().get(link.REFID);
             if (t && t->DELETEDTIME.IsEmpty())
                 return 1;
         }
-        else if (link.REFTYPE == Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT)
+        else if (link.REFTYPE == Model_Splittransaction::refTypeName)
         {
             Model_Splittransaction::Data* s = Model_Splittransaction::instance().get(link.REFID);
             if (s)
diff -Naur a/src/model/Model_Taglink.cpp b/src/model/Model_Taglink.cpp
--- a/src/model/Model_Taglink.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Taglink.cpp	2025-07-09 01:46:59.664940602 +0200
@@ -123,9 +123,9 @@
 
     if (updateTimestamp)
     {
-        if (refType == Model_Attachment::REFTYPE_STR_TRANSACTION)
+        if (refType == Model_Checking::refTypeName)
             Model_Checking::instance().updateTimestamp(refId);
-        else if (refType == Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT)
+        else if (refType == Model_Splittransaction::refTypeName)
             Model_Checking::instance().updateTimestamp(Model_Splittransaction::instance().get(refId)->TRANSID);
     }
 
diff -Naur a/src/model/Model_Translink.cpp b/src/model/Model_Translink.cpp
--- a/src/model/Model_Translink.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Translink.cpp	2025-07-09 01:46:59.664940602 +0200
@@ -52,13 +52,13 @@
 
 Model_Translink::CHECKING_TYPE Model_Translink::type_checking(const int64 tt)
 {
-    if (tt == AS_TRANSFER)
+    if (tt == AS_INCOME_EXPENSE || tt == -1)
     {
-        return AS_TRANSFER;
+        return AS_INCOME_EXPENSE;
     }
     else
     {
-        return AS_INCOME_EXPENSE;
+        return AS_TRANSFER;
     }
 }
 
@@ -67,7 +67,7 @@
     , const CHECKING_TYPE checking_type)
 {
     return SetTranslink(checking_id, checking_type
-        , Model_Attachment::REFTYPE_STR_ASSET, asset_id);
+        , Model_Asset::refTypeName, asset_id);
 }
 
 Model_Translink::Data* Model_Translink::SetStockTranslink(const int64 stock_id
@@ -75,7 +75,7 @@
     , const CHECKING_TYPE checking_type)
 {
     return SetTranslink(checking_id, checking_type
-        , Model_Attachment::REFTYPE_STR_STOCK, stock_id);
+        , Model_Stock::refTypeName, stock_id);
 }
 
 Model_Translink::Data* Model_Translink::SetTranslink(const int64 checking_id
@@ -93,17 +93,17 @@
     set the checking type as AS_INCOME_EXPENSE = 32701 or AS_TRANSFER
     */
     Model_Checking::Data* checking_entry = Model_Checking::instance().get(checking_id);
-    checking_entry->TOACCOUNTID = checking_type;
+    // checking_entry->TOACCOUNTID = checking_type;
     Model_Checking::instance().save(checking_entry);
 
     return translink;
 }
 
-Model_Translink::Data_Set Model_Translink::TranslinkList(Model_Attachment::REFTYPE_ID link_table
-    , const int64 link_entry_id)
+template <typename T>
+Model_Translink::Data_Set Model_Translink::TranslinkList(const int64 link_entry_id)
 {
     Model_Translink::Data_Set translink_list = Model_Translink::instance().find(
-        Model_Translink::LINKTYPE(Model_Attachment::REFTYPE_STR[link_table])
+        Model_Translink::LINKTYPE(T::refTypeName)
         , Model_Translink::LINKRECORDID(link_entry_id));
 
     return translink_list;
@@ -111,7 +111,7 @@
 
 bool Model_Translink::HasShares(const int64 stock_id)
 {
-    if (TranslinkList(Model_Attachment::REFTYPE_ID_STOCK, stock_id).empty())
+    if (TranslinkList<Model_Stock>(stock_id).empty())
     {
         return false;
     }
@@ -132,92 +132,41 @@
     }
 }
 
-void Model_Translink::RemoveTransLinkRecords(Model_Attachment::REFTYPE_ID table_type, const int64 entry_id)
+template <typename T>
+void Model_Translink::RemoveTransLinkRecords(const int64 entry_id)
 {
-    for (const auto& translink : TranslinkList(table_type, entry_id))
+    for (const auto& translink : TranslinkList<T>(entry_id))
     {
         Model_Checking::instance().remove(translink.CHECKINGACCOUNTID);
     }
 }
 
+// Explicit Instantiation
+template void Model_Translink::RemoveTransLinkRecords<Model_Asset>(const int64);
+template void Model_Translink::RemoveTransLinkRecords<Model_Stock>(const int64);
+
 void Model_Translink::RemoveTranslinkEntry(const int64 checking_account_id)
 {
     Data translink = TranslinkRecord(checking_account_id);
     Model_Shareinfo::RemoveShareEntry(translink.CHECKINGACCOUNTID);
     Model_Translink::instance().remove(translink.TRANSLINKID);
 
-    if (translink.LINKTYPE == Model_Attachment::REFTYPE_STR_ASSET)
+    if (translink.LINKTYPE == Model_Asset::refTypeName)
     {
         Model_Asset::Data* asset_entry = Model_Asset::instance().get(translink.LINKRECORDID);
         UpdateAssetValue(asset_entry);
     }
 
-    if (translink.LINKTYPE == Model_Attachment::REFTYPE_STR_STOCK)
+    if (translink.LINKTYPE == Model_Stock::refTypeName)
     {
         Model_Stock::Data* stock_entry = Model_Stock::instance().get(translink.LINKRECORDID);
-        UpdateStockValue(stock_entry);
-    }
-}
-
-void Model_Translink::UpdateStockValue(Model_Stock::Data* stock_entry)
-{
-    Data_Set trans_list = TranslinkList(Model_Attachment::REFTYPE_ID_STOCK, stock_entry->STOCKID);
-    double total_shares = 0;
-    double total_initial_value = 0;
-    double total_commission = 0;
-    double avg_share_price = 0;
-    wxString earliest_date = wxDate::Today().FormatISODate();
-    Model_Checking::Data_Set checking_list;
-    for (const auto &trans : trans_list)
-    {
-        Model_Checking::Data* checking_entry = Model_Checking::instance().get(trans.CHECKINGACCOUNTID);
-        if (checking_entry && checking_entry->DELETEDTIME.IsEmpty() && Model_Checking::status_id(checking_entry->STATUS) != Model_Checking::STATUS_ID_VOID) checking_list.push_back(*checking_entry);
-    }
-    std::stable_sort(checking_list.begin(), checking_list.end(), SorterByTRANSDATE());
-    for (const auto &trans : checking_list)
-    {
-        Model_Shareinfo::Data* share_entry = Model_Shareinfo::ShareEntry(trans.TRANSID);
-
-        total_shares += share_entry->SHARENUMBER;
-        if (total_shares < 0) total_shares = 0;
-
-        if (share_entry->SHARENUMBER > 0) {
-            total_initial_value += share_entry->SHARENUMBER * share_entry->SHAREPRICE + share_entry->SHARECOMMISSION;
-        }
-        else {
-            total_initial_value += share_entry->SHARENUMBER * avg_share_price;
-        }
-
-        if (total_initial_value < 0) total_initial_value = 0;
-        if (total_shares > 0) avg_share_price = total_initial_value / total_shares;
-
-        total_commission += share_entry->SHARECOMMISSION;
-
-        wxString transdate = trans.TRANSDATE;
-        if (transdate < earliest_date) earliest_date = transdate;
-    }
-
-    // The stock record contains the total of share transactions.
-    if (trans_list.empty())
-    {
-        stock_entry->PURCHASEPRICE = stock_entry->CURRENTPRICE;
-    }
-    else
-    {
-        wxDateTime purchasedate;
-        purchasedate.ParseDateTime(earliest_date) || purchasedate.ParseDate(earliest_date);
-        stock_entry->PURCHASEDATE = purchasedate.FormatISODate();
-        stock_entry->PURCHASEPRICE = avg_share_price;
-        stock_entry->NUMSHARES = total_shares;
-        stock_entry->VALUE = total_initial_value;
-        stock_entry->COMMISSION = total_commission;
+        Model_Stock::UpdatePosition(stock_entry);
     }
-    Model_Stock::instance().save(stock_entry);
 }
 
 void Model_Translink::UpdateAssetValue(Model_Asset::Data* asset_entry)
 {
-    Data_Set trans_list = TranslinkList(Model_Attachment::REFTYPE_ID_ASSET, asset_entry->ASSETID);
+    Data_Set trans_list = TranslinkList<Model_Asset>(asset_entry->ASSETID);
     double new_value = 0;
     for (const auto &trans : trans_list)
     {
@@ -227,7 +176,7 @@
             Model_Currency::Data* asset_currency = Model_Account::currency(Model_Account::instance().get(asset_trans->ACCOUNTID));
             const double conv_rate = Model_CurrencyHistory::getDayRate(asset_currency->CURRENCYID, asset_trans->TRANSDATE);
 
-            if (asset_trans->TRANSCODE == Model_Checking::TYPE_STR_DEPOSIT)
+            if (asset_trans->TRANSCODE == Model_Checking::TYPE_NAME_DEPOSIT)
             {
                 new_value -= asset_trans->TRANSAMOUNT * conv_rate; // Withdrawal from asset value
             }
@@ -247,7 +196,7 @@
 
 bool Model_Translink::ShareAccountId(int64& stock_entry_id)
 {
-    Model_Translink::Data_Set stock_translink_list = TranslinkList(Model_Attachment::REFTYPE_ID_STOCK, stock_entry_id);
+    Model_Translink::Data_Set stock_translink_list = TranslinkList<Model_Stock>(stock_entry_id);
 
     if (!stock_translink_list.empty())
     {
diff -Naur a/src/model/Model_Translink.h b/src/model/Model_Translink.h
--- a/src/model/Model_Translink.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Translink.h	2025-07-09 01:46:59.664940602 +0200
@@ -69,8 +69,8 @@
     select * from TRANSLINK_V1 where LINKTYPE = "Asset" AND LINKRECORDID = link_id;
     select * from TRANSLINK_V1 where LINKTYPE = "Stock" AND LINKRECORDID = link_id;
     */
-    static Model_Translink::Data_Set TranslinkList(Model_Attachment::REFTYPE_ID link_table
-        , const int64 link_id);
+    template <typename T>
+    static Model_Translink::Data_Set TranslinkList(const int64 link_id);
 
     static bool HasShares(const int64 stock_id);
 
@@ -82,18 +82,12 @@
     static Model_Translink::Data TranslinkRecord(const int64 checking_id);
 
     /* Remove all records associated with the Translink list */
-    static void RemoveTransLinkRecords(Model_Attachment::REFTYPE_ID table_type, const int64 entry_id);
+    template <typename T>
+    static void RemoveTransLinkRecords(const int64 entry_id);
  
     /* Remove the checking account entry and its associated transfer transaction. */
     static void RemoveTranslinkEntry(const int64 checking_account_id);
 
-    /*
-    stock_entry.PURCHASEPRICE = avg price of shares purchased.
-    stock_entry.NUMSHARES = total amount of shares purchased.
-    stock_entry.VALUE     = value of shares based on:
-    ... share_entry.SHARENUMBER * share_entry.SHAREPRICE
-    */
-    static void UpdateStockValue(Model_Stock::Data* stock_entry);
     static void UpdateAssetValue(Model_Asset::Data* asset_entry);
 
     /* Return true with the account id of the first share entry in the stock translink list */
diff -Naur a/src/model/Model_Usage.cpp b/src/model/Model_Usage.cpp
--- a/src/model/Model_Usage.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/model/Model_Usage.cpp	2025-07-09 01:46:59.664940602 +0200
@@ -17,14 +17,16 @@
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  ********************************************************/
 
+#include <wx/platinfo.h>
+#include <wx/thread.h>
+#include <wx/intl.h>
+
 #include "Model_Usage.h"
 #include "Model_Setting.h"
 #include "util.h"
+#include "reports/reportbase.h"
 #include "constants.h"
 #include "paths.h"
-#include <wx/platinfo.h>
-#include <wx/thread.h>
-#include <wx/intl.h>
 #include "option.h"
 
 Model_Usage::Model_Usage()
@@ -111,8 +113,8 @@
 
 std::pair<wxString /*UUID*/, wxString /*UID*/> uuid()
 {
-    wxString UUID = Model_Setting::instance().GetStringSetting("UUID", wxEmptyString);
-    wxString UID = Model_Setting::instance().GetStringSetting("UID", wxEmptyString);
+    wxString UUID = Model_Setting::instance().getString("UUID", wxEmptyString);
+    wxString UID = Model_Setting::instance().getString("UID", wxEmptyString);
 
     if (!UUID.IsEmpty() && !UID.IsEmpty())
         return std::make_pair(UUID, UID);
@@ -121,18 +123,18 @@
     {
         wxDateTime now = wxDateTime::UNow();
         UUID = UID = wxString::Format("%s_%s", wxPlatformInfo::Get().GetPortIdShortName(), now.Format("%Y%m%d%H%M%S%l"));
-        Model_Setting::instance().Set("UUID", UUID);
-        Model_Setting::instance().Set("UID", UID);
+        Model_Setting::instance().setString("UUID", UUID);
+        Model_Setting::instance().setString("UID", UID);
     }
     else if (UUID.IsEmpty())
     {
         UUID = UID;
-        Model_Setting::instance().Set("UUID", UUID);
+        Model_Setting::instance().setString("UUID", UUID);
     }
     else if (UID.IsEmpty())
     {
         UID = UUID;
-        Model_Setting::instance().Set("UID", UID);
+        Model_Setting::instance().setString("UID", UID);
     }
 
     return std::make_pair(UUID, UID);
@@ -208,7 +210,7 @@
 
 void Model_Usage::pageview(const wxString& documentPath, const wxString& documentTitle, long plt /* = 0 msec*/)
 {
-    if (!Option::instance().getSendUsageStatistics())
+    if (!Option::instance().doSendUsageStats())
     {
         return;
     }
diff -Naur a/src/option.cpp b/src/option.cpp
--- a/src/option.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/option.cpp	2025-07-09 01:46:59.664940602 +0200
@@ -18,9 +18,9 @@
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  ********************************************************/
 
-
 #include "option.h"
 #include "constants.h"
+#include "util.h"
 #include "images_list.h"
 #include "singleton.h"
 #include "model/Model_Infotable.h"
@@ -32,10 +32,10 @@
 
 const std::vector<std::pair<Option::COMPOUNDING_ID, wxString> > Option::COMPOUNDING_NAME =
 {
-    { Option::COMPOUNDING_ID_DAY,   wxString(wxTRANSLATE("Day")) },
-    { Option::COMPOUNDING_ID_WEEK,  wxString(wxTRANSLATE("Week")) },
-    { Option::COMPOUNDING_ID_MONTH, wxString(wxTRANSLATE("Month")) },
-    { Option::COMPOUNDING_ID_YEAR,  wxString(wxTRANSLATE("Year")) },
+    { Option::COMPOUNDING_ID_DAY,   _n("Day") },
+    { Option::COMPOUNDING_ID_WEEK,  _n("Week") },
+    { Option::COMPOUNDING_ID_MONTH, _n("Month") },
+    { Option::COMPOUNDING_ID_YEAR,  _n("Year") },
 };
 const std::vector<std::pair<Option::COMPOUNDING_ID, int> > Option::COMPOUNDING_N =
 {
@@ -45,9 +45,43 @@
     { Option::COMPOUNDING_ID_YEAR,  1 },
 };
 
+const std::vector<std::pair<wxString, wxString> > Option::CHECKING_RANGE_DEFAULT =
+{
+    { "A",            _n("All") },
+    { "A .. W",       _n("All to week") },
+    { "A .. M",       _n("All to month") },
+    { "A .. Y",       _n("All to year") },
+    { "Y",            _n("Current year") },
+    { "Y F",          _n("Current financial year") },
+    { "Q",            _n("Current quarter") },
+    { "M",            _n("Current month") },
+    { "W",            _n("Current week") },
+    { "T",            _n("Today") },
+    { "S .. A",       _n("From statement") },
+    { "1 S .. A",     _n("From 1 day after statement") },
+    { "",             "" },
+    { "Y .. W",       _n("From current year to week") },
+    { "Y .. M",       _n("From current year to month") },
+    { "M .. W",       _n("From current month to week") },
+    { "-1 Y",         _n("Previous year") },
+    { "-1 M",         _n("Previous month") },
+    { "-1 W",         _n("Previous week") },
+    { "-1 Y .. A",    _n("From previous year") },
+    { "-1 Y .. M",    _n("From previous year to month") },
+    { "-1 M .. A",    _n("From previous month") },
+    { "-1 M .. W",    _n("From previous month to week") },
+    { "-1 W .. A",    _n("From previous week") },
+    { "-1 W .. W",    _n("From previous to current week") },
+    { "T .. A, -1 Y", _n("From 1 year ago") },
+    { "T .. A, -1 Q", _n("From 1 quarter ago") },
+    { "T .. A, -1 M", _n("From 1 month ago") },
+    { "T .. A, -1 W", _n("From 1 week ago") },
+    { "-2 Y",         _n("Year before last") },
+};
+
 //----------------------------------------------------------------------------
 Option::Option()
-:   m_dateFormat(mmex::DEFDATEFORMAT)
+:   m_date_format(mmex::DEFDATEFORMAT)
 {}
 
 //----------------------------------------------------------------------------
@@ -57,33 +91,26 @@
 }
 
 //----------------------------------------------------------------------------
-void Option::LoadOptions(bool include_infotable)
+void Option::load(bool include_infotable)
 {
-    if (include_infotable)
-    {
-        m_dateFormat = Model_Infotable::instance().GetStringInfo("DATEFORMAT", mmex::DEFDATEFORMAT);
-        m_userNameString = Model_Infotable::instance().GetStringInfo("USERNAME", "");
-        m_financialYearStartDayString = Model_Infotable::instance().GetStringInfo("FINANCIAL_YEAR_START_DAY", "1");
-        m_financialYearStartMonthString = Model_Infotable::instance().GetStringInfo("FINANCIAL_YEAR_START_MONTH", "7");
-        m_sharePrecision = Model_Infotable::instance().GetIntInfo("SHARE_PRECISION", 4);
-        wxString assetCompounding = Model_Infotable::instance().GetStringInfo("ASSET_COMPOUNDING", "Day");
-        m_assetCompounding = Option::COMPOUNDING_ID_DAY;
-        for (const auto& a : Option::COMPOUNDING_NAME) if (assetCompounding == a.second) {
-            m_assetCompounding = a.first;
-            break;
-        }
-        m_baseCurrency = Model_Infotable::instance().GetInt64Info("BASECURRENCYID", -1);
-        m_currencyHistoryEnabled = Model_Infotable::instance().GetBoolInfo(INIDB_USE_CURRENCY_HISTORY, true);
-        m_budget_days_offset = Model_Infotable::instance().GetIntInfo("BUDGET_DAYS_OFFSET", 0);
-        m_reporting_firstday = Model_Infotable::instance().GetIntInfo("REPORTING_FIRSTDAY", 1);
-        if (m_reporting_firstday > 28) m_reporting_firstday = 28;
-        m_homepage_incexp_range = Model_Infotable::instance().GetIntInfo("HOMEPAGE_INCEXP_RANGE", 0);
+    if (include_infotable) {
+        loadDateFormat();
+        loadUserName();
+        loadBaseCurrencyID();
+        loadUseCurrencyHistory();
+        loadSharePrecision();
+        loadAssetCompounding();
+        loadReportingFirstDay();
+        loadReportingFirstWeekday();
+        loadFinancialFirstDay();
+        loadFinancialFirstMonth();
+        loadBudgetDaysOffset();
+        loadHomePageIncExpRange();
+
         // Ensure that base currency is set for the database.
-        while (m_baseCurrency < 1)
-        {
-            if (mmMainCurrencyDialog::Execute(m_baseCurrency))
-            {
-                setBaseCurrency(m_baseCurrency);
+        while (m_base_currency_id < 1) {
+            if (mmMainCurrencyDialog::Execute(m_base_currency_id)) {
+                setBaseCurrencyID(m_base_currency_id);
                 Model_CurrencyHistory::ResetCurrencyHistory();
                 Model_Currency::ResetBaseConversionRates();
             }
@@ -92,59 +119,48 @@
 
     m_language = Option::instance().getLanguageID(true);
 
-    m_hideShareAccounts = Model_Setting::instance().GetBoolSetting(INIDB_HIDE_SHARE_ACCOUNTS, true);
-    m_hideDeletedTransactions = Model_Setting::instance().GetBoolSetting(INIDB_HIDE_DELETED_TRANSACTIONS, false);
-    m_budgetFinancialYears = Model_Setting::instance().GetBoolSetting(INIDB_BUDGET_FINANCIAL_YEARS, false);
-    m_budgetIncludeTransfers = Model_Setting::instance().GetBoolSetting(INIDB_BUDGET_INCLUDE_TRANSFERS, false);
-    m_budgetReportWithSummaries = Model_Setting::instance().GetBoolSetting(INIDB_BUDGET_SUMMARY_WITHOUT_CATEG, true);
-    m_budgetOverride = Model_Setting::instance().GetBoolSetting(INIDB_BUDGET_OVERRIDE, false);
-    m_budgetDeductMonthly = Model_Setting::instance().GetBoolSetting(INIDB_BUDGET_DEDUCT_MONTH_FROM_YEAR, false);
-    m_ignoreFutureTransactions = Model_Setting::instance().GetBoolSetting(INIDB_IGNORE_FUTURE_TRANSACTIONS, false);
-    m_useTransDateTime = Model_Setting::instance().GetBoolSetting("TRANSACTION_USE_DATE_TIME", false);
-    m_showToolTips = Model_Setting::instance().GetBoolSetting(INIDB_SHOW_TOOLTIPS, true);
-    m_showMoneyTips = Model_Setting::instance().GetBoolSetting(INIDB_SHOW_MONEYTIPS, true);
-
-    // Read the preference as a string and convert to int
-    m_transPayeeSelection = Model_Setting::instance().GetIntSetting("TRANSACTION_PAYEE_NONE", Option::NONE);
+    loadHideShareAccounts();
+    loadHideDeletedTransactions();
+    loadBudgetFinancialYears();
+    loadBudgetIncludeTransfers();
+    loadBudgetSummaryWithoutCategories();
+    loadBudgetOverride();
+    loadBudgetDeductMonthly();
+    loadIgnoreFutureTransactions();
+    loadUseTransDateTime();
+    loadShowToolTips();
+    loadShowMoneyTips();
+    loadTransPayeeNone();
 
     // For the category selection, default behavior should remain that the last category used for the payee is selected.
     //  This is item 1 (0-indexed) in the list.
-    m_transCategorySelectionNonTransfer = Model_Setting::instance().GetIntSetting("TRANSACTION_CATEGORY_NONE", Option::LASTUSED);
-    m_transCategorySelectionTransfer = Model_Setting::instance().GetIntSetting("TRANSACTION_CATEGORY_TRANSFER_NONE", Option::LASTUSED);
-    m_transStatusReconciled = Model_Setting::instance().GetIntSetting("TRANSACTION_STATUS_RECONCILED", Option::NONE);
-    m_transDateDefault = Model_Setting::instance().GetIntSetting("TRANSACTION_DATE_DEFAULT", Option::NONE);
-    m_usageStatistics = Model_Setting::instance().GetBoolSetting(INIDB_SEND_USAGE_STATS, true);
-    m_newsChecking = Model_Setting::instance().GetBoolSetting(INIDB_CHECK_NEWS, true);
+    loadTransCategoryNone();
+    loadTransCategoryTransferNone();
+    loadTransStatusReconciled();
+    loadTransDateDefault();
+    loadSendUsageStats();
+    loadCheckNews();
     
-    m_theme_mode = Model_Setting::instance().GetIntSetting("THEMEMODE", Option::THEME_MODE::AUTO);
-    m_html_font_size = Model_Setting::instance().GetIntSetting("HTMLSCALE", 100);
-    m_ico_size = Model_Setting::instance().GetIntSetting("ICONSIZE", 16);
-    m_toolbar_ico_size = Model_Setting::instance().GetIntSetting("TOOLBARICONSIZE", 32);
-    m_navigation_ico_size = Model_Setting::instance().GetIntSetting("NAVIGATIONICONSIZE", 24);
-    m_bulk_enter = Model_Setting::instance().GetBoolSetting("BULK_TRX", false);
-    m_font_size = Model_Setting::instance().GetIntSetting("UI_FONT_SIZE", 0);
-}
-
-void Option::setDateFormat(const wxString& date_format)
-{
-    m_dateFormat = date_format;
-    Model_Infotable::instance().Set("DATEFORMAT", date_format);
+    loadThemeMode();
+    loadHtmlScale();
+    loadIconSize();
+    loadToolbarIconSize();
+    loadNavigationIconSize();
+    loadBulkTransactions();
+    loadFontSize();
+    loadCheckingRange();
 }
 
 wxLanguage Option::getLanguageID(const bool get_db)
 {
-    if (get_db)
-    {
-        auto lang_id = Model_Setting::instance()
-            .GetIntSetting(LANGUAGE_PARAMETER, -1);
+    if (get_db) {
+        auto lang_id = Model_Setting::instance().getInt(LANGUAGE_PARAMETER, -1);
 
-        if (lang_id == -1)
-        {
+        if (lang_id == -1) {
             auto lang_canonical = Model_Setting::instance()
-                .GetStringSetting(LANGUAGE_PARAMETER, wxLocale::GetLanguageCanonicalName(wxLANGUAGE_UNKNOWN));
+                .getString(LANGUAGE_PARAMETER, wxLocale::GetLanguageCanonicalName(wxLANGUAGE_UNKNOWN));
 
-            for (int lang_code = wxLANGUAGE_DEFAULT; lang_code < wxLANGUAGE_USER_DEFINED; lang_code++)
-            {
+            for (int lang_code = wxLANGUAGE_DEFAULT; lang_code < wxLANGUAGE_USER_DEFINED; lang_code++) {
                 const auto l = wxLocale::GetLanguageCanonicalName(lang_code);
                 if (lang_canonical == l) {
                     m_language = static_cast<wxLanguage>(lang_code);
@@ -152,8 +168,7 @@
                 }
             }
         }
-        else
-        {
+        else {
             m_language = static_cast<wxLanguage>(lang_id);
         }
     }
@@ -161,336 +176,477 @@
     return m_language;
 }
 
-void Option::UserName(const wxString& username)
+void Option::setLocaleName(const wxString& locale)
 {
-    m_userNameString = username;
-    Model_Infotable::instance().Set("USERNAME", username);
+    Model_Infotable::instance().setString("LOCALE", locale);
+    m_locale_name = locale;
 }
 
-void Option::LocaleName(const wxString& locale)
+void Option::loadDateFormat()
 {
-    m_localeNameString = locale;
-    Model_Infotable::instance().Set("LOCALE", locale);
+    m_date_format = Model_Infotable::instance().getString("DATEFORMAT", mmex::DEFDATEFORMAT);
 }
-
-void Option::FinancialYearStartDay(const wxString& setting)
+void Option::setDateFormat(const wxString& date_format)
 {
-    m_financialYearStartDayString = setting;
-    Model_Infotable::instance().Set("FINANCIAL_YEAR_START_DAY", setting);
+    Model_Infotable::instance().setString("DATEFORMAT", date_format);
+    m_date_format = date_format;
 }
 
-const wxString& Option::FinancialYearStartMonth()const
+void Option::loadUserName()
 {
-    return m_financialYearStartMonthString;
+    m_user_name = Model_Infotable::instance().getString("USERNAME", "");
 }
-
-void Option::FinancialYearStartMonth(const wxString& setting)
+void Option::setUserName(const wxString& username)
 {
-    m_financialYearStartMonthString = setting;
-    Model_Infotable::instance().Set("FINANCIAL_YEAR_START_MONTH", setting);
+    m_user_name = username;
+    Model_Infotable::instance().setString("USERNAME", username);
 }
 
-void Option::setBaseCurrency(const int64 base_currency_id)
+void Option::loadBaseCurrencyID()
 {
-    m_baseCurrency = base_currency_id;
-    Model_Infotable::instance().Set("BASECURRENCYID", base_currency_id);
+    m_base_currency_id = Model_Infotable::instance().getInt64("BASECURRENCYID", -1);
 }
-
-int64 Option::getBaseCurrencyID() const noexcept
+void Option::setBaseCurrencyID(const int64 base_currency_id)
 {
-    return m_baseCurrency;
+    Model_Infotable::instance().setInt64("BASECURRENCYID", base_currency_id);
+    m_base_currency_id = base_currency_id;
 }
 
-void Option::CurrencyHistoryEnabled(const bool value)
+void Option::loadUseCurrencyHistory()
 {
-    Model_Infotable::instance().Set(INIDB_USE_CURRENCY_HISTORY, value);
-    m_currencyHistoryEnabled = value;
+    m_use_currency_history = Model_Infotable::instance().getBool("USECURRENCYHISTORY", true);
 }
-
-void Option::DatabaseUpdated(const bool value)
+void Option::setUseCurrencyHistory(const bool value)
 {
-    m_databaseUpdated = value;
+    Model_Infotable::instance().setBool("USECURRENCYHISTORY", value);
+    m_use_currency_history = value;
 }
 
-bool Option::DatabaseUpdated() const noexcept
+void Option::loadSharePrecision()
 {
-    return m_databaseUpdated;
+    m_share_precision = Model_Infotable::instance().getInt("SHARE_PRECISION", 4);
 }
-
-void Option::HideShareAccounts(const bool value)
+void Option::setSharePrecision(const int value)
 {
-    Model_Setting::instance().Set(INIDB_HIDE_SHARE_ACCOUNTS, value);
-    m_hideShareAccounts = value;
+    Model_Infotable::instance().setInt("SHARE_PRECISION", value);
+    m_share_precision = value;
 }
 
-bool Option::HideShareAccounts() const noexcept
+void Option::loadAssetCompounding()
+{
+    wxString assetCompounding = Model_Infotable::instance().getString("ASSET_COMPOUNDING", "Day");
+    m_asset_compounding = Option::COMPOUNDING_ID_DAY;
+    for (const auto& a : Option::COMPOUNDING_NAME) if (assetCompounding == a.second) {
+        m_asset_compounding = a.first;
+        break;
+    }
+}
+void Option::setAssetCompounding(const int value)
 {
-    return m_hideShareAccounts;
+    Model_Infotable::instance().setString("ASSET_COMPOUNDING", Option::COMPOUNDING_NAME[value].second);
+    m_asset_compounding = value;
 }
 
-void Option::HideDeletedTransactions(const bool value)
+void Option::loadReportingFirstDay()
 {
-    Model_Setting::instance().Set(INIDB_HIDE_DELETED_TRANSACTIONS, value);
-    m_hideDeletedTransactions = value;
+    int value = Model_Infotable::instance().getInt("REPORTING_FIRSTDAY", 1);
+    if (value < 1) value = 1;
+    if (value > 28) value = 28;
+    m_reporting_first_day = value;
 }
-
-bool Option::HideDeletedTransactions() const noexcept
+void Option::setReportingFirstDay(int value)
 {
-    return m_hideDeletedTransactions;
+    if (value < 1) value = 1;
+    if (value > 28) value = 28;
+    Model_Infotable::instance().setInt("REPORTING_FIRSTDAY", value);
+    m_reporting_first_day = value;
 }
 
-void Option::BudgetFinancialYears(const bool value)
+void Option::loadReportingFirstWeekday()
 {
-    Model_Setting::instance().Set(INIDB_BUDGET_FINANCIAL_YEARS, value);
-    m_budgetFinancialYears = value;
+    wxString valueStr = Model_Infotable::instance().getString("REPORTING_FIRST_WEEKDAY", "");
+    m_reporting_first_weekday =
+        (valueStr == "Mon") ? wxDateTime::WeekDay::Mon :
+        wxDateTime::WeekDay::Sun;
 }
-
-bool Option::BudgetFinancialYears() const noexcept
+void Option::setReportingFirstWeekday(wxDateTime::WeekDay value)
 {
-    return m_budgetFinancialYears;
+    if (value != wxDateTime::WeekDay::Mon)
+        value = wxDateTime::WeekDay::Sun;
+    Model_Infotable::instance().setString("REPORTING_FIRST_WEEKDAY", g_short_days_of_week[value]);
+    m_reporting_first_weekday = value;
 }
 
-void Option::BudgetIncludeTransfers(const bool value)
+void Option::loadFinancialFirstDay()
 {
-    Model_Setting::instance().Set(INIDB_BUDGET_INCLUDE_TRANSFERS, value);
-    m_budgetIncludeTransfers = value;
-
+    int value = Model_Infotable::instance().getInt("FINANCIAL_YEAR_START_DAY", 1);
+    if (value < 1) value = 1;
+    if (value > 28) value = 28;
+    m_financial_first_day = value;
+}
+void Option::setFinancialFirstDay(int value)
+{
+    if (value < 1) value = 1;
+    if (value > 28) value = 28;
+    Model_Infotable::instance().setInt("FINANCIAL_YEAR_START_DAY", value);
+    m_financial_first_day = value;
 }
 
-bool Option::BudgetIncludeTransfers() const noexcept
+void Option::loadFinancialFirstMonth()
+{
+    int value = Model_Infotable::instance().getInt("FINANCIAL_YEAR_START_MONTH", 7);
+    if (value < 1) value = 1;
+    if (value > 12) value = 12;
+    m_financial_first_month = wxDateTime::Month(value - 1);
+}
+void Option::setFinancialFirstMonth(const wxDateTime::Month value)
 {
-    return m_budgetIncludeTransfers;
+    wxString valueStr = wxString::Format("%d", value + 1);
+    Model_Infotable::instance().setString("FINANCIAL_YEAR_START_MONTH", valueStr);
+    m_financial_first_month = value;
 }
 
-void Option::BudgetReportWithSummaries(bool value)
+void Option::loadBudgetDaysOffset()
+{
+    m_budget_days_offset = Model_Infotable::instance().getInt("BUDGET_DAYS_OFFSET", 0);
+}
+void Option::setBudgetDaysOffset(const int value)
+{
+    Model_Infotable::instance().setInt("BUDGET_DAYS_OFFSET", value);
+    m_budget_days_offset = value;
+}
+void Option::addBudgetDateOffset(wxDateTime& date) const
 {
-    Model_Setting::instance().Set(INIDB_BUDGET_SUMMARY_WITHOUT_CATEG, value);
-    m_budgetReportWithSummaries = value;
+    if (m_budget_days_offset != 0)
+        date.Add(wxDateSpan::Days(m_budget_days_offset));
+}
 
+void Option::loadHomePageIncExpRange()
+{
+    m_homepage_incexp_range = Model_Infotable::instance().getInt("HOMEPAGE_INCEXP_RANGE", 0);
+}
+void Option::setHomePageIncExpRange(const int value)
+{
+    Model_Infotable::instance().setInt("HOMEPAGE_INCEXP_RANGE", value);
+    m_homepage_incexp_range = value;
 }
 
-bool Option::BudgetReportWithSummaries() const noexcept
+void Option::loadHideShareAccounts()
 {
-    return m_budgetReportWithSummaries;
+    m_hide_share_accounts = Model_Setting::instance().getBool("HIDE_SHARE_ACCOUNTS", true);
+}
+void Option::setHideShareAccounts(const bool value)
+{
+    Model_Setting::instance().setBool("HIDE_SHARE_ACCOUNTS", value);
+    m_hide_share_accounts = value;
 }
 
-void Option::BudgetOverride(const bool value)
+void Option::loadHideDeletedTransactions()
+{
+    m_hide_deleted_transactions = Model_Setting::instance().getBool("HIDE_DELETED_TRANSACTIONS", false);
+}
+void Option::setHideDeletedTransactions(const bool value)
 {
-    Model_Setting::instance().Set(INIDB_BUDGET_OVERRIDE, value);
-    m_budgetOverride = value;
+    Model_Setting::instance().setBool("HIDE_DELETED_TRANSACTIONS", value);
+    m_hide_deleted_transactions = value;
+}
 
+void Option::loadBudgetFinancialYears()
+{
+    m_budget_financial_years = Model_Setting::instance().getBool("BUDGET_FINANCIAL_YEARS", false);
+}
+void Option::setBudgetFinancialYears(const bool value)
+{
+    Model_Setting::instance().setBool("BUDGET_FINANCIAL_YEARS", value);
+    m_budget_financial_years = value;
 }
 
-bool Option::BudgetOverride() const noexcept
+void Option::loadBudgetIncludeTransfers()
 {
-    return m_budgetOverride;
+    m_budget_include_transfers = Model_Setting::instance().getBool("BUDGET_INCLUDE_TRANSFERS", false);
+}
+void Option::setBudgetIncludeTransfers(const bool value)
+{
+    Model_Setting::instance().setBool("BUDGET_INCLUDE_TRANSFERS", value);
+    m_budget_include_transfers = value;
 }
 
-void Option::BudgetDeductMonthly(bool value)
+void Option::loadBudgetSummaryWithoutCategories()
 {
-    Model_Setting::instance().Set(INIDB_BUDGET_DEDUCT_MONTH_FROM_YEAR, value);
-    m_budgetDeductMonthly = value;
+    m_budget_summary_without_categories = Model_Setting::instance().getBool("BUDGET_SUMMARY_WITHOUT_CATEGORIES", true);
+}
+void Option::setBudgetSummaryWithoutCategories(bool value)
+{
+    Model_Setting::instance().setBool("BUDGET_SUMMARY_WITHOUT_CATEGORIES", value);
+    m_budget_summary_without_categories = value;
+}
 
+void Option::loadBudgetOverride()
+{
+    m_budget_override = Model_Setting::instance().getBool("BUDGET_OVERRIDE", false);
+}
+void Option::setBudgetOverride(const bool value)
+{
+    Model_Setting::instance().setBool("BUDGET_OVERRIDE", value);
+    m_budget_override = value;
 }
 
-bool Option::BudgetDeductMonthly() const noexcept
+void Option::loadBudgetDeductMonthly()
+{
+    m_budget_deduct_monthly = Model_Setting::instance().getBool("BUDGET_DEDUCT_MONTH_FROM_YEAR", false);
+}
+void Option::setBudgetDeductMonthly(bool value)
 {
-    return m_budgetDeductMonthly;
+    Model_Setting::instance().setBool("BUDGET_DEDUCT_MONTH_FROM_YEAR", value);
+    m_budget_deduct_monthly = value;
 }
 
-void Option::IgnoreFutureTransactions(const bool value)
+void Option::loadIgnoreFutureTransactions()
 {
-    Model_Setting::instance().Set(INIDB_IGNORE_FUTURE_TRANSACTIONS, value);
-    m_ignoreFutureTransactions = value;
+    m_ignore_future_transactions = Model_Setting::instance().getBool("IGNORE_FUTURE_TRANSACTIONS", false);
+}
+void Option::setIgnoreFutureTransactions(const bool value)
+{
+    Model_Setting::instance().setBool("IGNORE_FUTURE_TRANSACTIONS", value);
+    m_ignore_future_transactions = value;
 }
 
+void Option::loadUseTransDateTime()
+{
+    m_use_trans_datetime = Model_Setting::instance().getBool("TRANSACTION_USE_DATE_TIME", false);
+}
 bool Option::UseTransDateTime(const bool value)
 {
-    if (value != m_useTransDateTime)
-    {
-        Model_Setting::instance().Set("TRANSACTION_USE_DATE_TIME", value);
-        m_useTransDateTime = value;
+    if (value != m_use_trans_datetime) {
+        Model_Setting::instance().setBool("TRANSACTION_USE_DATE_TIME", value);
+        m_use_trans_datetime = value;
         return true;
     }
     return false;
 }
 
-bool Option::UseTransDateTime() const noexcept
+void Option::loadShowToolTips()
 {
-    return m_useTransDateTime;
+    m_show_tooltips = Model_Setting::instance().getBool("IGNORE_SHOW_TOOLTIPS", true);
 }
-
-void Option::ShowToolTips(const bool value)
+void Option::setShowToolTips(const bool value)
 {
-    Model_Setting::instance().Set(INIDB_SHOW_TOOLTIPS, value);
-    m_showToolTips = value;
+    Model_Setting::instance().setBool("IGNORE_SHOW_TOOLTIPS", value);
+    m_show_tooltips = value;
 }
 
-void Option::ShowMoneyTips(const bool value)
+void Option::loadShowMoneyTips()
 {
-    Model_Setting::instance().Set(INIDB_SHOW_MONEYTIPS, value);
-    m_showMoneyTips = value;
+    m_show_moneytips = Model_Setting::instance().getBool("IGNORE_SHOW_MONEYTIPS", true);
 }
-
-void Option::TransPayeeSelection(const int value)
+void Option::setShowMoneyTips(const bool value)
 {
-    Model_Setting::instance().Set("TRANSACTION_PAYEE_NONE", value);
-    m_transPayeeSelection = value;
+    Model_Setting::instance().setBool("IGNORE_SHOW_MONEYTIPS", value);
+    m_show_moneytips = value;
 }
 
-int Option::TransPayeeSelection() const noexcept
+void Option::loadTransPayeeNone()
 {
-    return m_transPayeeSelection;
+    // Read the preference as a string and convert to int
+    m_trans_payee_none = Model_Setting::instance().getInt("TRANSACTION_PAYEE_NONE", Option::NONE);
 }
-
-void Option::TransCategorySelectionNonTransfer(const int value)
+void Option::setTransPayeeNone(const int value)
 {
-    Model_Setting::instance().Set("TRANSACTION_CATEGORY_NONE", value);
-    m_transCategorySelectionNonTransfer = value;
+    Model_Setting::instance().setInt("TRANSACTION_PAYEE_NONE", value);
+    m_trans_payee_none = value;
 }
 
-void Option::TransCategorySelectionTransfer(const int value)
+void Option::loadTransCategoryNone()
 {
-    Model_Setting::instance().Set("TRANSACTION_CATEGORY_TRANSFER_NONE", value);
-    m_transCategorySelectionTransfer = value;
+    m_trans_category_none = Model_Setting::instance().getInt("TRANSACTION_CATEGORY_NONE", Option::LASTUSED);
 }
-
-void Option::set_bulk_transactions(const bool value)
+void Option::setTransCategoryNone(const int value)
 {
-    Model_Setting::instance().Set("BULK_TRX", value);
-    m_bulk_enter = value;
+    Model_Setting::instance().setInt("TRANSACTION_CATEGORY_NONE", value);
+    m_trans_category_none = value;
 }
 
-void Option::TransStatusReconciled(const int value)
+void Option::loadTransCategoryTransferNone()
 {
-    Model_Setting::instance().Set("TRANSACTION_STATUS_RECONCILED", value);
-    m_transStatusReconciled = value;
+    m_trans_category_transfer_none = Model_Setting::instance().getInt("TRANSACTION_CATEGORY_TRANSFER_NONE", Option::LASTUSED);
 }
-
-int Option::TransStatusReconciled() const noexcept
+void Option::setTransCategoryTransferNone(const int value)
 {
-    return m_transStatusReconciled;
+    Model_Setting::instance().setInt("TRANSACTION_CATEGORY_TRANSFER_NONE", value);
+    m_trans_category_transfer_none = value;
 }
 
-void Option::TransDateDefault(const int value)
+void Option::loadBulkTransactions()
 {
-    Model_Setting::instance().Set("TRANSACTION_DATE_DEFAULT", value);
-    m_transDateDefault = value;
+    m_bulk_transactions = Model_Setting::instance().getBool("BULK_TRX", false);
 }
-
-int Option::TransDateDefault() const noexcept
+void Option::setBulkTransactions(const bool value)
 {
-    return m_transDateDefault;
+    Model_Setting::instance().setBool("BULK_TRX", value);
+    m_bulk_transactions = value;
 }
 
-void Option::SharePrecision(const int value)
+void Option::loadTransStatusReconciled()
 {
-    Model_Infotable::instance().Set("SHARE_PRECISION", value);
-    m_sharePrecision = value;
+    m_trans_status_reconciled = Model_Setting::instance().getInt("TRANSACTION_STATUS_RECONCILED", Option::NONE);
 }
-
-int Option::SharePrecision() const noexcept
+void Option::setTransStatusReconciled(const int value)
 {
-    return m_sharePrecision;
+    Model_Setting::instance().setInt("TRANSACTION_STATUS_RECONCILED", value);
+    m_trans_status_reconciled = value;
 }
 
-void Option::AssetCompounding(const int value)
+void Option::loadTransDateDefault()
 {
-    Model_Infotable::instance().Set("ASSET_COMPOUNDING", Option::COMPOUNDING_NAME[value].second);
-    m_assetCompounding = value;
+    m_trans_date_default = Model_Setting::instance().getInt("TRANSACTION_DATE_DEFAULT", Option::NONE);
 }
-
-int Option::AssetCompounding() const noexcept
+void Option::setTransDateDefault(const int value)
 {
-    return m_assetCompounding;
+    Model_Setting::instance().setInt("TRANSACTION_DATE_DEFAULT", value);
+    m_trans_date_default = value;
 }
 
-void Option::SendUsageStatistics(const bool value)
+void Option::loadSendUsageStats()
 {
-    m_usageStatistics = value;
-    Model_Setting::instance().Set(INIDB_SEND_USAGE_STATS, value);
+    m_send_usage_stats = Model_Setting::instance().getBool(INIDB_SEND_USAGE_STATS, true);
 }
-
-bool Option::SendUsageStatistics() const noexcept
+void Option::setSendUsageStats(const bool value)
 {
-    return m_usageStatistics;
+    Model_Setting::instance().setBool(INIDB_SEND_USAGE_STATS, value);
+    m_send_usage_stats = value;
 }
 
-void Option::CheckNewsOnStartup(const bool value)
+void Option::loadCheckNews()
 {
-    m_newsChecking = value;
-    Model_Setting::instance().Set(INIDB_CHECK_NEWS, value);
+    m_check_news = Model_Setting::instance().getBool("CHECKNEWS", true);
 }
-
-bool Option::CheckNewsOnStartup() const noexcept
+void Option::setCheckNews(const bool value)
 {
-    return m_newsChecking;
+    Model_Setting::instance().setBool("CHECKNEWS", value);
+    m_check_news = value;
 }
 
+void Option::loadThemeMode()
+{
+    m_theme_mode = Model_Setting::instance().getInt("THEMEMODE", Option::THEME_MODE::AUTO);
+}
 void Option::setThemeMode(const int value)
 {
-    Model_Setting::instance().Set("THEMEMODE", value);
+    Model_Setting::instance().setInt("THEMEMODE", value);
     m_theme_mode = value;
 }
 
-void Option::setHTMLFontSizes(const int value)
+void Option::loadHtmlScale()
 {
-    Model_Setting::instance().Set("HTMLSCALE", value);
-    m_html_font_size = value;
+    m_html_scale = Model_Setting::instance().getInt("HTMLSCALE", 100);
+}
+void Option::setHtmlScale(const int value)
+{
+    Model_Setting::instance().setInt("HTMLSCALE", value);
+    m_html_scale = value;
 }
 
+void Option::loadFontSize()
+{
+    m_font_size = Model_Setting::instance().getInt("UI_FONT_SIZE", 0);
+}
 void Option::setFontSize(const int value)
 {
-    Model_Setting::instance().Set("UI_FONT_SIZE", value);
+    Model_Setting::instance().setInt("UI_FONT_SIZE", value);
     m_font_size = value;
 }
 
+void Option::loadIconSize()
+{
+    m_icon_size = Model_Setting::instance().getInt("ICONSIZE", 16);
+}
 void Option::setIconSize(const int value)
 {
-    Model_Setting::instance().Set("ICONSIZE", value);
-    m_ico_size = value;
+    Model_Setting::instance().setInt("ICONSIZE", value);
+    m_icon_size = value;
 }
 
+void Option::loadToolbarIconSize()
+{
+    m_toolbar_icon_size = Model_Setting::instance().getInt("TOOLBARICONSIZE", 32);
+}
 void Option::setToolbarIconSize(const int value)
 {
-    Model_Setting::instance().Set("TOOLBARICONSIZE", value);
-    m_toolbar_ico_size = value;
+    Model_Setting::instance().setInt("TOOLBARICONSIZE", value);
+    m_toolbar_icon_size = value;
 }
 
-void Option::setNavigationIconSize(const int value)
+void Option::loadNavigationIconSize()
 {
-    Model_Setting::instance().Set("NAVIGATIONICONSIZE", value);
-    m_navigation_ico_size = value;
+    m_navigation_icon_size = Model_Setting::instance().getInt("NAVIGATIONICONSIZE", 24);
 }
-
-
-int Option::getHtmlFontSize() const noexcept
+void Option::setNavigationIconSize(const int value)
 {
-    return m_html_font_size;
+    Model_Setting::instance().setInt("NAVIGATIONICONSIZE", value);
+    m_navigation_icon_size = value;
 }
 
-void Option::setBudgetDaysOffset(const int value)
+void Option::loadCheckingRange()
 {
-    Model_Infotable::instance().Set("BUDGET_DAYS_OFFSET", value);
-    m_budget_days_offset = value;
+    m_checking_range = Model_Setting::instance().getArrayString("CHECKING_RANGE");
+    parseCheckingRange();
 }
-
-void Option::setBudgetDateOffset(wxDateTime& date) const
+void Option::setCheckingRange(const wxArrayString &a)
 {
-    if (m_budget_days_offset != 0)
-        date.Add(wxDateSpan::Days(m_budget_days_offset));
+    Model_Setting::instance().setArrayString("CHECKING_RANGE", a);
+    m_checking_range = a;
+    parseCheckingRange();
 }
-
-void Option::setReportingFirstDay(const int value)
+void Option::parseCheckingRange()
 {
-    Model_Infotable::instance().Set("REPORTING_FIRSTDAY", value);
-    m_reporting_firstday = value;
+    wxLogDebug("{{{ Option::parseCheckingRange()");
+
+    m_checking_range_a.clear();
+    m_checking_range_m = 0;
+
+    for (wxString &str : m_checking_range) {
+        if (str.empty()) {
+            if (m_checking_range_m == 0)
+                m_checking_range_m = m_checking_range_a.size();
+            continue;
+        }
+        DateRange2::Spec spec;
+        if (!spec.parseSpec(str))
+            continue;
+        m_checking_range_a.push_back(spec);
+    }
+
+    if (!m_checking_range_a.empty())
+        goto done;
+
+    for (auto &range : CHECKING_RANGE_DEFAULT) {
+        wxString label = range.first;
+        if (label.empty()) {
+            if (m_checking_range_m == 0)
+                m_checking_range_m = m_checking_range_a.size();
+            continue;
+        }
+        wxString name = wxGetTranslation(range.second);
+        DateRange2::Spec spec;
+        if (!spec.parseSpec(label, name))
+            continue;
+        m_checking_range_a.push_back(spec);
+    }
+
+    done:
+    if (m_checking_range_m == 0)
+        m_checking_range_m = m_checking_range_a.size();
+
+    wxLogDebug("m=[%d], n=[%zu]", m_checking_range_m, m_checking_range_a.size());
+    for (DateRange2::Spec &spec : m_checking_range_a) {
+        wxLogDebug("label=[%s], name=[%s]", spec.getLabel(), spec.getName());
+    }
+    wxLogDebug("}}}");
 }
 
-void Option::setHomePageIncExpRange(const int value)
+int Option::getHtmlScale() const noexcept
 {
-    Model_Infotable::instance().Set("HOMEPAGE_INCEXP_RANGE", value);
-    m_homepage_incexp_range = value;
+    return m_html_scale;
 }
 
 int Option::AccountImageId(const int64 account_id, const bool def, const bool ignoreClosure)
@@ -509,9 +665,9 @@
     if (!def && !ignoreClosure && (acctStatus == "Closed"))
         return img::ACCOUNT_CLOSED_PNG;
 
-    int max = acc_img::MAX_ACC_ICON - img::LAST_NAVTREE_PNG;
+    int max = acc_img::MAX_ACC_ICON - static_cast<int>(img::LAST_NAVTREE_PNG);
     int min = 1;
-    int custom_img_id = Model_Infotable::instance().GetIntInfo(wxString::Format("ACC_IMAGE_ID_%lld", account_id), 0);
+    int custom_img_id = Model_Infotable::instance().getInt(wxString::Format("ACC_IMAGE_ID_%lld", account_id), 0);
     if (custom_img_id > max) custom_img_id = custom_img_id - 20; //Bug #963 fix 
     if (!def && (custom_img_id >= min && custom_img_id <= max))
         return custom_img_id + img::LAST_NAVTREE_PNG - 1;
@@ -563,5 +719,8 @@
 void Option::setLanguage(const wxLanguage& language)
 {
     m_language = language;
-    Model_Setting::instance().Set(LANGUAGE_PARAMETER, wxLocale::GetLanguageCanonicalName(language));
+    Model_Setting::instance().setString(
+        LANGUAGE_PARAMETER,
+        wxLocale::GetLanguageCanonicalName(language)
+    );
 }
diff -Naur a/src/optiondialog.cpp b/src/optiondialog.cpp
--- a/src/optiondialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/optiondialog.cpp	2025-07-09 01:46:59.664940602 +0200
@@ -33,8 +33,8 @@
 #include "optionsettingsnet.h"
 #include "optionsettingsmisc.h"
 
-static const char * const s_pagetitle[] = {
-    wxTRANSLATE("General"), wxTRANSLATE("View"), wxTRANSLATE("Dashboard"), wxTRANSLATE("Attachments"), wxTRANSLATE("Network"), wxTRANSLATE("Other")
+static const wxArrayString s_pagetitle = {
+    _n("General"), _n("View"), _n("Dashboard"), _n("Attachments"), _n("Network"), _n("Other")
 };
 
 wxIMPLEMENT_DYNAMIC_CLASS(mmOptionsDialog, wxDialog)
@@ -157,8 +157,8 @@
     buttonPanel->SetSizer(buttonPanelSizer);
     mainDialogSizer->Add(buttonPanel, wxSizerFlags(g_flagsV).Center());
 
-    wxButton* itemButtonOK = new wxButton(buttonPanel, wxID_OK, _("&OK "));
-    wxButton* itemButtonApply = new wxButton(buttonPanel, wxID_APPLY, _("&Apply "));
+    wxButton* itemButtonOK = new wxButton(buttonPanel, wxID_OK, _t("&OK "));
+    wxButton* itemButtonApply = new wxButton(buttonPanel, wxID_APPLY, _t("&Apply "));
     wxButton* itemButtonCancel = new wxButton(buttonPanel, wxID_CANCEL, wxGetTranslation(g_CancelLabel));
     buttonPanelSizer->Add(itemButtonOK, g_flagsH);
     buttonPanelSizer->Add(itemButtonApply, g_flagsH);
@@ -216,8 +216,8 @@
     int selected_page = m_listbook->GetSelection();
     if (m_panel_list[selected_page]->SaveSettings())
     {
-        const wxString& msg = wxString::Format(_("%s page has been saved."), _(s_pagetitle[selected_page]));
-        wxMessageBox(msg, _("Settings"));
+        const wxString& msg = wxString::Format(_t("%s page has been saved."), wxGetTranslation(s_pagetitle[selected_page]));
+        wxMessageBox(msg, _t("Settings"));
     }
 
     Model_Setting::instance().ReleaseSavepoint();
diff -Naur a/src/optiondialog.h b/src/optiondialog.h
--- a/src/optiondialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/optiondialog.h	2025-07-09 01:46:59.664940602 +0200
@@ -46,7 +46,7 @@
 private:
     /// Dialog Creation - Used by constructor
     bool Create(wxWindow* parent, wxWindowID id = wxID_ANY,
-        const wxString& caption = _("Settings"),
+        const wxString& caption = _t("Settings"),
         const wxPoint& pos = wxDefaultPosition,
         const wxSize& size = wxDefaultSize,
         long style = wxCAPTION | wxRESIZE_BORDER | wxSYSTEM_MENU | wxCLOSE_BOX);
diff -Naur a/src/option.h b/src/option.h
--- a/src/option.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/option.h	2025-07-09 01:46:59.664940602 +0200
@@ -20,8 +20,8 @@
 #pragma once
 
 #include "defs.h"
-
-typedef wxLongLong int64;
+#include "primitive.h"
+#include "daterange2.h"
 
 /*
    mmOptions caches the options for MMEX
@@ -42,276 +42,491 @@
     };
     static const std::vector<std::pair<COMPOUNDING_ID, wxString> > COMPOUNDING_NAME;
     static const std::vector<std::pair<COMPOUNDING_ID, int> > COMPOUNDING_N;
+    static const std::vector<std::pair<wxString, wxString> > CHECKING_RANGE_DEFAULT;
 
 public:
     Option();
     static Option& instance();
-    void LoadOptions(const bool include_infotable = true);
+    void load(const bool include_infotable = true);
 
-    // set and save the option: m_dateFormat
-    void setDateFormat(const wxString& date_format);
-    const wxString getDateFormat() const;
+    // m_database_updated
+    void setDatabaseUpdated(const bool value);
+    bool getDatabaseUpdated() const noexcept;
 
-    // set and save the option: m_language
+    // m_language
     wxLanguage getLanguageID(const bool get_db = false);
     // get 2-letter ISO 639-1 code
     const wxString getLanguageCode(const bool get_db = false);
     void setLanguage(const wxLanguage& language);
 
-    // set and save the option: m_userNameString
-    void UserName(const wxString& username);
-    const wxString& UserName() const;
-
-    // set and save the option: m_localeNameString
-    void LocaleName(const wxString& locale);
-    const wxString& LocaleName() const;
-
-    // set and save the option: m_financialYearStartDayString
-    void FinancialYearStartDay(const wxString& setting);
-    const wxString& FinancialYearStartDay() const;
-
-    // set and save the option: m_financialYearStartMonthString
-    void FinancialYearStartMonth(const wxString& setting);
-    const wxString& FinancialYearStartMonth() const;
-
-    // set the base currency ID
-    void setBaseCurrency(const int64 base_currency_id);
-    // returns the base currency ID
-    int64 getBaseCurrencyID() const noexcept;
+    // m_locale_name
+    void setLocaleName(const wxString& locale);
+    const wxString& getLocaleName() const;
 
-    // set and save the option: m_databaseUpdated
-    void DatabaseUpdated(const bool value);
-    bool DatabaseUpdated() const noexcept;
+    // m_date_format
+    void loadDateFormat();
+    void setDateFormat(const wxString& date_format);
+    const wxString getDateFormat() const;
+
+    // m_user_name
+    void loadUserName();
+    void setUserName(const wxString& username);
+    const wxString& getUserName() const;
+
+    // m_base_currency_id
+    void loadBaseCurrencyID();
+    void setBaseCurrencyID(const int64 base_currency_id);
+    int64 getBaseCurrencyID() const noexcept;
 
-    void HideShareAccounts(const bool value);
-    bool HideShareAccounts() const noexcept;
+    // m_use_currency_history
+    void loadUseCurrencyHistory();
+    void setUseCurrencyHistory(const bool value);
+    bool getUseCurrencyHistory() const noexcept;
+
+    // m_share_precision
+    void loadSharePrecision();
+    void setSharePrecision(const int value);
+    int getSharePrecision() const noexcept;
+
+    // m_asset_compounding
+    void loadAssetCompounding();
+    void setAssetCompounding(const int value);
+    int getAssetCompounding() const noexcept;
 
-    void HideDeletedTransactions(const bool value);
-    bool HideDeletedTransactions() const noexcept;
+    // m_reporting_first_day: allows the 'first day' in the month to be adjusted
+    void loadReportingFirstDay();
+    void setReportingFirstDay(const int value);
+    int getReportingFirstDay() const noexcept;
 
-    void BudgetFinancialYears(const bool value);
-    bool BudgetFinancialYears() const noexcept;
+    // m_reporting_first_weekday
+    void loadReportingFirstWeekday();
+    void setReportingFirstWeekday(const wxDateTime::WeekDay value);
+    wxDateTime::WeekDay getReportingFirstWeekday() const noexcept;
+
+    // m_financial_first_day
+    void loadFinancialFirstDay();
+    void setFinancialFirstDay(int value);
+    int getFinancialFirstDay() const;
+
+    // m_financial_first_month
+    void loadFinancialFirstMonth();
+    void setFinancialFirstMonth(const wxDateTime::Month value);
+    wxDateTime::Month getFinancialFirstMonth() const;
 
-    void BudgetIncludeTransfers(const bool value);
-    bool BudgetIncludeTransfers() const noexcept;
+    // m_budget_days_offset: allows a year to start before or after the 1st of the month.
+    void loadBudgetDaysOffset();
+    void setBudgetDaysOffset(const int value);
+    int getBudgetDaysOffset() const noexcept;
+    void addBudgetDateOffset(wxDateTime& date) const;
 
-    void BudgetReportWithSummaries(const bool value);
-    bool BudgetReportWithSummaries() const noexcept;
+    // m_homepage_incexp_range: homepage income vs expenses graph range
+    void loadHomePageIncExpRange();
+    void setHomePageIncExpRange(const int value);
+    int getHomePageIncExpRange() const noexcept;
 
-    void BudgetOverride(const bool value);
-    bool BudgetOverride() const noexcept;
+    // m_hide_share_accounts
+    void loadHideShareAccounts();
+    void setHideShareAccounts(const bool value);
+    bool getHideShareAccounts() const noexcept;
+
+    // m_hide_deleted_transactions
+    void loadHideDeletedTransactions();
+    void setHideDeletedTransactions(const bool value);
+    bool getHideDeletedTransactions() const noexcept;
+
+    // m_budget_financial_years
+    void loadBudgetFinancialYears();
+    void setBudgetFinancialYears(const bool value);
+    bool getBudgetFinancialYears() const noexcept;
+
+    // m_budget_include_transfers
+    void loadBudgetIncludeTransfers();
+    void setBudgetIncludeTransfers(const bool value);
+    bool getBudgetIncludeTransfers() const noexcept;
+
+    // m_budget_summary_without_categories
+    void loadBudgetSummaryWithoutCategories();
+    void setBudgetSummaryWithoutCategories(const bool value);
+    bool getBudgetSummaryWithoutCategories() const noexcept;
+
+    // m_budget_override
+    void loadBudgetOverride();
+    void setBudgetOverride(const bool value);
+    bool getBudgetOverride() const noexcept;
 
+    // m_use_trans_datetime
+    void loadUseTransDateTime();
     bool UseTransDateTime(const bool value);
     bool UseTransDateTime() const noexcept;
 
-    // Deduct monthly budget from yearly budget
-    void BudgetDeductMonthly(const bool value);
-    bool BudgetDeductMonthly() const noexcept;
+    // m_budget_deduct_monthly: Deduct monthly budget from yearly budget
+    void loadBudgetDeductMonthly();
+    void setBudgetDeductMonthly(const bool value);
+    bool getBudgetDeductMonthly() const noexcept;
+
+    // m_trans_payee_none
+    void loadTransPayeeNone();
+    void setTransPayeeNone(const int value);
+    int getTransPayeeNone() const noexcept;
+
+    // m_trans_category_none
+    void loadTransCategoryNone();
+    void setTransCategoryNone(const int value);
+    int getTransCategoryNone() const noexcept;
+
+    // m_trans_category_transfer_none
+    void loadTransCategoryTransferNone();
+    void setTransCategoryTransferNone(const int value);
+    int getTransCategoryTransferNone() const noexcept;
+
+    // m_bulk_transactions
+    void loadBulkTransactions();
+    void setBulkTransactions(const bool value);
+    bool getBulkTransactions() const noexcept;
+
+    // m_trans_status_reconciled
+    void loadTransStatusReconciled();
+    void setTransStatusReconciled(const int value);
+    int getTransStatusReconciled() const noexcept;
+
+    // m_trans_date_default
+    void loadTransDateDefault();
+    void setTransDateDefault(const int value);
+    int getTransDateDefault() const noexcept;
+
+    // m_send_usage_stats
+    void loadSendUsageStats();
+    void setSendUsageStats(const bool value);
+    bool getSendUsageStats() const noexcept;
+    bool doSendUsageStats() const noexcept;
+
+    // m_check_news
+    void loadCheckNews();
+    void setCheckNews(const bool value);
+    bool getCheckNews() const noexcept;
+
+    // m_html_scale: scale factor for html font and other objects, in percantage
+    void loadHtmlScale();
+    void setHtmlScale(const int value);
+    int getHtmlScale() const noexcept;
 
-    void TransPayeeSelection(const int value);
-    int TransPayeeSelection() const noexcept;
+    // m_theme_mode
+    void loadThemeMode();
+    void setThemeMode(const int value);
+    int getThemeMode() const noexcept;
 
-    void TransCategorySelectionNonTransfer(const int value);
-    int TransCategorySelectionNonTransfer() const noexcept;
+    // m_font_size
+    void loadFontSize();
+    void setFontSize(const int value);
+    int getFontSize() const noexcept;
 
-    void TransCategorySelectionTransfer(const int value);
-    int TransCategorySelectionTransfer() const noexcept;
+    // m_icon_size
+    void loadIconSize();
+    void setIconSize(const int value);
+    int getIconSize() const noexcept;
 
-    void set_bulk_transactions(const bool value);
-    bool get_bulk_transactions() const noexcept;
+    // m_toolbar_icon_size
+    void loadToolbarIconSize();
+    void setToolbarIconSize(const int value);
+    int getToolbarIconSize() const noexcept;
 
-    void TransStatusReconciled(const int value);
-    int TransStatusReconciled() const noexcept;
+    // m_navigation_icon_size
+    void loadNavigationIconSize();
+    void setNavigationIconSize(const int value);
+    int getNavigationIconSize() const noexcept;
 
-    void TransDateDefault(const int value);
-    int TransDateDefault() const noexcept;
+    int AccountImageId(const int64 account_id, const bool def, const bool ignoreClosure = false);
 
-    void SendUsageStatistics(const bool value);
-    bool SendUsageStatistics() const noexcept;
+    // m_ignore_future_transactions
+    void loadIgnoreFutureTransactions();
+    void setIgnoreFutureTransactions(const bool value);
+    bool getIgnoreFutureTransactions() const noexcept;
 
-    void CheckNewsOnStartup(const bool value);
-    bool CheckNewsOnStartup() const noexcept;
+    // m_show_tooltips
+    void loadShowToolTips();
+    void setShowToolTips(const bool value);
+    bool getShowToolTips() const noexcept;
 
-    void SharePrecision(const int value);
-    int SharePrecision() const noexcept;
+    // m_show_moneytips
+    void loadShowMoneyTips();
+    void setShowMoneyTips(const bool value);
+    bool getShowMoneyTips() const noexcept;
 
-    void AssetCompounding(const int value);
-    int AssetCompounding() const noexcept;
+    // m_checking_range, m_checking_range_a, m_checking_range_m
+    void loadCheckingRange();
+    void setCheckingRange(const wxArrayString &a);
+    void parseCheckingRange();
+    const wxArrayString getCheckingRange() const noexcept;
+    const std::vector<DateRange2::Spec> getCheckingRangeA() const noexcept;
+    int getCheckingRangeM() const noexcept;
 
-    // Allows a year or financial year to start before or after the 1st of the month.
-    void setBudgetDaysOffset(const int value);
-    int getBudgetDaysOffset() const noexcept;
-    /**Re-adjust date by the date offset value*/
-    void setBudgetDateOffset(wxDateTime& date) const;
+private:
+    bool m_database_updated = false;
+    wxLanguage m_language = wxLANGUAGE_UNKNOWN;
 
-    // Allows the 'first day' in the month to be adjusted for reporting purposes
-    void setReportingFirstDay(const int value);
-    int getReportingFirstDay() const noexcept;
+    // stored in Model_Infotable
+    wxString m_locale_name;                             // LOCALE
+    wxString m_date_format;                             // DATEFORMAT
+    wxString m_user_name;                               // USERNAME
+    int64 m_base_currency_id = -1;                      // BASECURRENCYID
+    bool m_use_currency_history = false;                // USECURRENCYHISTORY
+    int m_share_precision = 4;                          // SHARE_PRECISION
+    int m_asset_compounding = 0;                        // ASSET_COMPOUNDING
+    int m_reporting_first_day = 1;                      // REPORTING_FIRSTDAY
+    wxDateTime::WeekDay m_reporting_first_weekday =     // REPORTING_FIRST_WEEKDAY
+        wxDateTime::WeekDay::Sun;
+    int m_financial_first_day;                          // FINANCIAL_YEAR_START_DAY
+    wxDateTime::Month m_financial_first_month;          // FINANCIAL_YEAR_START_MONTH
+    int m_budget_days_offset = 0;                       // BUDGET_DAYS_OFFSET
+    int m_homepage_incexp_range = 0;                    // HOMEPAGE_INCEXP_RANGE
+
+    // stored in Model_Setting
+    bool m_bulk_transactions = false;                   // BULK_TRX
+    bool m_hide_share_accounts = true;                  // HIDE_SHARE_ACCOUNTS
+    bool m_hide_deleted_transactions = false;           // HIDE_DELETED_TRANSACTIONS
+    bool m_budget_financial_years = false;              // BUDGET_FINANCIAL_YEARS
+    bool m_budget_include_transfers = false;            // BUDGET_INCLUDE_TRANSFERS
+    bool m_budget_summary_without_categories = true;    // BUDGET_SUMMARY_WITHOUT_CATEGORIES
+    bool m_budget_override = false;                     // BUDGET_OVERRIDE
+    bool m_budget_deduct_monthly = false;               // BUDGET_DEDUCT_MONTH_FROM_YEAR
+    bool m_ignore_future_transactions = false;          // IGNORE_FUTURE_TRANSACTIONS
+    bool m_show_tooltips = true;                        // IGNORE_SHOW_TOOLTIPS
+    bool m_show_moneytips = true;                       // IGNORE_SHOW_MONEYTIPS
+    bool m_use_trans_datetime = false;                  // TRANSACTION_USE_DATE_TIME
+    int m_trans_payee_none = Option::NONE;              // TRANSACTION_PAYEE_NONE
+    int m_trans_category_none = Option::NONE;           // TRANSACTION_CATEGORY_NONE
+    int m_trans_category_transfer_none = Option::NONE;  // TRANSACTION_CATEGORY_TRANSFER_NONE
+    int m_trans_status_reconciled = Option::NONE;       // TRANSACTION_STATUS_RECONCILED
+    int m_trans_date_default = 0;                       // TRANSACTION_DATE_DEFAULT
+    bool m_send_usage_stats = true;                     // SENDUSAGESTATS
+    bool m_check_news = true;                           // CHECKNEWS
+    int m_theme_mode = Option::AUTO;                    // THEMEMODE
+    int m_html_scale = 100;                             // HTMLSCALE
+    int m_icon_size = 16;                               // ICONSIZE
+    int m_font_size = 0;                                // UI_FONT_SIZE
+    int m_toolbar_icon_size = 32;                       // TOOLBARICONSIZE
+    int m_navigation_icon_size = 24;                    // NAVIGATIONICONSIZE
+    wxArrayString m_checking_range;                     // CHECKING_RANGE
+
+    // derived
+    std::vector<DateRange2::Spec> m_checking_range_a;   // m_checking_range
+    int m_checking_range_m;                             // m_checking_range
+};
 
-    /* stored value in percantage for scale html font and other objects */
-    void setHTMLFontSizes(const int value);
-    int getHtmlFontSize() const noexcept;
+inline void Option::setDatabaseUpdated(const bool value)
+{
+    m_database_updated = value;
+}
+inline bool Option::getDatabaseUpdated() const noexcept
+{
+    return m_database_updated;
+}
 
-    void setThemeMode(const int value);
-    int getThemeMode() const noexcept;
+inline const wxString& Option::getLocaleName() const
+{
+    return m_locale_name;
+}
 
-    void setFontSize(const int value);
-    int getFontSize() const noexcept;
+inline const wxString Option::getDateFormat() const
+{
+    return m_date_format;
+}
 
-    void setIconSize(const int value);
-    void setToolbarIconSize(const int value);
-    void setNavigationIconSize(const int value);
+inline const wxString& Option::getUserName() const
+{
+    return m_user_name;
+}
 
-    int getIconSize() const noexcept;
-    int getNavigationIconSize() const noexcept;
-    int getToolbarIconSize() const noexcept;
+inline int64 Option::getBaseCurrencyID() const noexcept
+{
+    return m_base_currency_id;
+}
 
-    int AccountImageId(const int64 account_id, const bool def, const bool ignoreClosure = false);
-    bool getSendUsageStatistics() const noexcept;
+inline bool Option::getUseCurrencyHistory() const noexcept
+{
+    return m_use_currency_history;
+}
 
-    void IgnoreFutureTransactions(const bool value);
-    bool getIgnoreFutureTransactions() const noexcept;
+inline int Option::getSharePrecision() const noexcept
+{
+    return m_share_precision;
+}
 
-    void ShowToolTips(const bool value);
-    bool getShowToolTips() const noexcept;
+inline int Option::getAssetCompounding() const noexcept
+{
+    return m_asset_compounding;
+}
 
-    void ShowMoneyTips(const bool value);
-    bool getShowMoneyTips() const noexcept;
+inline int Option::getReportingFirstDay() const noexcept
+{
+    return m_reporting_first_day;
+}
 
-    void CurrencyHistoryEnabled(const bool value);
-    bool getCurrencyHistoryEnabled() const noexcept;
+inline wxDateTime::WeekDay Option::getReportingFirstWeekday() const noexcept
+{
+    return m_reporting_first_weekday;
+}
 
-    // Homepage income vs expenses graph range
-    void setHomePageIncExpRange(const int value);
-    int getHomePageIncExpRange() const noexcept;
+inline int Option::getFinancialFirstDay() const
+{
+    return m_financial_first_day;
+}
 
-private:
-    wxString m_dateFormat;
-    wxLanguage m_language = wxLANGUAGE_UNKNOWN;
-    wxString m_userNameString;
-    wxString m_localeNameString;
-    wxString m_financialYearStartDayString;
-    wxString m_financialYearStartMonthString;
-    int64 m_baseCurrency = -1;
-    bool m_currencyHistoryEnabled = false;
-    bool m_bulk_enter = false;
-
-    bool m_databaseUpdated = false;
-    bool m_hideShareAccounts = true;                //INIDB_HIDE_SHARE_ACCOUNTS
-    bool m_hideDeletedTransactions = false;         //INIDB_HIDE_DELETED_TRANSACTIONS
-    bool m_budgetFinancialYears = false;            //INIDB_BUDGET_FINANCIAL_YEARS
-    bool m_budgetIncludeTransfers = false;          //INIDB_BUDGET_INCLUDE_TRANSFERS
-    bool m_budgetReportWithSummaries = true;        //INIDB_BUDGET_SUMMARY_WITHOUT_CATEG
-    bool m_budgetOverride = false;                  //INIDB_BUDGET_OVERRIDE
-    bool m_budgetDeductMonthly = false;             //INIDB_BUDGET_DEDUCT_MONTH_FROM_YEAR
-    bool m_ignoreFutureTransactions = false;        //INIDB_IGNORE_FUTURE_TRANSACTIONS
-    bool m_showToolTips = true;                     //INIDB_SHOW_TOOLTIPS
-    bool m_showMoneyTips = true;                    //INIDB_SHOW_MONEYTIPS
-    bool m_useTransDateTime = false;
-
-    int m_transPayeeSelection = Option::NONE;
-    int m_transCategorySelectionNonTransfer = Option::NONE;
-    int m_transCategorySelectionTransfer = Option::NONE;
-    int m_transStatusReconciled = Option::NONE;
-    int m_transDateDefault = 0;
-    bool m_usageStatistics = true;
-    bool m_newsChecking = true;                    //INIDB_CHECK_NEWS
-    int m_sharePrecision = 4;
-    int m_assetCompounding = Option::COMPOUNDING_ID_DAY;
-
-    int m_theme_mode = Option::AUTO;
-    int m_html_font_size = 100;
-    int m_ico_size = 16;
-    int m_font_size = 0;
-    int m_toolbar_ico_size = 32;
-    int m_navigation_ico_size = 24;
+inline wxDateTime::Month Option::getFinancialFirstMonth() const {
+    return m_financial_first_month;
+}
 
-    int m_budget_days_offset = 0;
-    int m_reporting_firstday = 1;
+inline int Option::getBudgetDaysOffset() const noexcept
+{
+    return m_budget_days_offset;
+}
 
-    int m_homepage_incexp_range = 0;
-};
+inline int Option::getHomePageIncExpRange() const noexcept
+{
+    return m_homepage_incexp_range;
+}
 
 inline int Option::getIconSize() const noexcept
 {
-    return m_ico_size;
+    return m_icon_size;
 }
+
 inline int Option::getNavigationIconSize() const noexcept
 {
-    return m_navigation_ico_size;
+    return m_navigation_icon_size;
 }
-inline int Option::getToolbarIconSize() const noexcept{
-    return m_toolbar_ico_size;
+
+inline int Option::getToolbarIconSize() const noexcept
+{
+    return m_toolbar_icon_size;
+}
+
+inline int Option::getTransCategoryNone() const noexcept
+{
+    return m_trans_category_none;
+}
+
+inline int Option::getTransCategoryTransferNone() const noexcept
+{
+    return m_trans_category_transfer_none;
+}
+
+inline bool Option::getBulkTransactions() const noexcept
+{
+    return m_bulk_transactions;
 }
-inline const wxString& Option::LocaleName() const { return m_localeNameString; }
-inline const wxString& Option::UserName() const { return m_userNameString; }
-inline const wxString& Option::FinancialYearStartDay() const { return m_financialYearStartDayString; }
-inline int Option::TransCategorySelectionNonTransfer() const noexcept
+
+inline int Option::getTransPayeeNone() const noexcept
 {
-    return m_transCategorySelectionNonTransfer;
+    return m_trans_payee_none;
 }
-inline int Option::TransCategorySelectionTransfer() const noexcept
+
+inline int Option::getTransStatusReconciled() const noexcept
 {
-    return m_transCategorySelectionTransfer;
+    return m_trans_status_reconciled;
 }
-inline bool Option::get_bulk_transactions() const noexcept
+
+inline int Option::getTransDateDefault() const noexcept
 {
-    return m_bulk_enter;
+    return m_trans_date_default;
 }
+
+inline bool Option::getCheckNews() const noexcept
+{
+    return m_check_news;
+}
+
+inline bool Option::getHideShareAccounts() const noexcept
+{
+    return m_hide_share_accounts;
+}
+
+inline bool Option::getHideDeletedTransactions() const noexcept
+{
+    return m_hide_deleted_transactions;
+}
+
+inline bool Option::getBudgetFinancialYears() const noexcept
+{
+    return m_budget_financial_years;
+}
+
+inline bool Option::getBudgetIncludeTransfers() const noexcept
+{
+    return m_budget_include_transfers;
+}
+
+inline bool Option::getBudgetSummaryWithoutCategories() const noexcept
+{
+    return m_budget_summary_without_categories;
+}
+
+inline bool Option::UseTransDateTime() const noexcept
+{
+    return m_use_trans_datetime;
+}
+
+inline bool Option::getBudgetOverride() const noexcept
+{
+    return m_budget_override;
+}
+
+inline bool Option::getBudgetDeductMonthly() const noexcept
+{
+    return m_budget_deduct_monthly;
+}
+
 inline int Option::getThemeMode() const noexcept
 {
     return m_theme_mode;
 }
+
 inline int Option::getFontSize() const noexcept
 {
     return m_font_size;
 }
 
-inline const wxString Option::getDateFormat() const
+inline bool Option::getSendUsageStats() const noexcept
 {
-    return m_dateFormat;
+    return m_send_usage_stats;
 }
 
-inline bool Option::getSendUsageStatistics() const noexcept
+inline bool Option::doSendUsageStats() const noexcept
 {
 #ifdef _DEBUG
     return false;
 #else
-    return m_usageStatistics;
+    return m_send_usage_stats;
 #endif
 }
 
-inline bool Option::getCurrencyHistoryEnabled() const noexcept
-{
-    return m_currencyHistoryEnabled;
-}
-
 inline bool Option::getIgnoreFutureTransactions() const noexcept
 {
-    return m_ignoreFutureTransactions;
+    return m_ignore_future_transactions;
 }
 
 inline bool Option::getShowToolTips() const noexcept
 {
-    return m_showToolTips;
+    return m_show_tooltips;
 }
 
 inline bool Option::getShowMoneyTips() const noexcept
 {
-    return m_showMoneyTips;
+    return m_show_moneytips;
 }
 
-inline int Option::getBudgetDaysOffset() const noexcept
+inline const wxArrayString Option::getCheckingRange() const noexcept
 {
-    return m_budget_days_offset;
+    return m_checking_range;
 }
 
-inline int Option::getReportingFirstDay() const noexcept
+inline const std::vector<DateRange2::Spec> Option::getCheckingRangeA() const noexcept
 {
-    return m_reporting_firstday;
+    return m_checking_range_a;
 }
 
-inline int Option::getHomePageIncExpRange() const noexcept
+inline int Option::getCheckingRangeM() const noexcept
 {
-    return m_homepage_incexp_range;
+    return m_checking_range_m;
 }
+
diff -Naur a/src/optionsettingsattachment.cpp b/src/optionsettingsattachment.cpp
--- a/src/optionsettingsattachment.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/optionsettingsattachment.cpp	2025-07-09 01:46:59.664940602 +0200
@@ -62,23 +62,25 @@
     attachmentPanelSizer0->Add(attachment_panel, wxSizerFlags(g_flagsExpand).Proportion(0));
 
     //Attachments
-    wxStaticBox* attachmentStaticBox = new wxStaticBox(attachment_panel, wxID_ANY, _("Attachments"));
+    wxStaticBox* attachmentStaticBox = new wxStaticBox(attachment_panel, wxID_ANY, _t("Attachments"));
     SetBoldFont(attachmentStaticBox);
     wxStaticBoxSizer* attachmentStaticBoxSizer = new wxStaticBoxSizer(attachmentStaticBox, wxVERTICAL);
 
     attachmentPanelSizer->Add(attachmentStaticBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
 
     wxString OSType = wxPlatformInfo::Get().GetOperatingSystemFamilyName();
-    wxString attachmentStaticText_desc = wxString::Format(_("Attachment archive folder for %s only:"), OSType);
+    wxString attachmentStaticText_desc = wxString::Format(_t("Attachment archive folder for %s only:"), OSType);
 
     wxStaticText* attachmentStaticText = new wxStaticText(attachment_panel, wxID_STATIC, attachmentStaticText_desc);
     attachmentStaticBoxSizer->Add(attachmentStaticText, g_flagsV);
-    mmToolTip(attachmentStaticText, _("Every OS type (Win,Mac,Unix) has its attachment folder"));
+    mmToolTip(attachmentStaticText, _t("Every OS type (Win,Mac,Unix) has its attachment folder"));
 
     wxBoxSizer* attachDefinedSizer = new wxBoxSizer(wxHORIZONTAL);
     attachmentStaticBoxSizer->Add(attachDefinedSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
 
-    const wxString attachmentFolder = Model_Infotable::instance().GetStringInfo("ATTACHMENTSFOLDER:" + mmPlatformType(), "");
+    const wxString attachmentFolder = Model_Infotable::instance().getString(
+        "ATTACHMENTSFOLDER:" + mmPlatformType(), ""
+    );
     m_old_path = mmex::getPathAttachment(attachmentFolder);
 
     wxArrayString list;
@@ -93,46 +95,52 @@
 
     wxButton* AttachmentsFolderButton = new wxButton(attachment_panel, ID_DIALOG_OPTIONS_BUTTON_ATTACHMENTSFOLDER, "..."
         , wxDefaultPosition, m_attachments_path->GetSizeFromTextSize(GetTextExtent("...")), 0);
-    mmToolTip(AttachmentsFolderButton, _("Browse for folder"));
+    mmToolTip(AttachmentsFolderButton, _t("Browse for folder"));
 
     attachDefinedSizer->Add(m_attachments_path, g_flagsExpand);
     attachDefinedSizer->Add(AttachmentsFolderButton, g_flagsH);
 
     m_attachments_preview = new wxStaticText(attachment_panel, wxID_STATIC
-        , _("Real path:") + "\n" + mmex::getPathAttachment(attachmentFolder));
+        , _t("Real path:") + "\n" + mmex::getPathAttachment(attachmentFolder));
     m_attachments_preview->SetFont(this->GetFont().Smaller());
     attachmentStaticBoxSizer->Add(m_attachments_preview, g_flagsV);
 
     // Legend
-    wxStaticBox* attachmentStaticBoxLegend = new wxStaticBox(attachment_panel, wxID_ANY, _("Legend (can be used as variables at the beginning of above path)"));
+    wxStaticBox* attachmentStaticBoxLegend = new wxStaticBox(attachment_panel, wxID_ANY, _t("Legend (can be used as variables at the beginning of above path)"));
     attachmentStaticBoxLegend->SetFont(this->GetFont().Italic());
     wxStaticBoxSizer* attachmentStaticBoxSizerLegend = new wxStaticBoxSizer(attachmentStaticBoxLegend, wxVERTICAL);
     attachmentStaticBoxSizer->Add(attachmentStaticBoxSizerLegend, wxSizerFlags(g_flagsExpand).Proportion(0));
 
-    wxString legend = wxString::Format(_("%s : User document directory"), ATTACHMENTS_FOLDER_DOCUMENTS);
-    legend += "\n" + wxString::Format(_("%s : User profile folder"), ATTACHMENTS_FOLDER_USERPROFILE);
-    legend += "\n" + wxString::Format(_("%s : Folder of .MMB database file"), ATTACHMENTS_FOLDER_DATABASE);
-    legend += "\n" + wxString::Format(_("%s : MMEX Application data folder"), ATTACHMENTS_FOLDER_APPDATA);
+    wxString legend = wxString::Format(_t("%s : User document directory"), ATTACHMENTS_FOLDER_DOCUMENTS);
+    legend += "\n" + wxString::Format(_t("%s : User profile folder"), ATTACHMENTS_FOLDER_USERPROFILE);
+    legend += "\n" + wxString::Format(_t("%s : Folder of .MMB database file"), ATTACHMENTS_FOLDER_DATABASE);
+    legend += "\n" + wxString::Format(_t("%s : MMEX Application data folder"), ATTACHMENTS_FOLDER_APPDATA);
     wxStaticText* legendStaticText = new wxStaticText(attachment_panel, wxID_STATIC, legend);
     attachmentStaticBoxSizerLegend->Add(legendStaticText);
     //End legend
 
     //Other OS folders
-    wxStaticBox* attachmentStaticBoxInfo = new wxStaticBox(attachment_panel, wxID_ANY, _("Other OS folders "));
+    wxStaticBox* attachmentStaticBoxInfo = new wxStaticBox(attachment_panel, wxID_ANY, _t("Other OS folders "));
     attachmentStaticBoxInfo->SetFont(this->GetFont().Italic());
     wxStaticBoxSizer* attachmentStaticBoxSizerInfo = new wxStaticBoxSizer(attachmentStaticBoxInfo, wxVERTICAL);
     attachmentStaticBoxSizer->Add(attachmentStaticBoxSizerInfo, wxSizerFlags(g_flagsExpand).Proportion(0));
 
-    const wxString FolderNotSet = _("Not set yet");
-    const wxString attachmentFolderWin = Model_Infotable::instance().GetStringInfo("ATTACHMENTSFOLDER:Win", FolderNotSet);
-    const wxString attachmentFolderMac = Model_Infotable::instance().GetStringInfo("ATTACHMENTSFOLDER:Mac", FolderNotSet);
-    const wxString attachmentFolderUnix = Model_Infotable::instance().GetStringInfo("ATTACHMENTSFOLDER:Uni", FolderNotSet);
+    const wxString FolderNotSet = _t("Not set yet");
+    const wxString attachmentFolderWin = Model_Infotable::instance().getString(
+        "ATTACHMENTSFOLDER:Win", FolderNotSet
+    );
+    const wxString attachmentFolderMac = Model_Infotable::instance().getString(
+        "ATTACHMENTSFOLDER:Mac", FolderNotSet
+    );
+    const wxString attachmentFolderUnix = Model_Infotable::instance().getString(
+        "ATTACHMENTSFOLDER:Uni", FolderNotSet
+    );
 
     const auto os = mmPlatformType();
     if (os != "win")
     {
         wxStaticText* attachmentFolderWinText = new wxStaticText(attachment_panel, wxID_STATIC
-            , wxString::Format(_("Windows folder: %s"), attachmentFolderWin.Left(50)));
+            , wxString::Format(_t("Windows folder: %s"), attachmentFolderWin.Left(50)));
         mmToolTip(attachmentFolderWinText, attachmentFolderWin);
         attachmentStaticBoxSizerInfo->Add(attachmentFolderWinText);
     }
@@ -140,7 +148,7 @@
     if (os != "mac")
     {
         wxStaticText* attachmentFolderMacText = new wxStaticText(attachment_panel, wxID_STATIC
-            , wxString::Format(_("Mac folder: %s"), attachmentFolderMac.Left(50)));
+            , wxString::Format(_t("Mac folder: %s"), attachmentFolderMac.Left(50)));
         mmToolTip(attachmentFolderMacText, attachmentFolderMac);
         attachmentStaticBoxSizerInfo->Add(attachmentFolderMacText);
     }
@@ -148,7 +156,7 @@
     if (os != "uni")
     {
         wxStaticText* attachmentFolderUnixText = new wxStaticText(attachment_panel, wxID_STATIC
-            , wxString::Format(_("Unix folder: %s"), attachmentFolderUnix.Left(50)));
+            , wxString::Format(_t("Unix folder: %s"), attachmentFolderUnix.Left(50)));
         mmToolTip(attachmentFolderUnixText, attachmentFolderUnix);
         attachmentStaticBoxSizerInfo->Add(attachmentFolderUnixText);
     }
@@ -156,32 +164,32 @@
 
     const wxString LastDBPath = Model_Setting::instance().getLastDbPath();
     const wxString subFolder = wxString::Format("MMEX_%s_Attachments", wxFileName::FileName(LastDBPath).GetName());
-    const wxString cbAttachmentsSubfolder_desc = _("Create and use Attachments subfolder");
+    const wxString cbAttachmentsSubfolder_desc = _t("Create and use Attachments subfolder");
 
     m_attachments_subfolder = new wxCheckBox(attachment_panel, ID_DIALOG_OPTIONS_CHECKBOX_ATTACHMENTSSUBFOLDER
         , cbAttachmentsSubfolder_desc, wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    m_attachments_subfolder->SetValue(Model_Infotable::instance().GetBoolInfo("ATTACHMENTSSUBFOLDER", true));
+    m_attachments_subfolder->SetValue(Model_Infotable::instance().getBool("ATTACHMENTSSUBFOLDER", true));
     attachmentStaticBoxSizer->Add(m_attachments_subfolder, g_flagsV);
     attachmentStaticBoxSizer->Add(new wxStaticText(attachment_panel, wxID_STATIC, subFolder), g_flagsV);
 
     attachmentStaticBoxSizer->AddSpacer(20);
 
     m_delete_attachments = new wxCheckBox(attachment_panel, wxID_STATIC,
-        _("Delete file after import"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    m_delete_attachments->SetValue(Model_Infotable::instance().GetBoolInfo("ATTACHMENTSDELETE", false));
-    mmToolTip(m_delete_attachments, _("Select to delete file after import in attachments archive"));
+        _t("Delete file after import"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    m_delete_attachments->SetValue(Model_Infotable::instance().getBool("ATTACHMENTSDELETE", false));
+    mmToolTip(m_delete_attachments, _t("Select to delete file after import in attachments archive"));
     attachmentStaticBoxSizer->Add(m_delete_attachments, g_flagsV);
 
     m_trash_attachments = new wxCheckBox(attachment_panel, wxID_STATIC,
-        _("When remove attachment, move file instead of delete"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    m_trash_attachments->SetValue(Model_Infotable::instance().GetBoolInfo("ATTACHMENTSTRASH", false));
-    mmToolTip(m_trash_attachments, _("Select to don't delete file when attachment is removed, but instead move it to 'Deleted' subfolder"));
+        _t("When remove attachment, move file instead of delete"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    m_trash_attachments->SetValue(Model_Infotable::instance().getBool("ATTACHMENTSTRASH", false));
+    mmToolTip(m_trash_attachments, _t("Select to don't delete file when attachment is removed, but instead move it to 'Deleted' subfolder"));
     attachmentStaticBoxSizer->Add(m_trash_attachments, g_flagsV);
 
     m_duplicate_attachments = new wxCheckBox(attachment_panel, wxID_STATIC,
-        _("When duplicating transactions duplicate the attachments also"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    m_duplicate_attachments->SetValue(Model_Infotable::instance().GetBoolInfo("ATTACHMENTSDUPLICATE", false));
-    mmToolTip(m_trash_attachments, _("Select if you want to copy the attachments to new transactions when they are duplicated or pasted"));
+        _t("When duplicating transactions duplicate the attachments also"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    m_duplicate_attachments->SetValue(Model_Infotable::instance().getBool("ATTACHMENTSDUPLICATE", false));
+    mmToolTip(m_trash_attachments, _t("Select if you want to copy the attachments to new transactions when they are duplicated or pasted"));
     attachmentStaticBoxSizer->Add(m_duplicate_attachments, g_flagsV);
 
     Fit();
@@ -194,7 +202,7 @@
     wxString AttachmentsFolder = mmex::getPathAttachment(m_attachments_path->GetValue());
 
     wxDirDialog dlg(this
-        , _("Choose folder to set as attachments archive")
+        , _t("Choose folder to set as attachments archive")
         , AttachmentsFolder
         , wxDD_DEFAULT_STYLE | wxDD_DIR_MUST_EXIST
     );
@@ -209,13 +217,16 @@
 void OptionSettingsAttachment::OnAttachmentsPathChanged(wxCommandEvent& WXUNUSED(event))
 {
     wxString AttachmentsFolder = mmex::getPathAttachment(m_attachments_path->GetValue().Trim());
-    m_attachments_preview->SetLabelText(_("Real path:") + "\n" + AttachmentsFolder);
+    m_attachments_preview->SetLabelText(_t("Real path:") + "\n" + AttachmentsFolder);
     Fit();
 }
 
 void OptionSettingsAttachment::OnAttachmentsSubfolderChanged(wxCommandEvent& event)
 {
-    Model_Infotable::instance().Set("ATTACHMENTSSUBFOLDER", m_attachments_subfolder->GetValue());
+    Model_Infotable::instance().setBool(
+        "ATTACHMENTSSUBFOLDER",
+        m_attachments_subfolder->GetValue()
+    );
     OnAttachmentsPathChanged(event);
 }
 
@@ -235,7 +246,7 @@
 
         if (!mmAttachmentManage::CreateReadmeFile(attachmentsFolder))
         {
-            mmErrorDialogs::MessageError(this, _("Attachments folder it's not writable!"), _("Attachments folder"));
+            mmErrorDialogs::MessageError(this, _t("Attachments folder it's not writable!"), _t("Attachments folder"));
             return false;
         }
 
@@ -243,28 +254,31 @@
         if (attachmentsFolder != m_old_path && wxDirExists(attachmentsFolderOld))
         {
             int MoveResponse = wxMessageBox(
-                wxString::Format("%s\n", _("Attachments path has been changed!"))
+                wxString::Format("%s\n", _t("Attachments path has been changed!"))
                 + ("Do you want to move all attachments to the new location?")
-                , _("Attachments folder migration")
+                , _t("Attachments folder migration")
                 , wxYES_NO | wxYES_DEFAULT | wxICON_WARNING);
             if (MoveResponse == wxYES)
             {
                 if (!wxRenameFile(attachmentsFolderOld, attachmentsFolder))
                     wxMessageBox(
-                    wxString::Format("%s\n\n", _("Error moving attachments folder: please move it manually!")) +
-                    wxString::Format("%s: %s\n", _("Origin"), mmex::getPathAttachment(m_old_path)) +
-                    wxString::Format("%s: %s", _("Destination"), attachmentsFolder)
-                    , _("Attachments folder migration")
+                    wxString::Format("%s\n\n", _t("An error occurred while moving the attachments folder. Please move it manually.")) +
+                    wxString::Format("%s: %s\n", _t("Origin"), mmex::getPathAttachment(m_old_path)) +
+                    wxString::Format("%s: %s", _t("Destination"), attachmentsFolder)
+                    , _t("Attachments folder migration")
                     , wxICON_ERROR);
             }
             m_old_path = attachmentsFolder;
         }
     }
 
-    Model_Infotable::instance().Set("ATTACHMENTSFOLDER:" + mmPlatformType(), m_attachments_path->GetValue().Trim());
-    Model_Infotable::instance().Set("ATTACHMENTSDELETE", m_delete_attachments->GetValue());
-    Model_Infotable::instance().Set("ATTACHMENTSTRASH", m_trash_attachments->GetValue());
-    Model_Infotable::instance().Set("ATTACHMENTSDUPLICATE", m_duplicate_attachments->GetValue());
+    Model_Infotable::instance().setString(
+        "ATTACHMENTSFOLDER:" + mmPlatformType(),
+        m_attachments_path->GetValue().Trim()
+    );
+    Model_Infotable::instance().setBool("ATTACHMENTSDELETE", m_delete_attachments->GetValue());
+    Model_Infotable::instance().setBool("ATTACHMENTSTRASH", m_trash_attachments->GetValue());
+    Model_Infotable::instance().setBool("ATTACHMENTSDUPLICATE", m_duplicate_attachments->GetValue());
 
     return true;
 }
diff -Naur a/src/optionsettingsbase.cpp b/src/optionsettingsbase.cpp
--- a/src/optionsettingsbase.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/optionsettingsbase.cpp	2025-07-09 01:46:59.668940626 +0200
@@ -29,6 +29,6 @@
 
 bool OptionSettingsBase::GetIniDatabaseCheckboxValue(const wxString& dbField, bool defaultState)
 {
-    bool result = Model_Setting::instance().GetBoolSetting(dbField, defaultState);
+    bool result = Model_Setting::instance().getBool(dbField, defaultState);
     return result;
 }
diff -Naur a/src/optionsettingsgeneral.cpp b/src/optionsettingsgeneral.cpp
--- a/src/optionsettingsgeneral.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/optionsettingsgeneral.cpp	2025-07-09 01:46:59.668940626 +0200
@@ -71,25 +71,25 @@
     generalPanelSizer0->Add(general_panel, wxSizerFlags(g_flagsExpand).Proportion(0));
 
     // Display Header Settings
-    wxStaticBox* headerStaticBox = new wxStaticBox(general_panel, wxID_STATIC, _("Display Heading"));
+    wxStaticBox* headerStaticBox = new wxStaticBox(general_panel, wxID_STATIC, _t("Display Heading"));
     SetBoldFont(headerStaticBox);
 
     wxStaticBoxSizer* headerStaticBoxSizer = new wxStaticBoxSizer(headerStaticBox, wxHORIZONTAL);
 
-    headerStaticBoxSizer->Add(new wxStaticText(general_panel, wxID_STATIC, _("User Name")), g_flagsH);
+    headerStaticBoxSizer->Add(new wxStaticText(general_panel, wxID_STATIC, _t("User Name")), g_flagsH);
 
-    wxString userName = Model_Infotable::instance().GetStringInfo("USERNAME", "");
+    wxString userName = Model_Infotable::instance().getString("USERNAME", "");
     wxTextCtrl* userNameTextCtr = new wxTextCtrl(general_panel, ID_DIALOG_OPTIONS_TEXTCTRL_USERNAME, userName);
     userNameTextCtr->SetMinSize(wxSize(200, -1));
-    mmToolTip(userNameTextCtr, _("The User Name is used as a title for the database."));
+    mmToolTip(userNameTextCtr, _t("The User Name is used as a title for the database."));
     headerStaticBoxSizer->Add(userNameTextCtr, g_flagsExpand);
     generalPanelSizer->Add(headerStaticBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
 
     // User Interface Language
     auto language = Option::instance().getLanguageID(true);
-    const auto langName = language == wxLANGUAGE_DEFAULT ? _("System default") : wxLocale::GetLanguageName(language);
+    const auto langName = language == wxLANGUAGE_DEFAULT ? _t("System default") : wxLocale::GetLanguageName(language);
 
-    wxStaticBox* langStaticBox = new wxStaticBox(general_panel, wxID_STATIC, _("User Interface Language"));
+    wxStaticBox* langStaticBox = new wxStaticBox(general_panel, wxID_STATIC, _t("User Interface Language"));
     SetBoldFont(langStaticBox);
     wxStaticBoxSizer* langFormatStaticBoxSizer = new wxStaticBoxSizer(langStaticBox, wxHORIZONTAL);
     generalPanelSizer->Add(langFormatStaticBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
@@ -97,10 +97,10 @@
     wxButton* langButton = new wxButton(general_panel, ID_DIALOG_OPTIONS_BUTTON_LANG, wxGetTranslation(langName));
     langButton->SetMinSize(wxSize(200, -1));
     langFormatStaticBoxSizer->Add(langButton, g_flagsH);
-    mmToolTip(langButton, _("Change user interface language"));
+    mmToolTip(langButton, _t("Change user interface language"));
 
     // Date Format Settings
-    wxStaticBox* dateFormatStaticBox = new wxStaticBox(general_panel, wxID_STATIC, _("Date Format"));
+    wxStaticBox* dateFormatStaticBox = new wxStaticBox(general_panel, wxID_STATIC, _t("Date Format"));
     wxStaticBoxSizer* dateFormatStaticBoxSizer = new wxStaticBoxSizer(dateFormatStaticBox, wxHORIZONTAL);
     generalPanelSizer->Add(dateFormatStaticBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
 
@@ -111,37 +111,37 @@
         if (m_date_format == i.first) m_date_format_choice->SetStringSelection(i.second);
     }
     dateFormatStaticBoxSizer->Add(m_date_format_choice, g_flagsH);
-    mmToolTip(m_date_format_choice, _("Specify the date format for display"));
+    mmToolTip(m_date_format_choice, _t("Specify the date format for display"));
 
     m_sample_date_text = new wxStaticText(dateFormatStaticBox, wxID_STATIC, "redefined elsewhere");
-    dateFormatStaticBoxSizer->Add(new wxStaticText(dateFormatStaticBox, wxID_STATIC, _("Date format sample:")), wxSizerFlags(g_flagsH).Border(wxLEFT, 15));
+    dateFormatStaticBoxSizer->Add(new wxStaticText(dateFormatStaticBox, wxID_STATIC, _t("Date format sample:")), wxSizerFlags(g_flagsH).Border(wxLEFT, 15));
     dateFormatStaticBoxSizer->Add(m_sample_date_text, wxSizerFlags(g_flagsH).Border(wxLEFT, 5));
     m_sample_date_text->SetLabelText(mmGetDateTimeForDisplay(wxDateTime::Now().FormatISODate()));
     SetBoldFont(dateFormatStaticBox);
 
     // Currency Settings
-    wxStaticBox* currencyStaticBox = new wxStaticBox(general_panel, wxID_STATIC, _("Currency"));
+    wxStaticBox* currencyStaticBox = new wxStaticBox(general_panel, wxID_STATIC, _t("Currency"));
     SetBoldFont(currencyStaticBox);
     m_currencyStaticBoxSizer = new wxStaticBoxSizer(currencyStaticBox, wxVERTICAL);
     generalPanelSizer->Add(m_currencyStaticBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
 
     wxBoxSizer* currencyBaseSizer = new wxBoxSizer(wxHORIZONTAL);
     m_currencyStaticBoxSizer->Add(currencyBaseSizer, wxSizerFlags(g_flagsV).Border(wxLEFT, 0));
-    currencyBaseSizer->Add(new wxStaticText(general_panel, wxID_STATIC, _("Base Currency")), g_flagsH);
+    currencyBaseSizer->Add(new wxStaticText(general_panel, wxID_STATIC, _t("Base Currency")), g_flagsH);
 
     Model_Currency::Data* currency = Model_Currency::instance().get(Option::instance().getBaseCurrencyID());
-    wxString currName = currency ? currency->CURRENCYNAME : _("Set Currency");
+    wxString currName = currency ? currency->CURRENCYNAME : _t("Set Currency");
     m_currency_id = currency ? currency->CURRENCYID : -1;
     baseCurrencyComboBox_ = new mmComboBoxCurrency(general_panel, ID_DIALOG_OPTIONS_BUTTON_CURRENCY);
     baseCurrencyComboBox_->SetMinSize(wxSize(200, -1));
     baseCurrencyComboBox_->ChangeValue(currName);
-    mmToolTip(baseCurrencyComboBox_, _("Set default database currency using 'Currency Manager'"));
+    mmToolTip(baseCurrencyComboBox_, _t("Set default database currency using 'Currency Manager'"));
     currencyBaseSizer->Add(baseCurrencyComboBox_, g_flagsH);
 
     m_currencyStaticBoxSizer->AddSpacer(10);
 
     { // Locale
-        const wxString locale = Model_Infotable::instance().GetStringInfo("LOCALE", "");
+        const wxString locale = Model_Infotable::instance().getString("LOCALE", "");
 
         wxBoxSizer* localeBaseSizer = new wxBoxSizer(wxHORIZONTAL);
         m_currencyStaticBoxSizer->Add(localeBaseSizer, wxSizerFlags(g_flagsV).Border(wxLEFT, 0));
@@ -160,7 +160,7 @@
         m_sample_value_text->SetLabelText(wxGetTranslation(result));
 
         m_currencyStaticBoxSizer->Add(new wxStaticText(general_panel, wxID_STATIC
-            , _("Format derived from locale.\n"
+            , _t("Format derived from locale.\n"
                 "Leave blank to manually set format via 'Currency Manager | Edit'")),
             wxSizerFlags(g_flagsV).Border(wxTOP, 0).Border(wxLEFT, 5));
 
@@ -171,30 +171,30 @@
 
     m_currencyStaticBoxSizer->AddSpacer(15);
 
-    m_currency_history = new wxCheckBox(general_panel, wxID_STATIC, _("Use historical currency"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    m_currency_history->SetValue(Option::instance().getCurrencyHistoryEnabled());
-    mmToolTip(m_currency_history, _("Select to use historical currency (one rate for each day), deselect to use a fixed rate"));
+    m_currency_history = new wxCheckBox(general_panel, wxID_STATIC, _t("Use historical currency"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    m_currency_history->SetValue(Option::instance().getUseCurrencyHistory());
+    mmToolTip(m_currency_history, _t("Select to use historical currency (one rate for each day), deselect to use a fixed rate"));
     m_currencyStaticBoxSizer->Add(m_currency_history, g_flagsV);
 
     // Financial Year Settings
-    wxStaticBox* financialYearStaticBox = new wxStaticBox(general_panel, wxID_ANY, _("Financial Year"));
+    wxStaticBox* financialYearStaticBox = new wxStaticBox(general_panel, wxID_ANY, _t("Financial Year"));
     SetBoldFont(financialYearStaticBox);
     wxStaticBoxSizer* financialYearStaticBoxSizer = new wxStaticBoxSizer(financialYearStaticBox, wxVERTICAL);
     wxFlexGridSizer* financialYearStaticBoxSizerGrid = new wxFlexGridSizer(0, 2, 0, 0);
     generalPanelSizer->Add(financialYearStaticBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
     financialYearStaticBoxSizer->Add(financialYearStaticBoxSizerGrid);
 
-    financialYearStaticBoxSizerGrid->Add(new wxStaticText(general_panel, wxID_STATIC, _("Start Day")), g_flagsH);
-    int day = Model_Infotable::instance().GetIntInfo("FINANCIAL_YEAR_START_DAY", 1);
+    financialYearStaticBoxSizerGrid->Add(new wxStaticText(general_panel, wxID_STATIC, _t("First Day")), g_flagsH);
+    int day = Model_Infotable::instance().getInt("FINANCIAL_YEAR_START_DAY", 1);
 
     wxSpinCtrl *textFPSDay = new wxSpinCtrl(general_panel, ID_DIALOG_OPTIONS_FINANCIAL_YEAR_START_DAY,
         wxEmptyString, wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 1, 31, day);
     textFPSDay->SetValue(day);
-    mmToolTip(textFPSDay, _("Specify Day for start of financial year"));
+    mmToolTip(textFPSDay, _t("Specify Day for start of financial year"));
 
     financialYearStaticBoxSizerGrid->Add(textFPSDay, g_flagsH);
 
-    financialYearStaticBoxSizerGrid->Add(new wxStaticText(general_panel, wxID_STATIC, _("Start Month")), g_flagsH);
+    financialYearStaticBoxSizerGrid->Add(new wxStaticText(general_panel, wxID_STATIC, _t("First Month")), g_flagsH);
 
     wxArrayString financialMonthsSelection;
     for (wxDateTime::Month m = wxDateTime::Jan; m <= wxDateTime::Dec; m = wxDateTime::Month(m + 1))
@@ -204,37 +204,37 @@
         , wxDefaultPosition, wxSize(100, -1), financialMonthsSelection);
     financialYearStaticBoxSizerGrid->Add(m_month_selection, g_flagsH);
 
-    int monthItem = Model_Infotable::instance().GetIntInfo("FINANCIAL_YEAR_START_MONTH", 7);
+    int monthItem = Model_Infotable::instance().getInt("FINANCIAL_YEAR_START_MONTH", 7);
     m_month_selection->SetSelection(monthItem - 1);
-    mmToolTip(m_month_selection, _("Specify month for start of financial year"));
+    mmToolTip(m_month_selection, _t("Specify month for start of financial year"));
 
     // Misc settings
     generalPanelSizer->AddSpacer(15);
 
-    m_use_org_date_copy_paste = new wxCheckBox(general_panel, wxID_STATIC, _("Use Original Date when Pasting Transactions"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    m_use_org_date_copy_paste = new wxCheckBox(general_panel, wxID_STATIC, _t("Use Original Date when Pasting Transactions"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     m_use_org_date_copy_paste->SetValue(GetIniDatabaseCheckboxValue(INIDB_USE_ORG_DATE_COPYPASTE, false));
-    mmToolTip(m_use_org_date_copy_paste, _("Select whether to use the original transaction date or current date when copying/pasting transactions"));
+    mmToolTip(m_use_org_date_copy_paste, _t("Select whether to use the original transaction date or current date when copying/pasting transactions"));
     generalPanelSizer->Add(m_use_org_date_copy_paste, g_flagsV);
 
-    m_use_org_date_duplicate = new wxCheckBox(general_panel, wxID_STATIC, _("Use Original Date when Duplicating Transactions"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    m_use_org_date_duplicate = new wxCheckBox(general_panel, wxID_STATIC, _t("Use Original Date when Duplicating Transactions"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     m_use_org_date_duplicate->SetValue(GetIniDatabaseCheckboxValue(INIDB_USE_ORG_DATE_DUPLICATE, false));
-    mmToolTip(m_use_org_date_duplicate, _("Select whether to use the original transaction date or current date when duplicating transactions"));
+    mmToolTip(m_use_org_date_duplicate, _t("Select whether to use the original transaction date or current date when duplicating transactions"));
     generalPanelSizer->Add(m_use_org_date_duplicate, g_flagsV);
 
 
     wxArrayString sounds;
-    sounds.Add(_("None"));
+    sounds.Add(_t("None"));
     sounds.Add("drop.wav");
     sounds.Add("cash.wav");
 
     wxBoxSizer* soundBaseSizer = new wxBoxSizer(wxHORIZONTAL);
     generalPanelSizer->Add(soundBaseSizer, wxSizerFlags(g_flagsV).Border(wxLEFT, 0));
-    soundBaseSizer->Add(new wxStaticText(general_panel, wxID_STATIC, _("Transaction Sound")), g_flagsH);
+    soundBaseSizer->Add(new wxStaticText(general_panel, wxID_STATIC, _t("Transaction Sound")), g_flagsH);
     m_use_sound = new wxChoice(general_panel, wxID_STATIC
         , wxDefaultPosition, wxSize(100, -1)
         , sounds);
-    m_use_sound->SetSelection(Model_Setting::instance().GetIntSetting(INIDB_USE_TRANSACTION_SOUND, 0));
-    mmToolTip(m_use_sound, _("Select whether to use sounds when entering transactions"));
+    m_use_sound->SetSelection(Model_Setting::instance().getInt(INIDB_USE_TRANSACTION_SOUND, 0));
+    mmToolTip(m_use_sound, _t("Select whether to use sounds when entering transactions"));
     soundBaseSizer->Add(m_use_sound, g_flagsV);
 
     Fit();
@@ -267,10 +267,9 @@
 bool OptionSettingsGeneral::SaveFinancialYearStart()
 {
     //Save Financial Year Start Month
-    int month = 1 + m_month_selection->GetSelection();
-    wxString fysMonthVal = wxString::Format("%d", month);
-    Option::instance().FinancialYearStartMonth(fysMonthVal);
-    int last_month_day = wxDateTime(1, wxDateTime::Month(month - 1), 2015).GetLastMonthDay().GetDay();
+    wxDateTime::Month month = wxDateTime::Month(m_month_selection->GetSelection());
+    Option::instance().setFinancialFirstMonth(month);
+    int last_month_day = wxDateTime(1, month, 2015).GetLastMonthDay().GetDay();
 
     //Save Financial Year Start Day
     wxSpinCtrl* fysDay = static_cast<wxSpinCtrl*>(FindWindow(ID_DIALOG_OPTIONS_FINANCIAL_YEAR_START_DAY));
@@ -278,7 +277,7 @@
     if (last_month_day < day)
         day = last_month_day;
 
-    Option::instance().FinancialYearStartDay(wxString::Format("%d", day));
+    Option::instance().setFinancialFirstDay(day);
     return last_month_day < day;
 }
 
@@ -290,43 +289,43 @@
     {
         if (!baseCurrencyComboBox_->mmIsValid())
         {
-            mmErrorDialogs::ToolTip4Object(baseCurrencyComboBox_, _("Invalid value"), _("Currency"), wxICON_ERROR);
+            mmErrorDialogs::ToolTip4Object(baseCurrencyComboBox_, _t("Invalid value"), _t("Currency"), wxICON_ERROR);
             return false;
         }
         m_currency_id = currency_id;
 
-        if (Option::instance().getCurrencyHistoryEnabled())
+        if (Option::instance().getUseCurrencyHistory())
         {
-            if (wxMessageBox(_("Changing base currency will delete all historical rates, proceed?")
-                , _("Currency Manager")
+            if (wxMessageBox(_t("Changing base currency will delete all historical rates, proceed?")
+                , _t("Currency Manager")
                 , wxYES_NO | wxYES_DEFAULT | wxICON_WARNING) != wxYES)
                 return false;
         }
 
-        Option::instance().setBaseCurrency(m_currency_id);
+        Option::instance().setBaseCurrencyID(m_currency_id);
     }
 
     wxTextCtrl* stun = static_cast<wxTextCtrl*>(FindWindow(ID_DIALOG_OPTIONS_TEXTCTRL_USERNAME));
-    Option::instance().UserName(stun->GetValue());
+    Option::instance().setUserName(stun->GetValue());
 
     wxComboBox* cbln = static_cast<wxComboBox*>(FindWindow(ID_DIALOG_OPTIONS_LOCALE));
     wxString value;
     if (doFormatDoubleValue(cbln->GetValue(), value)) {
-        Option::instance().LocaleName(cbln->GetValue());
+        Option::instance().setLocaleName(cbln->GetValue());
     }
     else {
-        mmErrorDialogs::ToolTip4Object(m_itemListOfLocales, _("Invalid value"), _("Locale"), wxICON_ERROR);
+        mmErrorDialogs::ToolTip4Object(m_itemListOfLocales, _t("Invalid value"), _t("Locale"), wxICON_ERROR);
         return false;
     }
 
-    Option::instance().CurrencyHistoryEnabled(m_currency_history->GetValue());
+    Option::instance().setUseCurrencyHistory(m_currency_history->GetValue());
 
     Option::instance().setDateFormat(m_date_format);
     SaveFinancialYearStart();
 
-    Model_Setting::instance().Set(INIDB_USE_ORG_DATE_COPYPASTE, m_use_org_date_copy_paste->GetValue());
-    Model_Setting::instance().Set(INIDB_USE_ORG_DATE_DUPLICATE, m_use_org_date_duplicate->GetValue());
-    Model_Setting::instance().Set(INIDB_USE_TRANSACTION_SOUND, m_use_sound->GetSelection());
+    Model_Setting::instance().setBool(INIDB_USE_ORG_DATE_COPYPASTE, m_use_org_date_copy_paste->GetValue());
+    Model_Setting::instance().setBool(INIDB_USE_ORG_DATE_DUPLICATE, m_use_org_date_duplicate->GetValue());
+    Model_Setting::instance().setInt(INIDB_USE_TRANSACTION_SOUND, m_use_sound->GetSelection());
 
     return true;
 }
@@ -343,7 +342,7 @@
         for (auto &i : test) {
             if (i < 0) i = ' ';
         }
-        result = wxString::Format(_("Currency value sample: %s"), test);
+        result = wxString::Format(_t("Currency value sample: %s"), test);
     }
     catch (std::exception & ex) {
         result = wxString(ex.what());
@@ -360,9 +359,9 @@
     wxLanguage lang = static_cast<wxLanguage>(event.GetId() - wxID_LAST - 1);
     if (lang != m_app->getGUILanguage() && m_app->setGUILanguage(lang))
         mmErrorDialogs::MessageWarning(this
-            , _("The language for this application has been changed. "
+            , _t("The language for this application has been changed. "
                 "The change will take effect the next time the application is started.")
-            , _("Language change"));
+            , _t("Language change"));
 }
 
 void OptionSettingsGeneral::OnMouseLeftDown(wxCommandEvent& event)
@@ -370,7 +369,7 @@
     wxMenu menuLang;
     wxArrayString lang_files = wxTranslations::Get()->GetAvailableTranslations("mmex");
     std::map<wxString, std::pair<int, wxString>> langs;
-    menuLang.AppendRadioItem(wxID_LAST + 1 + wxLANGUAGE_DEFAULT, _("System default"))
+    menuLang.AppendRadioItem(wxID_LAST + 1 + wxLANGUAGE_DEFAULT, _t("System default"))
         ->Check(m_app->getGUILanguage() == wxLANGUAGE_DEFAULT);
     for (auto & file : lang_files)
     {
diff -Naur a/src/optionsettingshome.cpp b/src/optionsettingshome.cpp
--- a/src/optionsettingshome.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/optionsettingshome.cpp	2025-07-09 01:46:59.668940626 +0200
@@ -36,12 +36,13 @@
     m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmCurrentYear()));
     m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmCurrentYearToDate()));
     m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmLastYear()));
+    m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmLastYearBefore()));
     m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmCurrentFinancialYear()));
     m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmCurrentFinancialYearToDate()));
     m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmLastFinancialYear()));
     m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmAllTime()));
     m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmLast365Days()));
-    m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmLastNDays(Model_Infotable::instance().GetIntInfo("HOMEPAGE_INCEXP_DAYS", 14))));
+    m_all_date_ranges.push_back(wxSharedPtr<mmDateRange>(new mmLastNDays(Model_Infotable::instance().getInt("HOMEPAGE_INCEXP_DAYS", 14))));
 
     int sel_id = Option::instance().getHomePageIncExpRange();
     if (sel_id >= static_cast<int>(m_all_date_ranges.size()))
@@ -75,7 +76,7 @@
     homePanelSizer0->Add(home_panel, wxSizerFlags(g_flagsExpand).Proportion(0));
 
     // Income vs Expense
-    wxStaticBox* totalsStaticBox = new wxStaticBox(home_panel, wxID_STATIC, _("Income vs. Expenses"));
+    wxStaticBox* totalsStaticBox = new wxStaticBox(home_panel, wxID_STATIC, _t("Income vs. Expenses"));
     SetBoldFont(totalsStaticBox);
     wxStaticBoxSizer* totalsStaticBoxSizer = new wxStaticBoxSizer(totalsStaticBox, wxHORIZONTAL);
     homePanelSizer->Add(totalsStaticBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
@@ -88,7 +89,7 @@
     for (const auto & date_range : m_all_date_ranges) {
         m_incExpChoice->Append(date_range.get()->local_title());
     }
-    m_incExpChoice->SetString(15, _("Last N Days"));
+    m_incExpChoice->SetString(15, _t("Last N Days"));
 
     int sel_id = Option::instance().getHomePageIncExpRange();
     if (sel_id < 0 || static_cast<size_t>(sel_id) >= m_all_date_ranges.size())
@@ -99,7 +100,7 @@
     m_inc_vs_exp_date_range = m_all_date_ranges[sel_id];
     nDays_ = new wxSpinCtrl(home_panel, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS,
         1, (wxDate::Today() - wxDateTime(1, wxDate::Month::Jan, 1900)).GetDays(),
-        Model_Infotable::instance().GetIntInfo("HOMEPAGE_INCEXP_DAYS", 14));
+        Model_Infotable::instance().getInt("HOMEPAGE_INCEXP_DAYS", 14));
     nDays_->Bind(wxEVT_SPINCTRL, [this](wxSpinEvent& event) {
         dynamic_cast<mmLastNDays*>(m_all_date_ranges.back().get())->SetRange(nDays_->GetValue());
         event.Skip();
@@ -117,7 +118,7 @@
     int sel_id = m_incExpChoice->GetSelection();
     Option::instance().setHomePageIncExpRange(sel_id);
     if (sel_id == 15)
-        Model_Infotable::instance().Set("HOMEPAGE_INCEXP_DAYS", nDays_->GetValue());
+        Model_Infotable::instance().setInt("HOMEPAGE_INCEXP_DAYS", nDays_->GetValue());
     return true;
 }
 
diff -Naur a/src/optionsettingsmisc.cpp b/src/optionsettingsmisc.cpp
--- a/src/optionsettingsmisc.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/optionsettingsmisc.cpp	2025-07-09 01:46:59.668940626 +0200
@@ -61,7 +61,7 @@
     misc_panel->SetSizer(othersPanelSizer);
     othersPanelSizer0->Add(misc_panel, wxSizerFlags(g_flagsExpand).Proportion(0));
 
-    wxStaticText* itemStaticTextURL = new wxStaticText(misc_panel, wxID_STATIC, _("Stock Quote Web Page"));
+    wxStaticText* itemStaticTextURL = new wxStaticText(misc_panel, wxID_STATIC, _t("Stock Quote Web Page"));
     SetBoldFont(itemStaticTextURL);
 
     othersPanelSizer->Add(itemStaticTextURL, g_flagsV);
@@ -72,104 +72,106 @@
     //list.Add("https://www.marketwatch.com/investing/stock/%s");
     //list.Add("https://www.ifcmarkets.co.in/en/market-data/stocks-prices/%s");
 
-    wxString stockURL = Model_Infotable::instance().GetStringInfo("STOCKURL", mmex::weblink::DefStockUrl);
+    wxString stockURL = Model_Infotable::instance().getString("STOCKURL", mmex::weblink::DefStockUrl);
     wxComboBox* itemListOfURL = new wxComboBox(misc_panel, ID_DIALOG_OPTIONS_TEXTCTRL_STOCKURL, ""
         , wxDefaultPosition, wxDefaultSize, list);
     itemListOfURL->SetValue(stockURL);
 
     othersPanelSizer->Add(itemListOfURL, wxSizerFlags(g_flagsExpand).Proportion(0));
-    mmToolTip(itemListOfURL, _("Clear the field to Reset the value to system default."));
+    mmToolTip(itemListOfURL, _t("Clear the field to Reset the value to system default."));
 
     // Share Precision
     wxFlexGridSizer* share_precision_sizer = new wxFlexGridSizer(0, 3, 0, 0);
-    share_precision_sizer->Add(new wxStaticText(misc_panel, wxID_STATIC, _("Share Precision")), g_flagsH);
+    share_precision_sizer->Add(new wxStaticText(misc_panel, wxID_STATIC, _t("Share Precision")), g_flagsH);
 
     m_share_precision = new wxSpinCtrl(misc_panel, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize
-        , wxSP_ARROW_KEYS, 2, 10, Option::instance().SharePrecision());
-    m_share_precision->SetValue(Option::instance().SharePrecision());
-    mmToolTip(m_share_precision, _("Set the precision for Share prices"));
+        , wxSP_ARROW_KEYS, 2, 10, Option::instance().getSharePrecision());
+    m_share_precision->SetValue(Option::instance().getSharePrecision());
+    mmToolTip(m_share_precision, _t("Set the precision for Share prices"));
     share_precision_sizer->Add(m_share_precision, wxSizerFlags(g_flagsExpand).Proportion(0));
 
-    m_refresh_quotes_on_open = new wxCheckBox(misc_panel, wxID_REFRESH, _("Refresh at Startup"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    m_refresh_quotes_on_open->SetValue(Model_Setting::instance().GetBoolSetting("REFRESH_STOCK_QUOTES_ON_OPEN", false));
+    m_refresh_quotes_on_open = new wxCheckBox(misc_panel, wxID_REFRESH, _t("Refresh at Startup"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    m_refresh_quotes_on_open->SetValue(Model_Setting::instance().getBool("REFRESH_STOCK_QUOTES_ON_OPEN", false));
     share_precision_sizer->Add(m_refresh_quotes_on_open, wxSizerFlags(g_flagsH).Border(wxLEFT, 20));
     othersPanelSizer->Add(share_precision_sizer, g_flagsBorder1V);
 
     // Asset Compounding
     wxFlexGridSizer* asset_compounding_sizer = new wxFlexGridSizer(0, 3, 0, 0);
-    asset_compounding_sizer->Add(new wxStaticText(misc_panel, wxID_STATIC, _("Asset Compounding Period")), g_flagsH);
+    asset_compounding_sizer->Add(new wxStaticText(misc_panel, wxID_STATIC, _t("Asset Compounding Period")), g_flagsH);
     m_asset_compounding = new wxChoice(misc_panel, ID_DIALOG_OPTIONS_ASSET_COMPOUNDING);
     for (const auto& a : Option::COMPOUNDING_NAME)
         m_asset_compounding->Append(wxGetTranslation(a.second));
-    m_asset_compounding->SetSelection(Option::instance().AssetCompounding());
+    m_asset_compounding->SetSelection(Option::instance().getAssetCompounding());
     mmToolTip(m_asset_compounding,
-        _("Select the compounding period for the appreciation/depreciation rate of assets")
+        _t("Select the compounding period for the appreciation/depreciation rate of assets")
     );
     asset_compounding_sizer->Add(m_asset_compounding, wxSizerFlags(g_flagsExpand).Proportion(0));
     othersPanelSizer->Add(asset_compounding_sizer, g_flagsBorder1V);
 
     // New transaction dialog settings
-    wxStaticBox* transSettingsStaticBox = new wxStaticBox(misc_panel, wxID_STATIC, _("New Transaction"));
+    wxStaticBox* transSettingsStaticBox = new wxStaticBox(misc_panel, wxID_STATIC, _t("New Transaction"));
     SetBoldFont(transSettingsStaticBox);
     
     wxStaticBoxSizer* transSettingsStaticBoxSizer = new wxStaticBoxSizer(transSettingsStaticBox, wxVERTICAL);
     othersPanelSizer->Add(transSettingsStaticBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
 
     wxArrayString default_values;
-    default_values.Add(_("None"));
-    default_values.Add(_("Last Used"));
+    default_values.Add(_t("None"));
+    default_values.Add(_t("Last Used"));
 
     wxChoice* defaultCategoryTransferChoice = new wxChoice(misc_panel
         , ID_DIALOG_OPTIONS_DEFAULT_TRANSACTION_CATEGORY_TRANSFER
         , wxDefaultPosition, wxDefaultSize, default_values);
-    defaultCategoryTransferChoice->SetSelection(Option::instance().TransCategorySelectionTransfer());
+    defaultCategoryTransferChoice->SetSelection(Option::instance().getTransCategoryTransferNone());
 
     wxChoice* defaultDateChoice = new wxChoice(misc_panel
         , ID_DIALOG_OPTIONS_DEFAULT_TRANSACTION_DATE
         , wxDefaultPosition, wxDefaultSize, default_values);
-    defaultDateChoice->SetSelection(Option::instance().TransDateDefault());
+    defaultDateChoice->SetSelection(Option::instance().getTransDateDefault());
 
-    default_values.Add(_("Unused"));
+    default_values.Add(_t("Unused"));
     wxChoice* defaultPayeeChoice = new wxChoice(misc_panel
         , ID_DIALOG_OPTIONS_DEFAULT_TRANSACTION_PAYEE
         , wxDefaultPosition, wxDefaultSize, default_values);
-    defaultPayeeChoice->SetSelection(Option::instance().TransPayeeSelection());
+    defaultPayeeChoice->SetSelection(Option::instance().getTransPayeeNone());
 
-    default_values[1] = (_("Last used for payee"));
-    default_values.Add(_("Use default for payee"));
+    default_values[1] = (_t("Last used for payee"));
+    default_values.Add(_t("Use default for payee"));
     wxChoice* defaultCategoryNonTransferChoice = new wxChoice(misc_panel
         , ID_DIALOG_OPTIONS_DEFAULT_TRANSACTION_CATEGORY_NONTRANSFER
         , wxDefaultPosition, wxDefaultSize, default_values);
-    defaultCategoryNonTransferChoice->SetSelection(Option::instance().TransCategorySelectionNonTransfer());
+    defaultCategoryNonTransferChoice->SetSelection(Option::instance().getTransCategoryNone());
 
     wxChoice* default_status = new wxChoice(misc_panel
         , ID_DIALOG_OPTIONS_DEFAULT_TRANSACTION_STATUS);
-    for (const auto& i : Model_Checking::STATUS_STR)
-        default_status->Append(wxGetTranslation(i), new wxStringClientData(i));
-    default_status->SetSelection(Option::instance().TransStatusReconciled());
+    for (int i = 0; i < Model_Checking::STATUS_ID_size; ++i) {
+        wxString status = Model_Checking::status_name(i);
+        default_status->Append(wxGetTranslation(status), new wxStringClientData(status));
+    }
+    default_status->SetSelection(Option::instance().getTransStatusReconciled());
 
     wxArrayString true_false;
-    true_false.Add(wxTRANSLATE("Yes"));
-    true_false.Add(wxTRANSLATE("No"));
+    true_false.Add(_n("Yes"));
+    true_false.Add(_n("No"));
     wxChoice* bulk_enter = new wxChoice(misc_panel, ID_DIALOG_OPTIONS_BULK_ENTER);
     for (const auto& i : true_false)
         bulk_enter->Append(wxGetTranslation(i), new wxStringClientData(i));
-    bulk_enter->SetSelection(Option::instance().get_bulk_transactions() ? 0 : 1);
+    bulk_enter->SetSelection(Option::instance().getBulkTransactions() ? 0 : 1);
 
     wxFlexGridSizer* newTransflexGridSizer = new wxFlexGridSizer(0, 2, 0, 0);
     newTransflexGridSizer->AddGrowableCol(1, 0);
     transSettingsStaticBoxSizer->Add(newTransflexGridSizer);
-    newTransflexGridSizer->Add(new wxStaticText(misc_panel, wxID_STATIC, _("Default Date")), g_flagsH);
+    newTransflexGridSizer->Add(new wxStaticText(misc_panel, wxID_STATIC, _t("Default Date")), g_flagsH);
     newTransflexGridSizer->Add(defaultDateChoice, g_flagsExpand);
-    newTransflexGridSizer->Add(new wxStaticText(misc_panel, wxID_STATIC, _("Default Payee")), g_flagsH);
+    newTransflexGridSizer->Add(new wxStaticText(misc_panel, wxID_STATIC, _t("Default Payee")), g_flagsH);
     newTransflexGridSizer->Add(defaultPayeeChoice, g_flagsExpand);
-    newTransflexGridSizer->Add(new wxStaticText(misc_panel, wxID_STATIC, _("Default Deposit/Withdrawal Category")), g_flagsH);
+    newTransflexGridSizer->Add(new wxStaticText(misc_panel, wxID_STATIC, _t("Default Deposit/Withdrawal Category")), g_flagsH);
     newTransflexGridSizer->Add(defaultCategoryNonTransferChoice, g_flagsExpand);
-    newTransflexGridSizer->Add(new wxStaticText(misc_panel, wxID_STATIC, _("Default Transfer Category")), g_flagsH);
+    newTransflexGridSizer->Add(new wxStaticText(misc_panel, wxID_STATIC, _t("Default Transfer Category")), g_flagsH);
     newTransflexGridSizer->Add(defaultCategoryTransferChoice, g_flagsExpand);
-    newTransflexGridSizer->Add(new wxStaticText(misc_panel, wxID_STATIC, _("Default Status")), g_flagsH);
+    newTransflexGridSizer->Add(new wxStaticText(misc_panel, wxID_STATIC, _t("Default Status")), g_flagsH);
     newTransflexGridSizer->Add(default_status, g_flagsExpand);
-    newTransflexGridSizer->Add(new wxStaticText(misc_panel, wxID_STATIC, _("Bulk Transactions")), g_flagsH);
+    newTransflexGridSizer->Add(new wxStaticText(misc_panel, wxID_STATIC, _t("Bulk Transactions")), g_flagsH);
     newTransflexGridSizer->Add(bulk_enter, g_flagsExpand);
 
     //----------------------------------------------
@@ -180,51 +182,51 @@
     othersPanelSizer->Add(itemBoxSizerStockURL);
 
     // Database Settings
-    wxStaticBox* databaseStaticBox = new wxStaticBox(misc_panel, wxID_STATIC, _("Database"));
+    wxStaticBox* databaseStaticBox = new wxStaticBox(misc_panel, wxID_STATIC, _t("Database"));
     SetBoldFont(databaseStaticBox);
 
     wxStaticBoxSizer* databaseStaticBoxSizer = new wxStaticBoxSizer(databaseStaticBox, wxVERTICAL);
     othersPanelSizer->Add(databaseStaticBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
 
     wxCheckBox* databaseCheckBox = new wxCheckBox(misc_panel, ID_DIALOG_OPTIONS_CHK_BACKUP
-        , _("Backup database on startup"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+        , _t("Backup database on startup"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     databaseCheckBox->SetValue(GetIniDatabaseCheckboxValue("BACKUPDB", false));
-    databaseCheckBox->SetToolTip(_("When MMEX starts,\n"
+    databaseCheckBox->SetToolTip(_t("When MMEX starts,\n"
         "create the backup database: dbFile_start_YYYY-MM-DD.bak"));
     databaseStaticBoxSizer->Add(databaseCheckBox, g_flagsV);
 
     wxCheckBox* databaseUpdateCheckBox = new wxCheckBox(misc_panel, ID_DIALOG_OPTIONS_CHK_BACKUP_UPDATE
-        , _("Backup database on exit"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+        , _t("Backup database on exit"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     databaseUpdateCheckBox->SetValue(GetIniDatabaseCheckboxValue("BACKUPDB_UPDATE", true));
-    databaseUpdateCheckBox->SetToolTip(_("When MMEX shuts down and changes were made to the database,\n"
+    databaseUpdateCheckBox->SetToolTip(_t("When MMEX shuts down and changes were made to the database,\n"
         "create or update the backup database: dbFile_update_YYYY-MM-DD.bak"));
     databaseStaticBoxSizer->Add(databaseUpdateCheckBox, g_flagsV);
 
-    int max = Model_Setting::instance().GetIntSetting("MAX_BACKUP_FILES", 4);
+    int max = Model_Setting::instance().getInt("MAX_BACKUP_FILES", 4);
     m_max_files = new wxSpinCtrl(misc_panel, wxID_ANY
         , wxEmptyString, wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 1, 999, max);
     m_max_files->SetValue(max);
-    mmToolTip(m_max_files, _("Specify max number of backup files"));
+    mmToolTip(m_max_files, _t("Specify max number of backup files"));
 
     wxFlexGridSizer* flex_sizer2 = new wxFlexGridSizer(0, 2, 0, 0);
-    flex_sizer2->Add(new wxStaticText(misc_panel, wxID_STATIC, _("Max Files")), g_flagsH);
+    flex_sizer2->Add(new wxStaticText(misc_panel, wxID_STATIC, _t("Max Files")), g_flagsH);
     flex_sizer2->Add(m_max_files, g_flagsH);
     databaseStaticBoxSizer->Add(flex_sizer2);
 
-    int days = Model_Setting::instance().GetIntSetting("DELETED_TRANS_RETAIN_DAYS", 30);
+    int days = Model_Setting::instance().getInt("DELETED_TRANS_RETAIN_DAYS", 30);
     m_deleted_trans_retain_days = new wxSpinCtrl(misc_panel, wxID_ANY
         , wxEmptyString, wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 999, days);
     m_deleted_trans_retain_days->SetValue(days);
-    mmToolTip(m_deleted_trans_retain_days, _("Specify number of days to retain deleted transactions. Transactions older than this will be automatically purged upon database open."));
+    mmToolTip(m_deleted_trans_retain_days, _t("Specify number of days to retain deleted transactions. Transactions older than this will be automatically purged upon database open."));
     wxFlexGridSizer* flex_sizer3 = new wxFlexGridSizer(0, 2, 0, 0);
-    flex_sizer3->Add(new wxStaticText(misc_panel, wxID_STATIC, _("Days to retain deleted transactions")), g_flagsH);
+    flex_sizer3->Add(new wxStaticText(misc_panel, wxID_STATIC, _t("Days to retain deleted transactions")), g_flagsH);
     flex_sizer3->Add(m_deleted_trans_retain_days, g_flagsBorder1H);
     databaseStaticBoxSizer->Add(flex_sizer3);
 
     //CSV Import
-    const wxString delimiter = Model_Infotable::instance().GetStringInfo("DELIMITER", mmex::DEFDELIMTER);
+    const wxString delimiter = Model_Infotable::instance().getString("DELIMITER", mmex::DEFDELIMTER);
 
-    wxStaticBox* csvStaticBox = new wxStaticBox(misc_panel, wxID_ANY, _("CSV"));
+    wxStaticBox* csvStaticBox = new wxStaticBox(misc_panel, wxID_ANY, _t("CSV"));
     SetBoldFont(csvStaticBox);
     wxStaticBoxSizer* csvStaticBoxSizer = new wxStaticBoxSizer(csvStaticBox, wxVERTICAL);
 
@@ -232,10 +234,10 @@
     wxFlexGridSizer* csvStaticBoxSizerGrid = new wxFlexGridSizer(0, 2, 0, 10);
     csvStaticBoxSizer->Add(csvStaticBoxSizerGrid, g_flagsV);
 
-    csvStaticBoxSizerGrid->Add(new wxStaticText(misc_panel, wxID_STATIC, _("Delimiter")), g_flagsH);
+    csvStaticBoxSizerGrid->Add(new wxStaticText(misc_panel, wxID_STATIC, _t("Delimiter")), g_flagsH);
     wxTextCtrl* textDelimiter4 = new wxTextCtrl(misc_panel
         , ID_DIALOG_OPTIONS_TEXTCTRL_DELIMITER4, delimiter);
-    mmToolTip(textDelimiter4, _("Specify the delimiter to use when importing/exporting CSV files"));
+    mmToolTip(textDelimiter4, _t("Specify the delimiter to use when importing/exporting CSV files"));
     textDelimiter4->SetMaxLength(1);
     csvStaticBoxSizerGrid->Add(textDelimiter4, g_flagsH);
 
@@ -260,7 +262,7 @@
     wxString stockURL = url->GetValue().Trim(false).Trim();
     if (!stockURL.IsEmpty())
     {
-        Model_Infotable::instance().Set("STOCKURL", stockURL);
+        Model_Infotable::instance().setString("STOCKURL", stockURL);
     }
     else
     {
@@ -273,40 +275,40 @@
 bool OptionSettingsMisc::SaveSettings()
 {
     wxChoice* itemChoice = static_cast<wxChoice*>(FindWindow(ID_DIALOG_OPTIONS_DEFAULT_TRANSACTION_PAYEE));
-    Option::instance().TransPayeeSelection(itemChoice->GetSelection());
+    Option::instance().setTransPayeeNone(itemChoice->GetSelection());
 
     itemChoice = static_cast<wxChoice*>(FindWindow(ID_DIALOG_OPTIONS_DEFAULT_TRANSACTION_CATEGORY_NONTRANSFER));
-    Option::instance().TransCategorySelectionNonTransfer(itemChoice->GetSelection());
+    Option::instance().setTransCategoryNone(itemChoice->GetSelection());
 
     itemChoice = static_cast<wxChoice*>(FindWindow(ID_DIALOG_OPTIONS_DEFAULT_TRANSACTION_CATEGORY_TRANSFER));
-    Option::instance().TransCategorySelectionTransfer(itemChoice->GetSelection());
+    Option::instance().setTransCategoryTransferNone(itemChoice->GetSelection());
 
     itemChoice = static_cast<wxChoice*>(FindWindow(ID_DIALOG_OPTIONS_DEFAULT_TRANSACTION_STATUS));
-    Option::instance().TransStatusReconciled(itemChoice->GetSelection());
+    Option::instance().setTransStatusReconciled(itemChoice->GetSelection());
 
     itemChoice = static_cast<wxChoice*>(FindWindow(ID_DIALOG_OPTIONS_DEFAULT_TRANSACTION_DATE));
-    Option::instance().TransDateDefault(itemChoice->GetSelection());
+    Option::instance().setTransDateDefault(itemChoice->GetSelection());
 
     itemChoice = static_cast<wxChoice*>(FindWindow(ID_DIALOG_OPTIONS_BULK_ENTER));
-    Option::instance().set_bulk_transactions(itemChoice->GetSelection() == 0);
+    Option::instance().setBulkTransactions(itemChoice->GetSelection() == 0);
 
     SaveStocksUrl();
-    Option::instance().SharePrecision(m_share_precision->GetValue());
-    Option::instance().AssetCompounding(m_asset_compounding->GetSelection());
+    Option::instance().setSharePrecision(m_share_precision->GetValue());
+    Option::instance().setAssetCompounding(m_asset_compounding->GetSelection());
 
     wxCheckBox* itemCheckBox = static_cast<wxCheckBox*>(FindWindow(ID_DIALOG_OPTIONS_CHK_BACKUP));
-    Model_Setting::instance().Set("BACKUPDB", itemCheckBox->GetValue());
+    Model_Setting::instance().setBool("BACKUPDB", itemCheckBox->GetValue());
 
     wxCheckBox* itemCheckBoxUpdate = static_cast<wxCheckBox*>(FindWindow(ID_DIALOG_OPTIONS_CHK_BACKUP_UPDATE));
-    Model_Setting::instance().Set("BACKUPDB_UPDATE", itemCheckBoxUpdate->GetValue());
+    Model_Setting::instance().setBool("BACKUPDB_UPDATE", itemCheckBoxUpdate->GetValue());
 
-    Model_Setting::instance().Set("MAX_BACKUP_FILES", m_max_files->GetValue());
-    Model_Setting::instance().Set("DELETED_TRANS_RETAIN_DAYS", m_deleted_trans_retain_days->GetValue());
-    Model_Setting::instance().Set("REFRESH_STOCK_QUOTES_ON_OPEN", m_refresh_quotes_on_open->IsChecked());
+    Model_Setting::instance().setInt("MAX_BACKUP_FILES", m_max_files->GetValue());
+    Model_Setting::instance().setInt("DELETED_TRANS_RETAIN_DAYS", m_deleted_trans_retain_days->GetValue());
+    Model_Setting::instance().setBool("REFRESH_STOCK_QUOTES_ON_OPEN", m_refresh_quotes_on_open->IsChecked());
 
     wxTextCtrl* st = static_cast<wxTextCtrl*>(FindWindow(ID_DIALOG_OPTIONS_TEXTCTRL_DELIMITER4));
     const wxString& delim = st->GetValue();
-    if (!delim.IsEmpty()) Model_Infotable::instance().Set("DELIMITER", delim);
+    if (!delim.IsEmpty()) Model_Infotable::instance().setString("DELIMITER", delim);
 
     return true;
 }
diff -Naur a/src/optionsettingsnet.cpp b/src/optionsettingsnet.cpp
--- a/src/optionsettingsnet.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/optionsettingsnet.cpp	2025-07-09 01:46:59.668940626 +0200
@@ -62,7 +62,7 @@
     networkPanelSizer0->Add(network_panel, wxSizerFlags(g_flagsExpand).Proportion(0));
 
     //WebApp settings
-    wxStaticBox* WebAppStaticBox = new wxStaticBox(network_panel, wxID_STATIC, _("WebApp"));
+    wxStaticBox* WebAppStaticBox = new wxStaticBox(network_panel, wxID_STATIC, _t("WebApp"));
     SetBoldFont(WebAppStaticBox);
     wxStaticBoxSizer* WebAppStaticBoxSizer = new wxStaticBoxSizer(WebAppStaticBox, wxVERTICAL);
     wxFlexGridSizer* WebAppStaticBoxSizerGrid = new wxFlexGridSizer(0, 2, 0, 10);
@@ -71,113 +71,113 @@
     networkPanelSizer->Add(WebAppStaticBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
     WebAppStaticBoxSizer->Add(WebAppStaticBoxSizerGrid, wxSizerFlags(g_flagsExpand).Proportion(0));
 
-    WebAppStaticBoxSizerGrid->Add(new wxStaticText(network_panel, wxID_STATIC, _("URL")), g_flagsH);
-    wxString WebAppURL = Model_Infotable::instance().GetStringInfo("WEBAPPURL", "");
+    WebAppStaticBoxSizerGrid->Add(new wxStaticText(network_panel, wxID_STATIC, _t("URL")), g_flagsH);
+    wxString WebAppURL = Model_Infotable::instance().getString("WEBAPPURL", "");
     wxTextCtrl* WebAppURLTextCtr = new wxTextCtrl(network_panel, ID_DIALOG_OPTIONS_TEXTCTRL_WEBAPPURL,
         WebAppURL, wxDefaultPosition, wxSize(300, -1));
-    mmToolTip(WebAppURLTextCtr, _("Specify the Web App URL without final slash"));
+    mmToolTip(WebAppURLTextCtr, _t("Specify the Web App URL without final slash"));
     WebAppStaticBoxSizerGrid->Add(WebAppURLTextCtr, 1, wxEXPAND | wxALL, 5);
 
-    WebAppStaticBoxSizerGrid->Add(new wxStaticText(network_panel, wxID_STATIC, _("GUID")), g_flagsH);
-    wxString WebAppGUID = Model_Infotable::instance().GetStringInfo("WEBAPPGUID", "");
+    WebAppStaticBoxSizerGrid->Add(new wxStaticText(network_panel, wxID_STATIC, _t("GUID")), g_flagsH);
+    wxString WebAppGUID = Model_Infotable::instance().getString("WEBAPPGUID", "");
     wxTextCtrl* WebAppGUIDTextCtr = new wxTextCtrl(network_panel, ID_DIALOG_OPTIONS_TEXTCTRL_WEBAPPGUID,
         WebAppGUID, wxDefaultPosition, wxSize(300, -1));
-    mmToolTip(WebAppGUIDTextCtr, _("Specify the Web App GUID"));
+    mmToolTip(WebAppGUIDTextCtr, _t("Specify the Web App GUID"));
     WebAppGUIDTextCtr->SetHint("{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}");
     WebAppStaticBoxSizerGrid->Add(WebAppGUIDTextCtr, 1, wxEXPAND | wxALL, 5);
 
-    wxHyperlinkCtrl* WebAppLink = new wxHyperlinkCtrl(network_panel, wxID_STATIC, _("More information about WebApp"), mmex::weblink::WebApp);
+    wxHyperlinkCtrl* WebAppLink = new wxHyperlinkCtrl(network_panel, wxID_STATIC, _t("More information about WebApp"), mmex::weblink::WebApp);
     WebAppStaticBoxSizer->Add(WebAppLink, wxSizerFlags(g_flagsV).Border(wxLEFT, 10));
 
     // Proxy Settings
-    wxStaticBox* proxyStaticBox = new wxStaticBox(network_panel, wxID_STATIC, _("Proxy"));
+    wxStaticBox* proxyStaticBox = new wxStaticBox(network_panel, wxID_STATIC, _t("Proxy"));
     SetBoldFont(proxyStaticBox);
     wxStaticBoxSizer* proxyStaticBoxSizer = new wxStaticBoxSizer(proxyStaticBox, wxVERTICAL);
     networkPanelSizer->Add(proxyStaticBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
 
-    wxString proxyName = Model_Setting::instance().GetStringSetting("PROXYIP", "");
+    wxString proxyName = Model_Setting::instance().getString("PROXYIP", "");
     m_proxy_address = new wxTextCtrl(network_panel, ID_DIALOG_OPTIONS_TEXTCTRL_PROXY
         , proxyName, wxDefaultPosition, wxSize(150, -1));
-    mmToolTip(m_proxy_address, _("Specify the proxy IP address"));
+    mmToolTip(m_proxy_address, _t("Specify the proxy IP address"));
 
-    int proxyPort = Model_Setting::instance().GetIntSetting("PROXYPORT", 0);
+    int proxyPort = Model_Setting::instance().getInt("PROXYPORT", 0);
     m_proxy_port = new wxSpinCtrl(network_panel, wxID_ANY,
         wxEmptyString, wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 65535, proxyPort);
     m_proxy_port->SetValue(proxyPort);
-    mmToolTip(m_proxy_port, _("Specify proxy port number"));
+    mmToolTip(m_proxy_port, _t("Specify proxy port number"));
 
     wxFlexGridSizer* flex_sizer3 = new wxFlexGridSizer(0, 4, 0, 0);
     flex_sizer3->AddGrowableCol(1);
-    flex_sizer3->Add(new wxStaticText(network_panel, wxID_STATIC, _("Proxy")), g_flagsH);
+    flex_sizer3->Add(new wxStaticText(network_panel, wxID_STATIC, _t("Proxy")), g_flagsH);
     flex_sizer3->Add(m_proxy_address, 1, wxEXPAND | wxALL, 5);
-    flex_sizer3->Add(new wxStaticText(network_panel, wxID_STATIC, _("Port")), g_flagsH);
+    flex_sizer3->Add(new wxStaticText(network_panel, wxID_STATIC, _t("Port")), g_flagsH);
     flex_sizer3->Add(m_proxy_port, 1, wxEXPAND | wxALL, 5);
 
     proxyStaticBoxSizer->Add(flex_sizer3, wxSizerFlags(g_flagsExpand).Proportion(0));
 
     //Usage data send
-    wxStaticBox* usageStaticBox = new wxStaticBox(network_panel, wxID_STATIC, _("Usage Statistics"));
+    wxStaticBox* usageStaticBox = new wxStaticBox(network_panel, wxID_STATIC, _t("Usage Statistics"));
     SetBoldFont(usageStaticBox);
     wxStaticBoxSizer* usageStaticBoxSizer = new wxStaticBoxSizer(usageStaticBox, wxVERTICAL);
     networkPanelSizer->Add(usageStaticBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
 
     m_send_data = new wxCheckBox(network_panel, wxID_ANY
-        , _("Send anonymous statistics usage data"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    m_send_data->SetValue(Option::instance().SendUsageStatistics());
-    mmToolTip(m_send_data, _("Enable to help us sending anonymous data about MMEX usage."));
+        , _t("Send anonymous statistics usage data"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    m_send_data->SetValue(Option::instance().getSendUsageStats());
+    mmToolTip(m_send_data, _t("Enable to help us sending anonymous data about MMEX usage."));
 
     usageStaticBoxSizer->Add(m_send_data, g_flagsV);
 
      //  News updates
-    wxStaticBox* newsStaticBox = new wxStaticBox(network_panel, wxID_STATIC, _("News"));
+    wxStaticBox* newsStaticBox = new wxStaticBox(network_panel, wxID_STATIC, _t("News"));
     SetBoldFont(newsStaticBox);
     wxStaticBoxSizer* newsStaticBoxSizer = new wxStaticBoxSizer(newsStaticBox, wxVERTICAL);
     networkPanelSizer->Add(newsStaticBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
 
     m_check_news = new wxCheckBox(network_panel, wxID_ANY
-        , _("Check for latest news on startup"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    m_check_news->SetValue(Option::instance().CheckNewsOnStartup());
-    mmToolTip(m_check_news, _("Enable to allow news to be checked on application start"));
+        , _t("Check for latest news on startup"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    m_check_news->SetValue(Option::instance().getCheckNews());
+    mmToolTip(m_check_news, _t("Enable to allow news to be checked on application start"));
     
     newsStaticBoxSizer->Add(m_check_news, g_flagsV);
 
     // Communication timeout
-    wxStaticBox* timeoutStaticBox = new wxStaticBox(network_panel, wxID_STATIC, _("Timeout"));
+    wxStaticBox* timeoutStaticBox = new wxStaticBox(network_panel, wxID_STATIC, _t("Timeout"));
     SetBoldFont(timeoutStaticBox);
     wxStaticBoxSizer* timeoutStaticBoxSizer = new wxStaticBoxSizer(timeoutStaticBox, wxVERTICAL);
     networkPanelSizer->Add(timeoutStaticBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
 
-    int nTimeout = Model_Setting::instance().GetIntSetting("NETWORKTIMEOUT", 10);
+    int nTimeout = Model_Setting::instance().getInt("NETWORKTIMEOUT", 10);
     m_network_timeout = new wxSpinCtrl(network_panel, wxID_ANY,
         wxEmptyString, wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 1, 150, nTimeout);
     m_network_timeout->SetValue(nTimeout);
-    mmToolTip(m_network_timeout, _("Specify a network communication timeout value to use."));
+    mmToolTip(m_network_timeout, _t("Specify a network communication timeout value to use."));
 
     wxFlexGridSizer* flex_sizer5 = new wxFlexGridSizer(0, 2, 0, 0);
-    flex_sizer5->Add(new wxStaticText(network_panel, wxID_STATIC, _("Seconds")), g_flagsH);
+    flex_sizer5->Add(new wxStaticText(network_panel, wxID_STATIC, _t("Seconds")), g_flagsH);
     flex_sizer5->Add(m_network_timeout, g_flagsH);
 
     timeoutStaticBoxSizer->Add(flex_sizer5, g_flagsV);
 
     //Updates check
-    wxStaticBox* updateStaticBox = new wxStaticBox(network_panel, wxID_STATIC, _("Updates"));
+    wxStaticBox* updateStaticBox = new wxStaticBox(network_panel, wxID_STATIC, _t("Updates"));
     SetBoldFont(updateStaticBox);
     wxStaticBoxSizer* updateStaticBoxSizer = new wxStaticBoxSizer(updateStaticBox, wxVERTICAL);
     networkPanelSizer->Add(updateStaticBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
 
     m_check_update = new wxCheckBox(network_panel, ID_DIALOG_OPTIONS_UPDATES_CHECK
-        , _("Check for updates at StartUp"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+        , _t("Check for updates at StartUp"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     m_check_update->SetValue(GetIniDatabaseCheckboxValue("UPDATECHECK", true));
-    mmToolTip(m_check_update, _("Enable to automatically check if new MMEX version is available at StartUp"));
+    mmToolTip(m_check_update, _t("Enable to automatically check if new MMEX version is available at StartUp"));
 
     wxArrayString UpdatesType_;
-    UpdatesType_.Add(_("Stable"));
-    UpdatesType_.Add(_("Unstable"));
+    UpdatesType_.Add(_t("Stable"));
+    UpdatesType_.Add(_t("Unstable"));
     m_update_source = new wxChoice(network_panel, wxID_ANY
         , wxDefaultPosition,wxDefaultSize, UpdatesType_);
     m_update_source->SetMinSize(wxSize(150, -1));
-    m_update_source->SetSelection(Model_Setting::instance().GetIntSetting("UPDATESOURCE", 0));
-    mmToolTip(m_update_source, _("Updates source"));
+    m_update_source->SetSelection(Model_Setting::instance().getInt("UPDATESOURCE", 0));
+    mmToolTip(m_update_source, _t("Updates source"));
 
     wxFlexGridSizer* UpdateSourceStaticBoxSizerGrid = new wxFlexGridSizer(0, 2, 0, 0);
     UpdateSourceStaticBoxSizerGrid->Add(m_check_update, g_flagsH);
@@ -205,22 +205,22 @@
 
 bool OptionSettingsNet::SaveSettings()
 {
-    Model_Setting::instance().Set("PROXYIP", m_proxy_address->GetValue().Trim(false).Trim());
-    Model_Setting::instance().Set("PROXYPORT", m_proxy_port->GetValue());
+    Model_Setting::instance().setString("PROXYIP", m_proxy_address->GetValue().Trim(false).Trim());
+    Model_Setting::instance().setInt("PROXYPORT", m_proxy_port->GetValue());
 
     wxTextCtrl* WebAppURL = static_cast<wxTextCtrl*>(FindWindow(ID_DIALOG_OPTIONS_TEXTCTRL_WEBAPPURL));
-    Model_Infotable::instance().Set("WEBAPPURL", WebAppURL->GetValue().Trim(false).Trim());
+    Model_Infotable::instance().setString("WEBAPPURL", WebAppURL->GetValue().Trim(false).Trim());
 
     wxTextCtrl* WebAppGUID = static_cast<wxTextCtrl*>(FindWindow(ID_DIALOG_OPTIONS_TEXTCTRL_WEBAPPGUID));
-    Model_Infotable::instance().Set("WEBAPPGUID", WebAppGUID->GetValue().Trim(false).Trim());
+    Model_Infotable::instance().setString("WEBAPPGUID", WebAppGUID->GetValue().Trim(false).Trim());
 
-    Option::instance().SendUsageStatistics(m_send_data->GetValue());
-    Option::instance().CheckNewsOnStartup(m_check_news->GetValue());
+    Option::instance().setSendUsageStats(m_send_data->GetValue());
+    Option::instance().setCheckNews(m_check_news->GetValue());
 
-    Model_Setting::instance().Set("NETWORKTIMEOUT", m_network_timeout->GetValue());
+    Model_Setting::instance().setInt("NETWORKTIMEOUT", m_network_timeout->GetValue());
 
-    Model_Setting::instance().Set("UPDATECHECK", m_check_update->GetValue());
-    Model_Setting::instance().Set("UPDATESOURCE", m_update_source->GetSelection());
+    Model_Setting::instance().setBool("UPDATECHECK", m_check_update->GetValue());
+    Model_Setting::instance().setInt("UPDATESOURCE", m_update_source->GetSelection());
 
     return true;
 }
diff -Naur a/src/optionsettingsview.cpp b/src/optionsettingsview.cpp
--- a/src/optionsettingsview.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/optionsettingsview.cpp	2025-07-09 01:46:59.668940626 +0200
@@ -49,273 +49,297 @@
 
 void OptionSettingsView::Create()
 {
-    wxBoxSizer* viewsPanelSizer0 = new wxBoxSizer(wxVERTICAL);
-    SetSizer(viewsPanelSizer0);
-
-    wxScrolledWindow* view_panel = new wxScrolledWindow(this, wxID_ANY);
-    wxBoxSizer* viewsPanelSizer = new wxBoxSizer(wxVERTICAL);
-    view_panel->SetSizer(viewsPanelSizer);
-    viewsPanelSizer0->Add(view_panel, wxSizerFlags(g_flagsExpand).Proportion(0));
+    // mainSizer
+    //   panelWindow panelSizer
+    //     viewBox viewSizer
+    //       viewChoiceSizer
+    //     trxBox trxSizer
+    //       trxChoiceSizer
+    //     colorsBox colorsSizer
+    //     uiBox uiSizer
+    //       uiStyleSizer
+    //       uiIconSizer
+
+    wxBoxSizer* mainSizer = new wxBoxSizer(wxVERTICAL);
+    SetSizer(mainSizer);
+
+    wxScrolledWindow* panelWindow = new wxScrolledWindow(this, wxID_ANY);
+    wxBoxSizer* panelSizer = new wxBoxSizer(wxVERTICAL);
+    panelWindow->SetSizer(panelSizer);
+    mainSizer->Add(panelWindow, wxSizerFlags(g_flagsExpand).Proportion(0));
 
     // View Options
-    wxStaticBox* viewStaticBox = new wxStaticBox(view_panel, wxID_STATIC, _("View"));
-    SetBoldFont(viewStaticBox);
-
-    wxStaticBoxSizer* viewStaticBoxSizer = new wxStaticBoxSizer(viewStaticBox, wxVERTICAL);
-    wxFlexGridSizer* view_sizer1 = new wxFlexGridSizer(0, 2, 0, 5);
-    viewStaticBoxSizer->Add(view_sizer1);
-    viewsPanelSizer->Add(viewStaticBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
+    wxStaticBox* viewBox = new wxStaticBox(panelWindow, wxID_STATIC, _t("View"));
+    SetBoldFont(viewBox);
+    wxStaticBoxSizer* viewSizer = new wxStaticBoxSizer(viewBox, wxVERTICAL);
+    panelSizer->Add(viewSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
 
-    view_sizer1->Add(new wxStaticText(view_panel, wxID_STATIC, _("Accounts Visible")), g_flagsH);
+    wxFlexGridSizer* viewChoiceSizer = new wxFlexGridSizer(0, 2, 0, 5);
+    viewSizer->Add(viewChoiceSizer);
 
-    const wxString vAccts = Model_Setting::instance().GetViewAccounts();
+    viewChoiceSizer->Add(new wxStaticText(panelWindow, wxID_STATIC, _t("Accounts Visible")), g_flagsH);
+    const wxString vAccts = Model_Setting::instance().getViewAccounts();
     wxArrayString view_accounts;
     view_accounts.Add(VIEW_ACCOUNTS_ALL_STR);
     view_accounts.Add(VIEW_ACCOUNTS_OPEN_STR);
     view_accounts.Add(VIEW_ACCOUNTS_FAVORITES_STR);
 
-    m_choice_visible = new wxChoice(view_panel, wxID_ANY);
-    for (const auto& entry : view_accounts)
-    {
+    m_choice_visible = new wxChoice(panelWindow, wxID_ANY);
+    for (const auto& entry : view_accounts) {
         m_choice_visible->Append(wxGetTranslation(entry), new wxStringClientData(entry));
         if (entry == vAccts)
             m_choice_visible->SetStringSelection(wxGetTranslation(entry));
     }
+    mmToolTip(m_choice_visible, _t("Specify which accounts are visible"));
+    viewChoiceSizer->Add(m_choice_visible, g_flagsH);
 
-    view_sizer1->Add(m_choice_visible, g_flagsH);
-    mmToolTip(m_choice_visible, _("Specify which accounts are visible"));
-
-    //Category delimiter
-    view_sizer1->Add(new wxStaticText(view_panel, wxID_STATIC, _("Category Delimiter")), g_flagsH);
-
+    viewChoiceSizer->Add(new wxStaticText(panelWindow, wxID_STATIC, _t("Category Delimiter")), g_flagsH);
     wxArrayString list;
     list.Add(":");
     list.Add(": ");
     list.Add(" : ");
 
-    wxString delimiter = Model_Infotable::instance().GetStringInfo("CATEG_DELIMITER",":");
-    m_categ_delimiter_list = new wxComboBox(view_panel, wxID_ANY, ""
-        , wxDefaultPosition, wxDefaultSize, list);
+    wxString delimiter = Model_Infotable::instance().getString("CATEG_DELIMITER",":");
+    m_categ_delimiter_list = new wxComboBox(
+        panelWindow, wxID_ANY, "", wxDefaultPosition, wxDefaultSize,
+        list
+    );
     m_categ_delimiter_list->SetValue(delimiter);
+    viewChoiceSizer->Add(m_categ_delimiter_list, g_flagsH);
 
-    view_sizer1->Add(m_categ_delimiter_list, g_flagsH);
-
-    m_showToolTips = new wxCheckBox(view_panel, wxID_STATIC
-        , _("Show Tooltips")
-        , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    m_showToolTips = new wxCheckBox(
+        panelWindow, wxID_STATIC,
+        _t("Show Tooltips"),
+        wxDefaultPosition, wxDefaultSize, wxCHK_2STATE
+    );
     m_showToolTips->SetValue(Option::instance().getShowToolTips());
-    view_sizer1->Add(m_showToolTips, g_flagsH);
+    viewChoiceSizer->Add(m_showToolTips, g_flagsH);
 
-    m_showMoneyTips = new wxCheckBox(view_panel, wxID_STATIC
-        , _("Show Money Tips")
-        , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    m_showMoneyTips = new wxCheckBox(
+        panelWindow, wxID_STATIC,
+        _t("Show Money Tips"),
+        wxDefaultPosition, wxDefaultSize, wxCHK_2STATE
+    );
     m_showMoneyTips->SetValue(Option::instance().getShowMoneyTips());
-    view_sizer1->Add(m_showMoneyTips, g_flagsH);
+    viewChoiceSizer->Add(m_showMoneyTips, g_flagsH);
 
     // Transaction/Budget options
-    wxStaticBox* trxStaticBox = new wxStaticBox(view_panel, wxID_STATIC, _("Transaction/Budget"));
-    SetBoldFont(trxStaticBox);
-    wxStaticBoxSizer* trxStaticBoxSizer = new wxStaticBoxSizer(trxStaticBox, wxVERTICAL);
-    viewsPanelSizer->Add(trxStaticBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
-
-    m_budget_financial_years = new wxCheckBox(view_panel, wxID_STATIC, _("View Budgets as Financial Years"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    m_budget_financial_years->SetValue(Option::instance().BudgetFinancialYears());
-    trxStaticBoxSizer->Add(m_budget_financial_years, g_flagsV);
-
-    m_budget_include_transfers = new wxCheckBox(view_panel, wxID_STATIC
-        , _("View Budgets with 'transfer' transactions")
-        , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    m_budget_include_transfers->SetValue(Option::instance().BudgetIncludeTransfers());
-    trxStaticBoxSizer->Add(m_budget_include_transfers, g_flagsV);
-
-    m_budget_summary_without_category = new wxCheckBox(view_panel, wxID_STATIC
-        , _("View Budget Category Report with Summaries")
-        , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    m_budget_summary_without_category->SetValue(Option::instance().BudgetReportWithSummaries());
-    trxStaticBoxSizer->Add(m_budget_summary_without_category, g_flagsV);
+    wxStaticBox* trxBox = new wxStaticBox(panelWindow, wxID_STATIC, _t("Transaction/Budget"));
+    SetBoldFont(trxBox);
+    wxStaticBoxSizer* trxSizer = new wxStaticBoxSizer(trxBox, wxVERTICAL);
+    panelSizer->Add(trxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
+
+    m_budget_financial_years = new wxCheckBox(
+        panelWindow, wxID_STATIC,
+        _t("View Budgets as Financial Years"),
+        wxDefaultPosition, wxDefaultSize, wxCHK_2STATE
+    );
+    m_budget_financial_years->SetValue(Option::instance().getBudgetFinancialYears());
+    trxSizer->Add(m_budget_financial_years, g_flagsV);
+
+    m_budget_include_transfers = new wxCheckBox(
+        panelWindow, wxID_STATIC,
+        _t("View Budgets with 'transfer' transactions"),
+        wxDefaultPosition, wxDefaultSize, wxCHK_2STATE
+    );
+    m_budget_include_transfers->SetValue(Option::instance().getBudgetIncludeTransfers());
+    trxSizer->Add(m_budget_include_transfers, g_flagsV);
+
+    m_budget_summary_without_category = new wxCheckBox(
+        panelWindow, wxID_STATIC,
+        _t("View Budget Category Report with Summaries"),
+        wxDefaultPosition, wxDefaultSize, wxCHK_2STATE
+    );
+    m_budget_summary_without_category->SetValue(Option::instance().getBudgetSummaryWithoutCategories());
+    trxSizer->Add(m_budget_summary_without_category, g_flagsV);
 
     // Budget Yearly/Monthly relationship if both exist
-    m_budget_override = new wxCheckBox(view_panel, wxID_STATIC
-        , _("Override yearly budget with monthly budget")
-        , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    mmToolTip(m_budget_override, _("If monthly budget exists then use this to override the yearly budget; otherwise combine them"));
-    m_budget_override->SetValue(Option::instance().BudgetOverride());
-    trxStaticBoxSizer->Add(m_budget_override, g_flagsV);
+    m_budget_override = new wxCheckBox(
+        panelWindow, wxID_STATIC,
+        _t("Override yearly budget with monthly budget"),
+        wxDefaultPosition, wxDefaultSize, wxCHK_2STATE
+    );
+    mmToolTip(m_budget_override, _t("If monthly budget exists then use this to override the yearly budget; otherwise combine them"));
+    m_budget_override->SetValue(Option::instance().getBudgetOverride());
+    trxSizer->Add(m_budget_override, g_flagsV);
 
     // Option to deduct monthly budget from yearly budget for reporting
-    m_budget_deduct_monthly = new wxCheckBox(view_panel, wxID_STATIC
-        , _("Subtract monthly budgets from yearly budget in reporting")
-        , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    mmToolTip(m_budget_deduct_monthly, _("Yearly budget will be reduced by the amount budgeted monthly.\nTotal estimate for the year will be reported as either the yearly budget OR the sum of the monthly budgets, whichever is greater."));
-    m_budget_deduct_monthly->SetValue(Option::instance().BudgetDeductMonthly());
-    trxStaticBoxSizer->Add(m_budget_deduct_monthly, g_flagsV);
-
-    // Allows a year or financial year to start before or after the 1st of the month.
-    wxBoxSizer* budget_offset_sizer = new wxBoxSizer(wxHORIZONTAL);
-    trxStaticBoxSizer->Add(budget_offset_sizer);
-
-    budget_offset_sizer->Add(new wxStaticText(view_panel, wxID_STATIC, _("Budget Offset (days):")), g_flagsH);
-
-    m_budget_days_offset = new wxSpinCtrl(view_panel, wxID_ANY
-        , wxEmptyString, wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, -30, +30);
-    mmToolTip(m_budget_days_offset, _("Allows the 'first day' in the month (normally 1st) to be adjusted for budget calculation purposes"));
+    m_budget_deduct_monthly = new wxCheckBox(
+        panelWindow, wxID_STATIC,
+        _t("Subtract monthly budgets from yearly budget in reporting"),
+        wxDefaultPosition, wxDefaultSize, wxCHK_2STATE
+    );
+    mmToolTip(m_budget_deduct_monthly, _t("Yearly budget will be reduced by the amount budgeted monthly.\nTotal estimate for the year will be reported as either the yearly budget OR the sum of the monthly budgets, whichever is greater."));
+    m_budget_deduct_monthly->SetValue(Option::instance().getBudgetDeductMonthly());
+    trxSizer->Add(m_budget_deduct_monthly, g_flagsV);
+
+    wxFlexGridSizer* trxChoiceSizer = new wxFlexGridSizer(0, 2, 0, 5);
+    trxSizer->Add(trxChoiceSizer);
+
+    trxChoiceSizer->Add(new wxStaticText(panelWindow, wxID_STATIC, _t("Budget Offset (days)")), g_flagsH);
+    m_budget_days_offset = new wxSpinCtrl(
+        panelWindow, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize,
+        wxSP_ARROW_KEYS, -30, +30
+    );
+    mmToolTip(m_budget_days_offset, _t("Adjusts the first day of month (normally 1st) for budget calculations"));
     m_budget_days_offset->SetValue(Option::instance().getBudgetDaysOffset());
-    budget_offset_sizer->Add(m_budget_days_offset, g_flagsH);
-
-    // Allows the 'first day' in the month to be adjusted for reporting purposes
-    wxBoxSizer* reporting_firstday_sizer = new wxBoxSizer(wxHORIZONTAL);
-    trxStaticBoxSizer->Add(reporting_firstday_sizer);
-
-    reporting_firstday_sizer->Add(new wxStaticText(view_panel, wxID_STATIC, _("Start day of month for reporting:")), g_flagsH);
+    trxChoiceSizer->Add(m_budget_days_offset, g_flagsH);
 
-    m_reporting_firstday = new wxSpinCtrl(view_panel, wxID_ANY
-        , wxEmptyString, wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 1, 28);
-    mmToolTip(m_reporting_firstday, _("Allows the 'first day' in the month to be adjusted for reporting purposes"));
+    trxChoiceSizer->Add(new wxStaticText(panelWindow, wxID_STATIC, _t("First Day of Month")), g_flagsH);
+    m_reporting_firstday = new wxSpinCtrl(
+        panelWindow, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize,
+        wxSP_ARROW_KEYS, 1, 28
+    );
+    mmToolTip(m_reporting_firstday, _t("Adjusts the first day of month for reporting"));
     m_reporting_firstday->SetValue(Option::instance().getReportingFirstDay());
-    reporting_firstday_sizer->Add(m_reporting_firstday, g_flagsH);
+    trxChoiceSizer->Add(m_reporting_firstday, g_flagsH);
 
-    m_ignore_future_transactions = new wxCheckBox(view_panel, wxID_STATIC
-        , _("Ignore Future Transactions")
-        , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+    trxChoiceSizer->Add(new wxStaticText(panelWindow, wxID_STATIC, _t("First Weekday")), g_flagsH);
+    m_reporting_first_weekday = new wxChoice(panelWindow, wxID_ANY);
+    m_reporting_first_weekday->Append(wxGetTranslation(g_days_of_week[0]));
+    m_reporting_first_weekday->Append(wxGetTranslation(g_days_of_week[1]));
+    m_reporting_first_weekday->SetSelection(Option::instance().getReportingFirstWeekday());
+    mmToolTip(m_reporting_first_weekday, _t("Adjusts the first day of week for filtering and reporting"));
+    trxChoiceSizer->Add(m_reporting_first_weekday, g_flagsH);
+
+    m_ignore_future_transactions = new wxCheckBox(
+        panelWindow, wxID_STATIC,
+        _t("Ignore Future Transactions"),
+        wxDefaultPosition, wxDefaultSize, wxCHK_2STATE
+    );
     m_ignore_future_transactions->SetValue(Option::instance().getIgnoreFutureTransactions());
-    trxStaticBoxSizer->Add(m_ignore_future_transactions, g_flagsV);
+    trxSizer->Add(m_ignore_future_transactions, g_flagsV);
 
-    m_use_trans_date_time = new wxCheckBox(view_panel, wxID_ANY, _("Use 'Time' in transaction recording/reporting"));
+    m_use_trans_date_time = new wxCheckBox(panelWindow, wxID_ANY, _t("Use 'Time' in transaction recording/reporting"));
     m_use_trans_date_time->SetValue(Option::instance().UseTransDateTime());
-    trxStaticBoxSizer->Add(m_use_trans_date_time, g_flagsV);
+    trxSizer->Add(m_use_trans_date_time, g_flagsV);
 
     // Colours settings
-    wxStaticBox* userColourSettingStBox = new wxStaticBox(view_panel, wxID_ANY, _("Transaction Colors"));
-    SetBoldFont(userColourSettingStBox);
-    wxStaticBoxSizer* userColourSettingStBoxSizer = new wxStaticBoxSizer(userColourSettingStBox, wxHORIZONTAL);
-    viewsPanelSizer->Add(userColourSettingStBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
+    wxStaticBox* colorsBox = new wxStaticBox(panelWindow, wxID_ANY, _t("Transaction Colors"));
+    SetBoldFont(colorsBox);
+    wxStaticBoxSizer* colorsSizer = new wxStaticBoxSizer(colorsBox, wxHORIZONTAL);
+    panelSizer->Add(colorsSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
 
     int size_x = 30;
-    m_UDFCB1 = new wxButton(view_panel, wxID_HIGHEST + 11, "1", wxDefaultPosition, wxSize(size_x, -1), 0);
+    m_UDFCB1 = new wxButton(panelWindow, wxID_HIGHEST + 11, "1", wxDefaultPosition, wxSize(size_x, -1), 0);
     m_UDFCB1->SetBackgroundColour(mmColors::userDefColor1);
-    userColourSettingStBoxSizer->Add(m_UDFCB1, g_flagsH);
+    colorsSizer->Add(m_UDFCB1, g_flagsH);
 
-    m_UDFCB2 = new wxButton(view_panel, wxID_HIGHEST + 22, "2", wxDefaultPosition, wxSize(size_x, -1), 0);
+    m_UDFCB2 = new wxButton(panelWindow, wxID_HIGHEST + 22, "2", wxDefaultPosition, wxSize(size_x, -1), 0);
     m_UDFCB2->SetBackgroundColour(mmColors::userDefColor2);
-    userColourSettingStBoxSizer->Add(m_UDFCB2, g_flagsH);
+    colorsSizer->Add(m_UDFCB2, g_flagsH);
 
-    m_UDFCB3 = new wxButton(view_panel, wxID_HIGHEST + 33, "3", wxDefaultPosition, wxSize(size_x, -1), 0);
+    m_UDFCB3 = new wxButton(panelWindow, wxID_HIGHEST + 33, "3", wxDefaultPosition, wxSize(size_x, -1), 0);
     m_UDFCB3->SetBackgroundColour(mmColors::userDefColor3);
-    userColourSettingStBoxSizer->Add(m_UDFCB3, g_flagsH);
+    colorsSizer->Add(m_UDFCB3, g_flagsH);
 
-    m_UDFCB4 = new wxButton(view_panel, wxID_HIGHEST + 44, "4", wxDefaultPosition, wxSize(size_x, -1), 0);
+    m_UDFCB4 = new wxButton(panelWindow, wxID_HIGHEST + 44, "4", wxDefaultPosition, wxSize(size_x, -1), 0);
     m_UDFCB4->SetBackgroundColour(mmColors::userDefColor4);
-    userColourSettingStBoxSizer->Add(m_UDFCB4, g_flagsH);
+    colorsSizer->Add(m_UDFCB4, g_flagsH);
 
-    m_UDFCB5 = new wxButton(view_panel, wxID_HIGHEST + 55, "5", wxDefaultPosition, wxSize(size_x, -1), 0);
+    m_UDFCB5 = new wxButton(panelWindow, wxID_HIGHEST + 55, "5", wxDefaultPosition, wxSize(size_x, -1), 0);
     m_UDFCB5->SetBackgroundColour(mmColors::userDefColor5);
-    userColourSettingStBoxSizer->Add(m_UDFCB5, g_flagsH);
+    colorsSizer->Add(m_UDFCB5, g_flagsH);
 
-    m_UDFCB6 = new wxButton(view_panel, wxID_HIGHEST + 66, "6", wxDefaultPosition, wxSize(size_x, -1), 0);
+    m_UDFCB6 = new wxButton(panelWindow, wxID_HIGHEST + 66, "6", wxDefaultPosition, wxSize(size_x, -1), 0);
     m_UDFCB6->SetBackgroundColour(mmColors::userDefColor6);
-    userColourSettingStBoxSizer->Add(m_UDFCB6, g_flagsH);
+    colorsSizer->Add(m_UDFCB6, g_flagsH);
 
-    m_UDFCB7 = new wxButton(view_panel, wxID_HIGHEST + 77, "7", wxDefaultPosition, wxSize(size_x, -1), 0);
+    m_UDFCB7 = new wxButton(panelWindow, wxID_HIGHEST + 77, "7", wxDefaultPosition, wxSize(size_x, -1), 0);
     m_UDFCB7->SetBackgroundColour(mmColors::userDefColor7);
-    userColourSettingStBoxSizer->Add(m_UDFCB7, g_flagsH);
+    colorsSizer->Add(m_UDFCB7, g_flagsH);
 
-    wxButton* reset = new wxButton(view_panel, wxID_REDO, _("Default"), wxDefaultPosition, wxDefaultSize, 0);
+    wxButton* reset = new wxButton(panelWindow, wxID_REDO, _t("Default"), wxDefaultPosition, wxDefaultSize, 0);
     m_UDFCB7->SetBackgroundColour(mmColors::userDefColor7);
-    userColourSettingStBoxSizer->Add(reset, g_flagsH);
-    // User Interface (UI) Appearance
-
-    wxStaticBox* iconStaticBox = new wxStaticBox(view_panel, wxID_STATIC, _("User Interface"));
-    SetBoldFont(iconStaticBox);
+    colorsSizer->Add(reset, g_flagsH);
 
-    wxStaticBoxSizer* iconStaticBoxSizer = new wxStaticBoxSizer(iconStaticBox, wxVERTICAL);
-    viewsPanelSizer->Add(iconStaticBoxSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
-
-    wxFlexGridSizer* view_sizer2 = new wxFlexGridSizer(0, 2, 0, 5);
-    iconStaticBoxSizer->Add(view_sizer2);
-
-    // Theme
-
-    m_theme_manager = new wxButton(view_panel, ID_DIALOG_THEMEMANAGER, _("Open Theme Manager"));
-
-    view_sizer2->Add(new wxStaticText(view_panel, wxID_STATIC, _("Style Template")), g_flagsH);
-    view_sizer2->Add(m_theme_manager, g_flagsH);
+    // User Interface (UI) Appearance
+    wxStaticBox* uiBox = new wxStaticBox(panelWindow, wxID_STATIC, _t("User Interface"));
+    SetBoldFont(uiBox);
+    wxStaticBoxSizer* uiSizer = new wxStaticBoxSizer(uiBox, wxVERTICAL);
+    panelSizer->Add(uiSizer, wxSizerFlags(g_flagsExpand).Proportion(0));
+
+    wxFlexGridSizer* uiStyleSizer = new wxFlexGridSizer(0, 2, 0, 5);
+    uiSizer->Add(uiStyleSizer);
+
+    uiStyleSizer->Add(new wxStaticText(panelWindow, wxID_STATIC, _t("Style Template")), g_flagsH);
+    m_theme_manager = new wxButton(panelWindow, ID_DIALOG_THEMEMANAGER, _t("Open Theme Manager"));
+    uiStyleSizer->Add(m_theme_manager, g_flagsH);
 
-    //
+    uiStyleSizer->Add(new wxStaticText(panelWindow, wxID_STATIC, _t("Theme")), g_flagsH);
     wxArrayString theme_mode_values;
-    theme_mode_values.Add(_("System"));
-    theme_mode_values.Add(_("Light"));
-    theme_mode_values.Add(_("Dark"));
-
-    m_theme_mode = new wxChoice(view_panel, wxID_RESIZE_FRAME, wxDefaultPosition
-                        , wxDefaultSize, theme_mode_values);
-    mmToolTip(m_theme_mode, _("Specify preferred theme variant to use if supported"));
+    theme_mode_values.Add(_t("System"));
+    theme_mode_values.Add(_t("Light"));
+    theme_mode_values.Add(_t("Dark"));
+
+    m_theme_mode = new wxChoice(
+        panelWindow, wxID_RESIZE_FRAME, wxDefaultPosition, wxDefaultSize,
+        theme_mode_values
+    );
+    mmToolTip(m_theme_mode, _t("Specify preferred theme variant to use if supported"));
     m_theme_mode->SetSelection(Option::instance().getThemeMode());
-    view_sizer2->Add(new wxStaticText(view_panel, wxID_STATIC, _("Theme")), g_flagsH);
-    view_sizer2->Add(m_theme_mode, g_flagsH);
-
-    //
-    view_sizer2->Add(new wxStaticText(view_panel, wxID_STATIC, _("HTML Scale Factor")), g_flagsH);
+    uiStyleSizer->Add(m_theme_mode, g_flagsH);
 
+    uiStyleSizer->Add(new wxStaticText(panelWindow, wxID_STATIC, _t("HTML Scale Factor")), g_flagsH);
     htmlScaleMax = 300;
     htmlScaleMin = 25;
-
-    m_scale_factor = new wxSpinCtrl(view_panel, ID_DIALOG_HTML_SCALE
-        , wxEmptyString, wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, htmlScaleMin, htmlScaleMax);
+    m_scale_factor = new wxSpinCtrl(
+        panelWindow, ID_DIALOG_HTML_SCALE, wxEmptyString, wxDefaultPosition, wxDefaultSize,
+        wxSP_ARROW_KEYS, htmlScaleMin, htmlScaleMax
+    );
 #ifdef __WXMAC__ // Workaround for bug https://github.com/wxWidgets/wxWidgets/issues/12968
     m_scale_factor->SetRange(0, htmlScaleMax);
-    m_scale_factor->Connect(ID_DIALOG_HTML_SCALE, wxEVT_SPINCTRL
-        , wxSpinEventHandler(OptionSettingsView::OnHTMLScaleSpin), nullptr, this);
+    m_scale_factor->Connect(
+        ID_DIALOG_HTML_SCALE, wxEVT_SPINCTRL,
+        wxSpinEventHandler(OptionSettingsView::OnHTMLScaleSpin),
+        nullptr, this
+    );
 #endif
 
-    int vFontSize = Option::instance().getHtmlFontSize();
+    int vFontSize = Option::instance().getHtmlScale();
     m_scale_factor->SetValue(vFontSize);
-    mmToolTip(m_scale_factor, _("Specify which scale factor is used for the report pages"));
-    view_sizer2->Add(m_scale_factor, g_flagsH);
+    mmToolTip(m_scale_factor, _t("Specify which scale factor is used for the report pages"));
+    uiStyleSizer->Add(m_scale_factor, g_flagsH);
 
-    // Font size
+    uiStyleSizer->Add(new wxStaticText(panelWindow, wxID_STATIC, _t("Font Size")), g_flagsH);
     wxArrayString font_choice;
-    font_choice.Add(_("Normal"));
-    font_choice.Add(_("Enlarged"));
-    font_choice.Add(_("Large"));
-    font_choice.Add(_("Huge"));
-
-    view_sizer2->Add(new wxStaticText(view_panel, wxID_STATIC, _("Font Size")), g_flagsH);
-    m_font_size_chooser = new wxChoice(view_panel, wxID_RESIZE_FRAME, wxDefaultPosition
-        , wxDefaultSize, font_choice);
+    font_choice.Add(_t("Normal"));
+    font_choice.Add(_t("Enlarged"));
+    font_choice.Add(_t("Large"));
+    font_choice.Add(_t("Huge"));
+
+    m_font_size_chooser = new wxChoice(
+        panelWindow, wxID_RESIZE_FRAME, wxDefaultPosition, wxDefaultSize,
+        font_choice
+    );
     m_font_size_chooser->SetSelection(Option::instance().getFontSize());
-    view_sizer2->Add(m_font_size_chooser, g_flagsH);
+    uiStyleSizer->Add(m_font_size_chooser, g_flagsH);
 
     // Icons
+    wxFlexGridSizer* uiIconSizer = new wxFlexGridSizer(0, 3, 0, 5);
+    uiSizer->Add(uiIconSizer);
 
-    wxFlexGridSizer* view_sizer3 = new wxFlexGridSizer(0, 3, 0, 5);
-    iconStaticBoxSizer->Add(view_sizer3);
+    uiIconSizer->Add(new wxStaticText(panelWindow, wxID_STATIC, _t("Toolbar Icon Size")), g_flagsH);
+    uiIconSizer->Add(new wxStaticText(panelWindow, wxID_STATIC, _t("Navigator Icon Size")), g_flagsH);
+    uiIconSizer->Add(new wxStaticText(panelWindow, wxID_STATIC, _t("Others Icon Size")), g_flagsH);
 
     const wxString settings_choice[] = {
-        wxTRANSLATE("Small (16 px)"),
-        wxTRANSLATE("Normal (24 px)"),
-        wxTRANSLATE("Large (32 px)"),
-        wxTRANSLATE("Huge (48 px)")
+        _n("Small (16 px)"),
+        _n("Normal (24 px)"),
+        _n("Large (32 px)"),
+        _n("Huge (48 px)")
     };
 
-    m_toolbar_icon_size = new wxChoice(view_panel, wxID_RESIZE_FRAME);
-    m_navigation_icon_size = new wxChoice(view_panel, wxID_RESIZE_FRAME);
-    m_others_icon_size = new wxChoice(view_panel, wxID_RESIZE_FRAME);
+    m_toolbar_icon_size = new wxChoice(panelWindow, wxID_RESIZE_FRAME);
+    m_navigation_icon_size = new wxChoice(panelWindow, wxID_RESIZE_FRAME);
+    m_others_icon_size = new wxChoice(panelWindow, wxID_RESIZE_FRAME);
 
-    for (const auto& entry : settings_choice)
-    {
+    for (const auto& entry : settings_choice) {
         m_toolbar_icon_size->Append(wxGetTranslation(entry), new wxStringClientData(entry));
         m_navigation_icon_size->Append(wxGetTranslation(entry), new wxStringClientData(entry));
         m_others_icon_size->Append(wxGetTranslation(entry), new wxStringClientData(entry));
     }
 
-    view_sizer3->Add(new wxStaticText(view_panel, wxID_STATIC, _("Toolbar Icon Size")), g_flagsH);
-    view_sizer3->Add(new wxStaticText(view_panel, wxID_STATIC, _("Navigator Icon Size")), g_flagsH);
-    view_sizer3->Add(new wxStaticText(view_panel, wxID_STATIC, _("Others Icon Size")), g_flagsH);
-
-    view_sizer3->Add(m_toolbar_icon_size, g_flagsH);
-    view_sizer3->Add(m_navigation_icon_size, g_flagsH);
-    view_sizer3->Add(m_others_icon_size, g_flagsH);
-
     int vIconSize = Option::instance().getToolbarIconSize();
     int selection = vIconSize / 8 - (vIconSize > 32 ? 3 : 2);
     m_toolbar_icon_size->SetSelection(selection);
@@ -328,12 +352,24 @@
     selection = vIconSize / 8 - (vIconSize > 32 ? 3 : 2);
     m_others_icon_size->SetSelection(selection);
 
+    uiIconSizer->Add(m_toolbar_icon_size, g_flagsH);
+    uiIconSizer->Add(m_navigation_icon_size, g_flagsH);
+    uiIconSizer->Add(m_others_icon_size, g_flagsH);
+
     Fit();
-    view_panel->SetMinSize(view_panel->GetBestVirtualSize());
-    view_panel->SetScrollRate(6, 6);
+    panelWindow->SetMinSize(panelWindow->GetBestVirtualSize());
+    panelWindow->SetScrollRate(6, 6);
 
-    this->Connect(wxID_ANY, wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(OptionSettingsView::OnNavTreeColorChanged), nullptr, this);
-    this->Connect(ID_DIALOG_THEMEMANAGER, wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(OptionSettingsView::OnThemeManagerSelected), nullptr, this);
+    this->Connect(
+        wxID_ANY, wxEVT_COMMAND_BUTTON_CLICKED,
+        wxCommandEventHandler(OptionSettingsView::OnNavTreeColorChanged),
+        nullptr, this
+    );
+    this->Connect(
+        ID_DIALOG_THEMEMANAGER, wxEVT_COMMAND_BUTTON_CLICKED,
+        wxCommandEventHandler(OptionSettingsView::OnThemeManagerSelected),
+        nullptr, this
+    );
 }
 
 //----------------------------------------------------------------------------
@@ -387,19 +423,19 @@
 {
     auto delimiter = m_categ_delimiter_list->GetValue();
     if (delimiter.empty()) delimiter = ":";
-    Model_Infotable::instance().Set("CATEG_DELIMITER", delimiter);
+    Model_Infotable::instance().setString("CATEG_DELIMITER", delimiter);
 
     wxString accVisible = VIEW_ACCOUNTS_ALL_STR;
     wxStringClientData* visible_acc_obj = static_cast<wxStringClientData*>(m_choice_visible->GetClientObject(m_choice_visible->GetSelection()));
     if (visible_acc_obj)
         accVisible = visible_acc_obj->GetData();
-    Model_Setting::instance().SetViewAccounts(accVisible);
+    Model_Setting::instance().setViewAccounts(accVisible);
 
     int themeMode = m_theme_mode->GetSelection();
     Option::instance().setThemeMode(themeMode);
     
     int size = m_scale_factor->GetValue();
-    Option::instance().setHTMLFontSizes(size);
+    Option::instance().setHtmlScale(size);
     int i[4] = { 16, 24, 32, 48 };
     size = m_others_icon_size->GetSelection();
     size = i[size];
@@ -416,16 +452,19 @@
     size = i[size];
     Option::instance().setToolbarIconSize(size);
 
-    Option::instance().BudgetFinancialYears(m_budget_financial_years->GetValue());
-    Option::instance().BudgetIncludeTransfers(m_budget_include_transfers->GetValue());
-    Option::instance().BudgetReportWithSummaries(m_budget_summary_without_category->GetValue());
-    Option::instance().BudgetOverride(m_budget_override->GetValue());
-    Option::instance().BudgetDeductMonthly(m_budget_deduct_monthly->GetValue());
+    Option::instance().setBudgetFinancialYears(m_budget_financial_years->GetValue());
+    Option::instance().setBudgetIncludeTransfers(m_budget_include_transfers->GetValue());
+    Option::instance().setBudgetSummaryWithoutCategories(m_budget_summary_without_category->GetValue());
+    Option::instance().setBudgetOverride(m_budget_override->GetValue());
+    Option::instance().setBudgetDeductMonthly(m_budget_deduct_monthly->GetValue());
     Option::instance().setBudgetDaysOffset(m_budget_days_offset->GetValue());
     Option::instance().setReportingFirstDay(m_reporting_firstday->GetValue());
-    Option::instance().IgnoreFutureTransactions(m_ignore_future_transactions->GetValue());
-    Option::instance().ShowToolTips(m_showToolTips->GetValue());
-    Option::instance().ShowMoneyTips(m_showMoneyTips->GetValue());
+    Option::instance().setReportingFirstWeekday(
+        static_cast<wxDateTime::WeekDay>(m_reporting_first_weekday->GetSelection())
+    );
+    Option::instance().setIgnoreFutureTransactions(m_ignore_future_transactions->GetValue());
+    Option::instance().setShowToolTips(m_showToolTips->GetValue());
+    Option::instance().setShowMoneyTips(m_showMoneyTips->GetValue());
     Option::instance().UseTransDateTime(m_use_trans_date_time->GetValue());
 
     mmColors::userDefColor1 = m_UDFCB1->GetBackgroundColour();
@@ -436,13 +475,13 @@
     mmColors::userDefColor6 = m_UDFCB6->GetBackgroundColour();
     mmColors::userDefColor7 = m_UDFCB7->GetBackgroundColour();
 
-    Model_Infotable::instance().Set("USER_COLOR1", mmColors::userDefColor1);
-    Model_Infotable::instance().Set("USER_COLOR2", mmColors::userDefColor2);
-    Model_Infotable::instance().Set("USER_COLOR3", mmColors::userDefColor3);
-    Model_Infotable::instance().Set("USER_COLOR4", mmColors::userDefColor4);
-    Model_Infotable::instance().Set("USER_COLOR5", mmColors::userDefColor5);
-    Model_Infotable::instance().Set("USER_COLOR6", mmColors::userDefColor6);
-    Model_Infotable::instance().Set("USER_COLOR7", mmColors::userDefColor7);
+    Model_Infotable::instance().setColour("USER_COLOR1", mmColors::userDefColor1);
+    Model_Infotable::instance().setColour("USER_COLOR2", mmColors::userDefColor2);
+    Model_Infotable::instance().setColour("USER_COLOR3", mmColors::userDefColor3);
+    Model_Infotable::instance().setColour("USER_COLOR4", mmColors::userDefColor4);
+    Model_Infotable::instance().setColour("USER_COLOR5", mmColors::userDefColor5);
+    Model_Infotable::instance().setColour("USER_COLOR6", mmColors::userDefColor6);
+    Model_Infotable::instance().setColour("USER_COLOR7", mmColors::userDefColor7);
 
     return true;
 }
diff -Naur a/src/optionsettingsview.h b/src/optionsettingsview.h
--- a/src/optionsettingsview.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/optionsettingsview.h	2025-07-09 01:46:59.668940626 +0200
@@ -80,6 +80,7 @@
     wxCheckBox* m_use_trans_date_time = nullptr;
     wxSpinCtrl* m_budget_days_offset = nullptr;
     wxSpinCtrl* m_reporting_firstday = nullptr;
+    wxChoice* m_reporting_first_weekday = nullptr;
 
     wxCheckBox* m_showToolTips = nullptr;
     wxCheckBox* m_showMoneyTips = nullptr;
diff -Naur a/src/paths.cpp b/src/paths.cpp
--- a/src/paths.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/paths.cpp	2025-07-09 01:46:59.668940626 +0200
@@ -265,7 +265,7 @@
 
     if (AttachmentsFolder.Last() != sep)
         AttachmentsFolder.Append(sep);
-    if (Model_Infotable::instance().GetBoolInfo("ATTACHMENTSSUBFOLDER", true))
+    if (Model_Infotable::instance().getBool("ATTACHMENTSSUBFOLDER", true))
         AttachmentsFolder += wxString::Format("MMEX_%s_Attachments%s", wxFileName::FileName(LastDBPath).GetName(), sep);
 
     return AttachmentsFolder;
diff -Naur a/src/payeedialog.cpp b/src/payeedialog.cpp
--- a/src/payeedialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/payeedialog.cpp	2025-07-09 01:46:59.668940626 +0200
@@ -52,7 +52,7 @@
 m_payee(payee)
 {
     long style = wxCAPTION | wxCLOSE_BOX | wxRESIZE_BORDER;
-    if (!wxDialog::Create(parent, wxID_ANY, _("Edit Payee")
+    if (!wxDialog::Create(parent, wxID_ANY, _t("Edit Payee")
         , wxDefaultPosition, wxDefaultSize, style, name))
         return;
 
@@ -66,7 +66,7 @@
 
 mmEditPayeeDialog::~mmEditPayeeDialog()
 {
-    Model_Infotable::instance().Set("EDITPAYEE_DIALOG_SIZE", GetSize());
+    Model_Infotable::instance().setSize("EDITPAYEE_DIALOG_SIZE", GetSize());
     m_patternTable->GetGridWindow()->Unbind(wxEVT_SIZE, &mmEditPayeeDialog::OnPatternTableSize, this);
 }
 
@@ -80,46 +80,46 @@
     bSizer1->Add(fgSizer1, g_flagsExpand);
 
     // Payee Name
-    fgSizer1->Add(new wxStaticText(this, wxID_STATIC, _("Payee")), g_flagsH);
+    fgSizer1->Add(new wxStaticText(this, wxID_STATIC, _t("Payee")), g_flagsH);
     m_payeeName = new wxTextCtrl(this, wxID_ANY, "");
-    mmToolTip(m_payeeName, _("Enter the Name of the Payee. This name can be renamed at any time."));
+    mmToolTip(m_payeeName, _t("Enter the Name of the Payee. This name can be renamed at any time."));
     fgSizer1->Add(m_payeeName, g_flagsExpand);
 
     // Hidden Status
-    fgSizer1->Add(new wxStaticText(this, wxID_STATIC, _("Hidden")), g_flagsH);
+    fgSizer1->Add(new wxStaticText(this, wxID_STATIC, _t("Hidden")), g_flagsH);
     m_hidden = new wxCheckBox(this, wxID_ANY, "");
-    mmToolTip(m_hidden, _("Indicate whether the payee should hidden and not presented in the payee list for new transactions"));
+    mmToolTip(m_hidden, _t("Indicate whether the payee should hidden and not presented in the payee list for new transactions"));
     fgSizer1->Add(m_hidden, g_flagsExpand);
 
     // Category
-    const wxString title = (Option::instance().TransCategorySelectionNonTransfer() == Option::LASTUSED) ?
-                                _("Last Used Category") : _("Default Category");
+    const wxString title = (Option::instance().getTransCategoryNone() == Option::LASTUSED) ?
+                                _t("Last Used Category") : _t("Default Category");
     fgSizer1->Add(new wxStaticText(this, wxID_STATIC, title), g_flagsH);
     m_category = new mmComboBoxCategory(this, mmID_CATEGORY, wxDefaultSize, -1, true);
-    mmToolTip(m_category, _("The category used as default for this payee"));
+    mmToolTip(m_category, _t("The category used as default for this payee"));
     fgSizer1->Add(m_category, g_flagsExpand);                     
 
     // Reference
-    fgSizer1->Add(new wxStaticText(this, wxID_STATIC, _("Reference")), g_flagsH);
+    fgSizer1->Add(new wxStaticText(this, wxID_STATIC, _t("Reference")), g_flagsH);
     m_reference = new wxTextCtrl(this, wxID_ANY, "");
-    mmToolTip(m_reference, _("A reference to be used for the payee, e.g. bank account number"));
+    mmToolTip(m_reference, _t("A reference to be used for the payee, e.g. bank account number"));
     fgSizer1->Add(m_reference, g_flagsExpand);
 
     // Website
-    fgSizer1->Add(new wxStaticText(this, wxID_STATIC, _("Website")), g_flagsH);
+    fgSizer1->Add(new wxStaticText(this, wxID_STATIC, _t("Website")), g_flagsH);
     m_website = new wxTextCtrl(this, wxID_ANY, "");
-    mmToolTip(m_website, _("Website URL associated with the payee"));
+    mmToolTip(m_website, _t("Website URL associated with the payee"));
     fgSizer1->Add(m_website, g_flagsExpand);
 
     // Notes
-    fgSizer1->Add(new wxStaticText(this, wxID_STATIC, _("Notes")), g_flagsH);
+    fgSizer1->Add(new wxStaticText(this, wxID_STATIC, _t("Notes")), g_flagsH);
     m_Notes = new wxTextCtrl(this, wxID_ANY, ""
         , wxDefaultPosition, wxSize(-1, -1), wxTE_MULTILINE);
     fgSizer1->Add(m_Notes, g_flagsExpand);
-    mmToolTip(m_Notes, _("Enter notes to describe this budget entry"));
+    mmToolTip(m_Notes, _t("Enter notes to describe this budget entry"));
 
     // Patterns
-    fgSizer1->Add(new wxStaticText(this, wxID_STATIC, _("Match Patterns\non Import")), g_flagsH);
+    fgSizer1->Add(new wxStaticText(this, wxID_STATIC, _t("Match Patterns\non Import")), g_flagsH);
     wxBoxSizer* patternTable_Arranger = new wxBoxSizer(wxHORIZONTAL);
     wxBoxSizer* patternTable_Sizer = new wxBoxSizer(wxVERTICAL);
     m_patternTable = new wxGrid(this, wxID_ANY, wxDefaultPosition, wxDefaultSize);
@@ -133,12 +133,13 @@
     patternTable_Sizer->Add(m_patternTable, wxSizerFlags(g_flagsV).Expand().Proportion(0));
     patternTable_Arranger->Add(patternTable_Sizer, wxSizerFlags(g_flagsExpand).Border(wxALL, 0));
     mmToolTip(m_patternTable->GetGridWindow(),
-        _("Enter any string to match this payee on import.\nPatterns are tested in the order entered here.") + "\n\n" +
-        _("Tips: You can use wildcard characters - question mark (?), asterisk (*) - in your search criteria.") + "\n" +
-        _("Use the question mark (?) to find any single character - for example, s?t finds 'sat' and 'set'.") + "\n" +
-        _("Use the asterisk (*) to find any number of characters - for example, s*d finds 'sad' and 'started'.") + "\n" +
-        _("Use the asterisk (*) in the begin to find any string in the middle of the sentence.") + "\n" +
-        _("Use regex: to match using regular expressions."));
+        _t("Enter any string to match this payee on import.\nPatterns are tested in the order entered here.") + "\n\n" +
+        _tu("Tips: Wildcard characters—question mark (?), asterisk (*)—can be used in search criteria.") + "\n" +
+        _tu("Use the question mark (?) to find any single character—for example, “s?t” finds “sat” and “set”.") + "\n" +
+        _tu("Use the asterisk (*) to find any number of characters—for example, “s*d” finds “sad” and “started”.") + "\n" +
+        _tu("Use the asterisk (*) at the beginning to find any string in the middle of the sentence.") + "\n" +
+        _t("Use regex: to match using regular expressions.")
+    );
 
     patternButton_Arranger = new wxBoxSizer(wxVERTICAL);
     //Move up button
@@ -155,7 +156,7 @@
     //Buttons
     wxBoxSizer* bSizer3 = new wxBoxSizer(wxHORIZONTAL);
     bSizer1->Add(bSizer3, wxSizerFlags(g_flagsV).Center());
-    wxButton* itemButtonOK = new wxButton(this, wxID_OK, _("&OK "));
+    wxButton* itemButtonOK = new wxButton(this, wxID_OK, _t("&OK "));
     wxButton* itemButtonCancel = new wxButton(this, wxID_CANCEL, wxGetTranslation(g_CancelLabel));
     bSizer3->Add(itemButtonOK, g_flagsH);
     bSizer3->Add(itemButtonCancel, g_flagsH);
@@ -195,15 +196,15 @@
 void mmEditPayeeDialog::OnOk(wxCommandEvent& /*event*/)
 {
     if (!m_website->GetValue().empty() && !isValidURI(m_website->GetValue()))
-        return mmErrorDialogs::ToolTip4Object(m_website, _("Please enter a valid URL"), _("Invalid URL"));
+        return mmErrorDialogs::ToolTip4Object(m_website, _t("Please enter a valid URL"), _t("Invalid URL"));
 
     if (!m_category->GetValue().IsEmpty() && !m_category->mmIsValid())
-        return mmErrorDialogs::ToolTip4Object(m_category, _("Invalid value"), _("Category"));
+        return mmErrorDialogs::ToolTip4Object(m_category, _t("Invalid value"), _t("Category"));
 
     wxString name = m_payeeName->GetValue();
 
     if (name.IsEmpty())
-        return mmErrorDialogs::ToolTip4Object(m_payeeName, _("Invalid value"), _("Payee"));
+        return mmErrorDialogs::ToolTip4Object(m_payeeName, _t("Invalid value"), _t("Payee"));
 
     Model_Payee::Data_Set payees = Model_Payee::instance().find(Model_Payee::PAYEENAME(name));
     if ((!m_payee && payees.empty()) ||
@@ -239,7 +240,7 @@
         mmWebApp::MMEX_WebApp_UpdatePayee();
     }
     else
-        return mmErrorDialogs::ToolTip4Object(m_payeeName, _("A payee with this name already exists"), _("Payee"));
+        return mmErrorDialogs::ToolTip4Object(m_payeeName, _t("A payee with this name already exists"), _t("Payee"));
     
     EndModal(wxID_OK);
 }
@@ -439,7 +440,7 @@
 
 mmPayeeDialog::~mmPayeeDialog()
 {
-    Model_Infotable::instance().Set("PAYEES_DIALOG_SIZE", GetSize());
+    Model_Infotable::instance().setSize("PAYEES_DIALOG_SIZE", GetSize());
 }
 
 mmPayeeDialog::mmPayeeDialog(wxWindow* parent, bool payee_choose, const wxString& name, const wxString& payee_selected) :
@@ -448,14 +449,14 @@
     , m_sort(PAYEE_NAME)
     , m_lastSort(PAYEE_NAME)    
 {
-    ColName_[PAYEE_NAME] = _("Name");
-    ColName_[PAYEE_HIDDEN] = _("Hidden");
-    ColName_[PAYEE_CATEGORY]  = (Option::instance().TransCategorySelectionNonTransfer() == Option::LASTUSED) ?
-                                _("Last Used Category") : _("Default Category");
-    ColName_[PAYEE_NUMBER] = _("Reference");
-    ColName_[PAYEE_WEBSITE] = _("Website");
-    ColName_[PAYEE_NOTES] = _("Notes");
-    ColName_[PAYEE_PATTERN] = _("Match Pattern");
+    ColName_[PAYEE_NAME] = _t("Name");
+    ColName_[PAYEE_HIDDEN] = _t("Hidden");
+    ColName_[PAYEE_CATEGORY]  = (Option::instance().getTransCategoryNone() == Option::LASTUSED) ?
+                                _t("Last Used Category") : _t("Default Category");
+    ColName_[PAYEE_NUMBER] = _t("Reference");
+    ColName_[PAYEE_WEBSITE] = _t("Website");
+    ColName_[PAYEE_NOTES] = _t("Notes");
+    ColName_[PAYEE_PATTERN] = _t("Match Pattern");
 
 
     this->SetFont(parent->GetFont());
@@ -502,7 +503,7 @@
     SetExtraStyle(GetExtraStyle()|wxWS_EX_BLOCK_EVENTS);
 
     long style = wxCAPTION | wxCLOSE_BOX | wxRESIZE_BORDER;
-    if (!wxDialog::Create(parent, wxID_ANY, _("Payee Manager")
+    if (!wxDialog::Create(parent, wxID_ANY, _t("Payee Manager")
         , wxDefaultPosition, wxDefaultSize, style, name))
     {
         return;
@@ -578,17 +579,17 @@
 
     m_magicButton = new wxBitmapButton(buttons_panel
         , wxID_APPLY, mmBitmapBundle(png::MORE_OPTIONS, mmBitmapButtonSize));
-    mmToolTip(m_magicButton, _("Other tools"));
+    mmToolTip(m_magicButton, _t("Other tools"));
     tools_sizer2->Add(m_magicButton, g_flagsH);
 
     m_maskTextCtrl = new wxSearchCtrl(buttons_panel, wxID_FIND);
     m_maskTextCtrl->SetFocus();
     tools_sizer2->Prepend(m_maskTextCtrl, g_flagsExpand);
-    tools_sizer2->Prepend(new wxStaticText(buttons_panel, wxID_STATIC, _("Search")), g_flagsH);
+    tools_sizer2->Prepend(new wxStaticText(buttons_panel, wxID_STATIC, _t("Search")), g_flagsH);
 
     wxStdDialogButtonSizer*  buttons_sizer = new wxStdDialogButtonSizer;
     tools_sizer->Add(buttons_sizer, wxSizerFlags(g_flagsV).Center());
-    wxButton* buttonOK = new wxButton(buttons_panel, wxID_OK, _("&OK "));
+    wxButton* buttonOK = new wxButton(buttons_panel, wxID_OK, _t("&OK "));
     wxButton* btnCancel = new wxButton(buttons_panel, wxID_CANCEL, wxGetTranslation(g_CancelLabel));
 
     buttons_sizer->Add(buttonOK, g_flagsH);
@@ -731,25 +732,25 @@
         {
             if (Model_Payee::instance().is_used(p))
             {
-                wxString deletePayeeErrMsg = _("Payee in use.");
+                wxString deletePayeeErrMsg = _t("Payee in use.");
                 deletePayeeErrMsg
                     << "\n"
                     << payee->PAYEENAME
                     << "\n"
-                    << _("It will be not removed")
+                    << _t("It will be not removed")
                     << "\n\n"
-                    << _("Tip: Change all transactions using this Payee to another Payee"
+                    << _t("Tip: Change all transactions using this Payee to another Payee"
                         " using the merge command:")
-                    << "\n\n" << _u("Tools → Merge → Payees");
-                wxMessageBox(deletePayeeErrMsg, _("Payee Manager: Delete Error"), wxOK | wxICON_ERROR);
+                    << "\n\n" << _tu("Tools → Merge → Payees");
+                wxMessageBox(deletePayeeErrMsg, _t("Payee Manager: Delete Error"), wxOK | wxICON_ERROR);
                 continue;
             }
             Model_Checking::Data_Set deletedTrans = Model_Checking::instance().find(Model_Checking::PAYEEID(p));
             wxMessageDialog msgDlg(this
-                , _("Deleted transactions exist which use this payee.")
-                    + "\n\n" + _("Deleting the payee will also automatically purge the associated deleted transactions.")
-                    + "\n\n" + _("Do you wish to continue ?")
-                , _("Confirm Payee Deletion")
+                , _t("Deleted transactions exist which use this payee.")
+                    + "\n\n" + _t("Deleting the payee will also automatically purge the associated deleted transactions.")
+                    + "\n\n" + _t("Do you want to continue?")
+                , _t("Confirm Payee Deletion")
                 , wxYES_NO | wxNO_DEFAULT | wxICON_WARNING);
             if (deletedTrans.empty() || msgDlg.ShowModal() == wxID_YES)
             {
@@ -758,7 +759,7 @@
                     Model_Splittransaction::instance().Savepoint();
                     Model_Attachment::instance().Savepoint();
                     Model_CustomFieldData::instance().Savepoint();
-                    const wxString& RefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+                    const wxString& RefType = Model_Checking::refTypeName;
 
                     for (auto& tran : deletedTrans) {
                         Model_Checking::instance().remove(tran.TRANSID);
@@ -773,7 +774,7 @@
                 }
 
                 Model_Payee::instance().remove(p);
-                mmAttachmentManage::DeleteAllAttachments(Model_Attachment::REFTYPE_STR_PAYEE, p);
+                mmAttachmentManage::DeleteAllAttachments(Model_Payee::refTypeName, p);
                 m_payee_id = -1;
                 refreshRequested_ = true;
                 fillControls();
@@ -814,7 +815,7 @@
 
 void mmPayeeDialog::OnOrganizeAttachments()
 {
-    wxString RefType = Model_Attachment::REFTYPE_STR_PAYEE;
+    wxString RefType = Model_Payee::refTypeName;
 
     mmAttachmentDialog dlg(this, RefType, m_payee_id);
     dlg.ShowModal();
@@ -828,11 +829,11 @@
     if (dlg.ShowModal() == wxID_OK)
     {
         wxString msgStr;
-        msgStr << _("Merge payees completed") << "\n\n"
-            << wxString::Format(_("Records have been updated in the database: %i")
+        msgStr << _t("Merge payees completed") << "\n\n"
+            << wxString::Format(_t("Records have been updated in the database: %i")
                 , dlg.updatedPayeesCount())
             << "\n\n";
-        wxMessageBox(msgStr, _("Merge payees result"));
+        wxMessageBox(msgStr, _t("Merge payees result"));
         refreshRequested_ = true;
     }
 }
@@ -871,27 +872,27 @@
 
     wxMenu mainMenu;
     if (payee) mainMenu.SetTitle(payee->PAYEENAME);
-    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_DEFINE_CATEGORY, _("Define &Category")));
+    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_DEFINE_CATEGORY, _t("Define &Category")));
     if (!payee) mainMenu.Enable(MENU_DEFINE_CATEGORY, false);
-    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_REMOVE_CATEGORY, _("Remove Ca&tegory")));
+    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_REMOVE_CATEGORY, _t("Remove Ca&tegory")));
     if (!payee) mainMenu.Enable(MENU_REMOVE_CATEGORY, false);
     mainMenu.AppendSeparator();
 
-    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_NEW_PAYEE, _("&Add ")));
-    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_EDIT_PAYEE, _("&Edit ")));
+    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_NEW_PAYEE, _t("&Add ")));
+    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_EDIT_PAYEE, _t("&Edit ")));
     if (!payee) mainMenu.Enable(MENU_EDIT_PAYEE, false);
-    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_DELETE_PAYEE, _("&Remove ")));
+    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_DELETE_PAYEE, _t("&Remove ")));
     std::list<int64> selected;
     FindSelectedPayees(selected);
     if (!payee || selected.front() == -1) mainMenu.Enable(MENU_DELETE_PAYEE, false);
     mainMenu.AppendSeparator();
 
-    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_ORGANIZE_ATTACHMENTS, _("&Attachment Manager")));
+    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_ORGANIZE_ATTACHMENTS, _t("&Attachment Manager")));
     if (!payee) mainMenu.Enable(MENU_ORGANIZE_ATTACHMENTS, false);
     mainMenu.AppendSeparator();
 
-    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_RELOCATE_PAYEE, _("Merge &Payee")));
-    //SetToolTip(_("Change all transactions using one Payee to another Payee"));
+    mainMenu.Append(new wxMenuItem(&mainMenu, MENU_RELOCATE_PAYEE, _t("Merge &Payee")));
+    //SetToolTip(_t("Change all transactions using one Payee to another Payee"));
     if (!payee) mainMenu.Enable(MENU_RELOCATE_PAYEE, false);
 
     PopupMenu(&mainMenu);
diff -Naur a/src/payeedialog.h b/src/payeedialog.h
--- a/src/payeedialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/payeedialog.h	2025-07-09 01:46:59.672940649 +0200
@@ -106,7 +106,7 @@
     int64 m_payee_id = -1;
     bool m_payee_choose = false;
     wxString m_init_selected_payee;
-    int m_payee_rename = -1;
+    //int m_payee_rename = -1;
     wxString m_maskStr;
     int m_sort = cols::PAYEE_NAME, m_lastSort = cols::PAYEE_NAME;
     bool refreshRequested_ = false, m_sortReverse = false;
diff -Naur a/src/primitive.cpp b/src/primitive.cpp
--- a/src/primitive.cpp	1970-01-01 01:00:00.000000000 +0100
+++ b/src/primitive.cpp	2025-07-09 01:46:59.672940649 +0200
@@ -0,0 +1,162 @@
+/*******************************************************
+ Copyright (C) 2006 Madhan Kanagavel
+ Copyright (C) 2013-2022 Nikolay Akimov
+ Copyright (C) 2021-2024 Mark Whalley (mark@ipx.co.uk)
+ Copyright (C) 2025 George Ef (george.a.ef@gmail.com)
+
+ This program is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2 of the License, or
+ (at your option) any later version.
+
+ This program is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program; if not, write to the Free Software
+ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ ********************************************************/
+
+#include "primitive.h"
+
+//----------------------------------------------------------------------------
+
+int pow10(const int y)
+{
+    switch (y) {
+    case 0: return 1;
+    case 1: return 10;
+    case 2: return 100;
+    case 3: return 1000;
+    case 4: return 10000;
+    case 5: return 100000;
+    case 6: return 1000000;
+    case 7: return 10000000;
+    case 8: return 100000000;
+    case 9: return 1000000000;
+    default: return 10;
+    }
+}
+
+//----------------------------------------------------------------------------
+
+int CaseInsensitiveCmp(const wxString &s1, const wxString &s2)
+{
+    return s1.CmpNoCase(s2);
+}
+
+int CaseInsensitiveLocaleCmp(const wxString &s1, const wxString &s2)
+{
+    return std::wcscoll(s1.Lower().wc_str(),s2.Lower().wc_str());
+}
+
+void StringBuilder::append(const wxString x) {
+    if (x.empty())
+        return;
+    buffer.Append(x);
+    flag = true;
+}
+
+void StringBuilder::sep(const wxString s) {
+    if (!flag)
+        return;
+    buffer.Append(s);
+    flag = false;
+}
+
+const wxString mmTrimAmount(
+    const wxString& value, const wxString& decimal, const wxString& decimal_new
+) {
+    const wxString valid_chars = "-0123456789" + decimal;
+    wxString str;
+    for (const auto& c : value) {
+        if (valid_chars.Contains(c))
+            str += c;
+    }
+    if (!decimal_new.empty())
+        str.Replace(decimal, decimal_new);
+    return str;
+}
+
+bool isValidURI(const wxString& validate)
+{
+    wxString uri = validate.Lower().Trim();
+    wxRegEx pattern(R"(^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$)");
+    return pattern.Matches(uri);
+}
+
+//----------------------------------------------------------------------------
+
+const wxString MONTHS[12] =
+{
+    _n("January"), _n("February"), _n("March"),
+    _n("April"),   _n("May"),      _n("June"),
+    _n("July"),    _n("August"),   _n("September"),
+    _n("October"), _n("November"), _n("December")
+};
+
+const wxString MONTHS_SHORT[12] =
+{
+    _n("Jan"), _n("Feb"), _n("Mar"),
+    _n("Apr"), _n("May"), _n("Jun"),
+    _n("Jul"), _n("Aug"), _n("Sep"),
+    _n("Oct"), _n("Nov"), _n("Dec")
+};
+
+const wxString g_days_of_week[7] =
+{
+    _n("Sunday"), _n("Monday"), _n("Tuesday"), _n("Wednesday"),
+    _n("Thursday"), _n("Friday"), _n("Saturday")
+};
+
+const wxString g_short_days_of_week[7] =
+{
+    _n("Sun"), _n("Mon"), _n("Tue"), _n("Wed"), _n("Thu"), _n("Fri"), _n("Sat")
+};
+
+bool mmParseISODate(const wxString& in, wxDateTime& out)
+{
+    if (in.IsEmpty() || !(out.ParseDateTime(in) || out.ParseDate(in))) {
+        out = wxDateTime::Today();
+        return false;
+    }
+    int year = out.GetYear();
+    if (year < 50)
+        out.Add(wxDateSpan::Years(2000));
+    else if (year < 100)
+        out.Add(wxDateSpan::Years(1900));
+    return true;
+}
+
+//----------------------------------------------------------------------------
+
+const wxColor* bestFontColour(const wxColour& background)
+{
+    // http://stackoverflow.com/a/3943023/112731
+    int r = static_cast<int>(background.Red());
+    int g = static_cast<int>(background.Green());
+    int b = static_cast<int>(background.Blue());
+    int k = (r * 299 + g * 587 + b * 114);
+    wxLogDebug(
+        "best FontColour: [%s] -> r=%d, g=%d, b=%d | k: %d",
+        background.GetAsString(wxC2S_HTML_SYNTAX), r, g, b, k
+    );
+    return (k > 149000) ? wxBLACK : wxWHITE;
+}
+
+wxColour getUDColour(const int c)
+{
+    switch (c) {
+    case 1: return  mmColors::userDefColor1;
+    case 2: return  mmColors::userDefColor2;
+    case 3: return  mmColors::userDefColor3;
+    case 4: return  mmColors::userDefColor4;
+    case 5: return  mmColors::userDefColor5;
+    case 6: return  mmColors::userDefColor6;
+    case 7: return  mmColors::userDefColor7;
+    }
+    return wxNullColour;
+}
+
diff -Naur a/src/primitive.h b/src/primitive.h
--- a/src/primitive.h	1970-01-01 01:00:00.000000000 +0100
+++ b/src/primitive.h	2025-07-09 01:46:59.672940649 +0200
@@ -0,0 +1,124 @@
+/*******************************************************
+ Copyright (C) 2006 Madhan Kanagavel
+ Copyright (C) 2013-2022 Nikolay Akimov
+ Copyright (C) 2021,2024 Mark Whalley (mark@ipx.co.uk)
+ Copyright (C) 2025 George Ef (george.a.ef@gmail.com)
+
+ This program is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2 of the License, or
+ (at your option) any later version.
+
+ This program is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program; if not, write to the Free Software
+ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ ********************************************************/
+
+#pragma once
+
+#include "defs.h"
+
+//----------------------------------------------------------------------------
+
+typedef wxLongLong int64;
+
+//fast alternative for pow(10, y)
+int pow10(const int y);
+
+//----------------------------------------------------------------------------
+
+struct caseInsensitiveComparator {
+    bool operator()(const wxString& lhs, const wxString& rhs) const {
+        return lhs.CmpNoCase(rhs) < 0;
+    }
+};
+
+int CaseInsensitiveCmp(const wxString &s1, const wxString &s2);
+int CaseInsensitiveLocaleCmp(const wxString &s1, const wxString &s2);
+
+typedef wxString::const_iterator StringIt;
+
+struct StringBuilder
+{
+    wxString buffer = "";
+    bool flag = false;
+
+    void append(const wxString x);
+    void sep(const wxString s = " ");
+    void flush();
+    void reset();
+};
+
+inline void StringBuilder::flush() {
+    flag = false;
+}
+
+inline void StringBuilder::reset() {
+    // make buffer empty, but don't free memory
+    buffer.Empty();
+    flag = false;
+}
+
+const wxString mmTrimAmount(
+    const wxString& value, const wxString& decimal, const wxString& replace_decimal = ""
+);
+
+bool isValidURI(const wxString& validate);
+
+//----------------------------------------------------------------------------
+
+extern const wxString MONTHS[12];
+extern const wxString MONTHS_SHORT[12];
+extern const wxString g_days_of_week[7];
+extern const wxString g_short_days_of_week[7];
+
+inline const wxString mmGetMonthName(const wxDateTime::Month& month)
+{
+    return MONTHS[static_cast<int>(month)];
+}
+
+inline wxString dateTimeISO(wxDateTime dateTime)
+{
+    return (dateTime == wxInvalidDateTime) ? "" : dateTime.FormatISOCombined();
+}
+
+inline wxString dateISO(wxDateTime date)
+{
+    return (date == wxInvalidDateTime) ? "" : date.FormatISODate();
+}
+
+inline wxString dateISOStart(wxDateTime date)
+{
+    return dateISO(date).append("");
+}
+
+inline wxString dateISOEnd(wxDateTime date)
+{
+    return dateISO(date).append("~");
+}
+
+bool mmParseISODate(const wxString& in_str, wxDateTime& out_date);
+
+//----------------------------------------------------------------------------
+
+const wxColor* bestFontColour(const wxColour& background);
+
+class mmColors
+{
+public:
+    static wxColour userDefColor1;
+    static wxColour userDefColor2;
+    static wxColour userDefColor3;
+    static wxColour userDefColor4;
+    static wxColour userDefColor5;
+    static wxColour userDefColor6;
+    static wxColour userDefColor7;
+};
+
+wxColour getUDColour(const int c);
+
diff -Naur a/src/recentfiles.cpp b/src/recentfiles.cpp
--- a/src/recentfiles.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/recentfiles.cpp	2025-07-09 01:46:59.672940649 +0200
@@ -27,10 +27,10 @@
 
 mmFileHistory::~mmFileHistory()
 {
-    this->Save();
+    this->SaveHistory();
 }
 
-void mmFileHistory::Clear()
+void mmFileHistory::ClearHistory()
 {
     const int count = GetCount();
     for (int i = 0; i < count; i++)
@@ -39,46 +39,42 @@
     }
 }
 
-void mmFileHistory::Load()
+void mmFileHistory::LoadHistory()
 {
     wxString buf, historyFile;
 
-    for (int i = GetMaxFiles(); i > 0 ; i--)
-    {
-        if (i == 0)
-        {
-            historyFile = Model_Setting::instance().GetStringSetting("LASTFILENAME", "");
-        }
-        else {
+    for (int i = GetMaxFiles(); i > 0 ; i--) {
+        //if (i == 0) {
+        //    historyFile = Model_Setting::instance().getString("LASTFILENAME", "");
+        //}
+        //else {
             buf.Printf("RECENT_DB_%d", i);
-            historyFile = Model_Setting::instance().GetStringSetting(buf, wxEmptyString);
-        }
+            historyFile = Model_Setting::instance().getString(buf, wxEmptyString);
+        //}
         if (!historyFile.empty()) {
             AddFileToHistory(historyFile);
         }
     }
 }
 
-void mmFileHistory::Save()
+void mmFileHistory::SaveHistory()
 {
+    wxLogDebug("{{{ mmFileHistory::SaveHistory()");
     Model_Setting::instance().Savepoint();
     wxString buf, historyFile;
-    for (int i = 0; i < GetMaxFiles(); i++)
-    {
+    for (int i = 0; i < GetMaxFiles(); i++) {
         buf = wxString::Format("RECENT_DB_%d", i + 1);
         if (i < static_cast<int>(GetCount())) {
-            if (i == 0)
-            {
-                historyFile = Model_Setting::instance().GetStringSetting("LASTFILENAME", "");
-            }
-            else {
-                historyFile = GetHistoryFile(i);
-            }
+            historyFile = (i == 0) ?
+                Model_Setting::instance().getString("LASTFILENAME", "") :
+                GetHistoryFile(i);
             wxLogDebug("%s %s", buf, historyFile);
-            Model_Setting::instance().Set(buf, historyFile);
+            Model_Setting::instance().setString(buf, historyFile);
+        }
+        else {
+            Model_Setting::instance().setString(buf, wxString(""));
         }
-        else
-            Model_Setting::instance().Set(buf, wxString(""));
     }
     Model_Setting::instance().ReleaseSavepoint();
+    wxLogDebug("}}}");
 }
diff -Naur a/src/recentfiles.h b/src/recentfiles.h
--- a/src/recentfiles.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/recentfiles.h	2025-07-09 01:46:59.672940649 +0200
@@ -28,9 +28,9 @@
     ~mmFileHistory();
 
 public:
-    void Clear();
-    void Load();
-    void Save();
+    void ClearHistory();
+    void LoadHistory();
+    void SaveHistory();
 };
 
 #endif
diff -Naur a/src/relocatecategorydialog.cpp b/src/relocatecategorydialog.cpp
--- a/src/relocatecategorydialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/relocatecategorydialog.cpp	2025-07-09 01:46:59.672940649 +0200
@@ -42,7 +42,7 @@
 
 relocateCategoryDialog::~relocateCategoryDialog()
 {
-    Model_Infotable::instance().Set("RELOCATECATEG_DIALOG_SIZE", GetSize());
+    Model_Infotable::instance().setSize("RELOCATECATEG_DIALOG_SIZE", GetSize());
 }
 
 relocateCategoryDialog::relocateCategoryDialog(wxWindow* parent
@@ -86,7 +86,7 @@
     flagsExpand.Align(wxALIGN_LEFT).Border(wxALL, 5).Expand();
 
     wxStaticText* headerText = new wxStaticText(this, wxID_STATIC
-        , _("Merge Categories"));
+        , _t("Merge Categories"));
     wxStaticLine* lineTop = new wxStaticLine(this, wxID_STATIC);
 
     cbSourceCategory_ = new mmComboBoxCategory(this, wxID_LAST);
@@ -99,7 +99,7 @@
     cbDestCategory_->SetMinSize(wxSize(200, -1));
 
     cbDeleteSourceCategory_ = new wxCheckBox(this, wxID_ANY
-        , _("&Delete source category after merge (if source category has no subcategories)"));
+        , _t("&Delete source category after merge (if source category has no subcategories)"));
 
     wxStaticLine* lineBottom = new wxStaticLine(this, wxID_STATIC);
 
@@ -115,8 +115,8 @@
     boxSizer->Add(headerText, g_flagsV);
     boxSizer->Add(lineTop, g_flagsExpand);
 
-    request_sizer->Add(new wxStaticText(this, wxID_STATIC, _("Source:")), flagsH);
-    request_sizer->Add(new wxStaticText(this, wxID_STATIC, _("Target:")), flagsH);
+    request_sizer->Add(new wxStaticText(this, wxID_STATIC, _t("Source:")), flagsH);
+    request_sizer->Add(new wxStaticText(this, wxID_STATIC, _t("Target:")), flagsH);
     request_sizer->Add(cbSourceCategory_, flagsExpand);
     request_sizer->Add(cbDestCategory_, flagsExpand);
 
@@ -130,8 +130,8 @@
     wxStaticLine* lineBottom2 = new wxStaticLine(this, wxID_STATIC);
     boxSizer->Add(lineBottom2, flagsExpand);
 
-    wxButton* okButton = new wxButton(this, wxID_OK, _("&Merge"));
-    wxButton* cancelButton = new wxButton(this, wxID_CANCEL, _("&Close"));
+    wxButton* okButton = new wxButton(this, wxID_OK, _t("&Merge"));
+    wxButton* cancelButton = new wxButton(this, wxID_CANCEL, _t("&Close"));
     cancelButton-> SetFocus();
     wxBoxSizer* buttonBoxSizer = new wxBoxSizer(wxHORIZONTAL);
     buttonBoxSizer->Add(okButton, flagsH);
@@ -150,12 +150,12 @@
 
     const auto& source_category_name = cbSourceCategory_->GetValue();
     const auto& destination_category_name = cbDestCategory_->GetValue();
-    const wxString& info = wxString::Format(_("From %1$s to %2$s")
+    const wxString& info = wxString::Format(_t("From %1$s to %2$s")
         , source_category_name
         , destination_category_name);
 
-    if (wxMessageBox(_("Please Confirm:") + "\n" + info
-        , _("Merge categories confirmation"), wxOK | wxCANCEL | wxICON_INFORMATION) == wxOK)
+    if (wxMessageBox(_t("Please Confirm:") + "\n" + info
+        , _t("Merge categories confirmation"), wxOK | wxCANCEL | wxICON_INFORMATION) == wxOK)
     {
         auto transactions = Model_Checking::instance()
             .find(Model_Checking::CATEGID(m_sourceCatID));
@@ -252,12 +252,12 @@
     const int total = trxs_size + checks_size + bills_size + budget_split_size + payees_size + budget_size;
 
     wxString msgStr = wxString()
-        << wxString::Format(_("Records found in transactions: %i"), trxs_size) << "\n"
-        << wxString::Format(_("Records found in split transactions: %i"), checks_size) << "\n"
-        << wxString::Format(_("Records found in scheduled transactions: %i"), bills_size) << "\n"
-        << wxString::Format(_("Records found in scheduled split transactions: %i"), budget_split_size) << "\n"
-        << wxString::Format(_("Records found as default payee category: %i"), payees_size) << "\n"
-        << wxString::Format(_("Records found in budget: %i"), budget_size);
+        << wxString::Format(_t("Records found in transactions: %i"), trxs_size) << "\n"
+        << wxString::Format(_t("Records found in split transactions: %i"), checks_size) << "\n"
+        << wxString::Format(_t("Records found in scheduled transactions: %i"), bills_size) << "\n"
+        << wxString::Format(_t("Records found in scheduled split transactions: %i"), budget_split_size) << "\n"
+        << wxString::Format(_t("Records found as default payee category: %i"), payees_size) << "\n"
+        << wxString::Format(_t("Records found in budget: %i"), budget_size);
 
     m_info->SetLabel(msgStr);
 
diff -Naur a/src/relocatecategorydialog.h b/src/relocatecategorydialog.h
--- a/src/relocatecategorydialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/relocatecategorydialog.h	2025-07-09 01:46:59.672940649 +0200
@@ -40,7 +40,7 @@
 
     bool Create(wxWindow* parent
         , wxWindowID id = wxID_ANY
-        , const wxString& caption = _("Merge Categories")
+        , const wxString& caption = _t("Merge Categories")
         , const wxPoint& pos = wxDefaultPosition
         , const wxSize& size = wxDefaultSize
         , long style = wxCAPTION | wxSYSTEM_MENU | wxCLOSE_BOX
@@ -66,7 +66,7 @@
     wxCheckBox* cbDeleteSourceCategory_ = nullptr;
     wxStaticText* m_info = nullptr;
 
-    wxButton* m_buttonDest = nullptr;
+    //wxButton* m_buttonDest = nullptr;
     int m_changedRecords = 0;
 };
 
diff -Naur a/src/relocatepayeedialog.cpp b/src/relocatepayeedialog.cpp
--- a/src/relocatepayeedialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/relocatepayeedialog.cpp	2025-07-09 01:46:59.672940649 +0200
@@ -45,7 +45,7 @@
 
 relocatePayeeDialog::~relocatePayeeDialog()
 {
-    Model_Infotable::instance().Set("RELOCATEPAYEE_DIALOG_SIZE", GetSize());
+    Model_Infotable::instance().setSize("RELOCATEPAYEE_DIALOG_SIZE", GetSize());
 }
 
 relocatePayeeDialog::relocatePayeeDialog(wxWindow* parent, int64 source_payee_id)
@@ -84,7 +84,7 @@
     flagsExpand.Align(wxALIGN_LEFT).Border(wxALL, 5).Expand();
 
     wxStaticText* headerText = new wxStaticText( this, wxID_STATIC
-        , _("Merge Payees"));
+        , _t("Merge Payees"));
     wxStaticLine* lineTop = new wxStaticLine(this,wxID_STATIC
         , wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL);
 
@@ -96,7 +96,7 @@
     cbDestPayee_->SetMinSize(wxSize(200, -1));
 
     cbDeleteSourcePayee_ = new wxCheckBox(this, wxID_ANY
-        , _("&Delete source payee after merge"));
+        , _t("&Delete source payee after merge"));
 
     wxBoxSizer* topSizer = new wxBoxSizer(wxVERTICAL);
     this->SetSizer(topSizer);
@@ -109,8 +109,8 @@
     boxSizer->Add(headerText, g_flagsV);
     boxSizer->Add(lineTop, flagsExpand);
 
-    request_sizer->Add(new wxStaticText( this, wxID_STATIC,_("Source:")), flagsH);
-    request_sizer->Add(new wxStaticText( this, wxID_STATIC,_("Target:")), flagsH);
+    request_sizer->Add(new wxStaticText( this, wxID_STATIC,_t("Source:")), flagsH);
+    request_sizer->Add(new wxStaticText( this, wxID_STATIC,_t("Target:")), flagsH);
     request_sizer->Add(cbSourcePayee_, flagsExpand);
     request_sizer->Add(cbDestPayee_, flagsExpand);
 
@@ -128,8 +128,8 @@
         , wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL);
     boxSizer->Add(lineBottom, flagsExpand);
 
-    wxButton* okButton = new wxButton(this, wxID_OK, _("&Merge"));
-    wxButton* cancelButton = new wxButton(this, wxID_CANCEL, _("&Close"));
+    wxButton* okButton = new wxButton(this, wxID_OK, _t("&Merge"));
+    wxButton* cancelButton = new wxButton(this, wxID_CANCEL, _t("&Close"));
 
     wxBoxSizer* buttonBoxSizer = new wxBoxSizer(wxHORIZONTAL);
     buttonBoxSizer->Add(okButton, flagsH);
@@ -148,12 +148,12 @@
 {
     const auto& source_payee_name = cbSourcePayee_->GetValue();
     const auto& destination_payee_name = cbDestPayee_->GetValue();
-    const wxString& info = wxString::Format(_("From %1$s to %2$s")
+    const wxString& info = wxString::Format(_t("From %1$s to %2$s")
         , source_payee_name
         , destination_payee_name);
 
-    int ans = wxMessageBox(_("Please Confirm:") + "\n" + info
-        , _("Merge payees confirmation")
+    int ans = wxMessageBox(_t("Please Confirm:") + "\n" + info
+        , _t("Merge payees confirmation")
         , wxOK | wxCANCEL | wxICON_INFORMATION);
 
     if (ans == wxOK)
@@ -178,7 +178,7 @@
         {
             if (Model_Payee::instance().remove(sourcePayeeID_))
             {
-                mmAttachmentManage::DeleteAllAttachments(Model_Attachment::REFTYPE_STR_PAYEE, sourcePayeeID_);
+                mmAttachmentManage::DeleteAllAttachments(Model_Payee::refTypeName, sourcePayeeID_);
                 mmWebApp::MMEX_WebApp_UpdatePayee();
             }
             cbSourcePayee_->mmDoReInitialize();
@@ -205,8 +205,8 @@
     }
 
     wxString msgStr = wxString()
-        << wxString::Format(_("Records found in transactions: %i"), trxs_size) << "\n"
-        << wxString::Format(_("Records found in scheduled transactions: %i"), bills_size);
+        << wxString::Format(_t("Records found in transactions: %i"), trxs_size) << "\n"
+        << wxString::Format(_t("Records found in scheduled transactions: %i"), bills_size);
 
     m_info->SetLabel(msgStr);
 
diff -Naur a/src/relocatepayeedialog.h b/src/relocatepayeedialog.h
--- a/src/relocatepayeedialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/relocatepayeedialog.h	2025-07-09 01:46:59.672940649 +0200
@@ -39,7 +39,7 @@
 private:
     bool Create(wxWindow* parent
         , wxWindowID id = wxID_ANY
-        , const wxString& caption = _("Merge Payees")
+        , const wxString& caption = _t("Merge Payees")
         , const wxPoint& pos = wxDefaultPosition
         , const wxSize& size = wxDefaultSize
         , long style = wxCAPTION | wxSYSTEM_MENU | wxCLOSE_BOX
diff -Naur a/src/relocatetagdialog.cpp b/src/relocatetagdialog.cpp
--- a/src/relocatetagdialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/relocatetagdialog.cpp	2025-07-09 01:46:59.672940649 +0200
@@ -29,6 +29,7 @@
 #include "model/Model_Checking.h"
 #include "model/Model_Payee.h"
 #include "model/Model_Attachment.h"
+#include "model/Model_Tag.h"
 
 wxIMPLEMENT_DYNAMIC_CLASS(relocateTagDialog, wxDialog);
 
@@ -45,7 +46,7 @@
 
 relocateTagDialog::~relocateTagDialog()
 {
-    Model_Infotable::instance().Set("RELOCATETAG_DIALOG_SIZE", GetSize());
+    Model_Infotable::instance().setSize("RELOCATETAG_DIALOG_SIZE", GetSize());
 }
 
 relocateTagDialog::relocateTagDialog(wxWindow* parent, int64 source_tag_id)
@@ -84,7 +85,7 @@
     flagsExpand.Align(wxALIGN_LEFT).Border(wxALL, 5).Expand();
 
     wxStaticText* headerText = new wxStaticText( this, wxID_STATIC
-        , _("Merge Tags"));
+        , _t("Merge Tags"));
     wxStaticLine* lineTop = new wxStaticLine(this,wxID_STATIC
         , wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL);
 
@@ -98,7 +99,7 @@
     cbDestTag_->SetMinSize(wxSize(200, -1));
 
     cbDeleteSourceTag_ = new wxCheckBox(this, wxID_ANY
-        , _("&Delete source tag after merge"));
+        , _t("&Delete source tag after merge"));
 
     wxBoxSizer* topSizer = new wxBoxSizer(wxVERTICAL);
     this->SetSizer(topSizer);
@@ -111,8 +112,8 @@
     boxSizer->Add(headerText, g_flagsV);
     boxSizer->Add(lineTop, flagsExpand);
 
-    request_sizer->Add(new wxStaticText( this, wxID_STATIC,_("Source:")), flagsH);
-    request_sizer->Add(new wxStaticText( this, wxID_STATIC,_("Target:")), flagsH);
+    request_sizer->Add(new wxStaticText( this, wxID_STATIC,_t("Source:")), flagsH);
+    request_sizer->Add(new wxStaticText( this, wxID_STATIC,_t("Target:")), flagsH);
     request_sizer->Add(cbSourceTag_, flagsExpand);
     request_sizer->Add(cbDestTag_, flagsExpand);
 
@@ -130,8 +131,8 @@
         , wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL);
     boxSizer->Add(lineBottom, flagsExpand);
 
-    wxButton* okButton = new wxButton(this, wxID_OK, _("&Merge"));
-    wxButton* cancelButton = new wxButton(this, wxID_CANCEL, _("&Close"));
+    wxButton* okButton = new wxButton(this, wxID_OK, _t("&Merge"));
+    wxButton* cancelButton = new wxButton(this, wxID_CANCEL, _t("&Close"));
 
     wxBoxSizer* buttonBoxSizer = new wxBoxSizer(wxHORIZONTAL);
     buttonBoxSizer->Add(okButton, flagsH);
@@ -150,12 +151,12 @@
 {
     const auto& source_tag_name = cbSourceTag_->GetValue();
     const auto& destination_tag_name = cbDestTag_->GetValue();
-    const wxString& info = wxString::Format(_("From %1$s to %2$s")
+    const wxString& info = wxString::Format(_t("From %1$s to %2$s")
         , source_tag_name
         , destination_tag_name);
 
-    int ans = wxMessageBox(_("Please Confirm:") + "\n" + info
-        , _("Merge tags confirmation")
+    int ans = wxMessageBox(_t("Please Confirm:") + "\n" + info
+        , _t("Merge tags confirmation")
         , wxOK | wxCANCEL | wxICON_INFORMATION);
 
     if (ans == wxOK)
@@ -188,19 +189,19 @@
     if (dest) destTagID_ = dest->TAGID;
     if (source) sourceTagID_ = source->TAGID;
     int trxs_size = (sourceTagID_ < 0) ? 0 : Model_Taglink::instance().find(
-        Model_Taglink::REFTYPE(Model_Attachment::REFTYPE_STR_TRANSACTION),
+        Model_Taglink::REFTYPE(Model_Checking::refTypeName),
         Model_Taglink::TAGID(sourceTagID_)
     ).size();
     int split_size = (sourceTagID_ < 0) ? 0 : Model_Taglink::instance().find(
-        Model_Taglink::REFTYPE(Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT),
+        Model_Taglink::REFTYPE(Model_Splittransaction::refTypeName),
         Model_Taglink::TAGID(sourceTagID_)
     ).size();
     int bills_size = (sourceTagID_ < 0) ? 0 : Model_Taglink::instance().find(
-        Model_Taglink::REFTYPE(Model_Attachment::REFTYPE_STR_BILLSDEPOSIT),
+        Model_Taglink::REFTYPE(Model_Billsdeposits::refTypeName),
         Model_Taglink::TAGID(sourceTagID_)
     ).size();
     int bill_split_size = (sourceTagID_ < 0) ? 0 : Model_Taglink::instance().find(
-        Model_Taglink::REFTYPE(Model_Attachment::REFTYPE_STR_BILLSDEPOSITSPLIT),
+        Model_Taglink::REFTYPE(Model_Budgetsplittransaction::refTypeName),
         Model_Taglink::TAGID(sourceTagID_)
     ).size();
 
@@ -211,10 +212,10 @@
     }
 
     wxString msgStr = wxString()
-        << wxString::Format(_("Records found in transactions: %i"), trxs_size) << "\n"
-        << wxString::Format(_("Records found in split transactions: %i"), split_size) << "\n"
-        << wxString::Format(_("Records found in scheduled transactions: %i"), bills_size) << "\n"
-        << wxString::Format(_("Records found in scheduled split transactions: %i"), bill_split_size);
+        << wxString::Format(_t("Records found in transactions: %i"), trxs_size) << "\n"
+        << wxString::Format(_t("Records found in split transactions: %i"), split_size) << "\n"
+        << wxString::Format(_t("Records found in scheduled transactions: %i"), bills_size) << "\n"
+        << wxString::Format(_t("Records found in scheduled split transactions: %i"), bill_split_size);
 
     m_info->SetLabel(msgStr);
 
diff -Naur a/src/relocatetagdialog.h b/src/relocatetagdialog.h
--- a/src/relocatetagdialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/relocatetagdialog.h	2025-07-09 01:46:59.672940649 +0200
@@ -39,7 +39,7 @@
 private:
     bool Create(wxWindow* parent
         , wxWindowID id = wxID_ANY
-        , const wxString& caption = _("Merge Tags")
+        , const wxString& caption = _t("Merge Tags")
         , const wxPoint& pos = wxDefaultPosition
         , const wxSize& size = wxDefaultSize
         , long style = wxCAPTION | wxSYSTEM_MENU | wxCLOSE_BOX
diff -Naur a/src/reports/budgetcategorysummary.cpp b/src/reports/budgetcategorysummary.cpp
--- a/src/reports/budgetcategorysummary.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/budgetcategorysummary.cpp	2025-07-09 01:46:59.672940649 +0200
@@ -44,7 +44,7 @@
     // Grab the data 
     int startDay;
     wxDate::Month startMonth;
-    if (Option::instance().BudgetFinancialYears())
+    if (Option::instance().getBudgetFinancialYears())
     {
         GetFinancialYearValues(startDay, startMonth);
     } else
@@ -92,12 +92,12 @@
         yearEnd.Add(wxDateSpan::Year()).Subtract(wxDateSpan::Day());
 
     // Readjust dates by the Budget Offset Option
-    Option::instance().setBudgetDateOffset(yearBegin);
-    Option::instance().setBudgetDateOffset(yearEnd);
+    Option::instance().addBudgetDateOffset(yearBegin);
+    Option::instance().addBudgetDateOffset(yearEnd);
     mmSpecifiedRange date_range(yearBegin, yearEnd);
 
     bool evaluateTransfer = false;
-    if (Option::instance().BudgetIncludeTransfers())
+    if (Option::instance().getBudgetIncludeTransfers())
     {
         evaluateTransfer = true;
     }
@@ -121,12 +121,12 @@
     mmHTMLBuilder hb;
     hb.init();
     wxString headingStr = AdjustYearValues(startDay, startMonth, startYear, budget_year);
-    bool amply = Option::instance().BudgetReportWithSummaries();
+    bool amply = Option::instance().getBudgetSummaryWithoutCategories();
     const wxString headerStartupMsg = amply
-        ? _("Budget Categories for %s") : _("Budget Category Summary for %s");
+        ? _t("Budget Categories for %s") : _t("Budget Category Summary for %s");
 
     headingStr = wxString::Format(headerStartupMsg
-        , headingStr + "<br>" + _("(Estimated vs. Actual)"));
+        , headingStr + "<br>" + _t("(Estimated vs. Actual)"));
     hb.addReportHeader(headingStr, 1, Option::instance().getIgnoreFutureTransactions());
     hb.DisplayDateHeading(yearBegin, yearEnd);
     // Prime the filter
@@ -145,8 +145,8 @@
         for (const auto& category : categs)
         {
             wxString categName = category.CATEGNAME;
-            gsEstimated.name = _("Estimated");
-            gsActual.name = _("Actual");
+            gsEstimated.name = _t("Estimated");
+            gsActual.name = _t("Actual");
 
             gd.title = categName;
             gd.labels.push_back(category.CATEGNAME);
@@ -188,9 +188,9 @@
             {
                 hb.startTableRow();
                 {
-                    hb.addTableHeaderCell(_("Category"));
-                    hb.addTableHeaderCell(_("Estimated"), "text-right");
-                    hb.addTableHeaderCell(_("Actual"), "text-right");
+                    hb.addTableHeaderCell(_t("Category"));
+                    hb.addTableHeaderCell(_t("Estimated"), "text-right");
+                    hb.addTableHeaderCell(_t("Actual"), "text-right");
                 }
                 hb.endTableRow();
             }
@@ -343,22 +343,22 @@
             {
                 hb.startTotalTableRow();
                 {
-                    hb.addTableCell(_("Estimated Income:"));
+                    hb.addTableCell(_t("Estimated Income:"));
                     hb.addMoneyCell(estIncome);
-                    hb.addTableCell(_("Actual Income:"));
+                    hb.addTableCell(_t("Actual Income:"));
                     hb.addMoneyCell(actIncome);
-                    hb.addTableCell(_("Difference Income:"));
+                    hb.addTableCell(_t("Difference Income:"));
                     hb.addMoneyCell(difIncome);
                 }
                 hb.endTableRow();
 
                 hb.startTotalTableRow();
                 {
-                    hb.addTableCell(_("Estimated Expenses:"));
+                    hb.addTableCell(_t("Estimated Expenses:"));
                     hb.addMoneyCell(estExpenses);
-                    hb.addTableCell(_("Actual Expenses:"));
+                    hb.addTableCell(_t("Actual Expenses:"));
                     hb.addMoneyCell(actExpenses);
-                    hb.addTableCell(_("Difference Expenses:"));
+                    hb.addTableCell(_t("Difference Expenses:"));
                     hb.addMoneyCell(difExpense);
                 }
                 hb.endTableRow();
diff -Naur a/src/reports/budget.cpp b/src/reports/budget.cpp
--- a/src/reports/budget.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/budget.cpp	2025-07-09 01:46:59.672940649 +0200
@@ -64,8 +64,9 @@
 
 void mmReportBudget::GetFinancialYearValues(int& day, wxDateTime::Month& month) const
 {
-    day = wxAtoi(Option::instance().FinancialYearStartDay());
-    month = static_cast<wxDateTime::Month>(wxAtoi(Option::instance().FinancialYearStartMonth()) - 1);
+    day = Option::instance().getFinancialFirstDay();
+    month = Option::instance().getFinancialFirstMonth();
+    // #7159: day is limited to 1..28; the following code is no-op
     if ((day > 28) && (month == wxDateTime::Feb))
     {
         day = 28;
@@ -84,23 +85,23 @@
     wxString ret = yearStr;
     if ((ret.length() < 5))
     {
-        if (Option::instance().BudgetFinancialYears())
+        if (Option::instance().getBudgetFinancialYears())
         {
             GetFinancialYearValues(day, month);
-            ret = wxString::Format(_("Financial Year: %s - %i"), yearStr, (year + 1));
+            ret = wxString::Format(_t("Financial Year: %s - %i"), yearStr, (year + 1));
         }
         else
         {
-            ret = wxString::Format(_("Year: %s"), yearStr);
+            ret = wxString::Format(_t("Year: %s"), yearStr);
         }
     }
     else
     {
         const wxString month_str = wxGetTranslation(mmGetMonthName(month));
-        if (Option::instance().BudgetFinancialYears())
-            ret = wxString::Format(_("Financial Year: %i Month: %s"), year, month_str);
+        if (Option::instance().getBudgetFinancialYears())
+            ret = wxString::Format(_t("Financial Year: %i Month: %s"), year, month_str);
         else
-            ret = wxString::Format(_("Year: %i Month: %s"), year, month_str);
+            ret = wxString::Format(_t("Year: %i Month: %s"), year, month_str);
     }
 
     return ret;
@@ -108,7 +109,7 @@
 
 void mmReportBudget::AdjustYearValues(int day, wxDateTime::Month month, wxDateTime& date) const
 {
-    if (Option::instance().BudgetFinancialYears())
+    if (Option::instance().getBudgetFinancialYears())
     {
         GetFinancialYearValues(day, month);
         SetDateToEndOfYear(day, month, date, false);
@@ -117,7 +118,7 @@
 
 void mmReportBudget::AdjustDateForEndFinancialYear(wxDateTime& date) const
 {
-    if (Option::instance().BudgetFinancialYears())
+    if (Option::instance().getBudgetFinancialYears())
     {
         int day;
         wxDateTime::Month month;
diff -Naur a/src/reports/budgetingperf.cpp b/src/reports/budgetingperf.cpp
--- a/src/reports/budgetingperf.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/budgetingperf.cpp	2025-07-09 01:46:59.672940649 +0200
@@ -42,7 +42,7 @@
 
     int startDay;
     wxDate::Month startMonth;
-    if (Option::instance().BudgetFinancialYears())
+    if (Option::instance().getBudgetFinancialYears())
     {
         GetFinancialYearValues(startDay, startMonth);
     } else
@@ -75,12 +75,12 @@
     yearEnd.Add(wxDateSpan::Year()).Subtract(wxDateSpan::Day());
 
     // Readjust dates by the Budget Offset Option
-    Option::instance().setBudgetDateOffset(yearBegin);
-    Option::instance().setBudgetDateOffset(yearEnd);
+    Option::instance().addBudgetDateOffset(yearBegin);
+    Option::instance().addBudgetDateOffset(yearEnd);
     mmSpecifiedRange date_range(yearBegin, yearEnd);
 
     bool evaluateTransfer = false;
-    if (Option::instance().BudgetIncludeTransfers())
+    if (Option::instance().getBudgetIncludeTransfers())
     {
         evaluateTransfer = true;
     }
@@ -97,7 +97,7 @@
         , Option::instance().getIgnoreFutureTransactions()
         , true
         , (evaluateTransfer ? &budgetAmt : nullptr)
-        , Option::instance().BudgetFinancialYears());
+        , Option::instance().getBudgetFinancialYears());
 
     std::map<int64, std::map<int, double> > budgetStats;
     Model_Budget::instance().getBudgetStats(budgetStats, &date_range, true);
@@ -106,7 +106,7 @@
     std::map<int64, double> actualTotal;
     std::map<int64, double> estimateTotal;
 
-    const wxString& headingStr = wxString::Format(_("Budget Performance for %s"),
+    const wxString& headingStr = wxString::Format(_t("Budget Performance for %s"),
         AdjustYearValues(startDay
             , startMonth, startYear, budget_year)
     );
@@ -128,7 +128,7 @@
             {
                 hb.startTableRow();
                 {
-                    hb.addTableHeaderCell(_("Category"));
+                    hb.addTableHeaderCell(_t("Category"));
                     for (int yidx = 0; yidx < 12; yidx++)
                     {
                         actualTotal[yidx] = 0;
@@ -139,7 +139,7 @@
                             wxDateTime::GetEnglishMonthName(wxDateTime::Month(m)
                                 , wxDateTime::Name_Abbr)), "text-center", 1);
                     }
-                    hb.addTableHeaderCell(_("Total"), "text-center", 2);
+                    hb.addTableHeaderCell(_t("Total"), "text-center", 2);
                 }
                 hb.endTableRow();
                 hb.startTableRow();
@@ -147,10 +147,10 @@
                     hb.addEmptyTableCell();
                     for (int yidx = 0; yidx < 12; yidx++)
                     {
-                        hb.addTableCell(_("Est.") + "<BR>" + _("Act."), false, false);
+                        hb.addTableCell(_t("Est.") + "<BR>" + _t("Act."), false, false);
                     }
-                    hb.addTableCell(_("Est.") + "<BR>" + _("Act."), false, false);
-                    hb.addTableCell(_("%"), false, false);
+                    hb.addTableCell(_t("Est.") + "<BR>" + _t("Act."), false, false);
+                    hb.addTableCell("%", false, false);
                 }
                 hb.endTableRow();
             }
@@ -161,7 +161,7 @@
                 std::map<int64, wxString> formattedNames;
                 std::map<int64, std::vector<Model_Category::Data>> categ_children;
 
-                bool budgetDeductMonthly = Option::instance().BudgetDeductMonthly();
+                bool budgetDeductMonthly = Option::instance().getBudgetDeductMonthly();
                 // pull categories from DB and store
                 for (Model_Category::Data category : Model_Category::instance().all(Model_Category::COL_CATEGNAME, false)) {
                     categ_children[category.PARENTID].push_back(category);
@@ -350,9 +350,9 @@
                     hb.startTotalTableRow();
 
                     hb.addTableCell(wxString::Format("%s<br>%s<br>%s"
-                        ,_("Estimated:")
-                        ,_("Actual:")
-                        ,_("Difference: ")));
+                        ,_t("Estimated:")
+                        ,_t("Actual:")
+                        ,_t("Difference: ")));
 
                     double estimateGrandTotal = 0;
                     double actualGrandTotal = 0;
diff -Naur a/src/reports/bugreport.h b/src/reports/bugreport.h
--- a/src/reports/bugreport.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/bugreport.h	2025-07-09 01:46:59.672940649 +0200
@@ -53,7 +53,7 @@
 };
 
 mmBugReport::mmBugReport()
-    : mmPrintableBase(wxTRANSLATE("Bug Report"))
+    : mmPrintableBase(_n("Bug Report"))
 {
 }
 
@@ -65,23 +65,23 @@
 {
     wxString diag = getProgramDescription(1);
 
-    wxString info = "> " + _("Replace this text (marked with >) with detailed description of your problem.") + "\n";
-    info << "> " + _("Please do not remove information attached below this text.") + "\n";
+    wxString info = "> " + _t("Replace this text (marked with >) with detailed description of the problem.") + "\n";
+    info << "> " + _t("Please do not remove information attached below this text.") + "\n";
 
     wxURI req = mmex::weblink::BugReport + "/new?body=" + info + "\n<hr>" + diag;
 
     const wxString texts[] = {
-        _u("Use Help → Check for Updates in MMEX to get latest version, where your problem might be already fixed."),
-        wxString::Format(_("Search <a href='%s'>a list of known issues</a> for similar problem. If so, update existing issue instead of creating a new one.")
+        _tu("Use Help → Check for Updates in MMEX to get the latest version, where the problem might be already fixed."),
+        wxString::Format(_t("Search <a href='%s'>a list of known issues</a> for similar problem. If so, update existing issue instead of creating a new one.")
             ,  do_href_wrap(mmex::weblink::BugReport)),
-        wxString::Format(_("As you know, <a href='%s'>a forum</a> for users is available where you can discuss problems and find solutions.") , do_href_wrap(mmex::weblink::Forum)),
-        wxString::Format(_("Please, join our community in <a href='%s'>Slack</a>. Here you can also pose your question and learn latest news."), do_href_wrap(mmex::weblink::Slack)),
-        wxString::Format(_("Read <a href='%s'>How to Report Bugs Effectively</a> for useful tips."), do_href_wrap(mmex::weblink::Chiark)),
-        _("Come up with a descriptive name for your problem."),
-        _("Include steps to reproduce your problem, attach screenshots where appropriate."),
-        wxString::Format(_("Before click the following link, be sure that you have already signed in to the <a href='%s'>GitHub</a>.")
+        wxString::Format(_t("As you know, <a href='%s'>a forum</a> for users is available where you can discuss problems and find solutions.") , do_href_wrap(mmex::weblink::Forum)),
+        wxString::Format(_t("Please, join the community on <a href='%s'>Slack</a>. Here you can also pose the question and learn the latest news."), do_href_wrap(mmex::weblink::Slack)),
+        wxString::Format(_t("Read <a href='%s'>How to Report Bugs Effectively</a> for useful tips."), do_href_wrap(mmex::weblink::Chiark)),
+        _t("Provide a descriptive name for the problem."),
+        _t("Include steps to reproduce the problem; attach screenshots where appropriate."),
+        wxString::Format(_t("Before click the following link, be sure that you have already signed in to the <a href='%s'>GitHub</a>.")
             ,  do_href_wrap(mmex::weblink::GitHubLogin)),
-        wxString::Format(_("Finally, report a bug using GitHub <a href='%s'>online form</a> opened in your web browser."), do_href_wrap(req.BuildURI()))
+        wxString::Format(_t("Finally, report the bug using the GitHub <a href='%s'>online form</a> opened in a web browser."), do_href_wrap(req.BuildURI()))
     };
 
     wxString msg = "<ol>";
@@ -92,9 +92,9 @@
 
     mm_html_template report(bugreport_template);
     report(L"REPORTNAME") = this->getReportTitle();
-    report(L"HEADER") = _("Please, follow these instructions before submitting a new bug report:");
+    report(L"HEADER") = _t("Please, follow these instructions before submitting a new bug report:");
     report(L"CONTENTS") = msg;
-    report(L"HTMLSCALE") = wxString::Format("%d", Option::instance().getHtmlFontSize() * 3 / 2);
+    report(L"HTMLSCALE") = wxString::Format("%d", Option::instance().getHtmlScale() * 3 / 2);
 
     wxString out = wxEmptyString;
     try
@@ -107,7 +107,7 @@
     }
     catch (...)
     {
-        return _("Caught exception");
+        return _t("Caught exception");
     }
 
     return out;
diff -Naur a/src/reports/cashflow.cpp b/src/reports/cashflow.cpp
--- a/src/reports/cashflow.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/cashflow.cpp	2025-07-09 01:46:59.672940649 +0200
@@ -78,7 +78,7 @@
 
     // Get initial Balance as of today
     for (const auto& account : Model_Account::instance().find(
-        Model_Account::ACCOUNTTYPE(Model_Account::TYPE_STR_INVESTMENT, NOT_EQUAL),
+        Model_Account::ACCOUNTTYPE(Model_Account::TYPE_NAME_INVESTMENT, NOT_EQUAL),
         Model_Account::STATUS(Model_Account::STATUS_ID_CLOSED, NOT_EQUAL)
     )) {
         if (accountArray_ && std::find(accountArray_->begin(), accountArray_->end(), account.ACCOUNTNAME) == accountArray_->end()) {
@@ -272,10 +272,10 @@
             hb.startThead();
             {
                 hb.startTableRow();
-                hb.addTableHeaderCell(_("Date"));
-                hb.addTableHeaderCell(_("Total"), "text-right");
-                hb.addTableHeaderCell(_("Difference"), "text-right");
-                hb.addTableHeaderCell(_("Cumulative Difference"), "text-right");
+                hb.addTableHeaderCell(_t("Date"));
+                hb.addTableHeaderCell(_t("Total"), "text-right");
+                hb.addTableHeaderCell(_t("Difference"), "text-right");
+                hb.addTableHeaderCell(_t("Cumulative Difference"), "text-right");
                 hb.endTableRow();
             }
             hb.endThead();
@@ -330,7 +330,7 @@
 //--------- Cash Flow - Daily
 
 mmReportCashFlowDaily::mmReportCashFlowDaily()
-    : mmReportCashFlow(wxTRANSLATE("Cash Flow - Daily"))
+    : mmReportCashFlow(_n("Cash Flow - Daily"))
 {
     this->setForwardMonths(12);
     setReportParameters(Reports::DailyCashFlow);
@@ -344,7 +344,7 @@
 //--------- Cash Flow - Monthly
 
 mmReportCashFlowMonthly::mmReportCashFlowMonthly()
-    : mmReportCashFlow(wxTRANSLATE("Cash Flow - Monthly"))
+    : mmReportCashFlow(_n("Cash Flow - Monthly"))
 {
     this->setForwardMonths(120);
     setReportParameters(Reports::MonthlyCashFlow);
@@ -358,7 +358,7 @@
 //--------- Cash Flow - Transactions
 
 mmReportCashFlowTransactions::mmReportCashFlowTransactions()
-    : mmReportCashFlow(wxTRANSLATE("Cash Flow - Transactions"))
+    : mmReportCashFlow(_n("Cash Flow - Transactions"))
 {
     setReportParameters(Reports::TransactionsCashFlow);
 }
@@ -401,13 +401,13 @@
     hb.startTable();
     hb.startThead();
     hb.startTableRow();
-    hb.addTableHeaderCell(_("Date"));
-    hb.addTableHeaderCell(_("Account"));
-    hb.addTableHeaderCell(_("Payee"));
-    hb.addTableHeaderCell(_("Category"));
-    hb.addTableHeaderCell(_("Amount"), "text-right");
-    hb.addTableHeaderCell(_("Balance"), "text-right");
-    hb.addTableHeaderCell(_("Cumulative Difference"), "text-right");
+    hb.addTableHeaderCell(_t("Date"));
+    hb.addTableHeaderCell(_t("Account"));
+    hb.addTableHeaderCell(_t("Payee"));
+    hb.addTableHeaderCell(_t("Category"));
+    hb.addTableHeaderCell(_t("Amount"), "text-right");
+    hb.addTableHeaderCell(_t("Balance"), "text-right");
+    hb.addTableHeaderCell(_t("Cumulative Difference"), "text-right");
     hb.endTableRow();
     hb.endThead();
     hb.startTbody();
diff -Naur a/src/reports/categexp.cpp b/src/reports/categexp.cpp
--- a/src/reports/categexp.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/categexp.cpp	2025-07-09 01:46:59.672940649 +0200
@@ -130,11 +130,11 @@
             {
                 if (entry.amount < 0)
                 {
-                    expense_vector.push_back(std::make_pair(Model_Category::full_name(entry.catID), entry.amount));
+                    expense_vector.emplace_back(Model_Category::full_name(entry.catID), entry.amount);
                 }
                 else if (entry.amount > 0)
                 {
-                    income_vector.push_back(std::make_pair(Model_Category::full_name(entry.catID), entry.amount));
+                    income_vector.emplace_back(Model_Category::full_name(entry.catID), entry.amount);
                 }
             }
         }
@@ -150,7 +150,7 @@
             gsExpenses.values.push_back({ i.second });
             gdExpenses.labels.push_back(i.first);
         }
-        gsExpenses.name = _("Expenses");
+        gsExpenses.name = _t("Expenses");
         gdExpenses.series.push_back(gsExpenses);
     }
     if (!income_vector.empty())
@@ -163,7 +163,7 @@
             gsIncome.values.push_back({ i.second });
             gdIncome.labels.push_back(i.first);
         }
-        gsIncome.name = _("Income");
+        gsIncome.name = _t("Income");
         gdIncome.series.push_back(gsIncome);
     }
 
@@ -185,7 +185,7 @@
         if (!gdExpenses.series.empty())
         {
 
-            gdExpenses.title = _("Expenses");
+            gdExpenses.title = _t("Expenses");
             gdExpenses.type = GraphData::PIE;
             hb.addChart(gdExpenses);
 
@@ -193,7 +193,7 @@
         if (!gdIncome.series.empty())
         {
 
-            gdIncome.title = _("Income");
+            gdIncome.title = _t("Income");
             gdIncome.type = GraphData::PIE;
             hb.addChart(gdIncome);
 
@@ -203,9 +203,9 @@
     hb.addDivContainer("shadow"); // Table Container
     {
         hb.addDivContainer();
-        hb.addText(wxString::Format("<button onclick=\"collapseAllToggles()\">%s</button>", _("Collapse All")));
-        hb.addText(wxString::Format("<button onclick=\"expandAllToggles()\">%s</button>", _("Expand All")));
-        //hb.addText(wxString::Format("<button onclick=\"expandAllToggles()\" style=\"float: right;\">%s</button>", _("Export")));
+        hb.addText(wxString::Format("<button onclick=\"collapseAllToggles()\">%s</button>", _t("Collapse All")));
+        hb.addText(wxString::Format("<button onclick=\"expandAllToggles()\">%s</button>", _t("Expand All")));
+        //hb.addText(wxString::Format("<button onclick=\"expandAllToggles()\" style=\"float: right;\">%s</button>", _t("Export")));
         hb.endDiv();
 
         hb.startTable();
@@ -214,9 +214,9 @@
             {
                 hb.startTableRow();
                 {
-                    hb.addTableHeaderCell(_("Category"));
-                    hb.addTableHeaderCell(_("Amount"), "text-right");
-                    hb.addTableHeaderCell(_("Total"), "text-right");
+                    hb.addTableHeaderCell(_t("Category"));
+                    hb.addTableHeaderCell(_t("Amount"), "text-right");
+                    hb.addTableHeaderCell(_t("Total"), "text-right");
                 }
                 hb.endTableRow();
             }
@@ -280,10 +280,10 @@
             {
                 if (type_ == SUMMARY)
                 {
-                    hb.addTotalRow(_("Total Expenses:"), span, group_total[-1][0]);
-                    hb.addTotalRow(_("Total Income:"), span, group_total[-2][0]);
+                    hb.addTotalRow(_t("Total Expenses:"), span, group_total[-1][0]);
+                    hb.addTotalRow(_t("Total Income:"), span, group_total[-2][0]);
                 }
-                hb.addTotalRow(_("Grand Total:"), span, group_total[-1][0] + group_total[-2][0]);
+                hb.addTotalRow(_t("Grand Total:"), span, group_total[-1][0] + group_total[-2][0]);
             }
             hb.endTfoot();
         }
@@ -300,19 +300,19 @@
 }
 
 mmReportCategoryExpensesGoes::mmReportCategoryExpensesGoes()
-    : mmReportCategoryExpenses(wxTRANSLATE("Where the Money Goes"), TYPE::GOES)
+    : mmReportCategoryExpenses(_n("Where the Money Goes"), TYPE::GOES)
 {
     setReportParameters(Reports::WheretheMoneyGoes);
 }
 
 mmReportCategoryExpensesComes::mmReportCategoryExpensesComes()
-    : mmReportCategoryExpenses(wxTRANSLATE("Where the Money Comes From"), TYPE::COME)
+    : mmReportCategoryExpenses(_n("Where the Money Comes From"), TYPE::COME)
 {
     setReportParameters(Reports::WheretheMoneyComesFrom);
 }
 
 mmReportCategoryExpensesCategories::mmReportCategoryExpensesCategories()
-    : mmReportCategoryExpenses(wxTRANSLATE("Categories Summary"), TYPE::MONTHLY)
+    : mmReportCategoryExpenses(_n("Categories Summary"), TYPE::MONTHLY)
 {
     m_chart_selection = 1;
     setReportParameters(Reports::CategoriesMonthly);
@@ -321,7 +321,7 @@
 //----------------------------------------------------------------------------
 
 mmReportCategoryOverTimePerformance::mmReportCategoryOverTimePerformance()
-    : mmPrintableBase(wxTRANSLATE("Category Income/Expenses"))
+    : mmPrintableBase(_n("Category Income/Expenses"))
 {
     m_date_range = new mmLast12Months();
     setReportParameters(Reports::CategoryOverTimePerformance);
@@ -421,9 +421,9 @@
             gd.labels.push_back(label);
         }
 
-        data_difference.name = _("Difference");
-        data_negative.name = _("Expenses");
-        data_positive.name = _("Income");
+        data_difference.name = _t("Difference");
+        data_negative.name = _t("Expenses");
+        data_positive.name = _t("Income");
 
         data_difference.type = "line";
         data_positive.type = "column";
@@ -453,7 +453,7 @@
             {
                 hb.startTableRow();
                 {
-                    hb.addTableHeaderCell(_("Category"));
+                    hb.addTableHeaderCell(_t("Category"));
 
                     for (int i = 0; i < MONTHS_IN_PERIOD; i++)
                     {
@@ -461,7 +461,7 @@
                         hb.addTableHeaderCell(wxGetTranslation(wxDateTime::GetEnglishMonthName(d.GetMonth()
                             , wxDateTime::Name_Abbr)) + wxString::Format("<br>%i", d.GetYear()), "text-right");
                     }
-                    hb.addTableHeaderCell(_("Overall"), "text-right");
+                    hb.addTableHeaderCell(_t("Overall"), "text-right");
                 }
                 hb.endTableRow();
             }
@@ -492,9 +492,9 @@
             hb.startTfoot();
             {
                 std::map<int, wxString> totalLabels;
-                totalLabels[INCOME] = _("Incomes");
-                totalLabels[EXPENSES] = _("Expenses");
-                totalLabels[TOTAL] = _("Total");
+                totalLabels[INCOME] = _t("Incomes");
+                totalLabels[EXPENSES] = _t("Expenses");
+                totalLabels[TOTAL] = _t("Total");
                 for (const auto& print_totals : totals)
                 {
                     hb.startTotalTableRow();
diff -Naur a/src/reports/forecast.cpp b/src/reports/forecast.cpp
--- a/src/reports/forecast.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/forecast.cpp	2025-07-09 01:46:59.676940673 +0200
@@ -27,7 +27,7 @@
 
 class mm_html_template;
 
-mmReportForecast::mmReportForecast(): mmPrintableBase(wxTRANSLATE("Forecast"))
+mmReportForecast::mmReportForecast(): mmPrintableBase(_n("Forecast"))
 {
     setReportParameters(Reports::ForecastReport);
 }
@@ -76,9 +76,9 @@
         gsWithdrawal.values.push_back(kv.second.first);
         gsDeposit.values.push_back(kv.second.second);
     }
-    gsDeposit.name = _("Deposit");
+    gsDeposit.name = _t("Deposit");
     gd.series.push_back(gsDeposit);
-    gsWithdrawal.name = _("Withdrawal");
+    gsWithdrawal.name = _t("Withdrawal");
     gd.series.push_back(gsWithdrawal);
 
     gd.type = GraphData::LINE_DATETIME;
diff -Naur a/src/reports/htmlbuilder.cpp b/src/reports/htmlbuilder.cpp
--- a/src/reports/htmlbuilder.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/htmlbuilder.cpp	2025-07-09 01:46:59.676940673 +0200
@@ -151,7 +151,7 @@
 mmHTMLBuilder::mmHTMLBuilder()
 {
     today_.date = wxDateTime::Now();
-    today_.todays_date = wxString::Format(_("Report Generated %1$s %2$s")
+    today_.todays_date = wxString::Format(_t("Report Generated %1$s %2$s")
         , mmGetDateTimeForDisplay(today_.date.FormatISODate())
         , today_.date.FormatISOTime());
 }
@@ -169,7 +169,7 @@
     {
         html_ = wxString::Format(tags::HTML
             , mmex::getProgramName()
-            , wxString::Format("%d", Option::instance().getHtmlFontSize())
+            , wxString::Format("%d", Option::instance().getHtmlScale())
             , extra_style);
     }
 }
@@ -177,8 +177,8 @@
 void mmHTMLBuilder::showUserName()
 {
     //Show user name if provided
-    if (Option::instance().UserName() != "")
-        addHeader(2, Option::instance().UserName());
+    if (Option::instance().getUserName() != "")
+        addHeader(2, Option::instance().getUserName());
 }
 
 void mmHTMLBuilder::addReportHeader(const wxString& name, int startDay, bool futureIgnored)
@@ -212,12 +212,12 @@
 {
     wxString sDate;
     if (withDateRange && startDate.IsValid() && endDate.IsValid()) {
-        sDate << wxString::Format(_("From %1$s till %2$s")
+        sDate << wxString::Format(_t("From %1$s till %2$s")
             , mmGetDateTimeForDisplay(startDate.FormatISODate())
-            , withNoEndDate ? _("Future") : mmGetDateTimeForDisplay(endDate.FormatISODate()));
+            , withNoEndDate ? _t("Future") : mmGetDateTimeForDisplay(endDate.FormatISODate()));
     }
     else if (!withDateRange) {
-        sDate << _("Over Time");
+        sDate << _t("Over Time");
     }
     else
         wxASSERT(false);
@@ -241,21 +241,21 @@
     wxString base_currency_symbol;
     wxASSERT_MSG(Model_Currency::GetBaseCurrencySymbol(base_currency_symbol), "Could not find base currency symbol");
 
-    addHeader(5, wxString::Format("%s: %s", _("Currency"), base_currency_symbol));  
+    addHeader(5, wxString::Format("%s: %s", _t("Currency"), base_currency_symbol));  
 }
 
 void mmHTMLBuilder::addOffsetIndication(int startDay)
 {       
     if (startDay > 1)
         addHeader(5, wxString::Format ("%s: %d"
-            , _("User specified start day")
+            , _t("User specified start day")
             , startDay));
 }
 
 void mmHTMLBuilder::addFutureIgnoredIndication(bool ignore)
 {       
     if (ignore)
-        addHeader(5, _("Future Transactions have been ignored"));
+        addHeader(5, _t("Future Transactions have been ignored"));
 }
 
 void mmHTMLBuilder::addDateNow()
@@ -633,7 +633,7 @@
                     , chartWidth);
     htmlChart += wxString::Format(", title: { text: '%s'}", gd.title);
 
-    wxString locale = Model_Infotable::instance().GetStringInfo("LOCALE", "");
+    wxString locale = Model_Infotable::instance().getString("LOCALE", "");
 
     if (locale.IsEmpty())
     {
diff -Naur a/src/reports/incexpenses.cpp b/src/reports/incexpenses.cpp
--- a/src/reports/incexpenses.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/incexpenses.cpp	2025-07-09 01:46:59.676940673 +0200
@@ -32,7 +32,7 @@
 
 
 mmReportIncomeExpenses::mmReportIncomeExpenses()
-    : mmPrintableBase(wxTRANSLATE("Income vs. Expenses Summary"))
+    : mmPrintableBase(_n("Income vs. Expenses Summary"))
 {
     setReportParameters(Reports::IncomevsExpensesSummary);
 }
@@ -62,7 +62,7 @@
         }
         double convRate = 1;
         // We got this far, get the currency conversion rate for this account
-        if (account) convRate = Model_CurrencyHistory::getDayRate(Model_Account::currency(account)->CURRENCYID,transaction.TRANSDATE);
+        if (account) convRate = Model_CurrencyHistory::getDayRate(Model_Account::currency(account)->CURRENCYID, transaction.TRANSDATE);
 
         if (Model_Checking::type_id(transaction) == Model_Checking::TYPE_ID_DEPOSIT)
             income_expenses_pair.first += transaction.TRANSAMOUNT * convRate;
@@ -82,10 +82,10 @@
     GraphSeries gs;
 
     gs.values = { income_expenses_pair.first };
-    gs.name = _("Income");
+    gs.name = _t("Income");
     gd.series.push_back(gs);
     gs.values = { income_expenses_pair.second };
-    gs.name = _("Expenses");
+    gs.name = _t("Expenses");
     gd.series.push_back(gs);
 
     gd.labels.push_back(m_date_range->local_title());
@@ -105,16 +105,16 @@
             hb.startThead();
             {
                 hb.startTableRow();
-                    hb.addTableHeaderCell(_("Type"));
-                    hb.addTableHeaderCell(_("Amount"), "text-right");
+                    hb.addTableHeaderCell(_t("Type"));
+                    hb.addTableHeaderCell(_t("Amount"), "text-right");
                 hb.endTableRow();
             }
             hb.endThead();
             hb.startTbody();
             {
-                hb.addTableRow(_("Income:"), income_expenses_pair.first);
-                hb.addTableRow(_("Expenses:"), income_expenses_pair.second);
-                hb.addTotalRow(_("Difference:"), 2, income_expenses_pair.first - income_expenses_pair.second);
+                hb.addTableRow(_t("Income:"), income_expenses_pair.first);
+                hb.addTableRow(_t("Expenses:"), income_expenses_pair.second);
+                hb.addTotalRow(_t("Difference:"), 2, income_expenses_pair.first - income_expenses_pair.second);
             }
             hb.endTbody();
         }
@@ -130,7 +130,7 @@
 }
 
 mmReportIncomeExpensesMonthly::mmReportIncomeExpensesMonthly()
-    : mmPrintableBase(wxTRANSLATE("Income vs. Expenses Monthly"))
+    : mmPrintableBase(_n("Income vs. Expenses Monthly"))
 {
     setReportParameters(Reports::IncomevsExpensesMonthly);
 }
@@ -208,10 +208,10 @@
             gd.labels.push_back(label);
         }
 
-        data_performance.name = _("Cumulative");
-        data_difference.name = _("Difference");
-        data_positive.name = _("Income");
-        data_negative.name = _("Expenses");
+        data_performance.name = _t("Cumulative");
+        data_difference.name = _t("Difference");
+        data_positive.name = _t("Income");
+        data_negative.name = _t("Expenses");
 
         data_performance.type = "line";
         data_difference.type = "line";
@@ -241,11 +241,11 @@
         hb.startThead();
         {
             hb.startTableRow();
-            hb.addTableHeaderCell(_("Date"));
-            hb.addTableHeaderCell(_("Income"), "text-right");
-            hb.addTableHeaderCell(_("Expenses"), "text-right");
-            hb.addTableHeaderCell(_("Difference"), "text-right");
-            hb.addTableHeaderCell(_("Cumulative"), "text-right");
+            hb.addTableHeaderCell(_t("Date"));
+            hb.addTableHeaderCell(_t("Income"), "text-right");
+            hb.addTableHeaderCell(_t("Expenses"), "text-right");
+            hb.addTableHeaderCell(_t("Difference"), "text-right");
+            hb.addTableHeaderCell(_t("Cumulative"), "text-right");
             hb.endTableRow();
         }
         hb.endThead();
@@ -277,7 +277,7 @@
         totals.push_back(total_income - total_expenses);
         totals.push_back(total_income - total_expenses);
 
-        hb.addMoneyTotalRow(_("Total:"), 5, totals);
+        hb.addMoneyTotalRow(_t("Total:"), 5, totals);
     }
     hb.endTable();
 
diff -Naur a/src/reports/mmDateRange.cpp b/src/reports/mmDateRange.cpp
--- a/src/reports/mmDateRange.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/mmDateRange.cpp	2025-07-09 01:46:59.676940673 +0200
@@ -31,7 +31,7 @@
     start_date_ = today_;
     end_date_ = today_end_;
     startDay_ = Option::instance().getReportingFirstDay();
-    title_ = wxTRANSLATE("Date Range");
+    title_ = _n("Date Range");
 }
 
 mmDateRange::~mmDateRange()
@@ -72,13 +72,13 @@
         end_date_ = today_end_;
         futureIgnored_ = true;
     }
-    this->title_ = wxTRANSLATE("Current Month");
+    this->title_ = _n("Current Month");
 }
 
 mmToday::mmToday()
 : mmDateRange()
 {
-    this->title_ = wxTRANSLATE("Today");
+    this->title_ = _n("Today");
 }
 
 mmCurrentMonthToDate::mmCurrentMonthToDate()
@@ -86,7 +86,7 @@
 {
     findBeginOfMonth();
     this->end_date_ = today_end_;
-    this->title_ = wxTRANSLATE("Current Month to Date");
+    this->title_ = _n("Current Month to Date");
 }
 
 mmLastMonth::mmLastMonth()
@@ -96,7 +96,7 @@
     this->findEndOfMonth();
     this->start_date_.Subtract(wxDateSpan::Months(1));
     this->findBeginOfMonth();
-    this->title_ = wxTRANSLATE("Previous Month");
+    this->title_ = _n("Previous Month");
 }
 
 mmLast30Days::mmLast30Days()
@@ -106,7 +106,7 @@
         .Subtract(wxDateSpan::Months(1))
         .Add(wxDateSpan::Days(1));
     // no change to end_date_
-    this->title_ = wxTRANSLATE("1 Month Ago to Date");
+    this->title_ = _n("1 Month Ago to Date");
 }
 
 mmLast90Days::mmLast90Days()
@@ -116,7 +116,7 @@
         .Subtract(wxDateSpan::Months(3))
         .Add(wxDateSpan::Days(1));
     // no change to end_date_
-    this->title_ = wxTRANSLATE("3 Months Ago to Date");
+    this->title_ = _n("3 Months Ago to Date");
 }
 
 mmLast3Months::mmLast3Months()
@@ -130,7 +130,7 @@
         end_date_ = today_end_;
         futureIgnored_ = true;
     }
-    this->title_ = wxTRANSLATE("Latest 3 Months");
+    this->title_ = _n("Latest 3 Months");
 }
 
 mmLast12Months::mmLast12Months()
@@ -144,7 +144,7 @@
         end_date_ = today_end_;
         futureIgnored_ = true;
     }
-    this->title_ = wxTRANSLATE("Latest 12 Months");
+    this->title_ = _n("Latest 12 Months");
 }
 
 mmCurrentYear::mmCurrentYear()
@@ -160,7 +160,7 @@
         end_date_ = today_end_;
         futureIgnored_ = true;
     }
-    this->title_ = wxTRANSLATE("Current Year");
+    this->title_ = _n("Current Year");
 }
 
 mmCurrentYearToDate::mmCurrentYearToDate()
@@ -169,7 +169,7 @@
     this->findBeginOfMonth();
     this->start_date_.SetMonth(wxDateTime::Jan);
     this->end_date_ = today_end_;
-    this->title_ = wxTRANSLATE("Current Year to Date");
+    this->title_ = _n("Current Year to Date");
 }
 
 mmLastYear::mmLastYear()
@@ -181,28 +181,39 @@
     this->end_date_ = this->start_date_;
     this->end_date_.Add(wxDateSpan::Months(11));
     this->findEndOfMonth();
-    this->title_ = wxTRANSLATE("Previous Year");
+    this->title_ = _n("Previous Year");
+}
+
+mmLastYearBefore::mmLastYearBefore()
+: mmDateRange()
+{
+    this->findBeginOfMonth();
+    this->start_date_.SetMonth(wxDateTime::Jan);
+    this->start_date_.Subtract(wxDateSpan::Years(2));
+    this->end_date_ = this->start_date_;
+    this->end_date_.Add(wxDateSpan::Months(11));
+    this->findEndOfMonth();
+    this->title_ = _n("Year Before Last");
 }
 
 mmCurrentFinancialYear::mmCurrentFinancialYear()
 : mmDateRange()
 {
-    int day = wxAtoi(Option::instance().FinancialYearStartDay());
-    int month = wxAtoi(Option::instance().FinancialYearStartMonth());
+    int day = Option::instance().getFinancialFirstDay();
+    wxDateTime::Month month = Option::instance().getFinancialFirstMonth();
 
-    int this_month = this->start_date_.GetMonth() + 1;
+    wxDateTime::Month this_month = this->start_date_.GetMonth();
     auto finDate = this->start_date_;
-    finDate.SetDay(1).SetMonth(wxDateTime::Month(month - 1));
+    finDate.SetDay(1).SetMonth(month);
     auto last_month_day = finDate.GetLastMonthDay().GetDay();
     wxASSERT(day <= last_month_day);
     finDate.SetDay(day <= last_month_day ? day : last_month_day);
 
     if (finDate.IsLaterThan(this->start_date_))
-        this->start_date_.Subtract(wxDateSpan::Year()).Add(wxDateSpan::Months(month - this_month));
-    else
-        this->start_date_.Subtract(wxDateSpan::Months(this_month - month));
+        this->start_date_.Subtract(wxDateSpan::Year());
+    this->start_date_.Add(wxDateSpan::Months(month - this_month));
 
-    this->start_date_.Subtract(wxDateSpan::Days(this->start_date_.GetDay() - 1)).Add(wxDateSpan::Days(day - 1));
+    this->start_date_.Subtract(wxDateSpan::Days(this->start_date_.GetDay() - day));
     
     this->end_date_ = this->start_date_;
     end_date_ = getDayEnd(end_date_.Add(wxDateSpan::Year()).Subtract(wxDateSpan::Day()));
@@ -213,7 +224,7 @@
         futureIgnored_ = true;
     }
 
-    this->title_ = wxTRANSLATE("Current Financial Year");
+    this->title_ = _n("Current Financial Year");
 }
 
 mmCurrentFinancialYearToDate::mmCurrentFinancialYearToDate()
@@ -223,7 +234,7 @@
     this->start_date_ = current_financial_year.start_date();
     // no change to end_date_
 
-    this->title_ = wxTRANSLATE("Current Financial Year to Date");
+    this->title_ = _n("Current Financial Year to Date");
 }
 
 mmLastFinancialYear::mmLastFinancialYear()
@@ -233,7 +244,7 @@
     this->start_date_ = current_financial_year.start_date().Subtract(wxDateSpan::Year());
     this->end_date_ = this->start_date_;
     end_date_ = getDayEnd(end_date_.Add(wxDateSpan::Year()).Subtract(wxDateSpan::Day()));
-    this->title_ = wxTRANSLATE("Previous Financial Year");
+    this->title_ = _n("Previous Financial Year");
 }
 
 mmAllTime::mmAllTime()
@@ -246,7 +257,7 @@
         end_date_ = today_end_;
         futureIgnored_ = true;
     }
-    this->title_ = wxTRANSLATE("Over Time");
+    this->title_ = _n("Over Time");
 }
 
 bool mmAllTime::is_with_date() const
@@ -257,7 +268,7 @@
 mmSpecifiedRange::mmSpecifiedRange(const wxDateTime& start, const wxDateTime& end)
 : mmDateRange()
 {
-    this->title_ = wxTRANSLATE("Custom");
+    this->title_ = _n("Custom");
     this->start_date_ = start;
     this->end_date_ = end;
     if (Option::instance().getIgnoreFutureTransactions() && (end_date_ > today_end_)) 
@@ -271,7 +282,7 @@
 {
     this->start_date_.Subtract(wxDateSpan::Months(12)).Add(wxDateSpan::Days(1));
     // no change to end_date_
-    this->title_ = wxTRANSLATE("1 Year Ago to Date");
+    this->title_ = _n("1 Year Ago to Date");
 }
 
 mmLastNDays::mmLastNDays(int days)
@@ -281,7 +292,7 @@
         .Subtract(wxDateSpan::Days(days))
         .Add(wxDateSpan::Days(1));
     // no change to end_date_
-    this->title_ = wxString::Format(_("Last %i Days"), days);
+    this->title_ = wxString::Format(_t("Last %i Days"), days);
 }
 
 void mmLastNDays::SetRange(int days)
@@ -293,13 +304,13 @@
         .Add(wxDateSpan::Days(1));
     // no change to end_date_
     // update title
-    this->title_ = wxString::Format(_("Last %i Days"), days);
+    this->title_ = wxString::Format(_t("Last %i Days"), days);
 }
 
 mmSinseToday::mmSinseToday() : mmDateRange()
 {
     this->end_date_ = future_;
-    this->title_ = wxTRANSLATE("Since Today");
+    this->title_ = _n("Since Today");
 }
 
 mmSinse30days::mmSinse30days() : mmDateRange()
@@ -308,7 +319,7 @@
         .Subtract(wxDateSpan::Months(1))
         .Add(wxDateSpan::Days(1));
     this->end_date_ = future_;
-    this->title_ = wxTRANSLATE("Since 1 Month Ago");
+    this->title_ = _n("Since 1 Month Ago");
 }
 
 mmSinse90days::mmSinse90days() : mmDateRange()
@@ -317,7 +328,7 @@
         .Subtract(wxDateSpan::Months(3))
         .Add(wxDateSpan::Days(1));
     this->end_date_ = future_;
-    this->title_ = wxTRANSLATE("Since 3 Months Ago");
+    this->title_ = _n("Since 3 Months Ago");
 }
 
 mmSinseCurrentYear::mmSinseCurrentYear() : mmDateRange()
@@ -325,12 +336,12 @@
     this->findBeginOfMonth();
     this->start_date_.SetMonth(wxDateTime::Jan);
     this->end_date_ = future_;
-    this->title_ = wxTRANSLATE("Since Start of This Year");
+    this->title_ = _n("Since Start of This Year");
 }
 
 mmSinseCurrentFinancialYear::mmSinseCurrentFinancialYear() : mmCurrentFinancialYear()
 {
     futureIgnored_ = false;
     this->end_date_ = future_;
-    this->title_ = wxTRANSLATE("Since Start of Financial Year");
-}
\ Nincs új sor a fájl végén
+    this->title_ = _n("Since Start of Financial Year");
+}
diff -Naur a/src/reports/mmDateRange.h b/src/reports/mmDateRange.h
--- a/src/reports/mmDateRange.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/mmDateRange.h	2025-07-09 01:46:59.676940673 +0200
@@ -131,6 +131,12 @@
     mmLastYear();
 };
 
+class mmLastYearBefore: public mmDateRange
+{
+public:
+    mmLastYearBefore();
+};
+
 class mmCurrentFinancialYear: public mmDateRange
 {
 public:
diff -Naur a/src/reports/myusage.cpp b/src/reports/myusage.cpp
--- a/src/reports/myusage.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/myusage.cpp	2025-07-09 01:46:59.676940673 +0200
@@ -23,7 +23,7 @@
 #include "model/Model_Usage.h"
 
 mmReportMyUsage::mmReportMyUsage()
-: mmPrintableBase(wxTRANSLATE("MMEX Usage Frequency"))
+: mmPrintableBase(_n("MMEX Usage Frequency"))
 {
     setReportParameters(Reports::MyUsage);
 }
@@ -84,7 +84,7 @@
              {
                  const wxString rep_name_1 = pattern.GetMatch(rep_name, 1);
                  const wxString rep_name_2 = pattern.GetMatch(rep_name, 3);
-                 module += " / " + _(rep_name_1) + (rep_name_2.empty() ? "" : " - " + _(rep_name_2));
+                 module += " / " + wxGetTranslation(rep_name_1) + (rep_name_2.empty() ? "" : " - " + wxGetTranslation(rep_name_2));
              }
              else
              {
@@ -99,7 +99,7 @@
     }
 
     if (usage_by_module.empty()) {
-        usage_by_module[_("Empty value")] = 0;
+        usage_by_module[_t("Empty value")] = 0;
     }
 
     std::map<int, wxString> usage_by_frequency;
@@ -142,7 +142,7 @@
             gd.labels.push_back(stats.first);
         }
 
-        data_usage.name = _("Reports");
+        data_usage.name = _t("Reports");
         gd.series.push_back(data_usage);
 
         if (!gd.series.empty())
@@ -159,8 +159,8 @@
             hb.startThead();
             {
                 hb.startTableRow();
-                hb.addTableHeaderCell(_("Reports"));
-                hb.addTableHeaderCell(_("Frequency"), "text-right");
+                hb.addTableHeaderCell(_t("Reports"));
+                hb.addTableHeaderCell(_t("Frequency"), "text-right");
                 hb.endTableRow();
                 hb.endThead();
             }
diff -Naur a/src/reports/payee.cpp b/src/reports/payee.cpp
--- a/src/reports/payee.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/payee.cpp	2025-07-09 01:46:59.676940673 +0200
@@ -30,7 +30,7 @@
 #include <algorithm>
 
 mmReportPayeeExpenses::mmReportPayeeExpenses()
-    : mmPrintableBase(wxTRANSLATE("Payee Report"))
+    : mmPrintableBase(_n("Payee Report"))
     , positiveTotal_(0.0)
     , negativeTotal_(0.0)
 {
@@ -116,7 +116,7 @@
             gd.labels.push_back(stats.label);
         }
 
-        data_usage.name = _("Payees");
+        data_usage.name = _t("Payees");
         gd.series.push_back(data_usage);
         
         if (!gd.series.empty())
@@ -133,10 +133,10 @@
             hb.startThead();
             {
                 hb.startTableRow();
-                hb.addTableHeaderCell(_("Payee"));
-                hb.addTableHeaderCell(_("Incomes"), "text-right");
-                hb.addTableHeaderCell(_("Expenses"), "text-right");
-                hb.addTableHeaderCell(_("Difference"), "text-right");
+                hb.addTableHeaderCell(_t("Payee"));
+                hb.addTableHeaderCell(_t("Incomes"), "text-right");
+                hb.addTableHeaderCell(_t("Expenses"), "text-right");
+                hb.addTableHeaderCell(_t("Difference"), "text-right");
                 hb.endTableRow();
             }
             hb.endThead();
@@ -164,7 +164,7 @@
                 totals.push_back(positiveTotal_);
                 totals.push_back(negativeTotal_);
                 totals.push_back(positiveTotal_ + negativeTotal_);
-                hb.addMoneyTotalRow(_("Total:"), 4, totals);
+                hb.addMoneyTotalRow(_t("Total:"), 4, totals);
             }
             hb.endTfoot();
         }
diff -Naur a/src/reports/reportbase.cpp b/src/reports/reportbase.cpp
--- a/src/reports/reportbase.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/reportbase.cpp	2025-07-09 01:46:59.676940673 +0200
@@ -124,7 +124,7 @@
         {
             const wxString& rj_key = wxString::Format("REPORT_%d", ID);
             const wxString& rj_value = wxString::FromUTF8(json_buffer.GetString());
-            Model_Infotable::instance().Set(rj_key, rj_value);
+            Model_Infotable::instance().setString(rj_key, rj_value);
             m_settings = rj_value;
         }
     }
@@ -153,9 +153,9 @@
     int selection = 0;
     if (j_doc.HasMember("ACCOUNTSELECTION") && j_doc["ACCOUNTSELECTION"].IsInt()) {
         selection = j_doc["ACCOUNTSELECTION"].GetInt();
-        if (selection > (Model_Account::TYPE_STR.Count() + 2)) selection = 0;
+        if (selection > (Model_Account::TYPE_ID_size + 2)) selection = 0;
     }
-    if (selection > (Model_Account::TYPE_STR.Count() + 2))
+    if (selection > (Model_Account::TYPE_ID_size + 2))
         selection = 0;
 
     accountArray_ = selectedAccountArray_ = nullptr;
@@ -171,7 +171,7 @@
         }
         accountArray_ = selectedAccountArray_ = accountSelections;
     } else if (selection > 1)
-        setAccounts(selection, Model_Account::TYPE_STR[selection - 2]);
+        setAccounts(selection, Model_Account::type_name(selection - 2));
 
     m_account_selection = selection;
 }
@@ -193,13 +193,13 @@
     }
     else
     {
-        accountsMsg << _("All Accounts");
+        accountsMsg << _t("All Accounts");
     }
 
     if (accountsMsg.empty()) {
-        accountsMsg = _("None");
+        accountsMsg = _t("None");
     }
-    accountsMsg.Prepend(_("Accounts: "));
+    accountsMsg.Prepend(_t("Accounts: "));
     return accountsMsg;
 }
 
@@ -217,17 +217,16 @@
         case 1: // Select Accounts
         {
             wxArrayString accounts;
-            auto a = Model_Account::instance().find(
-                Model_Account::ACCOUNTTYPE(Model_Account::TYPE_STR_INVESTMENT, NOT_EQUAL));
+            auto a = Model_Account::instance().all();
             std::stable_sort(a.begin(), a.end(), SorterByACCOUNTNAME());
             for (const auto& item : a) {
-                if (m_only_active && item.STATUS != Model_Account::STATUS_STR_OPEN)
+                if (m_only_active && item.STATUS != Model_Account::STATUS_NAME_OPEN)
                     continue;
                 accounts.Add(item.ACCOUNTNAME);
             }
 
             auto parent = wxWindow::FindWindowById(mmID_REPORTS);
-            mmMultiChoiceDialog mcd(parent ? parent : 0, _("Choose Accounts"), wxGetTranslation(m_title), accounts);
+            mmMultiChoiceDialog mcd(parent ? parent : 0, _t("Choose Accounts"), wxGetTranslation(m_title), accounts);
 
             if (selectedAccountArray_ && !selectedAccountArray_->IsEmpty())
             {
diff -Naur a/src/reports/summary.cpp b/src/reports/summary.cpp
--- a/src/reports/summary.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/summary.cpp	2025-07-09 01:46:59.676940673 +0200
@@ -79,19 +79,19 @@
     return arHistory.getDailyBalanceAt(account, date);
 }
 
-double mmReportSummaryByDate::getDailyBalanceAt(const Model_Account::Data* account, const wxDate& date)
+std::pair<double, double> mmReportSummaryByDate::getDailyBalanceAt(const Model_Account::Data* account, const wxDate& date)
 {
     if (date.FormatISODate() < account->INITIALDATE)
-        return 0.0;
+        return {0.0, 0.0};
 
+    std::pair<double /*cash bal*/, double /*market bal*/> bal;
+    bal.first = getCheckingDailyBalanceAt(account, date);
     if (Model_Account::type_id(account) == Model_Account::TYPE_ID_INVESTMENT)
     {
-        return getInvestingDailyBalanceAt(account, date);
-    }
-    else
-    {
-        return getCheckingDailyBalanceAt(account, date);
+        bal.second = getInvestingDailyBalanceAt(account, date);
     }
+
+    return bal;
 }
 
 double mmReportSummaryByDate::getDayRate(int64 currencyid, const wxDate& date)
@@ -112,7 +112,6 @@
 
 wxString mmReportSummaryByDate::getHTMLText()
 {
-    double balancePerDay[Model_Account::TYPE_ID_size];
     mmHTMLBuilder   hb;
     wxDate dateStart = wxDate::Today();
     wxDate dateEnd = wxDate::Today();
@@ -130,7 +129,7 @@
     std::vector<wxDate> arDates;
 
     hb.init();
-    const auto name = wxString::Format(_("Accounts Balance - %s"), mode_ == MONTHLY ? _("Monthly Report") : _("Yearly Report"));
+    const auto name = wxString::Format(_t("Accounts Balance - %s"), mode_ == MONTHLY ? _t("Monthly Report") : _t("Yearly Report"));
     hb.addReportHeader(name);
 
     currencyDateRateCache.clear();
@@ -143,6 +142,7 @@
         const wxDate accountOpeningDate = Model_Account::get_date_by_string(account.INITIALDATE);
         if (accountOpeningDate.IsEarlierThan(dateStart))
             dateStart = accountOpeningDate;
+        accountsBalanceMap[account.ACCOUNTID] = createCheckingBalanceMap(account);
         if (Model_Account::type_id(account) == Model_Account::TYPE_ID_INVESTMENT)
         {
             Model_Stock::Data_Set stocks = Model_Stock::instance().find(Model_Stock::HELDAT(account.id()));
@@ -161,10 +161,6 @@
                 arHistory.push_back(histItem);
             }
         }
-        else
-        {
-            accountsBalanceMap[account.ACCOUNTID] = createCheckingBalanceMap(account);
-        }
     }
 
     if (mode_ == MONTHLY)
@@ -194,7 +190,6 @@
     }
     std::reverse(arDates.begin(), arDates.end());
 
-
     for (const auto & end_date : arDates)
     {
         double total = 0.0;
@@ -207,45 +202,45 @@
         if (mode_ == YEARLY)
             begin_date.SetMonth(wxDateTime::Jan);
 
-        for (int j = 0; j < sizeof(balancePerDay) / sizeof(*balancePerDay); j++)
-            balancePerDay[j] = 0.0;
-
+        std::pair<double /*cash bal*/, double /*market bal*/> balancePerDay[Model_Account::TYPE_ID_size] = {};
         for (const auto& account : Model_Account::instance().all())
         {
-            balancePerDay[Model_Account::type_id(account)] += getDailyBalanceAt(&account, end_date) * getDayRate(account.CURRENCYID, end_date);
+            balancePerDay[Model_Account::type_id(account)].first += getDailyBalanceAt(&account, end_date).first * getDayRate(account.CURRENCYID, end_date);
+            balancePerDay[Model_Account::type_id(account)].second += getDailyBalanceAt(&account, end_date).second * getDayRate(account.CURRENCYID, end_date);
         }
 
-        for (const auto& asset : Model_Asset::instance().all()) {
-            assetBalance += Model_Asset::instance().valueAtDate(&asset, end_date) * getDayRate(asset.CURRENCYID, end_date);
+        for (const auto& asset : Model_Asset::instance().all())
+        {
+            assetBalance += Model_Asset::instance().valueAtDate(&asset, end_date).second * getDayRate(asset.CURRENCYID, end_date);
         }
 
-        totBalanceEntry.values.push_back(balancePerDay[Model_Account::TYPE_ID_CASH]);
-        gs_data[0].values.push_back(balancePerDay[Model_Account::TYPE_ID_CASH]);
-        totBalanceEntry.values.push_back(balancePerDay[Model_Account::TYPE_ID_CHECKING]);
-        gs_data[1].values.push_back(balancePerDay[Model_Account::TYPE_ID_CHECKING]);
-        totBalanceEntry.values.push_back(balancePerDay[Model_Account::TYPE_ID_CREDIT_CARD]);
-        gs_data[2].values.push_back(balancePerDay[Model_Account::TYPE_ID_CREDIT_CARD]);
-        totBalanceEntry.values.push_back(balancePerDay[Model_Account::TYPE_ID_LOAN]);
-        gs_data[3].values.push_back(balancePerDay[Model_Account::TYPE_ID_LOAN]);
-        totBalanceEntry.values.push_back(balancePerDay[Model_Account::TYPE_ID_TERM]);
-        gs_data[4].values.push_back(balancePerDay[Model_Account::TYPE_ID_TERM]);
-        totBalanceEntry.values.push_back(balancePerDay[Model_Account::TYPE_ID_ASSET]);
-        gs_data[5].values.push_back(balancePerDay[Model_Account::TYPE_ID_ASSET]);
-        totBalanceEntry.values.push_back(balancePerDay[Model_Account::TYPE_ID_SHARES]);
-        gs_data[6].values.push_back(balancePerDay[Model_Account::TYPE_ID_SHARES]);
-
-        for (int i = 0; i < Model_Account::TYPE_ID_size; i++) {
-            if (i != Model_Account::TYPE_ID_INVESTMENT)
-                total += balancePerDay[i];
+        totBalanceEntry.values.push_back(balancePerDay[Model_Account::TYPE_ID_CASH].first);
+        gs_data[0].values.push_back(balancePerDay[Model_Account::TYPE_ID_CASH].first);
+        totBalanceEntry.values.push_back(balancePerDay[Model_Account::TYPE_ID_CHECKING].first);
+        gs_data[1].values.push_back(balancePerDay[Model_Account::TYPE_ID_CHECKING].first);
+        totBalanceEntry.values.push_back(balancePerDay[Model_Account::TYPE_ID_CREDIT_CARD].first);
+        gs_data[2].values.push_back(balancePerDay[Model_Account::TYPE_ID_CREDIT_CARD].first);
+        totBalanceEntry.values.push_back(balancePerDay[Model_Account::TYPE_ID_LOAN].first);
+        gs_data[3].values.push_back(balancePerDay[Model_Account::TYPE_ID_LOAN].first);
+        totBalanceEntry.values.push_back(balancePerDay[Model_Account::TYPE_ID_TERM].first);
+        gs_data[4].values.push_back(balancePerDay[Model_Account::TYPE_ID_TERM].first);
+        totBalanceEntry.values.push_back(balancePerDay[Model_Account::TYPE_ID_ASSET].first);
+        gs_data[5].values.push_back(balancePerDay[Model_Account::TYPE_ID_ASSET].first);
+        totBalanceEntry.values.push_back(balancePerDay[Model_Account::TYPE_ID_INVESTMENT].first);
+        gs_data[6].values.push_back(balancePerDay[Model_Account::TYPE_ID_INVESTMENT].first);
+
+        for (int i = 0; i < Model_Account::TYPE_ID_size; i++)
+        {
+            total += balancePerDay[i].first;
         }
 
         totBalanceEntry.values.push_back(total);
         totBalanceEntry.values.push_back(assetBalance);
         gs_data[7].values.push_back(assetBalance);
         total += assetBalance;
-        totBalanceEntry.values.push_back(balancePerDay[Model_Account::TYPE_ID_INVESTMENT]);
-        gs_data[8].values.push_back(balancePerDay[Model_Account::TYPE_ID_INVESTMENT]);
-        total += balancePerDay[Model_Account::TYPE_ID_INVESTMENT];
+        totBalanceEntry.values.push_back(balancePerDay[Model_Account::TYPE_ID_INVESTMENT].second);
+        gs_data[8].values.push_back(balancePerDay[Model_Account::TYPE_ID_INVESTMENT].second);
+        total += balancePerDay[Model_Account::TYPE_ID_INVESTMENT].second;
         totBalanceEntry.values.push_back(total);
         gs_data[9].values.push_back(total);
         totBalanceData.push_back(totBalanceEntry);
@@ -254,25 +249,25 @@
     //Chart
     if (getChartSelection() == 0)
     {
-        gs_data[0].name = _("Cash");
+        gs_data[0].name = _t("Cash");
         gs_data[0].type = "column";
-        gs_data[1].name = _("Bank Accounts");
+        gs_data[1].name = _t("Bank Accounts");
         gs_data[1].type = "column";        
-        gs_data[2].name = _("Credit Card Accounts");
+        gs_data[2].name = _t("Credit Card Accounts");
         gs_data[2].type = "column";   
-        gs_data[3].name = _("Loan Accounts");
+        gs_data[3].name = _t("Loan Accounts");
         gs_data[3].type = "column";   
-        gs_data[4].name = _("Term Accounts");
+        gs_data[4].name = _t("Term Accounts");
         gs_data[4].type = "column";   
-        gs_data[5].name = _("Asset Accounts");
+        gs_data[5].name = _t("Asset Accounts");
         gs_data[5].type = "column";   
-        gs_data[6].name = _("Share Accounts");
+        gs_data[6].name = _t("Investment Accounts");
         gs_data[6].type = "column";
-        gs_data[7].name = _("Assets");
+        gs_data[7].name = _t("Assets");
         gs_data[7].type = "column";
-        gs_data[8].name = _("Stocks");
+        gs_data[8].name = _t("Stocks");
         gs_data[8].type = "column";   
-        gs_data[9].name = _("Balance");
+        gs_data[9].name = _t("Balance");
         gs_data[9].type = "line";  
 
         for (const auto& entry : totBalanceData)
@@ -297,18 +292,18 @@
             {
                 hb.startTableRow();
                 {
-                    hb.addTableHeaderCell(_("Date"));
-                    hb.addTableHeaderCell(_("Cash"), "text-right");
-                    hb.addTableHeaderCell(_("Bank Accounts"), "text-right");
-                    hb.addTableHeaderCell(_("Credit Card Accounts"), "text-right");
-                    hb.addTableHeaderCell(_("Loan Accounts"), "text-right");
-                    hb.addTableHeaderCell(_("Term Accounts"), "text-right");
-                    hb.addTableHeaderCell(_("Asset Accounts"), "text-right");
-                    hb.addTableHeaderCell(_("Share Accounts"), "text-right");
-                    hb.addTableHeaderCell(_("Total"), "text-right");
-                    hb.addTableHeaderCell(_("Assets"), "text-right");
-                    hb.addTableHeaderCell(_("Stocks"), "text-right");
-                    hb.addTableHeaderCell(_("Balance"), "text-right");
+                    hb.addTableHeaderCell(_t("Date"));
+                    hb.addTableHeaderCell(_t("Cash"), "text-right");
+                    hb.addTableHeaderCell(_t("Bank Accounts"), "text-right");
+                    hb.addTableHeaderCell(_t("Credit Card Accounts"), "text-right");
+                    hb.addTableHeaderCell(_t("Loan Accounts"), "text-right");
+                    hb.addTableHeaderCell(_t("Term Accounts"), "text-right");
+                    hb.addTableHeaderCell(_t("Asset Accounts"), "text-right");
+                    hb.addTableHeaderCell(_t("Investment Accounts"), "text-right");
+                    hb.addTableHeaderCell(_t("Total"), "text-right");
+                    hb.addTableHeaderCell(_t("Assets"), "text-right");
+                    hb.addTableHeaderCell(_t("Stocks"), "text-right");
+                    hb.addTableHeaderCell(_t("Balance"), "text-right");
                 }
                 hb.endTableRow();
             }
diff -Naur a/src/reports/summary.h b/src/reports/summary.h
--- a/src/reports/summary.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/summary.h	2025-07-09 01:46:59.676940673 +0200
@@ -62,7 +62,7 @@
     std::map<wxDate, double> createCheckingBalanceMap(const Model_Account::Data& account);
     double getCheckingDailyBalanceAt(const Model_Account::Data* account, const wxDate& date);
     double getInvestingDailyBalanceAt(const Model_Account::Data* account, const wxDate& date);
-    double getDailyBalanceAt(const Model_Account::Data* account, const wxDate& date);
+    std::pair<double, double> getDailyBalanceAt(const Model_Account::Data* account, const wxDate& date);
     double getDayRate(int64 currencyid, const wxDate& date);
 };
 
diff -Naur a/src/reports/summarystocks.cpp b/src/reports/summarystocks.cpp
--- a/src/reports/summarystocks.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/summarystocks.cpp	2025-07-09 01:46:59.676940673 +0200
@@ -33,7 +33,7 @@
 #include <algorithm>
 
 mmReportSummaryStocks::mmReportSummaryStocks()
-    : mmPrintableBase(wxTRANSLATE("Summary of Stocks"))
+    : mmPrintableBase(_n("Summary of Stocks"))
 {
     setReportParameters(Reports::StocksReportSummary);
 }
@@ -109,16 +109,16 @@
             {
                 hb.startTableRow();
                 {
-                    hb.addTableHeaderCell(_("Name"));
-                    hb.addTableHeaderCell(_("Symbol"));
-                    hb.addTableHeaderCell(_("Purchase Date"));
-                    hb.addTableHeaderCell(_("Quantity"), "text-right");
-                    hb.addTableHeaderCell(_("Initial Value"), "text-right");
-                    hb.addTableHeaderCell(_("Current Price"), "text-right");
-                    hb.addTableHeaderCell(_("Commission"), "text-right");
-                    hb.addTableHeaderCell(_("Realized Gain/Loss"), "text-right");
-                    hb.addTableHeaderCell(_("Unrealized Gain/Loss"), "text-right");
-                    hb.addTableHeaderCell(_("Current Value"), "text-right");
+                    hb.addTableHeaderCell(_t("Name"));
+                    hb.addTableHeaderCell(_t("Symbol"));
+                    hb.addTableHeaderCell(_t("Purchase Date"));
+                    hb.addTableHeaderCell(_t("Quantity"), "text-right");
+                    hb.addTableHeaderCell(_t("Total Cost"), "text-right");
+                    hb.addTableHeaderCell(_t("Current Price"), "text-right");
+                    hb.addTableHeaderCell(_t("Commission"), "text-right");
+                    hb.addTableHeaderCell(_t("Realized Gain/Loss"), "text-right");
+                    hb.addTableHeaderCell(_t("Unrealized Gain/Loss"), "text-right");
+                    hb.addTableHeaderCell(_t("Current Value"), "text-right");
                 }
                 hb.endTableRow();
             }
@@ -160,7 +160,7 @@
                     }
                     hb.startTotalTableRow();
                     {
-                        hb.addTableCell(_("Total:"));
+                        hb.addTableCell(_t("Total:"));
                         hb.addEmptyTableCell(6);
                         hb.addCurrencyCell(acct.realgainloss, currency);
                         hb.addCurrencyCell(acct.unrealgainloss, currency);
@@ -180,7 +180,7 @@
                 double forex_unreal_gain_loss = std::round((m_unreal_gain_loss_sum_total - m_unreal_gain_loss_excl_forex) * scale) / scale;
 
                 hb.startTotalTableRow();
-                hb.addTableCell(_("Grand Total:"));
+                hb.addTableCell(_t("Grand Total:"));
                 hb.addEmptyTableCell(6);
 
                 hb.startTableCell(" style='text-align:right;' nowrap");
@@ -241,7 +241,7 @@
 }
 
 mmReportChartStocks::mmReportChartStocks()
-    : mmPrintableBase(wxTRANSLATE("Stocks Performance Charts"))
+    : mmPrintableBase(_n("Stocks Performance Charts"))
 {
     setReportParameters(Reports::StocksReportPerformance);
 }
@@ -261,7 +261,6 @@
         hb.DisplayDateHeading(m_date_range->start_date(), m_date_range->end_date(), true);
 
     wxTimeSpan dist;
-    wxDate precDateDt = wxInvalidDateTime;
     wxArrayString symbols;
     for (const auto& stock : Model_Stock::instance().all(Model_Stock::COL_SYMBOL))
     {
diff -Naur a/src/reports/transactions.cpp b/src/reports/transactions.cpp
--- a/src/reports/transactions.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/transactions.cpp	2025-07-09 01:46:59.676940673 +0200
@@ -43,25 +43,24 @@
         m_transDialog->Destroy();
 }
 
-void mmReportTransactions::displayTotals(std::map<int64, double> total, std::map<int64, double> total_in_base_curr, int noOfCols)
+void mmReportTransactions::displayTotals(const std::map<int64, double>& total, std::map<int64, double>& total_in_base_curr, int noOfCols)
 {
     double grand_total = 0;
-    for (const auto& curr_total : total)
+    for (const auto& [curr_id, curr_total]: total)
     {
-        const auto curr = Model_Currency::instance().get(curr_total.first);
+        const auto curr = Model_Currency::instance().get(curr_id);
         const bool isBaseCurr = (curr->CURRENCY_SYMBOL == Model_Currency::GetBaseCurrency()->CURRENCY_SYMBOL);
-        grand_total += total_in_base_curr[curr_total.first];
+        grand_total += total_in_base_curr[curr_id];
         if (total.size() > 1 || !isBaseCurr)
         {
-            const wxString totalStr_curr = isBaseCurr ? "" : Model_Currency::toCurrency(curr_total.second, curr);
-            const wxString totalStr = Model_Currency::toCurrency(total_in_base_curr[curr_total.first], Model_Currency::GetBaseCurrency());
-            const std::vector<wxString> v{ totalStr_curr,  totalStr };
-            hb.addTotalRow(curr->CURRENCY_SYMBOL, noOfCols, v);
+            const wxString totalStr_curr = isBaseCurr ? "" : Model_Currency::toCurrency(curr_total, curr);
+            const wxString totalStr = Model_Currency::toCurrency(total_in_base_curr[curr_id], Model_Currency::GetBaseCurrency());
+            hb.addTotalRow(curr->CURRENCY_SYMBOL, noOfCols, { totalStr_curr,  totalStr });
         }
     }
     const wxString totalStr = Model_Currency::toCurrency(grand_total, Model_Currency::GetBaseCurrency());
     const std::vector<wxString> v{ "", totalStr };
-    hb.addTotalRow(_("Grand Total:"), noOfCols, v);
+    hb.addTotalRow(_t("Grand Total:"), noOfCols, v);
 }
 
 void mmReportTransactions::UDFCFormatHelper(Model_CustomField::TYPE_ID type, int64 ref, wxString data, double val, int scale)
@@ -84,7 +83,7 @@
     Run(m_transDialog);
 
     wxArrayInt64 selected_accounts = m_transDialog->mmGetAccountsID();
-    wxString accounts_label = _("All Accounts");
+    wxString accounts_label = _t("All Accounts");
     bool allAccounts = true;
     if (m_transDialog->mmIsAccountChecked() && !m_transDialog->mmGetAccountsID().empty()) {
         accounts_label.clear();
@@ -123,10 +122,10 @@
     end.ParseISODate(m_transDialog->mmGetEndDate());
     hb.DisplayDateHeading(start, end
         , m_transDialog->mmIsRangeChecked() || m_transDialog->mmIsDateRangeChecked());
-    hb.DisplayFooter(_("Accounts: ") + accounts_label);
+    hb.DisplayFooter(_t("Accounts: ") + accounts_label);
 
     m_noOfCols = (m_transDialog->mmIsHideColumnsChecked()) ? m_transDialog->mmGetHideColumnsID().GetCount() : 11;
-    const wxString& AttRefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+    const wxString& AttRefType = Model_Checking::refTypeName;
     const int groupBy = m_transDialog->mmGetGroupBy();
     const int chart = m_transDialog->mmGetChart();
     wxString lastSortLabel = "";
@@ -139,7 +138,7 @@
     std::map<int64, double> grand_total_in_base_curr_extrans; //Grand - Store transactions amount daily converted to base currency - excluding TRANSFERS
     std::map<wxString, double> values_chart; // Store grouped values for chart
 
-    const wxString refType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+    const wxString refType = Model_Checking::refTypeName;
     static wxArrayString udfc_fields = Model_CustomField::UDFC_FIELDS();
     Model_CustomField::TYPE_ID udfc_type[5];
     int udfc_scale[5];
@@ -189,7 +188,7 @@
                 if (chart > -1)
                 {
                     double value_chart = std::accumulate(total_in_base_curr.begin(), total_in_base_curr.end(), static_cast<double>(0),
-                                                         [](const double previous, decltype(*total_in_base_curr.begin()) p) { return previous + p.second; });
+                                                         [](double previous, const auto& p) { return previous + p.second; });
                     values_chart[lastSortLabel] += value_chart;
                 }
                 total.clear();
@@ -202,34 +201,34 @@
             hb.startThead();
             hb.startTableRow();
             if (showColumnById(mmFilterTransactionsDialog::COL_ID))
-                hb.addTableHeaderCell(_("ID"), "ID text-right");
+                hb.addTableHeaderCell(_t("ID"), "ID text-right");
             if (showColumnById(mmFilterTransactionsDialog::COL_COLOR))
-                hb.addTableHeaderCell(_("Color"), "Color text-center");
+                hb.addTableHeaderCell(_t("Color"), "Color text-center");
             if (showColumnById(mmFilterTransactionsDialog::COL_DATE))
-                hb.addTableHeaderCell(_("Date"), "Date");
+                hb.addTableHeaderCell(_t("Date"), "Date");
             if (showColumnById(mmFilterTransactionsDialog::COL_TIME))
-                hb.addTableHeaderCell(_("Time"), "Time");
+                hb.addTableHeaderCell(_t("Time"), "Time");
             if (showColumnById(mmFilterTransactionsDialog::COL_NUMBER))
-                hb.addTableHeaderCell(_("Number"), "Number");
+                hb.addTableHeaderCell(_t("Number"), "Number");
             if (showColumnById(mmFilterTransactionsDialog::COL_ACCOUNT))
-                hb.addTableHeaderCell(_("Account"), "Account");
+                hb.addTableHeaderCell(_t("Account"), "Account");
             if (showColumnById(mmFilterTransactionsDialog::COL_PAYEE))
-                hb.addTableHeaderCell(_("Payee"), "Payee");
+                hb.addTableHeaderCell(_t("Payee"), "Payee");
             if (showColumnById(mmFilterTransactionsDialog::COL_STATUS))
-                hb.addTableHeaderCell(_("Status"), "Status text-center");
+                hb.addTableHeaderCell(_t("Status"), "Status text-center");
             if (showColumnById(mmFilterTransactionsDialog::COL_CATEGORY))
-                hb.addTableHeaderCell(_("Category"), "Category");
+                hb.addTableHeaderCell(_t("Category"), "Category");
             if (showColumnById(mmFilterTransactionsDialog::COL_TAGS))
-                hb.addTableHeaderCell(_("Tags"), "Tags");
+                hb.addTableHeaderCell(_t("Tags"), "Tags");
             if (showColumnById(mmFilterTransactionsDialog::COL_TYPE))
-                hb.addTableHeaderCell(_("Type"), "Type");
+                hb.addTableHeaderCell(_t("Type"), "Type");
             if (showColumnById(mmFilterTransactionsDialog::COL_AMOUNT))
-                hb.addTableHeaderCell(_("Amount"), "Amount text-right");
+                hb.addTableHeaderCell(_t("Amount"), "Amount text-right");
             if (showColumnById(mmFilterTransactionsDialog::COL_RATE))
-                hb.addTableHeaderCell(_("FX Rate"), "Rate text-right");
+                hb.addTableHeaderCell(_t("FX Rate"), "Rate text-right");
             if (showColumnById(mmFilterTransactionsDialog::COL_NOTES))
-                hb.addTableHeaderCell(_("Notes"), "Notes");
-            const auto& ref_type = Model_Attachment::REFTYPE_STR_TRANSACTION;
+                hb.addTableHeaderCell(_t("Notes"), "Notes");
+            const auto& ref_type = Model_Checking::refTypeName;
             int colNo = mmFilterTransactionsDialog::COL_UDFC01;
             for (const auto& udfc_entry : Model_CustomField::UDFC_FIELDS())
             {
@@ -269,7 +268,7 @@
         bool is_time_used = Option::instance().UseTransDateTime();
         const wxString mask = is_time_used ? "%Y-%m-%dT%H:%M:%S" : "%Y-%m-%d";
 
-        auto custom_fields_data = Model_CustomFieldData::instance().get_all(Model_Attachment::REFTYPE_ID_TRANSACTION);
+        auto custom_fields_data = Model_CustomFieldData::instance().get_all(Model_Checking::refTypeName);
         while (noOfTrans--)
         {
             hb.startTableRow();
@@ -423,8 +422,8 @@
         displayTotals(total, total_in_base_curr, m_noOfCols);
         if (chart > -1)
         {
-            double value_chart = std::accumulate(total_in_base_curr.begin(), total_in_base_curr.end(), 0,
-                                                 [](const double previous, decltype(*total_in_base_curr.begin()) p) { return previous + p.second; });
+            double value_chart = std::accumulate(total_in_base_curr.begin(), total_in_base_curr.end(), 0.0,
+                                                 [](double previous, const auto& p) { return previous + p.second; });
             values_chart[lastSortLabel] += value_chart;
         }
     }
@@ -442,7 +441,7 @@
             {
                 hb.startTableRow();
                 {
-                    hb.addTableHeaderCell(_("All Transactions: Withdrawals, Deposits, and Transfers"));
+                    hb.addTableHeaderCell(_t("All Transactions: Withdrawals, Deposits, and Transfers"));
                     hb.addTableHeaderCell("");
                     hb.addTableHeaderCell("");
                 }
@@ -460,7 +459,7 @@
             {
                 hb.startTableRow();
                 {
-                    hb.addTableHeaderCell(_("All Transactions excluding Transfers"));
+                    hb.addTableHeaderCell(_t("All Transactions excluding Transfers"));
                     hb.addTableHeaderCell("");
                     hb.addTableHeaderCell("");
                 }
@@ -482,10 +481,10 @@
     {
         GraphData gd;
         GraphSeries gs;
-        for (const auto& kv : values_chart)
+        for (const auto& [k, v] : values_chart)
         {
-            gd.labels.push_back(kv.first);
-            gs.values.push_back(kv.second);
+            gd.labels.push_back(k);
+            gs.values.push_back(v);
         }
         gd.series.push_back(gs);
         //gd.colors = { mmThemeMetaColour(meta::COLOR_REPORT_DELTA) };
@@ -501,7 +500,7 @@
                 {
                     hb.startTableRow();
                     {
-                        hb.addTableHeaderCell(_("Statistics"));
+                        hb.addTableHeaderCell(_t("Statistics"));
                         hb.addTableHeaderCell("");
                     }
                     hb.endTableRow();
@@ -511,24 +510,22 @@
                 {
                     auto statsMin = std::min_element
                     (values_chart.begin(), values_chart.end(),
-                    [](const std::pair<wxString, double>& p1, const std::pair<wxString, double>& p2) {
-                            return p1.second < p2.second;
-                        }
-                    );
+                    [](const auto& p1, const auto& p2) {
+                        return p1.second < p2.second;
+                    });
                     auto statsMax = std::max_element
                     (values_chart.begin(), values_chart.end(),
-                    [](const std::pair<wxString, double>& p1, const std::pair<wxString, double>& p2) {
-                            return p1.second < p2.second;
-                        }
-                    );
+                    [](const auto& p1, const auto& p2) {
+                        return p1.second < p2.second;
+                    });
                     double statsAvg = std::accumulate(values_chart.begin(), values_chart.end(), 0,
-                        [](const double previous, decltype(*values_chart.begin()) p) { return previous + p.second; });
+                        [](double previous, const auto & p) { return previous + p.second; });
                     statsAvg = values_chart.size() > 0 ? statsAvg / values_chart.size() : 0;
-                    hb.addTotalRow(_("Minimum") + " >> " + statsMin->first, 2,
+                    hb.addTotalRow(_t("Minimum") + " >> " + statsMin->first, 2,
                         std::vector<wxString>{ Model_Currency::toCurrency(statsMin->second, Model_Currency::GetBaseCurrency()) });
-                    hb.addTotalRow(_("Maximum") + " >> " + statsMax->first, 2,
+                    hb.addTotalRow(_t("Maximum") + " >> " + statsMax->first, 2,
                         std::vector<wxString>{ Model_Currency::toCurrency(statsMax->second, Model_Currency::GetBaseCurrency()) });
-                    hb.addTotalRow(_("Average"), 2,
+                    hb.addTotalRow(_t("Average"), 2,
                         std::vector<wxString>{ Model_Currency::toCurrency(statsAvg, Model_Currency::GetBaseCurrency()) });
                 }
                 hb.endTbody();
@@ -556,9 +553,9 @@
 {
     trans_.clear();
     const auto splits = Model_Splittransaction::instance().get_all();
-    const auto tags = Model_Taglink::instance().get_all(Model_Attachment::REFTYPE_STR_TRANSACTION);
+    const auto tags = Model_Taglink::instance().get_all(Model_Checking::refTypeName);
     bool combine_splits = dlg.get()->mmIsCombineSplitsChecked();
-    const wxString splitRefType = Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT;
+    const wxString splitRefType = Model_Splittransaction::refTypeName;
     for (const auto& tran : Model_Checking::instance().all())
     {
         Model_Checking::Full_Data full_tran(tran, splits, tags);
@@ -590,8 +587,8 @@
                     full_tran.NOTES.Append((tran.NOTES.IsEmpty() ? "" : " ") + split.NOTES);
 
                     wxString tagnames;
-                    for (const auto& tag : Model_Taglink::instance().get(splitRefType, split.SPLITTRANSID))
-                        tagnames.Append(tag.first + " ");
+                    for (const auto& [tag_name, _] : Model_Taglink::instance().get(splitRefType, split.SPLITTRANSID))
+                        tagnames.Append(tag_name + " ");
                     if (!tagnames.IsEmpty())
                         full_tran.TAGNAMES.Append((full_tran.TAGNAMES.IsEmpty() ? "" : ", ") + tagnames.Trim());
 
diff -Naur a/src/reports/transactions.h b/src/reports/transactions.h
--- a/src/reports/transactions.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/reports/transactions.h	2025-07-09 01:46:59.676940673 +0200
@@ -38,7 +38,7 @@
     Model_Checking::Full_Data_Set trans_;
     wxSharedPtr<mmFilterTransactionsDialog> m_transDialog;
     bool showColumnById(int num);
-    void displayTotals(std::map<int64, double> total, std::map<int64, double> total_in_base_curr, int noOfCols);
+    void displayTotals(const std::map<int64, double>& total, std::map<int64, double>& total_in_base_curr, int noOfCols);
     void UDFCFormatHelper(Model_CustomField::TYPE_ID type, int64 ref, wxString data, double val, int scale);
 
     mmHTMLBuilder hb;
diff -Naur a/src/sharetransactiondialog.cpp b/src/sharetransactiondialog.cpp
--- a/src/sharetransactiondialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/sharetransactiondialog.cpp	2025-07-09 01:46:59.676940673 +0200
@@ -27,9 +27,10 @@
 #include "validators.h"
 
 #include "model/Model_Account.h"
-#include "model/Model_Attachment.h"
+#include "model/Model_Category.h"
 #include "model/Model_StockHistory.h"
 #include "usertransactionpanel.h"
+#include "splittransactionsdialog.h"
 
 #include <wx/numdlg.h>
 #include <wx/textdlg.h>
@@ -41,15 +42,16 @@
     EVT_BUTTON(wxID_OK, ShareTransactionDialog::OnOk)
     EVT_BUTTON(wxID_CANCEL, ShareTransactionDialog::OnCancel)
     EVT_BUTTON(wxID_INDEX, ShareTransactionDialog::OnStockPriceButton)
+    EVT_BUTTON(mmID_COMM_SPLIT, ShareTransactionDialog::OnDeductibleSplit)
     EVT_CLOSE(ShareTransactionDialog::OnQuit)
 wxEND_EVENT_TABLE()
 
-double ShareTransactionDialog::GetAmount(double shares, double price, double commision)
+double ShareTransactionDialog::GetAmount(double shares, double price, double commission)
 {
     if (m_transaction_panel->TransactionType() == Model_Checking::TYPE_ID_DEPOSIT)
-        return (shares * price - commision);
+        return (shares * price - commission);
     else
-        return (shares * price + commision);
+        return (shares * price + commission);
 }
 
 ShareTransactionDialog::ShareTransactionDialog()
@@ -58,31 +60,48 @@
 
 ShareTransactionDialog::ShareTransactionDialog(wxWindow* parent, Model_Stock::Data* stock)
     : m_stock(stock)
-    , m_dialog_heading(_("Add Share Transaction"))
+    , m_dialog_heading(_t("Add Share Transaction"))
 {
     long style = wxCAPTION | wxSYSTEM_MENU | wxCLOSE_BOX;
     Create(parent, wxID_ANY, m_dialog_heading, wxDefaultPosition, wxSize(400, 300), style);
 }
 
 ShareTransactionDialog::ShareTransactionDialog(wxWindow* parent, Model_Translink::Data* translink_entry, Model_Checking::Data* checking_entry)
-    : m_dialog_heading(_("Add Share Transaction"))
+    : m_dialog_heading(_t("Edit Share Transaction"))    
+    , m_checking_entry(checking_entry)
+    , m_translink_entry(translink_entry)
 {
-    if (translink_entry)
+    if (m_translink_entry)
     {
-        m_translink_entry = translink_entry;
-        m_stock = Model_Stock::instance().get(translink_entry->LINKRECORDID);
-        if (translink_entry->LINKTYPE == Model_Attachment::REFTYPE_STR_STOCK)
+        m_stock = Model_Stock::instance().get(m_translink_entry->LINKRECORDID);
+        if (m_translink_entry->LINKTYPE == Model_Stock::refTypeName)
         {
-            m_share_entry = Model_Shareinfo::ShareEntry(translink_entry->CHECKINGACCOUNTID);
+            m_share_entry = Model_Shareinfo::ShareEntry(m_translink_entry->CHECKINGACCOUNTID);
+            if (m_share_entry->SHARELOT.IsEmpty()) m_share_entry->SHARELOT = m_stock->STOCKID.ToString();
+
+            for (const auto& split: Model_Splittransaction::instance().find(Model_Splittransaction::TRANSID(m_share_entry->SHAREINFOID))) 
+            {
+                wxArrayInt64 tags;
+                for (const auto& tag : Model_Taglink::instance().find(Model_Taglink::REFTYPE(Model_Splittransaction::refTypeName), Model_Taglink::REFID(split.SPLITTRANSID)))
+                    tags.push_back(tag.TAGID);
+                m_local_deductible_splits.push_back({split.CATEGID, split.SPLITTRANSAMOUNT, tags, split.NOTES});
+            }
         }
     }
 
-    if (checking_entry) {
-        m_checking_entry = checking_entry;
+    if (m_checking_entry) 
+    {
+        for (const auto& split: Model_Splittransaction::instance().find(Model_Splittransaction::TRANSID(m_checking_entry->TRANSID))) 
+        {
+            wxArrayInt64 tags;
+            for (const auto& tag : Model_Taglink::instance().find(Model_Taglink::REFTYPE(Model_Splittransaction::refTypeName), Model_Taglink::REFID(split.SPLITTRANSID)))
+                tags.push_back(tag.TAGID);
+            m_local_non_deductible_splits.push_back({split.CATEGID, split.SPLITTRANSAMOUNT, tags, split.NOTES});
+        }
     }
 
     this->SetFont(parent->GetFont());
-    Create(parent);
+    Create(parent, wxID_ANY, m_dialog_heading, wxDefaultPosition, wxSize(400, 300));
     this->SetMinSize(wxSize(400, 300));
 }
 
@@ -116,16 +135,18 @@
 
     m_stock_name_ctrl->Enable(false);
     m_stock_symbol_ctrl->Enable(false);
+    m_share_lot_ctrl->Enable(false);
     m_notes_ctrl->Enable(false);
 
-    Model_Translink::Data_Set translink_list = Model_Translink::TranslinkList(Model_Attachment::REFTYPE_ID_STOCK, m_stock->STOCKID);
+    Model_Translink::Data_Set translink_list = Model_Translink::TranslinkList<Model_Stock>(m_stock->STOCKID);
 
     if (translink_list.empty())
     {   // Set up the transaction as the first entry.
-        int precision = m_stock->NUMSHARES == floor(m_stock->NUMSHARES) ? 0 : Option::instance().SharePrecision();
+        int precision = m_stock->NUMSHARES == floor(m_stock->NUMSHARES) ? 0 : Option::instance().getSharePrecision();
         m_share_num_ctrl->SetValue(m_stock->NUMSHARES, precision);
-        m_share_price_ctrl->SetValue(m_stock->PURCHASEPRICE, Option::instance().SharePrecision());
-        m_share_commission_ctrl->SetValue(m_stock->COMMISSION, Option::instance().SharePrecision());
+        m_share_price_ctrl->SetValue(m_stock->PURCHASEPRICE, Option::instance().getSharePrecision());
+        m_share_commission_ctrl->SetValue(m_stock->COMMISSION, Option::instance().getSharePrecision());
+        m_share_lot_ctrl->SetValue(m_stock->STOCKID.ToString());
         m_transaction_panel->TransactionDate(Model_Stock::PURCHASEDATE(m_stock));
         m_transaction_panel->SetTransactionValue(GetAmount(m_stock->NUMSHARES, m_stock->PURCHASEPRICE
                 , m_stock->COMMISSION), true);
@@ -134,10 +155,10 @@
     {
         if (m_share_entry)
         {
-            int precision = m_share_entry->SHARENUMBER == floor(m_share_entry->SHARENUMBER) ? 0 : Option::instance().SharePrecision();
+            int precision = m_share_entry->SHARENUMBER == floor(m_share_entry->SHARENUMBER) ? 0 : Option::instance().getSharePrecision();
             m_share_num_ctrl->SetValue(std::abs(m_share_entry->SHARENUMBER), precision);
-            m_share_price_ctrl->SetValue(m_share_entry->SHAREPRICE, Option::instance().SharePrecision());
-            m_share_commission_ctrl->SetValue(m_share_entry->SHARECOMMISSION, Option::instance().SharePrecision());
+            m_share_price_ctrl->SetValue(m_share_entry->SHAREPRICE, Option::instance().getSharePrecision());
+            m_share_commission_ctrl->SetValue(m_share_entry->SHARECOMMISSION, Option::instance().getSharePrecision());
             m_share_lot_ctrl->SetValue(m_share_entry->SHARELOT);
 
             if (m_translink_entry)
@@ -152,11 +173,11 @@
                     m_transaction_panel->SetTransactionStatus(Model_Checking::status_id(checking_entry));
                     m_transaction_panel->SetTransactionPayee(checking_entry->PAYEEID);
                     m_transaction_panel->SetTransactionCategory(checking_entry->CATEGID);
-                    if (!checking_entry->DELETEDTIME.IsEmpty()) {
+                    if (!checking_entry->DELETEDTIME.IsEmpty()) 
+                    {
                         m_share_num_ctrl->Enable(false);
                         m_share_price_ctrl->Enable(false);
                         m_share_commission_ctrl->Enable(false);
-                        m_share_lot_ctrl->Enable(false);
                         web_button->Enable(false);
                     }
                 }
@@ -165,10 +186,19 @@
         else
         {
             m_share_num_ctrl->SetValue(0, 0);
-            m_share_price_ctrl->SetValue(0, Option::instance().SharePrecision());
+            m_share_price_ctrl->SetValue(0, Option::instance().getSharePrecision());
+            m_share_lot_ctrl->SetValue(m_stock->STOCKID.ToString());
             m_transaction_panel->SetTransactionValue(0, true);
         }
     }
+
+    bool has_split = !(m_local_deductible_splits.size() <= 1);
+    if (has_split)
+    {
+        m_share_commission_ctrl->Enable(!has_split);
+        m_share_commission_ctrl->SetValue(Model_Splittransaction::get_total(m_local_deductible_splits), Option::instance().getSharePrecision());
+        mmToolTip(m_deductible_comm_split, Model_Splittransaction::get_tooltip(m_local_deductible_splits, nullptr /* currency */));
+    }
 }
 
 void ShareTransactionDialog::CreateControls()
@@ -187,7 +217,7 @@
     /********************************************************************
     Stock Details Panel
     *********************************************************************/
-    wxStaticBox* details_frame = new wxStaticBox(this, wxID_ANY, _("Stock Investment Details"));
+    wxStaticBox* details_frame = new wxStaticBox(this, wxID_ANY, _t("Stock Investment Details"));
     wxStaticBoxSizer* details_frame_sizer = new wxStaticBoxSizer(details_frame, wxVERTICAL);
     left_sizer->Add(details_frame_sizer, g_flagsExpand);
 
@@ -197,82 +227,90 @@
     wxFlexGridSizer* itemFlexGridSizer6 = new wxFlexGridSizer(0, 2, 0, 0);
     stock_details_panel->SetSizer(itemFlexGridSizer6);
 
-    itemFlexGridSizer6->Add(new wxStaticText(stock_details_panel, wxID_STATIC, _("Company Name")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText(stock_details_panel, wxID_STATIC, _t("Company Name")), g_flagsH);
 
     m_stock_name_ctrl = new wxTextCtrl(stock_details_panel, ID_STOCKTRANS_SHARE_NAME, "");
     itemFlexGridSizer6->Add(m_stock_name_ctrl, g_flagsExpand);
-    mmToolTip(m_stock_name_ctrl, _("Enter the stock company name"));
+    mmToolTip(m_stock_name_ctrl, _t("Enter the stock company name"));
 
     //Symbol
-    wxStaticText* symbol = new wxStaticText(stock_details_panel, wxID_STATIC, _("Stock Symbol"));
+    wxStaticText* symbol = new wxStaticText(stock_details_panel, wxID_STATIC, _t("Stock Symbol"));
     itemFlexGridSizer6->Add(symbol, g_flagsH);
     symbol->SetFont(this->GetFont().Bold());
 
     m_stock_symbol_ctrl = new wxTextCtrl(stock_details_panel, ID_STOCKTRANS_SHARE_SYMBOL
         , "", wxDefaultPosition, wxSize(150, -1), 0);
     itemFlexGridSizer6->Add(m_stock_symbol_ctrl, g_flagsH);
-    mmToolTip(m_stock_symbol_ctrl, _("Enter the stock symbol. (Optional) Include exchange. eg: IBM.BE"));
+    mmToolTip(m_stock_symbol_ctrl, _t("Enter the stock symbol. (Optional) Include exchange. eg: IBM.BE"));
+
+    //Share Lot
+    wxStaticText* lot_text = new wxStaticText(stock_details_panel, wxID_STATIC, _t("Share Lot"));
+    itemFlexGridSizer6->Add(lot_text, g_flagsH);
+    lot_text->SetFont(this->GetFont().Bold());
+
+    m_share_lot_ctrl = new wxTextCtrl(stock_details_panel, ID_STOCKTRANS_SHARE_LOT
+        , "", wxDefaultPosition, wxSize(150, -1), 0);
+    itemFlexGridSizer6->Add(m_share_lot_ctrl, g_flagsH);
+    mmToolTip(m_share_lot_ctrl, _t("Enter the LOT that this parcel os shares belong to"));
 
     //Share Unit Number 
-    wxStaticText* number = new wxStaticText(stock_details_panel, wxID_STATIC, _("Share Number"));
+    wxStaticText* number = new wxStaticText(stock_details_panel, wxID_STATIC, _t("Share Number"));
     itemFlexGridSizer6->Add(number, g_flagsH);
     number->SetFont(this->GetFont().Bold());
     m_share_num_ctrl = new mmTextCtrl(stock_details_panel, ID_STOCKTRANS_SHARE_NUMBER, ""
         , wxDefaultPosition, wxSize(150, -1), wxALIGN_RIGHT | wxTE_PROCESS_ENTER, mmCalcValidator());
-    m_share_num_ctrl->SetAltPrecision(Option::instance().SharePrecision());
+    m_share_num_ctrl->SetAltPrecision(Option::instance().getSharePrecision());
     itemFlexGridSizer6->Add(m_share_num_ctrl, g_flagsH);
-    mmToolTip(m_share_num_ctrl, _("Enter number of shares held"));
+    mmToolTip(m_share_num_ctrl, _t("Enter number of shares held"));
 
     m_share_num_ctrl->Connect(ID_STOCKTRANS_SHARE_NUMBER, wxEVT_COMMAND_TEXT_UPDATED
         , wxCommandEventHandler(ShareTransactionDialog::CalculateAmount), nullptr, this);
 
     //Share Price
-    wxStaticText* pprice = new wxStaticText(stock_details_panel, wxID_STATIC, _("Share Price"));
+    wxStaticText* pprice = new wxStaticText(stock_details_panel, wxID_STATIC, _t("Share Price"));
     pprice->SetFont(this->GetFont().Bold());
     m_share_price_ctrl = new mmTextCtrl(stock_details_panel, ID_STOCKTRANS_SHARE_PRICE, ""
         , wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT | wxTE_PROCESS_ENTER, mmCalcValidator());
-    m_share_price_ctrl->SetAltPrecision(Option::instance().SharePrecision());
+    m_share_price_ctrl->SetAltPrecision(Option::instance().getSharePrecision());
     m_share_price_ctrl->SetMinSize(wxSize(150, -1));
     itemFlexGridSizer6->Add(pprice, g_flagsH);
     itemFlexGridSizer6->Add(m_share_price_ctrl, g_flagsH);
-    mmToolTip(m_share_price_ctrl, _("Enter the current value for a single share unit"));
+    mmToolTip(m_share_price_ctrl, _t("Enter the current value for a single share unit"));
 
     m_share_price_ctrl->Connect(ID_STOCKTRANS_SHARE_PRICE, wxEVT_COMMAND_TEXT_UPDATED
         , wxCommandEventHandler(ShareTransactionDialog::CalculateAmount), nullptr, this);
 
-    // Commission
-    itemFlexGridSizer6->Add(new wxStaticText(stock_details_panel, wxID_STATIC, _("Commission")), g_flagsH);
+    // Deductible Commission
+    itemFlexGridSizer6->Add(new wxStaticText(stock_details_panel, wxID_STATIC, _t("Deductible Comm.")), g_flagsH);
+
+    wxBoxSizer* commission_sizer = new wxBoxSizer(wxHORIZONTAL);
+    itemFlexGridSizer6->Add(commission_sizer, wxSizerFlags(g_flagsExpand).Border(0));
+
     m_share_commission_ctrl = new mmTextCtrl(stock_details_panel, ID_STOCKTRANS_SHARE_COMMISSION, "0"
         , wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT | wxTE_PROCESS_ENTER, mmCalcValidator());
-    m_share_commission_ctrl->SetAltPrecision(Option::instance().SharePrecision());
-    m_share_commission_ctrl->SetMinSize(wxSize(150, -1));
-    itemFlexGridSizer6->Add(m_share_commission_ctrl, g_flagsH);
-    mmToolTip(m_share_commission_ctrl, _("Enter any commission paid"));
+    m_share_commission_ctrl->SetAltPrecision(Option::instance().getSharePrecision());
+    m_share_commission_ctrl->SetMinSize(wxSize(110, -1));
+    commission_sizer->Add(m_share_commission_ctrl, g_flagsH);
+    mmToolTip(m_share_commission_ctrl, _t("Enter any commission paid"));
+
+    m_deductible_comm_split = new wxBitmapButton(stock_details_panel, mmID_COMM_SPLIT, mmBitmapBundle(png::NEW_TRX, mmBitmapButtonSize));
+    commission_sizer->Add(m_deductible_comm_split, g_flagsH);
+    mmToolTip(m_deductible_comm_split, _t("Use Deductible Comm. split Categories"));
 
     m_share_commission_ctrl->Connect(ID_STOCKTRANS_SHARE_COMMISSION, wxEVT_COMMAND_TEXT_UPDATED
         , wxCommandEventHandler(ShareTransactionDialog::CalculateAmount), nullptr, this);
 
-    //Share Lot
-    wxStaticText* lot_text = new wxStaticText(stock_details_panel, wxID_STATIC, _("Share Lot"));
-    itemFlexGridSizer6->Add(lot_text, g_flagsH);
-    lot_text->SetFont(this->GetFont().Bold());
-
-    m_share_lot_ctrl = new wxTextCtrl(stock_details_panel, ID_STOCKTRANS_SHARE_LOT
-        , "", wxDefaultPosition, wxSize(150, -1), 0);
-    itemFlexGridSizer6->Add(m_share_lot_ctrl, g_flagsH);
-    mmToolTip(m_share_lot_ctrl, _("Enter the LOT that this parcel os shares belong to"));
-
     //Notes
-    itemFlexGridSizer6->Add(new wxStaticText(stock_details_panel, wxID_STATIC, _("Notes")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText(stock_details_panel, wxID_STATIC, _t("Notes")), g_flagsH);
 
     //Attachments
     m_attachments_btn = new wxBitmapButton(stock_details_panel, wxID_FILE, mmBitmapBundle(png::CLIP, mmBitmapButtonSize));
-    mmToolTip(m_attachments_btn, _("Manage stock attachments"));
+    mmToolTip(m_attachments_btn, _t("Manage stock attachments"));
     //TODO m_attachments not used here
     m_attachments_btn->Hide();
 
     web_button = new wxBitmapButton(stock_details_panel, wxID_INDEX, mmBitmapBundle(png::WEB, mmBitmapButtonSize));
-    mmToolTip(web_button, _("Display the web page for the specified Stock symbol"));
+    mmToolTip(web_button, _t("Display the web page for the specified Stock symbol"));
 
     wxBoxSizer* icon_sizer = new wxBoxSizer(wxHORIZONTAL);
     icon_sizer->Add(m_attachments_btn, g_flagsH);
@@ -282,29 +320,28 @@
     m_notes_ctrl = new wxTextCtrl(this, wxID_STATIC, "", wxDefaultPosition, wxSize(200, 162), wxTE_MULTILINE);
     details_frame_sizer->Add(m_notes_ctrl, g_flagsExpand);
     details_frame_sizer->AddSpacer(1);
-    mmToolTip(m_notes_ctrl, _("Enter notes associated with this investment"));
+    mmToolTip(m_notes_ctrl, _t("Enter notes associated with this investment"));
 
     /********************************************************************
     Transaction Panel
     *********************************************************************/
-    wxString trans_frame_heading = _("Add Transaction Details");
-    if (m_checking_entry) {
-        trans_frame_heading = _("Edit Transaction Details");
-    }
 
-    wxStaticBox* transaction_frame = new wxStaticBox(this, wxID_ANY, trans_frame_heading);
+    wxStaticBox* transaction_frame = new wxStaticBox(this, wxID_ANY, m_checking_entry ? _t("Edit Transaction Details") : _t("Add Transaction Details"));
     wxStaticBoxSizer* transaction_frame_sizer = new wxStaticBoxSizer(transaction_frame, wxVERTICAL);
     right_sizer->Add(transaction_frame_sizer, g_flagsV);
 
-    m_transaction_panel = new UserTransactionPanel(this, m_checking_entry, wxID_STATIC);
+    m_transaction_panel = new UserTransactionPanel(this, m_checking_entry, false, wxID_STATIC);
     m_transaction_panel->Bind(wxEVT_CHOICE, &ShareTransactionDialog::CalculateAmount, this, wxID_VIEW_DETAILS);
     transaction_frame_sizer->Add(m_transaction_panel, g_flagsV);
-    if (m_translink_entry && m_checking_entry) {
+    if (m_translink_entry && m_checking_entry)
+    {
         m_transaction_panel->CheckingType(Model_Translink::type_checking(m_checking_entry->TOACCOUNTID));
     }
-    else {
+    else
+    {
         wxString acc_held = Model_Account::get_account_name(m_stock->HELDAT);
-        m_transaction_panel->SetTransactionNumber(acc_held);
+        m_transaction_panel->SetTransactionNumber(m_stock->STOCKNAME + "_" + m_stock->SYMBOL);
+        m_transaction_panel->SetTransactionAccount(acc_held);
     }
 
     /********************************************************************
@@ -318,8 +355,8 @@
     *********************************************************************/
     wxPanel* button_panel = new wxPanel(this, wxID_STATIC);
     wxBoxSizer* button_panel_sizer = new wxBoxSizer(wxHORIZONTAL);
-    wxButton* ok_button = new wxButton(button_panel, wxID_OK, _("&OK "));
-    wxButton* close_button = new wxButton(button_panel, wxID_CANCEL, _("&Cancel "));
+    wxButton* ok_button = new wxButton(button_panel, wxID_OK, _t("&OK "));
+    wxButton* close_button = new wxButton(button_panel, wxID_CANCEL, _t("&Cancel "));
 
     main_sizer->Add(button_panel, wxSizerFlags(g_flagsH).Center());
     button_panel->SetSizer(button_panel_sizer);
@@ -330,7 +367,7 @@
 
 void ShareTransactionDialog::OnQuit(wxCloseEvent& WXUNUSED(event))
 {
-    const wxString& RefType = Model_Attachment::REFTYPE_STR_STOCK;
+    const wxString& RefType = Model_Stock::refTypeName;
     if (!this->m_stock)
         mmAttachmentManage::DeleteAllAttachments(RefType, 0);
     EndModal(wxID_CANCEL);
@@ -339,7 +376,7 @@
 
 void ShareTransactionDialog::OnCancel(wxCommandEvent& WXUNUSED(event))
 {
-    const wxString& RefType = Model_Attachment::REFTYPE_STR_STOCK;
+    const wxString& RefType = Model_Stock::refTypeName;
     if (m_stock_id <= 0)
         mmAttachmentManage::DeleteAllAttachments(RefType, 0);
     EndModal(wxID_CANCEL);
@@ -351,7 +388,7 @@
 
     if (!stockSymbol.IsEmpty())
     {
-        const wxString& stockURL = Model_Infotable::instance().GetStringInfo("STOCKURL", mmex::weblink::DefStockUrl);
+        const wxString& stockURL = Model_Infotable::instance().getString("STOCKURL", mmex::weblink::DefStockUrl);
         const wxString& httpString = wxString::Format(stockURL, stockSymbol);
         wxLaunchDefaultBrowser(httpString);
     }
@@ -402,9 +439,9 @@
              Model_Translink::SetStockTranslink(m_stock->STOCKID
                 , checking_id, m_transaction_panel->CheckingType());
         }
-        Model_Shareinfo::ShareEntry(checking_id, num_shares, share_price, commission, m_share_lot_ctrl->GetValue());
+        Model_Shareinfo::ShareEntry(checking_id, num_shares, share_price, commission, m_local_deductible_splits,  m_share_lot_ctrl->GetValue());
 
-        Model_Translink::UpdateStockValue(m_stock);
+        Model_Stock::UpdatePosition(m_stock);
         if (!loyalty_shares)
         {
             Model_StockHistory::instance().addUpdate(m_stock->SYMBOL, m_transaction_panel->TransactionDate(), share_price, Model_StockHistory::MANUAL);
@@ -412,7 +449,7 @@
     }
     else
     {
-        mmErrorDialogs::MessageWarning(this, _("Invalid Transaction"), m_dialog_heading);
+        mmErrorDialogs::MessageWarning(this, _t("Invalid Transaction"), m_dialog_heading);
         return;
     }
 
@@ -444,3 +481,50 @@
         m_transaction_panel->SetTransactionValue(GetAmount(share_num, share_price, share_commission));
     }
 }
+void ShareTransactionDialog::OnDeductibleSplit(wxCommandEvent&)
+{
+    if (m_local_deductible_splits.empty())
+    {
+        double commission = 0;
+        m_share_commission_ctrl->GetDouble(commission);
+
+        Model_Category::Data* category = Model_Category::instance().get(_("Investment"), int64(-1L));
+        if (!category)
+        {
+            category = Model_Category::instance().create();
+            category->CATEGNAME = _("Investment");
+            category->ACTIVE = 1;
+            category->PARENTID = -1;
+
+            Model_Category::instance().save(category);
+        }
+        m_local_deductible_splits.push_back({category->CATEGID, commission, wxArrayInt64(), ""});
+    }
+
+    mmSplitTransactionDialog dlg(this, m_local_deductible_splits, m_stock->HELDAT);
+
+    if (dlg.ShowModal() == wxID_OK)
+    {
+        m_local_deductible_splits = dlg.mmGetResult();
+
+        if (m_local_deductible_splits.size() == 1) 
+        {
+            // TODO other informations
+            m_share_commission_ctrl->SetValue(m_local_deductible_splits[0].SPLITTRANSAMOUNT, Option::instance().getSharePrecision());
+
+            m_local_deductible_splits.clear();
+        }
+
+        if (m_local_deductible_splits.empty()) 
+        {
+            m_share_commission_ctrl->Enable(true);
+            mmToolTip(m_deductible_comm_split, _t("Use Deductible Comm. split Categories"));
+        }
+        else
+        {
+            m_share_commission_ctrl->SetValue(Model_Splittransaction::get_total(m_local_deductible_splits), Option::instance().getSharePrecision());
+            m_share_commission_ctrl->Enable(false);
+            mmToolTip(m_deductible_comm_split, Model_Splittransaction::get_tooltip(m_local_deductible_splits, nullptr /* currency */));
+        }
+    }
+}
diff -Naur a/src/sharetransactiondialog.h b/src/sharetransactiondialog.h
--- a/src/sharetransactiondialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/sharetransactiondialog.h	2025-07-09 01:46:59.676940673 +0200
@@ -40,7 +40,7 @@
 
 private:
     bool Create(wxWindow* parent, wxWindowID id = wxID_ANY
-        , const wxString& caption = _("Edit Share Transaction")
+        , const wxString& caption = _t("Edit Share Transaction")
         , const wxPoint& pos = wxDefaultPosition
         , const wxSize& size = wxDefaultSize
         , long style = wxCAPTION | wxSYSTEM_MENU | wxCLOSE_BOX);
@@ -48,12 +48,13 @@
     void CreateControls();
     void DataToControls();
 
-    double GetAmount(double shares, double price, double commision);
+    double GetAmount(double shares, double price, double commission);
     void OnQuit(wxCloseEvent& WXUNUSED(event));
     void OnOk(wxCommandEvent& WXUNUSED(event));
     void OnCancel(wxCommandEvent& WXUNUSED(event));
     void OnStockPriceButton(wxCommandEvent& event);
     void CalculateAmount(wxCommandEvent& event);
+    void OnDeductibleSplit(wxCommandEvent& event);
 
 private:
     Model_Stock::Data* m_stock = nullptr;
@@ -63,6 +64,7 @@
     mmTextCtrl* m_share_price_ctrl = nullptr;
     wxTextCtrl* m_share_lot_ctrl = nullptr;
     mmTextCtrl* m_share_commission_ctrl = nullptr;
+    wxBitmapButton* m_deductible_comm_split = nullptr;
     wxTextCtrl* m_notes_ctrl = nullptr;
     wxBitmapButton* m_attachments_btn = nullptr;
     wxBitmapButton* web_button = nullptr;
@@ -73,6 +75,9 @@
     Model_Checking::Data* m_checking_entry = nullptr;
     Model_Translink::Data* m_translink_entry = nullptr;
     Model_Shareinfo::Data* m_share_entry = nullptr;
+
+    std::vector<Split> m_local_deductible_splits, m_local_non_deductible_splits;
+
     enum
     {
         ID_STOCKTRANS_DATEPICKER_CHANGE = wxID_HIGHEST + 820,
@@ -82,5 +87,6 @@
         ID_STOCKTRANS_SHARE_PRICE,
         ID_STOCKTRANS_SHARE_LOT,
         ID_STOCKTRANS_SHARE_COMMISSION,
+        mmID_COMM_SPLIT,
     };
 };
diff -Naur a/src/splittransactionsdialog.cpp b/src/splittransactionsdialog.cpp
--- a/src/splittransactionsdialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/splittransactionsdialog.cpp	2025-07-09 01:46:59.680940697 +0200
@@ -50,7 +50,7 @@
 , m_currency(currency)
 {
     long style = wxCAPTION | wxCLOSE_BOX | wxRESIZE_BORDER;
-    if (!wxDialog::Create(parent, wxID_ANY, _("Edit Split Detail")
+    if (!wxDialog::Create(parent, wxID_ANY, _t("Edit Split Detail")
         , wxDefaultPosition, wxDefaultSize, style, name))
         return;
 
@@ -64,7 +64,7 @@
 
 mmEditSplitOther::~mmEditSplitOther()
 {
-    Model_Infotable::instance().Set("EDITSPLITOTHER_DIALOG_SIZE", GetSize());
+    Model_Infotable::instance().setSize("EDITSPLITOTHER_DIALOG_SIZE", GetSize());
 }
 
 void mmEditSplitOther::CreateControls()
@@ -78,30 +78,30 @@
     bSizer1->Add(fgSizer1, g_flagsExpand);
 
     // Split Category
-    fgSizer1->Add(new wxStaticText(this, wxID_STATIC, _("Category")), g_flagsH);
+    fgSizer1->Add(new wxStaticText(this, wxID_STATIC, _t("Category")), g_flagsH);
     wxString catName = Model_Category::full_name(m_split->CATEGID);
     wxTextCtrl* category = new wxTextCtrl(this, wxID_ANY, catName);
     category->Disable();
     fgSizer1->Add(category, g_flagsExpand);
 
     // Split Amount
-    fgSizer1->Add(new wxStaticText(this, wxID_STATIC, _("Amount")), g_flagsH);
+    fgSizer1->Add(new wxStaticText(this, wxID_STATIC, _t("Amount")), g_flagsH);
     wxString amountStr = Model_Currency::toCurrency(m_split->SPLITTRANSAMOUNT, m_currency);
     wxTextCtrl* amount = new wxTextCtrl(this, wxID_ANY, amountStr);
     amount->Disable();
     fgSizer1->Add(amount, g_flagsExpand);
 
     // Notes
-    fgSizer1->Add(new wxStaticText(this, wxID_STATIC, _("Notes")), g_flagsV);
+    fgSizer1->Add(new wxStaticText(this, wxID_STATIC, _t("Notes")), g_flagsV);
     m_Notes = new wxTextCtrl(this, wxID_ANY, ""
         , wxDefaultPosition, wxSize(-1, -1), wxTE_MULTILINE);
     fgSizer1->Add(m_Notes, g_flagsExpand);
-    mmToolTip(m_Notes, _("Enter notes to describe this split transaction"));
+    mmToolTip(m_Notes, _t("Enter notes to describe this split transaction"));
 
-    //Buttons
+    // Buttons
     wxBoxSizer* bSizer3 = new wxBoxSizer(wxHORIZONTAL);
     bSizer1->Add(bSizer3, wxSizerFlags(g_flagsV).Center());
-    wxButton* itemButtonOK = new wxButton(this, wxID_OK, _("&OK "));
+    wxButton* itemButtonOK = new wxButton(this, wxID_OK, _t("&OK "));
     wxButton* itemButtonCancel = new wxButton(this, wxID_CANCEL, wxGetTranslation(g_CancelLabel));
     bSizer3->Add(itemButtonOK, g_flagsH);
     bSizer3->Add(itemButtonCancel, g_flagsH);
@@ -137,6 +137,7 @@
 EVT_BUTTON(wxID_OK, mmSplitTransactionDialog::OnOk)
 EVT_BUTTON(mmID_SPLIT, mmSplitTransactionDialog::OnAddRow)
 EVT_BUTTON(mmID_REMOVE, mmSplitTransactionDialog::OnRemoveRow)
+EVT_LIST_INSERT_ITEM(wxID_ANY, mmSplitTransactionDialog::OnNewTagCreated)
 wxEND_EVENT_TABLE()
 
 // Used to determine if we need to refresh the tag text ctrl after
@@ -149,19 +150,15 @@
 
 mmSplitTransactionDialog::~mmSplitTransactionDialog()
 {
-    Model_Infotable::instance().Set("SPLITTRANSACTION_DIALOG_SIZE", GetSize());
+    Model_Infotable::instance().setSize("SPLITTRANSACTION_DIALOG_SIZE", GetSize());
 }
 
 mmSplitTransactionDialog::mmSplitTransactionDialog(wxWindow* parent
     , std::vector<Split>& split
     , int64 accountID
-    , int transType
-    , double totalAmount
     , bool is_view_only
 )
     : m_orig_splits(split)
-    , totalAmount_(totalAmount)
-    , transType_(transType)
     , row_num_(static_cast<int>(split.size()))
     , is_view_only_(is_view_only)
 {
@@ -217,11 +214,11 @@
     flexGridSizer_->AddGrowableCol(3, 0);
     dialogMainSizerV->Add(flexGridSizer_, g_flagsExpand);
 
-    wxStaticText* categoryText = new wxStaticText(slider_, wxID_STATIC, _("Category"));
+    wxStaticText* categoryText = new wxStaticText(slider_, wxID_STATIC, _t("Category"));
     categoryText->SetFont(this->GetFont().Bold());
-    wxStaticText* amountText = new wxStaticText(slider_, wxID_STATIC, _("Amount"));
+    wxStaticText* amountText = new wxStaticText(slider_, wxID_STATIC, _t("Amount"));
     amountText->SetFont(this->GetFont().Bold());
-    wxStaticText* tagText = new wxStaticText(slider_, wxID_STATIC, _("Tags"));
+    wxStaticText* tagText = new wxStaticText(slider_, wxID_STATIC, _t("Tags"));
     flexGridSizer_->Add(categoryText, g_flagsExpand);
     flexGridSizer_->Add(amountText, g_flagsH);
     flexGridSizer_->Add(tagText, g_flagsH);
@@ -248,19 +245,19 @@
     wxBoxSizer* plusAmountSizer = new wxBoxSizer(wxHORIZONTAL);
     bottomSizer->Add(plusAmountSizer, wxSizerFlags().Align(wxALIGN_LEFT).Border(wxALL, 5));
 
-    wxButton* bAdd = new wxButton(this, mmID_SPLIT, _("&Add Split"));
+    wxButton* bAdd = new wxButton(this, mmID_SPLIT, _t("&Add Split"));
     bAdd->Enable(!is_view_only_);
     plusAmountSizer->AddSpacer(mmBitmapButtonSize + 10);
     plusAmountSizer->Add(bAdd);
 
-    wxButton* bRemove = new wxButton(this, mmID_REMOVE, _("&Remove Split"));
+    wxButton* bRemove = new wxButton(this, mmID_REMOVE, _t("&Remove Split"));
     bRemove->Enable(!is_view_only_);
     plusAmountSizer->AddSpacer(5);
     plusAmountSizer->Add(bRemove);
 
     wxBoxSizer* totalAmountSizer = new wxBoxSizer(wxHORIZONTAL);
 
-    wxStaticText* transAmountText = new wxStaticText(this, wxID_STATIC, _("Total:"));
+    wxStaticText* transAmountText = new wxStaticText(this, wxID_STATIC, _t("Total:"));
     transAmount_ = new wxStaticText(this, wxID_STATIC, wxEmptyString);
     totalAmountSizer->Add(transAmountText, wxSizerFlags());
     totalAmountSizer->Add(transAmount_, wxSizerFlags().Border(wxLEFT, 5));
@@ -282,7 +279,7 @@
     mainButtonSizer->Add(bottomRowButtonSizer, flagsV);
     buttons_sizer->Add(mainButtonSizer);
 
-    itemButtonOK_ = new wxButton(buttons_panel, wxID_OK, _("&OK "));
+    itemButtonOK_ = new wxButton(buttons_panel, wxID_OK, _t("&OK "));
     wxButton* itemButtonCancel = new wxButton(buttons_panel, wxID_CANCEL, wxGetTranslation(g_CancelLabel));
 
     bottomRowButtonSizer->Add(itemButtonOK_, g_flagsH);
@@ -299,7 +296,7 @@
 void mmSplitTransactionDialog::FillControls(const int focusRow)
 {
     DoWindowsFreezeThaw(this);
-    for (int row = (focusRow == -1 ? 0 : focusRow); row < m_splits_widgets.size(); row++)
+    for (int row = (focusRow == -1 ? 0 : focusRow); row < static_cast<int>(m_splits_widgets.size()); row++)
     {
         if (row < static_cast<int>(m_splits.size()))
         {
@@ -352,7 +349,7 @@
     mmTagTextCtrl* ntag = new mmTagTextCtrl(slider_, mmID_MAX + row);
     ntag->Enable(enabled);
 
-    wxButton* nother = new wxButton(slider_, mmID_MAX + row, _("Notes"));
+    wxButton* nother = new wxButton(slider_, mmID_MAX + row, _t("Notes"));
     nother->SetBitmap(mmBitmapBundle(png::UNRECONCILED,mmBitmapButtonSize));
     nother->Connect(mmID_MAX + row, wxEVT_BUTTON
             , wxCommandEventHandler(mmSplitTransactionDialog::OnOtherButton), nullptr, this);
@@ -380,7 +377,7 @@
     if (row_num_ < (static_cast<int>(m_splits_widgets.size()) - 1)) 
     {
         int row = row_num_ + 1;
-        if (row >= m_splits.size())
+        if (row >= static_cast<int>(m_splits.size()))
         {
             Split s = { -1, 0, {}, "" };
             m_splits.push_back(s);
@@ -400,17 +397,17 @@
 
 void mmSplitTransactionDialog::OnOk( wxCommandEvent& /*event*/ )
 {
-    for (int id=0; id<m_splits.size(); id++)
+    for (int id=0; id<static_cast<int>(m_splits.size()); id++)
         if (!mmDoCheckRow(id))
             return;
 
     //Check total amount - should be positive
-    totalAmount_ = 0;
+    double totalAmount = 0;
     for (const auto& entry : m_splits)
-        totalAmount_ += entry.SPLITTRANSAMOUNT;
-    totalAmount_ = std::round(totalAmount_ * m_currency->SCALE.GetValue()) / m_currency->SCALE.GetValue();
-    if (totalAmount_ < 0) {
-        return mmErrorDialogs::MessageError(this, _("Invalid Total Amount"), _("Error"));
+        totalAmount += entry.SPLITTRANSAMOUNT;
+    totalAmount = std::round(totalAmount * m_currency->SCALE.GetValue()) / m_currency->SCALE.GetValue();
+    if (totalAmount < 0) {
+        return mmErrorDialogs::MessageError(this, _t("Invalid Total Amount"), _t("Error"));
     }
 
     m_splits.erase(
@@ -427,7 +424,7 @@
 
 void mmSplitTransactionDialog::OnAddRow(wxCommandEvent& event)
 {
-    for (int id = 0; id < m_splits.size(); id++) {
+    for (int id = 0; id < static_cast<int>(m_splits.size()); id++) {
         if (!mmDoCheckRow(id))
             return;
     }
@@ -478,6 +475,19 @@
     event.Skip();
 }
 
+void mmSplitTransactionDialog::OnNewTagCreated(wxListEvent& event)
+{
+    // Get the ID of the tag control that had a new tag added
+    int id = event.GetId();
+
+    // Loop through all split rows and reinitialize all other tag controls to pick up the new tag
+    for (auto row : m_splits_widgets)
+    {
+        if (row.tags->GetId() != id)
+            row.tags->Reinitialize();
+    }
+}
+
 void mmSplitTransactionDialog::OnOtherButton(wxCommandEvent& event)
 {
     int row = event.GetId() - mmID_MAX;
@@ -539,7 +549,7 @@
 void mmSplitTransactionDialog::UpdateSplitTotal()
 {
     double total = 0;
-    for (int i=0; i<m_splits.size(); i++)
+    for (int i=0; i<static_cast<int>(m_splits.size()); i++)
     {
         double amount = 0.0;
         if (m_splits_widgets.at(i).amount->GetDouble(amount))
@@ -564,7 +574,7 @@
 bool mmSplitTransactionDialog::mmDoCheckRow(int row)
 {
     if (!m_splits_widgets.at(row).tags->IsValid()) {
-        mmErrorDialogs::ToolTip4Object(m_splits_widgets.at(row).tags, _("Invalid value"), _("Tags"), wxICON_ERROR);
+        mmErrorDialogs::ToolTip4Object(m_splits_widgets.at(row).tags, _t("Invalid value"), _t("Tags"), wxICON_ERROR);
         return false;
     }
 
@@ -584,7 +594,7 @@
 
     if (!m_splits_widgets.at(row).amount->Calculate()) {
             mmErrorDialogs::ToolTip4Object(m_splits_widgets.at(row).amount, 
-                                _("Please enter a valid monetary amount"), _("Invalid Value"));
+                                _t("Please enter a valid monetary amount"), _t("Invalid Value"));
             return false;
     }
 
diff -Naur a/src/splittransactionsdialog.h b/src/splittransactionsdialog.h
--- a/src/splittransactionsdialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/splittransactionsdialog.h	2025-07-09 01:46:59.680940697 +0200
@@ -69,8 +69,6 @@
     mmSplitTransactionDialog(wxWindow* parent
         , std::vector<Split>& split
         , int64 accountID
-        , int transType
-        , double totalAmount = 0.0
         , bool is_view_only = false
         );
     std::vector<Split> mmGetResult() const;
@@ -79,7 +77,7 @@
     bool Create(
         wxWindow* parent
         , wxWindowID id = wxID_ANY
-        , const wxString& caption = _("Split Transaction")
+        , const wxString& caption = _t("Split Transaction")
         , const wxPoint& pos = wxDefaultPosition
         , const wxSize& size = wxDefaultSize
         , long style = wxCAPTION | wxRESIZE_BORDER | wxSYSTEM_MENU | wxCLOSE_BOX
@@ -95,6 +93,7 @@
 
     void OnOk(wxCommandEvent& event);
     void OnAddRow(wxCommandEvent& event);
+    void OnNewTagCreated(wxListEvent& event);
     void OnRemoveRow(wxCommandEvent&);
     void OnOtherButton(wxCommandEvent& event);
     void OnTextEntered(wxCommandEvent& event);
@@ -112,8 +111,6 @@
 
     std::vector<SplitWidget> m_splits_widgets;
     std::vector<Split> m_orig_splits, m_splits;
-    double totalAmount_ =0.0;
-    int transType_ = 0;
     int row_num_ = 0;
     Model_Currency::Data* m_currency = nullptr;
     bool is_view_only_;
diff -Naur a/src/stockdialog.cpp b/src/stockdialog.cpp
--- a/src/stockdialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/stockdialog.cpp	2025-07-09 01:46:59.680940697 +0200
@@ -60,7 +60,6 @@
 }
 
 mmStockDialog::mmStockDialog(wxWindow* parent
-    , mmGUIFrame* gui_frame
     , Model_Stock::Data* stock
     , int64 accountID
     , const wxString& name
@@ -68,7 +67,6 @@
     : m_stock(stock)
     , m_edit(stock ? true: false)
     , m_account_id(accountID)
-    , m_gui_frame(gui_frame)
 {
     long style = wxCAPTION | wxRESIZE_BORDER | wxSYSTEM_MENU | wxCLOSE_BOX;
     Create(parent, wxID_ANY, "", wxDefaultPosition, wxSize(400, 300), style, name);
@@ -104,14 +102,14 @@
     m_notes_ctrl->SetValue(m_stock->NOTES);
     m_purchase_date_ctrl->SetValue(Model_Stock::PURCHASEDATE(m_stock));
 
-    int precision = m_stock->NUMSHARES == floor(m_stock->NUMSHARES) ? 0 : Option::instance().SharePrecision();
+    int precision = m_stock->NUMSHARES == floor(m_stock->NUMSHARES) ? 0 : Option::instance().getSharePrecision();
     m_num_shares_ctrl->SetValue(m_stock->NUMSHARES, precision);
     Model_Account::Data* account = Model_Account::instance().get(m_stock->HELDAT);
     Model_Currency::Data *currency = Model_Currency::GetBaseCurrency();
     if (account) currency = Model_Account::currency(account);
     int currency_precision = Model_Currency::precision(currency);
-    if (currency_precision < Option::instance().SharePrecision())
-        currency_precision = Option::instance().SharePrecision();
+    if (currency_precision < Option::instance().getSharePrecision())
+        currency_precision = Option::instance().getSharePrecision();
     m_purchase_price_ctrl->SetValue(m_stock->PURCHASEPRICE, account, currency_precision);
     m_history_price_ctrl->SetValue(m_stock->CURRENTPRICE, account, currency_precision);
     m_commission_ctrl->SetValue(m_stock->COMMISSION, account, currency_precision);
@@ -122,7 +120,7 @@
 
 void mmStockDialog::UpdateControls()
 {
-    this->SetTitle(m_edit ? _("Edit Stock Investment") : _("New Stock Investment"));
+    this->SetTitle(m_edit ? _t("Edit Stock Investment") : _t("New Stock Investment"));
     Model_Account::Data* account = Model_Account::instance().get(m_account_id);
 
     if (m_stock) {
@@ -154,7 +152,7 @@
     bool initial_stock_transaction = true;
     if (m_stock)
     {
-        if (!Model_Translink::TranslinkList(Model_Attachment::REFTYPE_ID_STOCK, m_stock->STOCKID).empty())
+        if (!Model_Translink::TranslinkList<Model_Stock>(m_stock->STOCKID).empty())
         {
             initial_stock_transaction = false;
         }
@@ -166,7 +164,7 @@
     wxBoxSizer* leftBoxSizer = new wxBoxSizer(wxVERTICAL);
     mainBoxSizer->Add(leftBoxSizer, g_flagsH);
 
-    wxStaticBox* itemStaticBoxSizer4Static = new wxStaticBox(this, wxID_ANY, _("Stock Investment Details"));
+    wxStaticBox* itemStaticBoxSizer4Static = new wxStaticBox(this, wxID_ANY, _t("Stock Investment Details"));
     wxStaticBoxSizer* itemStaticBoxSizer4 = new wxStaticBoxSizer(itemStaticBoxSizer4Static, wxVERTICAL);
     leftBoxSizer->Add(itemStaticBoxSizer4, g_flagsExpand);
 
@@ -177,87 +175,87 @@
     itemPanel5->SetSizer(itemFlexGridSizer6);
 
     // Name
-    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _("Company Name")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _t("Company Name")), g_flagsH);
     m_stock_name_ctrl = new wxTextCtrl(itemPanel5, ID_TEXTCTRL_STOCKNAME, "");
     itemFlexGridSizer6->Add(m_stock_name_ctrl, g_flagsExpand);
-    mmToolTip(m_stock_name_ctrl, _("Enter the stock company name"));
+    mmToolTip(m_stock_name_ctrl, _t("Enter the stock company name"));
 
     //Symbol
-    wxStaticText* symbol = new wxStaticText(itemPanel5, wxID_STATIC, _("Stock Symbol"));
+    wxStaticText* symbol = new wxStaticText(itemPanel5, wxID_STATIC, _t("Stock Symbol"));
     itemFlexGridSizer6->Add(symbol, g_flagsH);
     symbol->SetFont(this->GetFont().Bold());
 
     m_stock_symbol_ctrl = new wxTextCtrl(itemPanel5, ID_TEXTCTRL_STOCK_SYMBOL
         , "", wxDefaultPosition, wxSize(150, -1), 0);
     itemFlexGridSizer6->Add(m_stock_symbol_ctrl, g_flagsExpand);
-    mmToolTip(m_stock_symbol_ctrl, _("Enter the stock symbol. (Optional) Include exchange. eg: IBM.BE"));
+    mmToolTip(m_stock_symbol_ctrl, _t("Enter the stock symbol. (Optional) Include exchange. eg: IBM.BE"));
 
     //Date
-    wxStaticText* date_label = new wxStaticText(itemPanel5, wxID_STATIC, _("*Date"));
+    wxStaticText* date_label = new wxStaticText(itemPanel5, wxID_STATIC, _t("*Date"));
     itemFlexGridSizer6->Add(date_label, g_flagsH);
     date_label->SetFont(this->GetFont().Bold());
     m_purchase_date_ctrl = new mmDatePickerCtrl(itemPanel5, ID_DPC_STOCK_PDATE);
     itemFlexGridSizer6->Add(m_purchase_date_ctrl->mmGetLayout(false));
-    mmToolTip(m_purchase_date_ctrl, _("Specify the initial date of the stock investment\nUsed when creating the initial Share transaction."));
+    mmToolTip(m_purchase_date_ctrl, _t("Specify the initial date of the stock investment\nUsed when creating the initial Share transaction."));
     m_purchase_date_ctrl->Enable(initial_stock_transaction);
 
     //Number of Shares
-    wxStaticText* number = new wxStaticText(itemPanel5, wxID_STATIC, _("*Share Number"));
+    wxStaticText* number = new wxStaticText(itemPanel5, wxID_STATIC, _t("*Share Number"));
     itemFlexGridSizer6->Add(number, g_flagsH);
     number->SetFont(this->GetFont().Bold());
     m_num_shares_ctrl = new mmTextCtrl(itemPanel5, ID_TEXTCTRL_NUMBER_SHARES, ""
         , wxDefaultPosition, wxSize(150, -1), wxALIGN_RIGHT | wxTE_PROCESS_ENTER, mmCalcValidator());
     itemFlexGridSizer6->Add(m_num_shares_ctrl, g_flagsExpand);
-    m_num_shares_ctrl->SetAltPrecision(Option::instance().SharePrecision());
-    mmToolTip(m_num_shares_ctrl, _("Enter number of shares.\nUsed when creating the initial Share transaction."));
+    m_num_shares_ctrl->SetAltPrecision(Option::instance().getSharePrecision());
+    mmToolTip(m_num_shares_ctrl, _t("Enter number of shares.\nUsed when creating the initial Share transaction."));
     m_num_shares_ctrl->Enable(initial_stock_transaction);
 
     //Purchase Price
-    wxStaticText* pprice = new wxStaticText(itemPanel5, wxID_STATIC, _("*Share Price"));
+    wxStaticText* pprice = new wxStaticText(itemPanel5, wxID_STATIC, _t("*Share Price"));
     itemFlexGridSizer6->Add(pprice, g_flagsH);
     pprice->SetFont(this->GetFont().Bold());
     m_purchase_price_ctrl = new mmTextCtrl(itemPanel5, ID_TEXTCTRL_STOCK_PP, ""
         , wxDefaultPosition, wxSize(150, -1), wxALIGN_RIGHT | wxTE_PROCESS_ENTER, mmCalcValidator());
     itemFlexGridSizer6->Add(m_purchase_price_ctrl, g_flagsExpand);
-    m_purchase_price_ctrl->SetAltPrecision(Option::instance().SharePrecision());
-    mmToolTip(m_purchase_price_ctrl, _("Enter the initial price per share.\nUsed when creating the initial Share transaction."));
+    m_purchase_price_ctrl->SetAltPrecision(Option::instance().getSharePrecision());
+    mmToolTip(m_purchase_price_ctrl, _t("Enter the initial price per share.\nUsed when creating the initial Share transaction."));
     m_purchase_price_ctrl->Enable(initial_stock_transaction);
 
-    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _("*Commission")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _t("Deductible Comm.")), g_flagsH);
     m_commission_ctrl = new mmTextCtrl(itemPanel5, ID_TEXTCTRL_STOCK_COMMISSION, "0"
         , wxDefaultPosition, wxSize(150, -1), wxALIGN_RIGHT | wxTE_PROCESS_ENTER, mmCalcValidator());
     itemFlexGridSizer6->Add(m_commission_ctrl, g_flagsExpand);
-    m_commission_ctrl->SetAltPrecision(Option::instance().SharePrecision());
-    mmToolTip(m_commission_ctrl, _("Enter any commission paid.\nUsed when creating the initial Share transaction."));
+    m_commission_ctrl->SetAltPrecision(Option::instance().getSharePrecision());
+    mmToolTip(m_commission_ctrl, _t("Enter any commission paid.\nUsed when creating the initial Share transaction."));
     m_commission_ctrl->Enable(initial_stock_transaction);
 
-    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _("Curr. Share Price")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _t("Curr. Share Price")), g_flagsH);
     m_current_price_ctrl = new mmTextCtrl(itemPanel5, ID_TEXTCTRL_STOCK_CURR_PRICE, ""
         , wxDefaultPosition, wxSize(150, -1), wxALIGN_RIGHT | wxTE_PROCESS_ENTER, mmCalcValidator());
-    m_current_price_ctrl->SetAltPrecision(Option::instance().SharePrecision());
-    mmToolTip(m_current_price_ctrl, _("Enter current stock/share price."));
+    m_current_price_ctrl->SetAltPrecision(Option::instance().getSharePrecision());
+    mmToolTip(m_current_price_ctrl, _t("Enter current stock/share price."));
     itemFlexGridSizer6->Add(m_current_price_ctrl, g_flagsExpand);
 
     //
-    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _("Current Value")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _t("Current Value")), g_flagsH);
     m_value_investment = new wxStaticText(itemPanel5, ID_STATIC_STOCK_VALUE, "--");
     itemFlexGridSizer6->Add(m_value_investment, g_flagsH);
 
     //
-    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _("Notes")), g_flagsH);
+    itemFlexGridSizer6->Add(new wxStaticText(itemPanel5, wxID_STATIC, _t("Notes")), g_flagsH);
     wxBoxSizer* iconsSizer = new wxBoxSizer(wxHORIZONTAL);
     itemFlexGridSizer6->Add(iconsSizer, wxSizerFlags(g_flagsH).Align(wxALIGN_RIGHT));
     m_bAttachments = new wxBitmapButton(itemPanel5, wxID_FILE, mmBitmapBundle(png::CLIP, mmBitmapButtonSize));
-    mmToolTip(m_bAttachments, _("Manage stock attachments"));
+    mmToolTip(m_bAttachments, _t("Manage stock attachments"));
     wxBitmapButton* itemButton31 = new wxBitmapButton(itemPanel5, wxID_INDEX, mmBitmapBundle(png::WEB, mmBitmapButtonSize));
-    mmToolTip(itemButton31, _("Display the web page for the specified Stock symbol"));
+    mmToolTip(itemButton31, _t("Display the web page for the specified Stock symbol"));
     iconsSizer->Add(m_bAttachments, g_flagsH);
     iconsSizer->Add(itemButton31, g_flagsH);
 
     m_notes_ctrl = new wxTextCtrl(this, wxID_STATIC, "", wxDefaultPosition, wxSize(200, 90), wxTE_MULTILINE);
     itemStaticBoxSizer4->Add(m_notes_ctrl, g_flagsExpand);
     itemStaticBoxSizer4->AddSpacer(1);
-    mmToolTip(m_notes_ctrl, _("Enter notes associated with this investment"));
+    mmToolTip(m_notes_ctrl, _t("Enter notes associated with this investment"));
 
     leftBoxSizer->AddSpacer(20);
 
@@ -265,26 +263,26 @@
     wxBoxSizer* rightBoxSizer = new wxBoxSizer(wxVERTICAL);
     mainBoxSizer->Add(rightBoxSizer, g_flagsExpand);
 
-    wxStaticBox* historyStaticBox = new wxStaticBox(this, wxID_ANY, _("Stock History Options"));
+    wxStaticBox* historyStaticBox = new wxStaticBox(this, wxID_ANY, _t("Stock History Options"));
     wxStaticBoxSizer* historyStaticBoxSizer = new wxStaticBoxSizer(historyStaticBox, wxVERTICAL);
     rightBoxSizer->Add(historyStaticBoxSizer, g_flagsExpand);
 
     m_price_listbox = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxSize(250, 150)
         , wxLC_REPORT);
     historyStaticBoxSizer->Add(m_price_listbox, g_flagsExpand);
-    mmToolTip(m_price_listbox, _("Stock Price History"));
+    mmToolTip(m_price_listbox, _t("Stock Price History"));
 
     // Add first column
     wxListItem col0;
     col0.SetId(0);
-    col0.SetText( _("Date") );
+    col0.SetText( _t("Date") );
     col0.SetWidth(90);
     m_price_listbox->InsertColumn(0, col0);
 
     // Add second column
     wxListItem col1;
     col1.SetId(1);
-    col1.SetText( _("Price") );
+    col1.SetText( _t("Price") );
     col1.SetWidth(80);
     m_price_listbox->InsertColumn(1, col1);
 
@@ -296,17 +294,17 @@
 
     //
     wxFlexGridSizer* date_price = new wxFlexGridSizer(0, 2, 0, 0);
-    date_price->Add(new wxStaticText(buttons_panel, wxID_STATIC, _("Price Date")), g_flagsH);
+    date_price->Add(new wxStaticText(buttons_panel, wxID_STATIC, _t("Price Date")), g_flagsH);
     m_history_date_ctrl = new mmDatePickerCtrl(buttons_panel, ID_DPC_CP_PDATE
         , wxDefaultDateTime, wxDefaultPosition, wxSize(150, -1), wxDP_DROPDOWN | wxDP_SHOWCENTURY);
     date_price->Add(m_history_date_ctrl, g_flagsH);
-    mmToolTip(m_history_date_ctrl, _("Specify the stock/share price date."));
+    mmToolTip(m_history_date_ctrl, _t("Specify the stock/share price date."));
 
     //
-    date_price->Add(new wxStaticText(buttons_panel, wxID_STATIC, _("Price")), g_flagsH);
+    date_price->Add(new wxStaticText(buttons_panel, wxID_STATIC, _t("Price")), g_flagsH);
     m_history_price_ctrl = new mmTextCtrl(buttons_panel, ID_TEXTCTRL_STOCK_CP, ""
         , wxDefaultPosition, wxSize(150, -1), wxALIGN_RIGHT | wxTE_PROCESS_ENTER, mmCalcValidator());
-    m_history_price_ctrl->SetAltPrecision(Option::instance().SharePrecision());
+    m_history_price_ctrl->SetAltPrecision(Option::instance().getSharePrecision());
     date_price->Add(m_history_price_ctrl, g_flagsH);
     buttons_sizer->Add(date_price);
 
@@ -315,13 +313,13 @@
 
     wxStdDialogButtonSizer*  std_buttons_sizer = new wxStdDialogButtonSizer;
     wxBitmapButton* buttonDownload = new wxBitmapButton(buttons_panel, ID_BUTTON_DOWNLOAD, mmBitmapBundle(png::UPDATE, mmBitmapButtonSize));
-    mmToolTip(buttonDownload, _("Download Stock Price history"));
+    mmToolTip(buttonDownload, _t("Download Stock Price history"));
     wxBitmapButton* buttonImport = new wxBitmapButton(buttons_panel, ID_BUTTON_IMPORT, mmBitmapBundle(png::IMPORT, mmBitmapButtonSize));
-    mmToolTip(buttonImport, _("Import Stock Price history (CSV Format)"));
-    wxButton* buttonDel = new wxButton(buttons_panel, wxID_DELETE, _("&Delete "));
-    mmToolTip(buttonDel, _("Delete selected Stock Price"));
-    wxButton* buttonAdd = new wxButton(buttons_panel, wxID_ADD, _("&Add "));
-    mmToolTip(buttonAdd, _("Add Stock Price to history"));
+    mmToolTip(buttonImport, _t("Import Stock Price history (CSV Format)"));
+    wxButton* buttonDel = new wxButton(buttons_panel, wxID_DELETE, _t("&Delete "));
+    mmToolTip(buttonDel, _t("Delete selected Stock Price"));
+    wxButton* buttonAdd = new wxButton(buttons_panel, wxID_ADD, _t("&Add "));
+    mmToolTip(buttonAdd, _t("Add Stock Price to history"));
 
     std_buttons_sizer->Add(buttonDownload, g_flagsH);
     std_buttons_sizer->Add(buttonImport, g_flagsH);
@@ -333,7 +331,7 @@
     wxStdDialogButtonSizer*  buttonsOK_CANCEL_sizer = new wxStdDialogButtonSizer;
     leftBoxSizer->Add(buttonsOK_CANCEL_sizer, wxSizerFlags(g_flagsV).Centre());
 
-    wxButton* itemButtonOK = new wxButton(this, wxID_SAVE, _("&Save "));
+    wxButton* itemButtonOK = new wxButton(this, wxID_SAVE, _t("&Save "));
     wxButton* itemButton30 = new wxButton(this, wxID_CANCEL, wxGetTranslation(g_CloseLabel));
 
     if (m_edit)
@@ -344,7 +342,7 @@
 
 void mmStockDialog::OnQuit(wxCloseEvent& /*event*/)
 {
-    const wxString& RefType = Model_Attachment::REFTYPE_STR_STOCK;
+    const wxString& RefType = Model_Stock::refTypeName;
     if (!m_edit)
         mmAttachmentManage::DeleteAllAttachments(RefType, 0);
     EndModal(wxID_CANCEL);
@@ -352,7 +350,7 @@
 
 void mmStockDialog::OnCancel(wxCommandEvent& /*event*/)
 {
-    const wxString& RefType = Model_Attachment::REFTYPE_STR_STOCK;
+    const wxString& RefType = Model_Stock::refTypeName;
     if (m_stock_id <= 0)
         mmAttachmentManage::DeleteAllAttachments(RefType, 0);
     EndModal(wxID_CANCEL);
@@ -360,7 +358,7 @@
 
 void mmStockDialog::OnAttachments(wxCommandEvent& /*event*/)
 {
-    const wxString RefType = Model_Attachment::REFTYPE_STR_STOCK;
+    const wxString RefType = Model_Stock::refTypeName;
     int64 RefId = m_stock_id;
 
     if (RefId < 0)
@@ -376,7 +374,7 @@
 
     if (!stockSymbol.IsEmpty())
     {
-        const wxString& stockURL = Model_Infotable::instance().GetStringInfo("STOCKURL", mmex::weblink::DefStockUrl);
+        const wxString& stockURL = Model_Infotable::instance().getString("STOCKURL", mmex::weblink::DefStockUrl);
         const wxString& httpString = wxString::Format(stockURL, stockSymbol);
         wxLaunchDefaultBrowser(httpString);
     }
@@ -398,20 +396,21 @@
     Model_Account::Data* account = Model_Account::instance().get(m_account_id);
     if (!account)
     {
-        mmErrorDialogs::MessageInvalid(this, _("Held At"));
+        mmErrorDialogs::MessageInvalid(this, _t("Held At"));
         return;
     }
     
+    // TODO unique
     const wxString stockSymbol = m_stock_symbol_ctrl->GetValue();
     if (stockSymbol.empty())
     {
-        mmErrorDialogs::MessageInvalid(this, _("Symbol"));
+        mmErrorDialogs::MessageInvalid(this, _t("Symbol"));
         return;
     }
         
     const wxString pdate = m_purchase_date_ctrl->GetValue().FormatISODate();
     if (pdate < account->INITIALDATE)
-        return mmErrorDialogs::ToolTip4Object(m_purchase_date_ctrl, _("The opening date for the account is later than the date of this transaction"), _("Invalid Date"));
+        return mmErrorDialogs::ToolTip4Object(m_purchase_date_ctrl, _t("The opening date for the account is later than the date of this transaction"), _t("Invalid Date"));
   
     const wxString stockName = m_stock_name_ctrl->GetValue();
     const wxString notes = m_notes_ctrl->GetValue();
@@ -462,40 +461,15 @@
 
     if (!m_edit)
     {
-        const wxString RefType = Model_Attachment::REFTYPE_STR_STOCK;
+        const wxString RefType = Model_Stock::refTypeName;
         mmAttachmentManage::RelocateAllAttachments(RefType, 0, RefType, m_stock->STOCKID);
+        ShareTransactionDialog share_dialog(this, m_stock);
+        share_dialog.ShowModal();
     }
 
     Model_StockHistory::instance().addUpdate(m_stock->SYMBOL, wxDate::Today(), m_stock->CURRENTPRICE, Model_StockHistory::MANUAL);
     ShowStockHistory();
-
-    if (!stockName.empty())
-    {
-
-        Model_Account::Data* share_account = Model_Account::instance().get(m_stock_name_ctrl->GetValue());
-        if (!share_account && !m_edit)
-        {
-            if (wxMessageBox(_("Share Account not found.\n\n"
-                "Do you want to create one?")
-                , _("New Stock Investment"), wxOK | wxCANCEL | wxICON_INFORMATION) == wxOK)
-            {
-                CreateShareAccount(account, stockName, m_stock->PURCHASEDATE);
-            }
-        }
-        else if (!share_account)
-        {
-            if (wxMessageBox(_(
-                "The Company name does not have an associated Share Account.\n\n"
-                "You may want to readjust the Company Name to an existing Share Account with the same name. "
-                "If this is an existing Stock without a Share Account, it is recommended that a Share Account is created.\n\n"
-                "Do you want to create a new Share Acccount?\n")
-                , _("Edit Stock Investment"), wxYES_NO | wxICON_WARNING) == wxYES)
-            {
-                CreateShareAccount(account, stockName, m_stock->PURCHASEDATE);
-            }
-        }
-    }
-
+    
     m_edit = true;
     UpdateControls();
 }
@@ -505,18 +479,15 @@
     if (name.empty()) return;
     Model_Account::Data* share_account = Model_Account::instance().create();
     share_account->ACCOUNTNAME = name;
-    share_account->ACCOUNTTYPE = Model_Account::TYPE_STR_SHARES;
+    share_account->ACCOUNTTYPE = Model_Account::TYPE_NAME_SHARES;
 
-    share_account->FAVORITEACCT = "TRUE";
-    share_account->STATUS = Model_Account::STATUS_STR_OPEN;
+    share_account->FAVORITEACCT = "FALSE";
+    share_account->STATUS = Model_Account::STATUS_NAME_OPEN;
     share_account->INITIALBAL = 0;
     share_account->INITIALDATE = openingDate;
     share_account->CURRENCYID = stock_account->CURRENCYID;
     Model_Account::instance().save(share_account);
 
-    mmNewAcctDialog account_dialog(share_account, this);
-    account_dialog.ShowModal();
-
     ShareTransactionDialog share_dialog(this, m_stock);
     share_dialog.ShowModal();
 }
@@ -525,14 +496,14 @@
 void mmStockDialog::OnListItemSelected(wxListEvent& event)
 {
     long selectedIndex = event.GetIndex();
-    long histId = m_price_listbox->GetItemData(selectedIndex);
+    int64 histId = m_price_listbox->GetItemData(selectedIndex);
     Model_Account::Data* account = Model_Account::instance().get(m_stock->HELDAT);
     Model_StockHistory::Data *histData = Model_StockHistory::instance().get(histId);
 
     if (histData->HISTID > 0)
     {
         m_history_date_ctrl->SetValue(Model_StockHistory::DATE(*histData));
-        m_history_price_ctrl->SetValue(Model_Account::toString(histData->VALUE, account, Option::instance().SharePrecision()));
+        m_history_price_ctrl->SetValue(Model_Account::toString(histData->VALUE, account, Option::instance().getSharePrecision()));
     }
 }
 
@@ -541,7 +512,7 @@
     if (m_stock->SYMBOL.IsEmpty())
         return;
 
-    const wxString fileName = wxFileSelector(_("Choose CSV data file to import")
+    const wxString fileName = wxFileSelector(_t("Choose CSV data file to import")
         , wxEmptyString, wxEmptyString, wxEmptyString, "*.csv", wxFD_FILE_MUST_EXIST);
     Model_Account::Data *account = Model_Account::instance().get(m_stock->HELDAT);
     Model_Currency::Data *currency = Model_Account::currency(account);
@@ -554,8 +525,8 @@
         wxTextFile tFile(fileName);
         if (!tFile.Open())
             return;
-        wxProgressDialog* progressDlg = new wxProgressDialog(_("Stock History CSV Import")
-            , _("Quotes imported from CSV: "), tFile.GetLineCount()
+        wxProgressDialog* progressDlg = new wxProgressDialog(_t("Stock History CSV Import")
+            , _t("Quotes imported from CSV: "), tFile.GetLineCount()
             , nullptr, wxPD_AUTO_HIDE | wxPD_APP_MODAL | wxPD_SMOOTH | wxPD_CAN_ABORT);
 
         bool canceledbyuser = false;
@@ -571,7 +542,7 @@
         for (line = tFile.GetFirstLine(); !tFile.Eof(); line = tFile.GetNextLine())
         {
             wxString progressMsg;
-            progressMsg << _("Quotes imported from CSV: ") << countImported;
+            progressMsg << _t("Quotes imported from CSV: ") << countImported;
             if (!progressDlg->Update(countImported, progressMsg))
             {
                 canceledbyuser = true;
@@ -586,7 +557,7 @@
             dateStr.clear();
             priceStr.clear();
 
-            const wxString& delimiter = Model_Infotable::instance().GetStringInfo("DELIMITER", mmex::DEFDELIMTER);
+            const wxString& delimiter = Model_Infotable::instance().getString("DELIMITER", mmex::DEFDELIMTER);
             csv2tab_separated_values(line, delimiter);
             wxStringTokenizer tkz(line, "\t", wxTOKEN_RET_EMPTY_ALL);  
             if (static_cast<int>(tkz.CountTokens()) < 2)
@@ -627,17 +598,17 @@
 
         progressDlg->Destroy();       
 
-        wxString msg = wxString::Format(_("Total Lines : %ld"), countNumTotal); 
+        wxString msg = wxString::Format(_t("Total Lines : %ld"), countNumTotal); 
         msg << "\n";
-        msg << wxString::Format(_("Total Imported : %ld"), countImported); 
+        msg << wxString::Format(_t("Total Imported : %ld"), countImported); 
         msg << "\n";
-        msg << _("Date") << "              " << _("Price");
+        msg << _t("Date") << "              " << _t("Price");
         msg << "\n";
         for (std::vector<wxString>::const_iterator d = rows.begin(); d != rows.end(); ++d)
             msg << *d << "\n";
-        wxString confirmMsg = msg + _("Please confirm saving");
+        wxString confirmMsg = msg + _t("Please confirm saving");
         if (!canceledbyuser && wxMessageBox(confirmMsg
-            , _("Importing CSV"), wxOK | wxCANCEL | wxICON_INFORMATION) == wxCANCEL)
+            , _t("Importing CSV"), wxOK | wxCANCEL | wxICON_INFORMATION) == wxCANCEL)
         {
             canceledbyuser = true;
         }
@@ -668,23 +639,23 @@
     const wxString ranges[] = { "5d","1mo","3mo","6mo","1y","2y","5y","10y","ytd","max" };
     const std::vector<std::pair<int, wxString> > RANGE_PAIRS =
     {
-        { DAY5, _("5 Days") }
-        ,{ MON, _("1 Month") }
-        ,{ MON3, _("3 Months") }
-        ,{ MON6, _("6 Months") }
-        ,{ YEAR, _("1 Year") }
-        ,{ YEAR2, _("2 Years") }
-        ,{ YEAR5, _("5 Years") }
-        ,{ YEAR10, _("10 Years") }
-        ,{ YTD, _("Current Year to Date") }
-        ,{ MAX, _("Max") }
+        { DAY5, _t("5 Days") }
+        ,{ MON, _t("1 Month") }
+        ,{ MON3, _t("3 Months") }
+        ,{ MON6, _t("6 Months") }
+        ,{ YEAR, _t("1 Year") }
+        ,{ YEAR2, _t("2 Years") }
+        ,{ YEAR5, _t("5 Years") }
+        ,{ YEAR10, _t("10 Years") }
+        ,{ YTD, _t("Current Year to Date") }
+        ,{ MAX, _t("Max") }
     };
 
     wxArrayString items;
     for (const auto& entry : RANGE_PAIRS) { items.Add(entry.second); }
 
-    int range_menu_item_no = wxGetSingleChoiceIndex(_("Specify type frequency of stock history")
-        , _("Stock History Update"), items);
+    int range_menu_item_no = wxGetSingleChoiceIndex(_t("Specify type frequency of stock history")
+        , _t("Stock History Update"), items);
 
     if (range_menu_item_no < 0) return;
     const wxString range = ranges[range_menu_item_no];
@@ -697,18 +668,18 @@
         const wxString intervals[] = { "1d","5d","1wk","1mo","3mo" };
         const std::vector<std::pair<int, wxString> > INTERVAL_PAIRS =
         {
-              { static_cast<int>(i::DAY), _("1 Day") }
-            , { static_cast<int>(i::DAY5), _("5 Days") }
-            , { static_cast<int>(i::WEEK), _("1 Week") }
-            , { static_cast<int>(i::MON), _("1 Month") }
-            , { static_cast<int>(i::MON3), _("3 Months") }
+              { static_cast<int>(i::DAY), _t("1 Day") }
+            , { static_cast<int>(i::DAY5), _t("5 Days") }
+            , { static_cast<int>(i::WEEK), _t("1 Week") }
+            , { static_cast<int>(i::MON), _t("1 Month") }
+            , { static_cast<int>(i::MON3), _t("3 Months") }
         };
 
         items.clear();
         for (const auto& entry : INTERVAL_PAIRS) { items.Add(entry.second); }
 
-        int interval_menu_item_no = wxGetSingleChoiceIndex(_("Specify interval of stock history")
-            , _("Stock History Update"), items);
+        int interval_menu_item_no = wxGetSingleChoiceIndex(_t("Specify interval of stock history")
+            , _t("Stock History Update"), items);
 
         if (interval_menu_item_no < 0) return;
         interval = intervals[interval_menu_item_no];
@@ -722,11 +693,11 @@
 
     if (err_code != CURLE_OK)
     {
-        if (sOutput.empty()) sOutput = _("Stock history not found!");
-        return mmErrorDialogs::MessageError(this, sOutput, _("Stock History Error"));
+        if (sOutput.empty()) sOutput = _t("Stock history not found.");
+        return mmErrorDialogs::MessageError(this, sOutput, _t("Stock History Error"));
     }
 
-    sOutput = _("Stock history not found!");
+    sOutput = _t("Stock history not found.");
 
     while (true)
     {
@@ -835,7 +806,7 @@
         Model_StockHistory::instance().ReleaseSavepoint();
         return ShowStockHistory();
     }
-    mmErrorDialogs::MessageError(this, sOutput, _("Stock History Error"));
+    mmErrorDialogs::MessageError(this, sOutput, _t("Stock History Error"));
 }
 
 void mmStockDialog::OnHistoryAddButton(wxCommandEvent& /*event*/)
@@ -880,12 +851,12 @@
         }
         wxListItem item;
         item.SetId(i);
-        item.SetData(histID.GetValue());
+        item.SetData(reinterpret_cast<void*>(histID.GetValue()));
         m_price_listbox->InsertItem(item);
     }
     if (i != m_price_listbox->GetItemCount())
     {
-        listStr = Model_Account::toString(dPrice, account, Option::instance().SharePrecision());
+        listStr = Model_Account::toString(dPrice, account, Option::instance().getSharePrecision());
         m_price_listbox->SetItem(i, 0, mmGetDateTimeForDisplay(m_history_date_ctrl->GetValue().FormatISODate()));
         m_price_listbox->SetItem(i, 1, listStr);
     }
@@ -893,7 +864,7 @@
     {
         //refresh m_stock to get updated attributes
         m_stock = Model_Stock::instance().get(m_stock->STOCKID);
-        m_current_price_ctrl->SetValue(Model_Account::toString(m_stock->CURRENTPRICE, account, Option::instance().SharePrecision()));
+        m_current_price_ctrl->SetValue(Model_Account::toString(m_stock->CURRENTPRICE, account, Option::instance().getSharePrecision()));
         m_value_investment->SetLabelText(Model_Account::toCurrency(Model_Stock::instance().CurrentValue(m_stock), account));
     }
 }
@@ -936,10 +907,10 @@
         {
             wxListItem item;
             item.SetId(static_cast<long>(idx));
-            item.SetData(histData.at(idx).HISTID.GetValue());
+            item.SetData(reinterpret_cast<void*>(histData.at(idx).HISTID.GetValue()));
             m_price_listbox->InsertItem(item);
             const wxDate dtdt = Model_StockHistory::DATE(histData.at(idx));
-            const wxString dispAmount = Model_Account::toString(histData.at(idx).VALUE, account, Option::instance().SharePrecision());
+            const wxString dispAmount = Model_Account::toString(histData.at(idx).VALUE, account, Option::instance().getSharePrecision());
             m_price_listbox->SetItem(static_cast<long>(idx), 0, mmGetDateTimeForDisplay(histData.at(idx).DATE));
             m_price_listbox->SetItem(static_cast<long>(idx), 1, dispAmount);
             if (idx == 0)
diff -Naur a/src/stockdialog.h b/src/stockdialog.h
--- a/src/stockdialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/stockdialog.h	2025-07-09 01:46:59.680940697 +0200
@@ -35,7 +35,6 @@
 public:
     mmStockDialog();
     mmStockDialog(wxWindow* parent
-        , mmGUIFrame* gui_frame
         , Model_Stock::Data* stock
         , int64 accountID
         , const wxString& name = "mmStockDialog"
@@ -88,7 +87,6 @@
     Model_Stock::Data* m_stock = nullptr;
     bool m_edit = false;
     int64 m_account_id = -1;
-    mmGUIFrame* m_gui_frame = nullptr;
     enum
     {
         ID_DPC_STOCK_PDATE = wxID_HIGHEST + 800,
diff -Naur a/src/stocks_list.cpp b/src/stocks_list.cpp
--- a/src/stocks_list.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/stocks_list.cpp	2025-07-09 01:46:59.680940697 +0200
@@ -38,9 +38,6 @@
     MENU_TREEPOPUP_DELETE,
     MENU_TREEPOPUP_NEW,
     MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS,
-    MENU_HEADER_HIDE,
-    MENU_HEADER_SORT,
-    MENU_HEADER_RESET,
 };
 
 enum class ico { GAIN, LOSS, ARROW_UP, ARROW_DOWN };
@@ -48,27 +45,45 @@
 /*******************************************************/
 
 wxBEGIN_EVENT_TABLE(StocksListCtrl, mmListCtrl)
+    EVT_LEFT_DOWN(StocksListCtrl::OnListLeftClick)
+    EVT_RIGHT_DOWN(StocksListCtrl::OnMouseRightClick)
+
     EVT_LIST_ITEM_ACTIVATED(wxID_ANY, StocksListCtrl::OnListItemActivated)
-    EVT_LIST_ITEM_SELECTED(wxID_ANY, StocksListCtrl::OnListItemSelected)
-    EVT_LIST_KEY_DOWN(wxID_ANY, StocksListCtrl::OnListKeyDown)
-    EVT_MENU(MENU_TREEPOPUP_NEW, StocksListCtrl::OnNewStocks)
-    EVT_MENU(MENU_TREEPOPUP_EDIT, StocksListCtrl::OnEditStocks)
-    EVT_MENU(MENU_TREEPOPUP_ADDTRANS, StocksListCtrl::OnEditStocks)
-    EVT_MENU(MENU_TREEPOPUP_VIEWTRANS, StocksListCtrl::OnEditStocks)
-    EVT_MENU(MENU_TREEPOPUP_DELETE, StocksListCtrl::OnDeleteStocks)
+    EVT_LIST_ITEM_SELECTED(wxID_ANY,  StocksListCtrl::OnListItemSelected)
+    EVT_LIST_KEY_DOWN(wxID_ANY,       StocksListCtrl::OnListKeyDown)
+
+    EVT_MENU(MENU_TREEPOPUP_NEW,                  StocksListCtrl::OnNewStocks)
+    EVT_MENU(MENU_TREEPOPUP_EDIT,                 StocksListCtrl::OnEditStocks)
+    EVT_MENU(MENU_TREEPOPUP_ADDTRANS,             StocksListCtrl::OnEditStocks)
+    EVT_MENU(MENU_TREEPOPUP_VIEWTRANS,            StocksListCtrl::OnEditStocks)
+    EVT_MENU(MENU_TREEPOPUP_DELETE,               StocksListCtrl::OnDeleteStocks)
     EVT_MENU(MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS, StocksListCtrl::OnOrganizeAttachments)
-    EVT_MENU(wxID_INDEX, StocksListCtrl::OnStockWebPage)
-    EVT_RIGHT_DOWN(StocksListCtrl::OnMouseRightClick)
-    EVT_LEFT_DOWN(StocksListCtrl::OnListLeftClick)
+    EVT_MENU(wxID_INDEX,                          StocksListCtrl::OnStockWebPage)
 wxEND_EVENT_TABLE()
 
-StocksListCtrl::~StocksListCtrl()
-{
-}
+const std::vector<ListColumnInfo> StocksListCtrl::LIST_INFO = {
+    { LIST_ID_ICON,           true, _n("Icon"),                 25,  _FL, false },
+    { LIST_ID_ID,             true, _n("ID"),                   _WA, _FR, true },
+    { LIST_ID_DATE,           true, _n("*Date"),                _WH, _FL, true },
+    { LIST_ID_NAME,           true, _n("Company Name"),         _WH, _FL, true },
+    { LIST_ID_SYMBOL,         true, _n("Symbol"),               _WH, _FL, true },
+    { LIST_ID_NUMBER,         true, _n("Share Total"),          _WH, _FR, true },
+    { LIST_ID_PRICE,          true, _n("Avg Share Price"),      _WH, _FR, true },
+    { LIST_ID_VALUE,          true, _n("Total Cost"),           _WH, _FR, true },
+    { LIST_ID_REAL_GAIN_LOSS, true, _n("Realized Gain/Loss"),   _WH, _FR, true },
+    { LIST_ID_GAIN_LOSS,      true, _n("Unrealized Gain/Loss"), _WH, _FR, true },
+    { LIST_ID_CURRENT,        true, _n("Curr. Share Price"),    _WH, _FR, true },
+    { LIST_ID_CURRVALUE,      true, _n("Curr. Total Value"),    _WH, _FR, true },
+    { LIST_ID_PRICEDATE,      true, _n("Price Date"),           _WH, _FL, true },
+    { LIST_ID_COMMISSION,     true, _n("Commission"),           _WH, _FR, true },
+    { LIST_ID_NOTES,          true, _n("Notes"),                _WH, _FL, true },
+};
 
-StocksListCtrl::StocksListCtrl(mmStocksPanel* cp, wxWindow *parent, wxWindowID winid)
-    : mmListCtrl(parent, winid)
-    , m_stock_panel(cp)
+StocksListCtrl::StocksListCtrl(
+    mmStocksPanel* cp, wxWindow *parent, wxWindowID winid
+) :
+    mmListCtrl(parent, winid),
+    m_stock_panel(cp)
 {
     wxVector<wxBitmapBundle> images;
     images.push_back(mmBitmapBundle(png::PROFIT));
@@ -79,51 +94,27 @@
     SetSmallImages(images);
     mmThemeMetaColour(this, meta::COLOR_LISTPANEL);
 
-    // load the global variables
-    m_selected_col = Model_Setting::instance().GetIntSetting("STOCKS_SORT_COL", col_sort());
-    m_asc = Model_Setting::instance().GetBoolSetting("STOCKS_ASC", true);
-
-    m_columns.push_back(PANEL_COLUMN(" ", 25, wxLIST_FORMAT_LEFT, false));
-    m_real_columns.push_back(COL_ICON);
-    m_columns.push_back(PANEL_COLUMN(_("ID"), wxLIST_AUTOSIZE, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(COL_ID);
-    m_columns.push_back(PANEL_COLUMN(_("*Date"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(COL_DATE);
-    m_columns.push_back(PANEL_COLUMN(_("Company Name"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(COL_NAME);
-    m_columns.push_back(PANEL_COLUMN(_("Symbol"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(COL_SYMBOL);
-    m_columns.push_back(PANEL_COLUMN(_("Share Total"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(COL_NUMBER);
-    m_columns.push_back(PANEL_COLUMN(_("Avg Share Price"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(COL_PRICE);
-    m_columns.push_back(PANEL_COLUMN(_("Total Cost"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(COL_VALUE);
-    m_columns.push_back(PANEL_COLUMN(_("Realized Gain/Loss"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(COL_REAL_GAIN_LOSS);
-    m_columns.push_back(PANEL_COLUMN(_("Unrealized Gain/Loss"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(COL_GAIN_LOSS);
-    m_columns.push_back(PANEL_COLUMN(_("Curr. Share Price"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(COL_CURRENT);
-    m_columns.push_back(PANEL_COLUMN(_("Curr. Total Value"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(COL_CURRVALUE);
-    m_columns.push_back(PANEL_COLUMN(_("Price Date"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(COL_PRICEDATE);
-    m_columns.push_back(PANEL_COLUMN(_("Commission"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_RIGHT, true));
-    m_real_columns.push_back(COL_COMMISSION);
-    m_columns.push_back(PANEL_COLUMN(_("Notes"), wxLIST_AUTOSIZE_USEHEADER, wxLIST_FORMAT_LEFT, true));
-    m_real_columns.push_back(COL_NOTES);
-
-    m_col_width = "STOCKS_COL%d_WIDTH";
-    m_col_idstr = "STOCKS";
-    m_default_sort_column = col_sort();
+    m_setting_name = "STOCKS";
+    o_col_order_prefix = "STOCKS";
+    o_col_width_prefix = "STOCKS_COL";
+    o_sort_prefix = "STOCKS";
+    m_col_info_id = LIST_INFO;
+    m_col_id_nr = ListColumnInfo::getListId(LIST_INFO);
+    m_sort_col_id = { col_sort() };
+    createColumns();
 
-    CreateColumns();
-
-    initVirtualListControl(-1, m_selected_col, m_asc);
+    initVirtualListControl();
     if (!m_stocks.empty())
         EnsureVisible(m_stocks.size() - 1);
+}
+
+StocksListCtrl::~StocksListCtrl()
+{
+}
 
+int StocksListCtrl::getSortIcon(bool asc) const
+{
+    return asc ? static_cast<int>(ico::ARROW_DOWN) : static_cast<int>(ico::ARROW_UP);
 }
 
 void StocksListCtrl::OnMouseRightClick(wxMouseEvent& event)
@@ -143,20 +134,20 @@
     bool hide_menu_item = (m_selected_row < 0);
 
     wxMenu menu;
-    menu.Append(MENU_TREEPOPUP_NEW, _u("&New Stock Investment…"));
+    menu.Append(MENU_TREEPOPUP_NEW, _tu("&New Stock Investment…"));
     menu.AppendSeparator();
-    menu.Append(MENU_TREEPOPUP_ADDTRANS, _u("&Add Stock Transactions…"));
-    menu.Append(MENU_TREEPOPUP_VIEWTRANS, _("&View Stock Transactions"));
+    menu.Append(MENU_TREEPOPUP_ADDTRANS, _tu("&Adjust Trade"));
+    menu.Append(MENU_TREEPOPUP_VIEWTRANS, _t("&View Stock Transactions"));
     menu.AppendSeparator();
-    menu.Append(MENU_TREEPOPUP_EDIT, _u("&Edit Stock Investment…"));
+    menu.Append(MENU_TREEPOPUP_EDIT, _tu("&Edit Stock Investment…"));
     menu.AppendSeparator();
-    menu.Append(MENU_TREEPOPUP_DELETE, _u("&Delete Stock Investment…"));
+    menu.Append(MENU_TREEPOPUP_DELETE, _tu("&Delete Stock Investment…"));
     menu.AppendSeparator();
-    menu.Append(MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS, _u("&Organize Attachments…"));
-    menu.Append(wxID_INDEX, _("Stock &Web Page"));
+    menu.Append(MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS, _tu("&Organize Attachments…"));
+    menu.Append(wxID_INDEX, _t("Stock &Web Page"));
 
     menu.Enable(MENU_TREEPOPUP_EDIT, !hide_menu_item);
-    menu.Enable(MENU_TREEPOPUP_ADDTRANS, !hide_menu_item);
+    menu.Enable(MENU_TREEPOPUP_ADDTRANS, !hide_menu_item && m_stocks[m_selected_row].NUMSHARES > 0);
     menu.Enable(MENU_TREEPOPUP_VIEWTRANS, !hide_menu_item);
     menu.Enable(MENU_TREEPOPUP_DELETE, !hide_menu_item);
     menu.Enable(MENU_TREEPOPUP_ORGANIZE_ATTACHMENTS, !hide_menu_item);
@@ -167,37 +158,48 @@
     this->SetFocus();
 }
 
-wxString StocksListCtrl::OnGetItemText(long item, long column) const
+wxString StocksListCtrl::OnGetItemText(long item, long col_nr) const
 {
-    column = m_real_columns[column];
-
-    if (column == COL_ID)           return wxString::Format("%lld", m_stocks[item].STOCKID).Trim();
-    if (column == COL_DATE)         return mmGetDateTimeForDisplay(m_stocks[item].PURCHASEDATE);
-    if (column == COL_NAME)         return m_stocks[item].STOCKNAME;
-    if (column == COL_SYMBOL)       return m_stocks[item].SYMBOL;
-    if (column == COL_NUMBER)
-    {
+    int col_id = getColId_Nr(static_cast<int>(col_nr));
+    switch (col_id) {
+    case LIST_ID_ID:
+        return wxString::Format("%lld", m_stocks[item].STOCKID).Trim();
+    case LIST_ID_DATE:
+        return mmGetDateTimeForDisplay(m_stocks[item].PURCHASEDATE);
+    case LIST_ID_NAME:
+        return m_stocks[item].STOCKNAME;
+    case LIST_ID_SYMBOL:
+        return m_stocks[item].SYMBOL;
+    case LIST_ID_NUMBER: {
         int precision = m_stocks[item].NUMSHARES == floor(m_stocks[item].NUMSHARES) ? 0 : 4;
         return Model_Currency::toString(m_stocks[item].NUMSHARES, m_stock_panel->m_currency, precision);
     }
-    if (column == COL_PRICE)        return Model_Currency::toString(m_stocks[item].PURCHASEPRICE, m_stock_panel->m_currency, 4);
-    if (column == COL_VALUE)        return Model_Currency::toString(m_stocks[item].VALUE, m_stock_panel->m_currency);
-    if (column == COL_REAL_GAIN_LOSS)    return Model_Currency::toString(GetRealGainLoss(item), m_stock_panel->m_currency);
-    if (column == COL_GAIN_LOSS)    return Model_Currency::toString(GetGainLoss(item), m_stock_panel->m_currency);
-    if (column == COL_CURRENT)      return Model_Currency::toString(m_stocks[item].CURRENTPRICE, m_stock_panel->m_currency, 4);
-    if (column == COL_CURRVALUE)    return Model_Currency::toString(Model_Stock::CurrentValue(m_stocks[item]), m_stock_panel->m_currency);
-    if (column == COL_PRICEDATE)    return mmGetDateTimeForDisplay(Model_Stock::instance().lastPriceDate(&m_stocks[item]));
-    if (column == COL_COMMISSION)   return Model_Currency::toString(m_stocks[item].COMMISSION, m_stock_panel->m_currency);
-    if (column == COL_NOTES)
-    {
+    case LIST_ID_PRICE:
+        return Model_Currency::toString(m_stocks[item].PURCHASEPRICE, m_stock_panel->m_currency, 4);
+    case LIST_ID_VALUE:
+        return Model_Currency::toString(m_stocks[item].VALUE, m_stock_panel->m_currency);
+    case LIST_ID_REAL_GAIN_LOSS:
+        return Model_Currency::toString(GetRealGainLoss(item), m_stock_panel->m_currency);
+    case LIST_ID_GAIN_LOSS:
+        return Model_Currency::toString(GetGainLoss(item), m_stock_panel->m_currency);
+    case LIST_ID_CURRENT:
+        return Model_Currency::toString(m_stocks[item].CURRENTPRICE, m_stock_panel->m_currency, 4);
+    case LIST_ID_CURRVALUE:
+        return Model_Currency::toString(Model_Stock::CurrentValue(m_stocks[item]), m_stock_panel->m_currency);
+    case LIST_ID_PRICEDATE:
+        return mmGetDateTimeForDisplay(Model_Stock::instance().lastPriceDate(&m_stocks[item]));
+    case LIST_ID_COMMISSION:
+        return Model_Currency::toString(m_stocks[item].COMMISSION, m_stock_panel->m_currency);
+    case LIST_ID_NOTES: {
         wxString full_notes = m_stocks[item].NOTES;
         full_notes.Replace("\n", " ");
-        if (Model_Attachment::NrAttachments(Model_Attachment::REFTYPE_STR_STOCK, m_stocks[item].STOCKID))
+        if (Model_Attachment::NrAttachments(Model_Stock::refTypeName, m_stocks[item].STOCKID))
             full_notes.Prepend(mmAttachmentManage::GetAttachmentNoteSign());
         return full_notes;
     }
-
-    return wxEmptyString;
+    default:
+        return wxEmptyString;
+    }
 }
 
 double StocksListCtrl::GetGainLoss(long item) const
@@ -272,7 +274,7 @@
 
 void StocksListCtrl::OnNewStocks(wxCommandEvent& /*event*/)
 {
-    mmStockDialog dlg(this, m_stock_panel->m_frame, nullptr, m_stock_panel->m_account_id);
+    mmStockDialog dlg(this, nullptr, m_stock_panel->m_account_id);
     dlg.ShowModal();
     if (Model_Stock::instance().get(dlg.m_stock_id))
     {
@@ -285,14 +287,14 @@
 {
     if (m_selected_row == -1) return;
 
-    wxMessageDialog msgDlg(this, _("Do you really want to delete the stock investment?")
-        , _("Confirm Stock Investment Deletion")
+    wxMessageDialog msgDlg(this, _t("Do you want to delete the stock investment?")
+        , _t("Confirm Stock Investment Deletion")
         , wxYES_NO | wxNO_DEFAULT | wxICON_ERROR);
     if (msgDlg.ShowModal() == wxID_YES)
     {
         Model_Stock::instance().remove(m_stocks[m_selected_row].STOCKID);
-        mmAttachmentManage::DeleteAllAttachments(Model_Attachment::REFTYPE_STR_STOCK, m_stocks[m_selected_row].STOCKID);
-        Model_Translink::RemoveTransLinkRecords(Model_Attachment::REFTYPE_ID_STOCK, m_stocks[m_selected_row].STOCKID);
+        mmAttachmentManage::DeleteAllAttachments(Model_Stock::refTypeName, m_stocks[m_selected_row].STOCKID);
+        Model_Translink::RemoveTransLinkRecords<Model_Stock>(m_stocks[m_selected_row].STOCKID);
         DeleteItem(m_selected_row);
         doRefreshItems(-1);
         m_stock_panel->m_frame->RefreshNavigationTree();
@@ -304,12 +306,12 @@
     if (m_selected_row == -1) return;
     
     const auto& accounts = Model_Account::instance().find(
-        Model_Account::ACCOUNTTYPE(Model_Account::TYPE_STR_INVESTMENT));
+        Model_Account::ACCOUNTTYPE(Model_Account::TYPE_NAME_INVESTMENT));
     if (accounts.empty()) return;
 
     const Model_Account::Data* from_account = Model_Account::instance().get(m_stock_panel->m_account_id);
-    wxString headerMsg = wxString::Format(_("Moving Transaction from %s to"), from_account->ACCOUNTNAME);
-    mmSingleChoiceDialog scd(this, _("Select the destination Account "), headerMsg , accounts);
+    wxString headerMsg = wxString::Format(_t("Moving Transaction from %s to"), from_account->ACCOUNTNAME);
+    mmSingleChoiceDialog scd(this, _t("Select the destination Account "), headerMsg , accounts);
 
     int64 toAccountID = -1;
     int error_code = scd.ShowModal();
@@ -346,7 +348,7 @@
 {
     if (m_selected_row < 0) return;
 
-    wxString RefType = Model_Attachment::REFTYPE_STR_STOCK;
+    wxString RefType = Model_Stock::refTypeName;
     int64 RefId = m_stocks[m_selected_row].STOCKID;
 
     mmAttachmentDialog dlg(this, RefType, RefId);
@@ -362,7 +364,7 @@
 
     if (!stockSymbol.IsEmpty())
     {
-        const wxString& stockURL = Model_Infotable::instance().GetStringInfo("STOCKURL", mmex::weblink::DefStockUrl);
+        const wxString& stockURL = Model_Infotable::instance().getString("STOCKURL", mmex::weblink::DefStockUrl);
         const wxString& httpString = wxString::Format(stockURL, stockSymbol);
         wxLaunchDefaultBrowser(httpString);
     }
@@ -372,7 +374,7 @@
 {
     if (m_selected_row < 0) return;
 
-    wxString RefType = Model_Attachment::REFTYPE_STR_STOCK;
+    wxString RefType = Model_Stock::refTypeName;
     int64 RefId = m_stocks[m_selected_row].STOCKID;
 
     mmAttachmentManage::OpenAttachmentFromPanelIcon(this, RefType, RefId);
@@ -398,24 +400,19 @@
 
 void StocksListCtrl::OnColClick(wxListEvent& event)
 {
-    int ColumnNr;
-    if (event.GetId() != MENU_HEADER_SORT)
-        ColumnNr = event.GetColumn();
-    else
-        ColumnNr = m_ColumnHeaderNbr;
-    if (0 >= ColumnNr || ColumnNr >= getColumnsNumber()) return;
-
-    if (m_selected_col == ColumnNr && event.GetId() != MENU_HEADER_SORT) m_asc = !m_asc;
-
-    wxListItem item;
-    item.SetMask(wxLIST_MASK_IMAGE);
-    item.SetImage(-1);
-    SetColumn(m_selected_col, item);
-
-    m_selected_col = ColumnNr;
-
-    Model_Setting::instance().Set("STOCKS_ASC", m_asc);
-    Model_Setting::instance().Set("STOCKS_SORT_COL", m_selected_col);
+    int col_nr = (event.GetId() == MENU_HEADER_SORT) ? m_sel_col_nr : event.GetColumn();
+    if (!isValidColNr(col_nr))
+        return;
+    int col_id = getColId_Nr(col_nr);
+    if (!m_col_info_id[col_id].sortable)
+        return;
+
+    if (m_sort_col_id[0] != col_id)
+        m_sort_col_id[0] = col_id;
+    else if (event.GetId() != MENU_HEADER_SORT)
+        m_sort_asc[0] = !m_sort_asc[0];
+    updateSortIcon();
+    savePreferences();
 
     int64 trx_id = -1;
     if (m_selected_row>=0) trx_id = m_stocks[m_selected_row].STOCKID;
@@ -425,11 +422,11 @@
 
 void StocksListCtrl::doRefreshItems(int64 trx_id)
 {
-    int selectedIndex = initVirtualListControl(trx_id, m_selected_col, m_asc);
+    int selectedIndex = initVirtualListControl(trx_id);
     long cnt = static_cast<long>(m_stocks.size());
 
     if (selectedIndex >= cnt || selectedIndex < 0)
-        selectedIndex = m_asc ? cnt - 1 : 0;
+        selectedIndex = getSortAsc() ? cnt - 1 : 0;
 
     if (cnt>0)
     {
@@ -446,22 +443,19 @@
     }
 }
 
-int StocksListCtrl::initVirtualListControl(int64 trx_id, int col, bool asc)
+int StocksListCtrl::initVirtualListControl(int64 trx_id)
 {
     m_stock_panel->updateHeader();
     /* Clear all the records */
     DeleteAllItems();
 
-    if (col > 0)
-    {
-        wxListItem item;
-        item.SetMask(wxLIST_MASK_IMAGE);
-        item.SetImage(asc ? static_cast<int>(ico::ARROW_DOWN) : static_cast<int>(ico::ARROW_UP));
-        SetColumn(col, item);
-    }
-
-    m_stocks = Model_Stock::instance().find(Model_Stock::HELDAT(m_stock_panel->m_account_id));
-    sortTable();
+    // TODO
+    int currentSelection = m_stock_panel->getFilter();
+    if (currentSelection)
+        m_stocks = Model_Stock::instance().find(Model_Stock::HELDAT(m_stock_panel->m_account_id), Model_Stock::NUMSHARES(0.0, GREATER));
+    else
+        m_stocks = Model_Stock::instance().find(Model_Stock::HELDAT(m_stock_panel->m_account_id));
+    sortList();
 
     int cnt = 0, selected_item = -1;
     for (auto& stock : m_stocks)
@@ -472,7 +466,7 @@
             break;
         }
         if (!stock.PURCHASEPRICE) {
-            Model_Translink::UpdateStockValue(&stock);
+            Model_Stock::UpdatePosition(&stock);
         }
         ++cnt;
     }
@@ -481,54 +475,54 @@
     return selected_item;
 }
 
-void StocksListCtrl::sortTable()
+void StocksListCtrl::sortList()
 {
     std::sort(m_stocks.begin(), m_stocks.end());
-    switch (m_selected_col)
+    switch (getSortColId())
     {
-    case StocksListCtrl::COL_ID:
+    case StocksListCtrl::LIST_ID_ID:
         std::stable_sort(m_stocks.begin(), m_stocks.end(), SorterBySTOCKID());
         break;
-    case StocksListCtrl::COL_DATE:
+    case StocksListCtrl::LIST_ID_DATE:
         std::stable_sort(m_stocks.begin(), m_stocks.end(), SorterByPURCHASEDATE());
         break;
-    case StocksListCtrl::COL_NAME:
+    case StocksListCtrl::LIST_ID_NAME:
         std::stable_sort(m_stocks.begin(), m_stocks.end(), SorterBySTOCKNAME());
         break;
-    case StocksListCtrl::COL_SYMBOL:
+    case StocksListCtrl::LIST_ID_SYMBOL:
         std::stable_sort(m_stocks.begin(), m_stocks.end(), SorterBySYMBOL());
         break;
-    case StocksListCtrl::COL_NUMBER:
+    case StocksListCtrl::LIST_ID_NUMBER:
         std::stable_sort(m_stocks.begin(), m_stocks.end(), SorterByNUMSHARES());
         break;
-    case StocksListCtrl::COL_PRICE:
+    case StocksListCtrl::LIST_ID_PRICE:
         std::stable_sort(m_stocks.begin(), m_stocks.end(), SorterByPURCHASEPRICE());
         break;
-    case StocksListCtrl::COL_VALUE:
+    case StocksListCtrl::LIST_ID_VALUE:
         std::stable_sort(m_stocks.begin(), m_stocks.end()
             , [](const Model_Stock::Data& x, const Model_Stock::Data& y)
             {
                 return x.VALUE < y.VALUE;
             });
         break;
-    case StocksListCtrl::COL_REAL_GAIN_LOSS:
+    case StocksListCtrl::LIST_ID_REAL_GAIN_LOSS:
         std::stable_sort(m_stocks.begin(), m_stocks.end()
             , [](const Model_Stock::Data& x, const Model_Stock::Data& y)
         {
             return getRealGainLoss(x) < getRealGainLoss(y);
         });
         break;
-    case StocksListCtrl::COL_GAIN_LOSS:
+    case StocksListCtrl::LIST_ID_GAIN_LOSS:
         std::stable_sort(m_stocks.begin(), m_stocks.end()
             , [](const Model_Stock::Data& x, const Model_Stock::Data& y)
             {
                 return getGainLoss(x) < getGainLoss(y);
             });
         break;
-    case StocksListCtrl::COL_CURRENT:
+    case StocksListCtrl::LIST_ID_CURRENT:
         std::stable_sort(m_stocks.begin(), m_stocks.end(), SorterByCURRENTPRICE());
         break;
-    case StocksListCtrl::COL_CURRVALUE:
+    case StocksListCtrl::LIST_ID_CURRVALUE:
         std::stable_sort(m_stocks.begin(), m_stocks.end()
             , [](const Model_Stock::Data& x, const Model_Stock::Data& y)
             {
@@ -537,17 +531,17 @@
                 return valueX < valueY;
             });
         break;
-    case StocksListCtrl::COL_PRICEDATE:
+    case StocksListCtrl::LIST_ID_PRICEDATE:
         //TODO
         break;
-    case StocksListCtrl::COL_COMMISSION:
+    case StocksListCtrl::LIST_ID_COMMISSION:
         std::stable_sort(m_stocks.begin(), m_stocks.end(), SorterByCOMMISSION());
         break;
-    case StocksListCtrl::COL_NOTES:
+    case StocksListCtrl::LIST_ID_NOTES:
         std::stable_sort(m_stocks.begin(), m_stocks.end(), SorterByNOTES());
         break;
     default:
         break;
     }
-    if (!m_asc) std::reverse(m_stocks.begin(), m_stocks.end());
+    if (!getSortAsc()) std::reverse(m_stocks.begin(), m_stocks.end());
 }
diff -Naur a/src/stocks_list.h b/src/stocks_list.h
--- a/src/stocks_list.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/stocks_list.h	2025-07-09 01:46:59.680940697 +0200
@@ -34,10 +34,43 @@
     wxDECLARE_EVENT_TABLE();
 
 public:
+    enum LIST_ID
+    {
+        LIST_ID_ICON = 0,
+        LIST_ID_ID,
+        LIST_ID_DATE,
+        LIST_ID_NAME,
+        LIST_ID_SYMBOL,
+        LIST_ID_NUMBER,
+        LIST_ID_PRICE,
+        LIST_ID_VALUE,
+        LIST_ID_REAL_GAIN_LOSS,
+        LIST_ID_GAIN_LOSS,
+        LIST_ID_CURRENT,
+        LIST_ID_CURRVALUE,
+        LIST_ID_PRICEDATE,
+        LIST_ID_COMMISSION,
+        LIST_ID_NOTES,
+        LIST_ID_size, // number of columns
+    };
+
+public:
+    Model_Stock::Data_Set m_stocks;
+
+private:
+    static const std::vector<ListColumnInfo> LIST_INFO;
+    mmStocksPanel* m_stock_panel;
+    long m_selected_row = -1;
+
+public:
     StocksListCtrl(mmStocksPanel* cp, wxWindow *parent, wxWindowID winid = wxID_ANY);
     ~StocksListCtrl();
 
     void doRefreshItems(int64 trx_id = -1);
+    long get_selectedIndex();
+    wxString getStockInfo(int selectedIndex) const;
+    int initVirtualListControl(int64 trx_id = -1);
+
     void OnNewStocks(wxCommandEvent& event);
     void OnDeleteStocks(wxCommandEvent& event);
     void OnMoveStocks(wxCommandEvent& event);
@@ -45,58 +78,31 @@
     void OnOrganizeAttachments(wxCommandEvent& event);
     void OnStockWebPage(wxCommandEvent& event);
     void OnOpenAttachment(wxCommandEvent& event);
-    long get_selectedIndex();
-    int getColumnsNumber();
-    int col_sort();
-    wxString getStockInfo(int selectedIndex) const;
-    /* Helper Functions/data */
-    Model_Stock::Data_Set m_stocks;
-    /* updates thstockide checking panel data */
-    int initVirtualListControl(int64 trx_id = -1, int col = 0, bool asc = true);
 
 private:
-    /* required overrides for virtual style list control */
-    virtual wxString OnGetItemText(long item, long column) const;
-    virtual int OnGetItemImage(long item) const;
+    static int col_sort();
+    double GetGainLoss(long item) const;
+    static double getGainLoss(const Model_Stock::Data& stock);
+    double GetRealGainLoss(long item) const;
+    static double getRealGainLoss(const Model_Stock::Data& stock);
+    void sortList();
+
+    // required overrides for virtual style list control
+    virtual int getSortIcon(bool asc) const override;
+    virtual wxString OnGetItemText(long item, long col_nr) const override;
+    virtual int OnGetItemImage(long item) const override;
+    void OnColClick(wxListEvent& event) override;
 
     void OnMouseRightClick(wxMouseEvent& event);
     void OnListLeftClick(wxMouseEvent& event);
     void OnListItemActivated(wxListEvent& event);
-    void OnColClick(wxListEvent& event);
     void OnMarkTransaction(wxCommandEvent& event);
     void OnMarkAllTransactions(wxCommandEvent& event);
     void OnListKeyDown(wxListEvent& event);
     void OnListItemSelected(wxListEvent& event);
-
-    mmStocksPanel* m_stock_panel;
-    enum EColumn
-    {
-        COL_ICON = 0,
-        COL_ID,
-        COL_DATE,
-        COL_NAME,
-        COL_SYMBOL,
-        COL_NUMBER,
-        COL_PRICE,
-        COL_VALUE,
-        COL_REAL_GAIN_LOSS,
-        COL_GAIN_LOSS,
-        COL_CURRENT,
-        COL_CURRVALUE,
-        COL_PRICEDATE,
-        COL_COMMISSION,
-        COL_NOTES,
-        COL_MAX, // number of columns
-    };
-    double GetGainLoss(long item) const;
-    static double getGainLoss(const Model_Stock::Data& stock);
-    double GetRealGainLoss(long item) const;
-    static double getRealGainLoss(const Model_Stock::Data& stock);
-    void sortTable();
 };
 
+inline int StocksListCtrl::col_sort() { return LIST_ID_DATE; }
 inline long StocksListCtrl::get_selectedIndex() { return m_selected_row; }
-inline int StocksListCtrl::getColumnsNumber() { return COL_MAX; }
-inline int StocksListCtrl::col_sort() { return COL_DATE; }
 
 #endif
diff -Naur a/src/stockspanel.cpp b/src/stockspanel.cpp
--- a/src/stockspanel.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/stockspanel.cpp	2025-07-09 01:46:59.680940697 +0200
@@ -46,7 +46,7 @@
 mmStocksPanel::mmStocksPanel(int64 accountID
     , mmGUIFrame* frame
     , wxWindow *parent
-    , wxWindowID winid)    
+    , wxWindowID winid)
     : m_account_id(accountID)
     , m_currency()
     , m_frame(frame)
@@ -61,7 +61,7 @@
     SetExtraStyle(GetExtraStyle()|wxWS_EX_BLOCK_EVENTS);
     wxPanel::Create(parent, winid, pos, size, style, name);
 
-    strLastUpdate_ = Model_Infotable::instance().GetStringInfo("STOCKS_LAST_REFRESH_DATETIME", "");
+    strLastUpdate_ = Model_Infotable::instance().getString("STOCKS_LAST_REFRESH_DATETIME", "");
     this->windowsFreezeThaw();
 
     Model_Account::Data *account = Model_Account::instance().get(m_account_id);
@@ -99,12 +99,24 @@
     header_text_ = new wxStaticText(headerPanel, wxID_STATIC, "");
     header_text_->SetFont(this->GetFont().Larger().Bold());
 
+    m_choiceFilter = new wxChoice(headerPanel, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, nullptr);
+    m_choiceFilter->Append(_t("All"));
+    m_choiceFilter->Append(_T("Non-Zero Shares"));
+    m_choiceFilter->SetMinSize(wxSize(150, -1));
+    m_choiceFilter->SetSelection(0);
+
+    m_choiceFilter->Bind(wxEVT_CHOICE, [this](wxCommandEvent&)
+    {
+        RefreshList();
+    });
+
     header_total_ = new wxStaticText(headerPanel, wxID_STATIC, "");
 
     wxBoxSizer* itemBoxSizerHHeader = new wxBoxSizer(wxHORIZONTAL);
     itemBoxSizerHHeader->Add(header_text_, 1, wxALIGN_CENTER_VERTICAL | wxALL, 1);
 
     itemBoxSizerVHeader->Add(itemBoxSizerHHeader, 1, wxEXPAND, 1);
+    itemBoxSizerVHeader->Add(m_choiceFilter, g_flagsBorder1V);
     itemBoxSizerVHeader->Add(header_total_, 1, wxALL, 1);
 
     /* ---------------------- */
@@ -112,13 +124,13 @@
         , wxID_ANY, wxDefaultPosition, wxSize(200, 200)
         , wxSP_3DBORDER | wxSP_3DSASH | wxNO_BORDER);
 
-    listCtrlAccount_ = new StocksListCtrl(this, itemSplitterWindow10, wxID_ANY);
+    m_lc = new StocksListCtrl(this, itemSplitterWindow10, wxID_ANY);
 
     wxPanel* BottomPanel = new wxPanel(itemSplitterWindow10, wxID_ANY
         , wxDefaultPosition, wxDefaultSize, wxNO_BORDER | wxTAB_TRAVERSAL);
     mmThemeMetaColour(BottomPanel, meta::COLOR_LISTPANEL);
 
-    itemSplitterWindow10->SplitHorizontally(listCtrlAccount_, BottomPanel);
+    itemSplitterWindow10->SplitHorizontally(m_lc, BottomPanel);
     itemSplitterWindow10->SetMinimumPaneSize(100);
     itemSplitterWindow10->SetSashGravity(1.0);
     itemBoxSizer9->Add(itemSplitterWindow10, g_flagsExpandBorder1);
@@ -129,46 +141,46 @@
     wxBoxSizer* BoxSizerHBottom = new wxBoxSizer(wxHORIZONTAL);
     BoxSizerVBottom->Add(BoxSizerHBottom, g_flagsBorder1V);
 
-    wxButton* itemButton6 = new wxButton(BottomPanel, wxID_NEW, _("&New "));
-    mmToolTip(itemButton6, _("New Stock Investment"));
+    wxButton* itemButton6 = new wxButton(BottomPanel, wxID_NEW, _t("&New "));
+    mmToolTip(itemButton6, _t("New Stock Investment"));
     BoxSizerHBottom->Add(itemButton6, 0, wxRIGHT, 5);
 
-    wxButton* add_trans_btn = new wxButton(BottomPanel, wxID_ADD, _("&Add Trans "));
-    mmToolTip(add_trans_btn, _("Add Stock Transactions"));
+    wxButton* add_trans_btn = new wxButton(BottomPanel, wxID_ADD, _t("&Adjust Trade "));
+    mmToolTip(add_trans_btn, _t("Add Stock Transactions"));
     BoxSizerHBottom->Add(add_trans_btn, 0, wxRIGHT, 5);
     add_trans_btn->Enable(false);
 
-    wxButton* view_trans_btn = new wxButton(BottomPanel, wxID_VIEW_DETAILS, _("&View Trans "));
-    mmToolTip(view_trans_btn, _("View Stock Transactions"));
+    wxButton* view_trans_btn = new wxButton(BottomPanel, wxID_VIEW_DETAILS, _t("&View Trans "));
+    mmToolTip(view_trans_btn, _t("View Stock Transactions"));
     BoxSizerHBottom->Add(view_trans_btn, 0, wxRIGHT, 5);
     view_trans_btn->Enable(false);
 
-    wxButton* itemButton81 = new wxButton(BottomPanel, wxID_EDIT, _("&Edit "));
-    mmToolTip(itemButton81, _("Edit Stock Investment"));
+    wxButton* itemButton81 = new wxButton(BottomPanel, wxID_EDIT, _t("&Edit "));
+    mmToolTip(itemButton81, _t("Edit Stock Investment"));
     BoxSizerHBottom->Add(itemButton81, 0, wxRIGHT, 5);
     itemButton81->Enable(false);
 
-    wxButton* itemButton7 = new wxButton(BottomPanel, wxID_DELETE, _("&Delete "));
-    mmToolTip(itemButton7, _("Delete Stock Investment"));
+    wxButton* itemButton7 = new wxButton(BottomPanel, wxID_DELETE, _t("&Delete "));
+    mmToolTip(itemButton7, _t("Delete Stock Investment"));
     BoxSizerHBottom->Add(itemButton7, 0, wxRIGHT, 5);
     itemButton7->Enable(false);
 
-    wxButton* bMove = new wxButton(BottomPanel, wxID_MOVE_FRAME, _("&Move"));
-    mmToolTip(bMove, _("Move selected transaction to another account"));
+    wxButton* bMove = new wxButton(BottomPanel, wxID_MOVE_FRAME, _t("&Move"));
+    mmToolTip(bMove, _t("Move selected transaction to another account"));
     BoxSizerHBottom->Add(bMove, 0, wxRIGHT, 5);
     bMove->Enable(false);
 
     attachment_button_ = new wxBitmapButton(BottomPanel
         , wxID_FILE, mmBitmapBundle(png::CLIP, mmBitmapButtonSize), wxDefaultPosition
         , wxSize(30, bMove->GetSize().GetY()));
-    mmToolTip(attachment_button_, _("Open attachments"));
+    mmToolTip(attachment_button_, _t("Open attachments"));
     BoxSizerHBottom->Add(attachment_button_, 0, wxRIGHT, 5);
     attachment_button_->Enable(false);
 
     refresh_button_ = new wxBitmapButton(BottomPanel
         , wxID_REFRESH, mmBitmapBundle(png::LED_OFF, mmBitmapButtonSize), wxDefaultPosition, wxSize(30, bMove->GetSize().GetY()));
-    refresh_button_->SetLabelText(_("Refresh"));
-    mmToolTip(refresh_button_, _("Refresh Stock Prices from Yahoo"));
+    refresh_button_->SetLabelText(_t("Refresh"));
+    mmToolTip(refresh_button_, _t("Refresh Stock Prices from Yahoo"));
     BoxSizerHBottom->Add(refresh_button_, 0, wxRIGHT, 5);
 
     //Infobar-mini
@@ -184,11 +196,11 @@
 
 void mmStocksPanel::AddStockTransaction(int selectedIndex)
 {
-    Model_Stock::Data* stock = &listCtrlAccount_->m_stocks[selectedIndex];
+    Model_Stock::Data* stock = &m_lc->m_stocks[selectedIndex];
     ShareTransactionDialog dlg(this, stock);
     if (dlg.ShowModal() == wxID_OK)
     {
-        listCtrlAccount_->doRefreshItems(dlg.m_stock_id);
+        m_lc->doRefreshItems(dlg.m_stock_id);
         updateExtraStocksData(selectedIndex);
     }
 }
@@ -202,133 +214,166 @@
 //TODO: improve View Stock Transactions
 void mmStocksPanel::ViewStockTransactions(int selectedIndex)
 {
-    Model_Stock::Data* stock = &listCtrlAccount_->m_stocks[selectedIndex];
-    
-    wxDialog dlg(this, wxID_ANY, _("View Stock Transactions") + wxString::Format(": %s - %s", Model_Account::get_account_name(stock->HELDAT), stock->SYMBOL), wxDefaultPosition, wxDefaultSize, wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER);
+    Model_Stock::Data* stock = &m_lc->m_stocks[selectedIndex];
+
+    wxDialog dlg(this, wxID_ANY,
+                 _t("View Stock Transactions") + ": " +
+                 Model_Account::get_account_name(stock->HELDAT) + " - " + stock->SYMBOL,
+                 wxDefaultPosition, wxDefaultSize,
+                 wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER);
+
     dlg.SetIcon(mmex::getProgramIcon());
     wxWindow* parent = dlg.GetMainWindowOfCompositeControl();
     wxBoxSizer* topsizer = new wxBoxSizer(wxVERTICAL);
-    wxListCtrl* stockTxnListCtrl = new wxListCtrl(parent, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT | wxLC_HRULES | wxLC_VRULES | wxLC_AUTOARRANGE);
-    stockTxnListCtrl->AppendColumn(_("Date"));
-    stockTxnListCtrl->AppendColumn(_("Lot"));
-    stockTxnListCtrl->AppendColumn(_("Shares"), wxLIST_FORMAT_RIGHT);
-    stockTxnListCtrl->AppendColumn(_("Price"), wxLIST_FORMAT_RIGHT);
-    stockTxnListCtrl->AppendColumn(_("Commission"), wxLIST_FORMAT_RIGHT);
+
+    // Initialize list control
+    wxListCtrl* stockTxnListCtrl = InitStockTxnListCtrl(parent);
     topsizer->Add(stockTxnListCtrl, wxSizerFlags(g_flagsExpand).TripleBorder());
 
-    const Model_Translink::Data_Set stock_list = Model_Translink::TranslinkList(Model_Attachment::REFTYPE_ID_STOCK, stock->STOCKID);
+    // Load stock transactions
+    LoadStockTransactions(stockTxnListCtrl, stock->STOCKID);
+
+    // Bind list events
+    BindListEvents(stockTxnListCtrl);
+
+    // Add buttons
+    wxSizer* buttonSizer = dlg.CreateSeparatedButtonSizer(wxOK);
+    if (buttonSizer) {
+        topsizer->Add(buttonSizer, wxSizerFlags().Expand().DoubleBorder(wxLEFT | wxRIGHT | wxBOTTOM));
+    }
+
+    dlg.SetSizerAndFit(topsizer);
+    dlg.SetInitialSize(wxSize(600, 400)); // Set default size
+    dlg.Center();
+    dlg.ShowModal();
+    RefreshList();
+}
+
+// Initialize the list control
+wxListCtrl* mmStocksPanel::InitStockTxnListCtrl(wxWindow* parent)
+{
+    wxListCtrl* listCtrl = new wxListCtrl(parent, wxID_ANY, wxDefaultPosition, wxDefaultSize, 
+                                          wxLC_REPORT | wxLC_HRULES | wxLC_VRULES | wxLC_AUTOARRANGE);
+
+    listCtrl->AppendColumn(_t("Date"), wxLIST_FORMAT_LEFT, 100);
+    listCtrl->AppendColumn(_t("Lot"), wxLIST_FORMAT_LEFT, 140);
+    listCtrl->AppendColumn(_t("Shares"), wxLIST_FORMAT_RIGHT, 100);
+    listCtrl->AppendColumn(_t("Trade Type"), wxLIST_FORMAT_LEFT, 80);
+    listCtrl->AppendColumn(_t("Price"), wxLIST_FORMAT_RIGHT, 100);
+    listCtrl->AppendColumn(_t("Commission"), wxLIST_FORMAT_RIGHT, 100);
+
+    return listCtrl;
+}
+
+// Load stock transactions into the list control
+void mmStocksPanel::LoadStockTransactions(wxListCtrl* listCtrl, int64 stockId)
+{
+    Model_Translink::Data_Set stock_list = Model_Translink::TranslinkList<Model_Stock>(stockId);
     Model_Checking::Data_Set checking_list;
-    for (const auto &trans : stock_list)
-    {
-        Model_Checking::Data* checking_entry = Model_Checking::instance().get(trans.CHECKINGACCOUNTID);
-        if (checking_entry && checking_entry->DELETEDTIME.IsEmpty()) checking_list.push_back(*checking_entry);
+
+    for (const auto& trans : stock_list) {
+        auto* checking_entry = Model_Checking::instance().get(trans.CHECKINGACCOUNTID);
+        if (checking_entry && checking_entry->DELETEDTIME.IsEmpty()) {
+            checking_list.push_back(*checking_entry);
+        }
     }
     std::stable_sort(checking_list.begin(), checking_list.end(), SorterByTRANSDATE());
 
     int row = 0;
     for (const auto& stock_trans : checking_list)
     {
-        long index = stockTxnListCtrl->InsertItem(row++, "");
-        Model_Shareinfo::Data* share_entry = Model_Shareinfo::ShareEntry(stock_trans.TRANSID);
-        if (share_entry && ((share_entry->SHARENUMBER > 0) || (share_entry->SHAREPRICE > 0)))
-        {
-            stockTxnListCtrl->SetItemData(index, stock_trans.TRANSID.GetValue());
-            stockTxnListCtrl->SetItem(index, 0, mmGetDateTimeForDisplay(stock_trans.TRANSDATE));
-            stockTxnListCtrl->SetItem(index, 1, share_entry->SHARELOT);
-
-            int precision = share_entry->SHARENUMBER == floor(share_entry->SHARENUMBER) ? 0 : Option::instance().SharePrecision();
-            stockTxnListCtrl->SetItem(index, 2, wxString::FromDouble(share_entry->SHARENUMBER, precision));
-            stockTxnListCtrl->SetItem(index, 3, wxString::FromDouble(share_entry->SHAREPRICE, Option::instance().SharePrecision()));
-            stockTxnListCtrl->SetItem(index, 4, wxString::FromDouble(share_entry->SHARECOMMISSION, 2));
-        }
+        auto* share_entry = Model_Shareinfo::ShareEntry(stock_trans.TRANSID);
+        if (!share_entry || (share_entry->SHARENUMBER <= 0 && share_entry->SHAREPRICE <= 0))
+            continue;
+
+        long index = listCtrl->InsertItem(row++, "");
+        listCtrl->SetItemData(index, stock_trans.TRANSID.GetValue());
+        FillListRow(listCtrl, index, stock_trans, *share_entry);
     }
+}
+
+// Fill list row with stock transaction data
+void mmStocksPanel::FillListRow(wxListCtrl* listCtrl, long index, const Model_Checking::Data& txn, const Model_Shareinfo::Data& share_entry)
+{
+    listCtrl->SetItem(index, 0, mmGetDateTimeForDisplay(txn.TRANSDATE));
+    listCtrl->SetItem(index, 1, share_entry.SHARELOT);
+
+    int precision = share_entry.SHARENUMBER == floor(share_entry.SHARENUMBER) ? 0 : Option::instance().getSharePrecision();
+    listCtrl->SetItem(index, 2, wxString::FromDouble(share_entry.SHARENUMBER, precision));
+    listCtrl->SetItem(index, 3, Model_Checking::trade_type_name(Model_Checking::type_id(txn.TRANSCODE)));
+    listCtrl->SetItem(index, 4, wxString::FromDouble(share_entry.SHAREPRICE, Option::instance().getSharePrecision()));
+    listCtrl->SetItem(index, 5, wxString::FromDouble(share_entry.SHARECOMMISSION, 2));
+}
 
-    // Double click on a row will open the sharetransactiondialog
-    stockTxnListCtrl->Bind(wxEVT_LIST_ITEM_ACTIVATED, [stockTxnListCtrl](wxListEvent& event) {
-        // Display the dialog
+// Bind list control events
+void mmStocksPanel::BindListEvents(wxListCtrl* listCtrl)
+{
+    listCtrl->Bind(wxEVT_LIST_ITEM_ACTIVATED, [listCtrl, this](wxListEvent& event) {
         long index = event.GetIndex();
-        Model_Checking::Data* txn = Model_Checking::instance().get(event.GetData());
-        Model_Translink::Data link = Model_Translink::TranslinkRecord(txn->TRANSID);
-        ShareTransactionDialog dlg(stockTxnListCtrl, &link, txn);
+        auto* txn = Model_Checking::instance().get(event.GetData());
+        if (!txn) return;
+
+        auto link = Model_Translink::TranslinkRecord(txn->TRANSID);
+        ShareTransactionDialog dlg(listCtrl, &link, txn);
         dlg.ShowModal();
 
-        // Update the item fields in case something changed
-        Model_Shareinfo::Data* share_entry = Model_Shareinfo::ShareEntry(txn->TRANSID);
-        stockTxnListCtrl->SetItem(index, 0, mmGetDateTimeForDisplay(txn->TRANSDATE));
-        stockTxnListCtrl->SetItem(index, 1, share_entry->SHARELOT);
-
-        int precision = share_entry->SHARENUMBER == floor(share_entry->SHARENUMBER) ? 0 : Option::instance().SharePrecision();
-        stockTxnListCtrl->SetItem(index, 2, wxString::FromDouble(share_entry->SHARENUMBER, precision));
-        stockTxnListCtrl->SetItem(index, 3, wxString::FromDouble(share_entry->SHAREPRICE, Option::instance().SharePrecision()));
-        stockTxnListCtrl->SetItem(index, 4, wxString::FromDouble(share_entry->SHARECOMMISSION, 2));
-
-        // Sort by date 
-        stockTxnListCtrl->SortItems(
-            [](wxIntPtr item1, wxIntPtr item2, wxIntPtr) -> int
-            {
-                wxDate date1 = Model_Checking::TRANSDATE(Model_Checking::instance().get(item1));
-                wxDate date2 = Model_Checking::TRANSDATE(Model_Checking::instance().get(item2));
-
-                if (date1.IsEarlierThan(date2))
-                    return -1;
-                if (date1.IsLaterThan(date2))
-                    return 1;
-                return 0;
-            },
-            0);
+        // Update the modified row
+        auto* share_entry = Model_Shareinfo::ShareEntry(txn->TRANSID);
+        if (share_entry) {
+            this->FillListRow(listCtrl, index, *txn, *share_entry);
+        }
+
+        // Re-sort the list
+        listCtrl->SortItems([](wxIntPtr item1, wxIntPtr item2, wxIntPtr) -> int {
+            auto date1 = Model_Checking::TRANSDATE(Model_Checking::instance().get(item1));
+            auto date2 = Model_Checking::TRANSDATE(Model_Checking::instance().get(item2));
+            return date1.IsEarlierThan(date2) ? -1 : (date1.IsLaterThan(date2) ? 1 : 0);
+        }, 0);
     });
 
-    stockTxnListCtrl->Bind(wxEVT_CHAR, [stockTxnListCtrl](wxKeyEvent& event) {
+    listCtrl->Bind(wxEVT_CHAR, [listCtrl, this](wxKeyEvent& event) {
         if (event.GetKeyCode() == WXK_CONTROL_C) {
-            if (wxTheClipboard->Open())
-            {
-                const wxString seperator = "\t";
-                wxString data = "";
-                for (int row = 0; row < stockTxnListCtrl->GetItemCount(); row++)
-                {
-                    if (stockTxnListCtrl->GetItemState(row, wxLIST_STATE_SELECTED) == wxLIST_STATE_SELECTED)
-                    {
-                        for (int column = 0; column < stockTxnListCtrl->GetColumnCount(); column++)
-                        {
-                            if (stockTxnListCtrl->GetColumnWidth(column) > 0) {
-                                data += inQuotes(stockTxnListCtrl->GetItemText(row, column), seperator);
-                                data += seperator;
-                            }
-                        }
-                        data += "\n";
-                    }
-                }
-                wxTheClipboard->SetData(new wxTextDataObject(data));
-                wxTheClipboard->Close();
-            }
-        }
-        else if (event.GetKeyCode() == WXK_CONTROL_A) {
-            for (int row = 0; row < stockTxnListCtrl->GetItemCount(); row++)
-                stockTxnListCtrl->SetItemState(row, wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED);
+            CopySelectedRowsToClipboard(listCtrl);
+        } else if (event.GetKeyCode() == WXK_CONTROL_A) {
+            for (int row = 0; row < listCtrl->GetItemCount(); row++)
+                listCtrl->SetItemState(row, wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED);
         }
     });
+}
 
-    wxSizer* buttonSizer = dlg.CreateSeparatedButtonSizer(wxOK);
-    if (buttonSizer)
-    {
-        topsizer->Add(buttonSizer, wxSizerFlags().Expand().DoubleBorder(wxLEFT | wxRIGHT | wxBOTTOM));
+// Copy selected rows to the clipboard
+void mmStocksPanel::CopySelectedRowsToClipboard(wxListCtrl* listCtrl)
+{
+    if (!wxTheClipboard->Open()) return;
+
+    wxString data;
+    const wxString separator = "\t";
+
+    for (int row = 0; row < listCtrl->GetItemCount(); row++) {
+        if (listCtrl->GetItemState(row, wxLIST_STATE_SELECTED) != wxLIST_STATE_SELECTED)
+            continue;
+
+        for (int col = 0; col < listCtrl->GetColumnCount(); col++) {
+            if (listCtrl->GetColumnWidth(col) > 0) {
+                data += listCtrl->GetItemText(row, col) + separator;
+            }
+        }
+        data += "\n";
     }
-    dlg.SetSizerAndFit(topsizer);
-    dlg.SetInitialSize(wxSize(470, -1));
-    dlg.Center();
-    dlg.ShowModal();
-    RefreshList();
+
+    wxTheClipboard->SetData(new wxTextDataObject(data));
+    wxTheClipboard->Close();
 }
 
 wxString mmStocksPanel::GetPanelTitle(const Model_Account::Data& account) const
 {
-    return wxString::Format(_("Stock Portfolio: %s"), account.ACCOUNTNAME);
+    return wxString::Format(_t("Stock Portfolio: %s"), account.ACCOUNTNAME);
 }
 
 wxString mmStocksPanel::BuildPage() const
 { 
     const Model_Account::Data* account = Model_Account::instance().get(m_account_id);
-    return listCtrlAccount_->BuildPage((account ? GetPanelTitle(*account) : ""));
+    return m_lc->BuildPage((account ? GetPanelTitle(*account) : ""));
 }
 
 const wxString mmStocksPanel::Total_Shares()
@@ -346,7 +391,7 @@
 void mmStocksPanel::updateHeader()
 {
     const Model_Account::Data* account = Model_Account::instance().get(m_account_id);
-    double initVal = 0;
+    double cashBalance = 0;
     // + Transfered from other accounts - Transfered to other accounts
 
     //Get Stock Investment Account Balance as Init Amount + sum (Value) - sum (Purchase Price)
@@ -354,22 +399,22 @@
     if (account)
     {
         header_text_->SetLabelText(GetPanelTitle(*account));
-        //Get Init Value of the account
-        initVal = account->INITIALBAL;
+        cashBalance = Model_Account::balance(account);
         investment_balance = Model_Account::investment_balance(account);
     }
-    double originalVal = investment_balance.second;
-    double total = investment_balance.first; 
 
-    const wxString& diffStr = Model_Currency::toCurrency(total > originalVal ? total - originalVal : originalVal - total, m_currency);
-    double diffPercents = originalVal != 0.0
-        ? (total > originalVal ? total / originalVal*100.0 - 100.0 : -(total / originalVal*100.0 - 100.0))
+    auto [marketValue, InvestedVal] = investment_balance;
+
+    const wxString& diffStr = Model_Currency::toCurrency(marketValue > InvestedVal ? marketValue - InvestedVal : InvestedVal - marketValue, m_currency);
+    double diffPercents = InvestedVal != 0.0
+        ? (marketValue > InvestedVal ? marketValue / InvestedVal*100.0 - 100.0 : -(marketValue / InvestedVal*100.0 - 100.0))
         : 0.0;
-    const wxString lbl = wxString::Format("%s     %s     %s     %s (%s %%)"
-        , wxString::Format(_("Total Shares: %s"), Total_Shares())
-        , wxString::Format(_("Total: %s"), Model_Currency::toCurrency(total + initVal, m_currency))
-        , wxString::Format(_("Invested: %s"), Model_Currency::toCurrency(originalVal, m_currency))
-        , wxString::Format(total > originalVal ? _("Gain: %s") : _("Loss: %s"), diffStr)
+    const wxString lbl = wxString::Format("%s     %s     %s     %s     %s (%s %%)"
+        , wxString::Format(_t("Total: %s"), Model_Currency::toCurrency(marketValue + cashBalance, m_currency))
+        , wxString::Format(_t("Cash Balance: %s"), Model_Currency::toCurrency(cashBalance, m_currency))
+        , wxString::Format(_t("Market Value: %s"), Model_Currency::toCurrency(marketValue, m_currency))
+        , wxString::Format(_t("Invested: %s"), Model_Currency::toCurrency(InvestedVal, m_currency))
+        , wxString::Format(marketValue > InvestedVal ? _t("Gain: %s") : _t("Loss: %s"), diffStr)
         , Model_Currency::toString(diffPercents, m_currency, 2));
 
     header_total_->SetLabelText(lbl);
@@ -378,27 +423,27 @@
 
 void mmStocksPanel::OnDeleteStocks(wxCommandEvent& event)
 {
-    listCtrlAccount_->OnDeleteStocks(event);
+    m_lc->OnDeleteStocks(event);
 }
 
 void mmStocksPanel::OnMoveStocks(wxCommandEvent& event)
 {
-    listCtrlAccount_->OnMoveStocks(event);
+    m_lc->OnMoveStocks(event);
 }
 
 void mmStocksPanel::OnNewStocks(wxCommandEvent& event)
 {
-    listCtrlAccount_->OnNewStocks(event);
+    m_lc->OnNewStocks(event);
 }
 
 void mmStocksPanel::OnEditStocks(wxCommandEvent& event)
 {
-    listCtrlAccount_->OnEditStocks(event);
+    m_lc->OnEditStocks(event);
 }
 
 void mmStocksPanel::OnOpenAttachment(wxCommandEvent& event)
 {
-    listCtrlAccount_->OnOpenAttachment(event);
+    m_lc->OnOpenAttachment(event);
 }
 
 void mmStocksPanel::OnRefreshQuotes(wxCommandEvent& WXUNUSED(event))
@@ -407,9 +452,9 @@
     bool ok = onlineQuoteRefresh(sError);
     if (ok)
     {
-        const wxString header = _("Stock prices successfully updated");
+        const wxString header = _t("Stock prices successfully updated");
         stock_details_->SetLabelText(header);
-        stock_details_short_->SetLabelText(wxString::Format(_("Last updated %s"), strLastUpdate_));
+        stock_details_short_->SetLabelText(wxString::Format(_t("Last updated %s"), strLastUpdate_));
         wxMessageDialog msgDlg(this, sError, header);
         msgDlg.ShowModal();
         refresh_button_->SetBitmapLabel(mmBitmapBundle(png::LED_GREEN, mmBitmapButtonSize));
@@ -418,8 +463,8 @@
     {
         refresh_button_->SetBitmapLabel(mmBitmapBundle(png::LED_RED, mmBitmapButtonSize));
         stock_details_->SetLabelText(sError);
-        stock_details_short_->SetLabelText(_("Error"));
-        mmErrorDialogs::MessageError(this, sError, _("Error"));
+        stock_details_short_->SetLabelText(_t("Error"));
+        mmErrorDialogs::MessageError(this, sError, _t("Error"));
     }
 }
 
@@ -429,13 +474,13 @@
     wxString base_currency_symbol;
     if (!Model_Currency::GetBaseCurrencySymbol(base_currency_symbol))
     {
-        msg = _("Unable to find base currency symbol!");
+        msg = _t("Unable to find base currency symbol!");
         return false;
     }
 
-    if (listCtrlAccount_->m_stocks.empty())
+    if (m_lc->m_stocks.empty())
     {
-        msg = _("Nothing to update");
+        msg = _t("Nothing to update");
         return false;
     }
 
@@ -449,7 +494,7 @@
     }
 
     refresh_button_->SetBitmapLabel(mmBitmapBundle(png::LED_YELLOW, mmBitmapButtonSize));
-    stock_details_->SetLabelText(_u("Connecting…"));
+    stock_details_->SetLabelText(_tu("Connecting…"));
 
     std::map<wxString, double > stocks_data;
     bool ok = get_yahoo_prices(symbols, stocks_data, base_currency_symbol, msg, yahoo_price_type::SHARES);
@@ -483,7 +528,7 @@
 
     for (const auto& entry : nonYahooSymbols)
     {
-        msg += wxString::Format("%s\t: %s\n", entry.first, _("Missing"));
+        msg += wxString::Format("%s\t: %s\n", entry.first, _t("Missing"));
     }
 
     // Now refresh the display
@@ -493,9 +538,9 @@
     LastRefreshDT_ = wxDateTime::Now();
     StocksRefreshStatus_ = true;
 
-    strLastUpdate_.Printf(_("%1$s on %2$s"), LastRefreshDT_.FormatTime()
+    strLastUpdate_.Printf(_t("%1$s on %2$s"), LastRefreshDT_.FormatTime()
         , mmGetDateTimeForDisplay(LastRefreshDT_.FormatISODate()));
-    Model_Infotable::instance().Set("STOCKS_LAST_REFRESH_DATETIME", strLastUpdate_);
+    Model_Infotable::instance().setString("STOCKS_LAST_REFRESH_DATETIME", strLastUpdate_);
 
     return true;
 }
@@ -505,7 +550,7 @@
     enableEditDeleteButtons(selectedIndex >= 0);
     if (selectedIndex >= 0)
     {
-        const wxString additionInfo = listCtrlAccount_->getStockInfo(selectedIndex);
+        const wxString additionInfo = m_lc->getStockInfo(selectedIndex);
         stock_details_->SetLabelText(additionInfo);
     }
 }
@@ -537,7 +582,7 @@
     double stockDifference = stockCurrentPrice - stockPurchasePrice;
 
     double stocktotalDifference = stockCurrentPrice - stockavgPurchasePrice;
-    //Commision don't calculates here
+    // Commission don't calculates here
     const wxString& stockPercentage = (stockPurchasePrice != 0.0)
         ? wxString::Format("(%s %%)", Model_Currency::toStringNoFormatting(
             ((stockCurrentPrice / stockPurchasePrice - 1.0) * 100.0), nullptr, 2))
@@ -553,8 +598,8 @@
 
     wxString miniInfo = "";
     if (m_stocks[selectedIndex].SYMBOL != "")
-        miniInfo << "\t" << wxString::Format(_("Symbol: %s"), m_stocks[selectedIndex].SYMBOL) << "\t\t";
-    miniInfo << wxString::Format(_("Total: %s"), " (" + sTotalNumShares + ") ");
+        miniInfo << "\t" << wxString::Format(_t("Symbol: %s"), m_stocks[selectedIndex].SYMBOL) << "\t\t";
+    miniInfo << wxString::Format(_t("Total: %s"), " (" + sTotalNumShares + ") ");
     m_stock_panel->stock_details_short_->SetLabelText(miniInfo);
 
     //Selected share info
@@ -572,7 +617,7 @@
             , sTotalDifference, sTotalNumShares
             , Model_Currency::toCurrency(stocktotalgainloss)
             , Model_Currency::toStringNoFormatting(stocktotalPercentage, nullptr, 2)
-            , OnGetItemText(selectedIndex, static_cast<long>(COL_NOTES)));
+            , OnGetItemText(selectedIndex, static_cast<long>(LIST_ID_NOTES)));
     }
     return additionInfo;
 }
@@ -594,17 +639,17 @@
     if (!en)
     {
         if (Option::instance().getShowMoneyTips())
-            stock_details_->SetLabelText(_(STOCKTIPS[rand() % (sizeof(STOCKTIPS) / sizeof(wxString))]));
-        stock_details_short_->SetLabelText(wxString::Format(_("Last updated %s"), strLastUpdate_));
+            stock_details_->SetLabelText(wxGetTranslation(STOCKTIPS[rand() % (sizeof(STOCKTIPS) / sizeof(wxString))]));
+        stock_details_short_->SetLabelText(wxString::Format(_t("Last updated %s"), strLastUpdate_));
     }
 }
 
 void mmStocksPanel::call_dialog(int selectedIndex)
 {
-    Model_Stock::Data* stock = &listCtrlAccount_->m_stocks[selectedIndex];
-    mmStockDialog dlg(this, m_frame, stock, m_account_id);
+    Model_Stock::Data* stock = &m_lc->m_stocks[selectedIndex];
+    mmStockDialog dlg(this, stock, m_account_id);
     dlg.ShowModal();
-    listCtrlAccount_->doRefreshItems(dlg.m_stock_id);
+    m_lc->doRefreshItems(dlg.m_stock_id);
 }
 
 void mmStocksPanel::DisplayAccountDetails(int64 accountID)
@@ -617,15 +662,20 @@
 
     updateHeader();
     enableEditDeleteButtons(false);
-    listCtrlAccount_->initVirtualListControl();
+    m_lc->initVirtualListControl();
 
 }
 
 void mmStocksPanel::RefreshList()
 {
     int64 selected_id = -1;
-    if (listCtrlAccount_->get_selectedIndex() > -1)
-        selected_id = listCtrlAccount_->m_stocks[listCtrlAccount_->get_selectedIndex()].STOCKID;
-    listCtrlAccount_->doRefreshItems(selected_id);
+    if (m_lc->get_selectedIndex() > -1)
+        selected_id = m_lc->m_stocks[m_lc->get_selectedIndex()].STOCKID;
+    m_lc->doRefreshItems(selected_id);
+}
+
+int mmStocksPanel::getFilter()
+{
+    return m_choiceFilter->GetSelection();
 }
 
diff -Naur a/src/stockspanel.h b/src/stockspanel.h
--- a/src/stockspanel.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/stockspanel.h	2025-07-09 01:46:59.680940697 +0200
@@ -23,11 +23,11 @@
 
 #include "stocks_list.h"
 #include "mmpanelbase.h"
-#include <wx/tglbtn.h>
+#include "model/Model_Shareinfo.h"
 #include "mmframe.h"
 
 class wxListEvent;
-class mmStocksPanel;
+class Model_Shareinfo;
 
 class mmStocksPanel : public mmPanelBase
 {
@@ -66,6 +66,11 @@
     //void OnViewPopupSelected(wxCommandEvent& event);
 
     void ViewStockTransactions(int selectedIndex);
+    wxListCtrl* InitStockTxnListCtrl(wxWindow* parent);
+    void LoadStockTransactions(wxListCtrl* listCtrl, int64 stockId);
+    void FillListRow(wxListCtrl* listCtrl, long index, const Model_Checking::Data& txn, const Model_Shareinfo::Data& share_entry);
+    void BindListEvents(wxListCtrl* listCtrl);
+    void CopySelectedRowsToClipboard(wxListCtrl* listCtrl);
 
     int64 m_account_id = -1;
     Model_Currency::Data * m_currency = nullptr;
@@ -76,11 +81,15 @@
     wxString BuildPage() const;
     mmGUIFrame* m_frame;
 
+public:
+    int getFilter();
+
 private:
-    StocksListCtrl* listCtrlAccount_ = nullptr;
+    StocksListCtrl* m_lc = nullptr;
+    wxChoice* m_choiceFilter = nullptr;
     wxStaticText* stock_details_ = nullptr;
     void call_dialog(int selectedIndex);
-    void sortTable() {}
+    void sortList() {}
     const wxString Total_Shares();
 
     wxStaticText* header_text_ = nullptr;
@@ -94,7 +103,6 @@
     wxString strLastUpdate_;
     bool StocksRefreshStatus_;
     wxDateTime LastRefreshDT_;
-
 };
 
 #endif
diff -Naur a/src/tagdialog.cpp b/src/tagdialog.cpp
--- a/src/tagdialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/tagdialog.cpp	2025-07-09 01:46:59.680940697 +0200
@@ -22,7 +22,11 @@
 #include "constants.h"
 #include "paths.h"
 #include "util.h"
+#include "model/Model_Infotable.h"
+#include "model/Model_Checking.h"
+#include "model/Model_Splittransaction.h"
 #include "model/Model_Tag.h"
+#include "model/Model_Taglink.h"
 
 wxIMPLEMENT_DYNAMIC_CLASS(mmTagDialog, wxDialog);
 
@@ -43,7 +47,7 @@
 
 mmTagDialog::~mmTagDialog()
 {
-    Model_Infotable::instance().Set("TAG_DIALOG_SIZE", GetSize());
+    Model_Infotable::instance().setSize("TAG_DIALOG_SIZE", GetSize());
 }
 
 mmTagDialog::mmTagDialog(wxWindow* parent, bool isSelection, const wxArrayString& selectedTags) : isSelection_(isSelection), selectedTags_(selectedTags)
@@ -110,7 +114,7 @@
     searchPanel->SetSizer(search_sizer);
 
     searchCtrl_ = new wxSearchCtrl(searchPanel, wxID_FIND);
-    search_sizer->Add(new wxStaticText(searchPanel, wxID_STATIC, _("Search")), g_flagsH);
+    search_sizer->Add(new wxStaticText(searchPanel, wxID_STATIC, _t("Search")), g_flagsH);
     search_sizer->Add(searchCtrl_, g_flagsExpand);
 
     wxPanel* buttonsPanel = new wxPanel(this, wxID_ANY);
@@ -121,25 +125,25 @@
     wxStdDialogButtonSizer* editButtonSizer = new wxStdDialogButtonSizer;
     buttonsSizer->Add(editButtonSizer, wxSizerFlags(g_flagsV).Border(wxALL, 0).Center());
 
-    buttonAdd_ = new wxButton(buttonsPanel, wxID_ADD, _("&Add "));
+    buttonAdd_ = new wxButton(buttonsPanel, wxID_ADD, _t("&Add "));
     editButtonSizer->Add(buttonAdd_, g_flagsH);
-    mmToolTip(buttonAdd_, _("Add a new tag"));
+    mmToolTip(buttonAdd_, _t("Add a new tag"));
 
-    buttonEdit_ = new wxButton(buttonsPanel, wxID_EDIT, _("&Edit "));
+    buttonEdit_ = new wxButton(buttonsPanel, wxID_EDIT, _t("&Edit "));
     editButtonSizer->Add(buttonEdit_, g_flagsH);
     buttonEdit_->Enable(false);
-    mmToolTip(buttonEdit_, _("Edit the name of an existing tag"));
+    mmToolTip(buttonEdit_, _t("Edit the name of an existing tag"));
 
-    buttonDelete_ = new wxButton(buttonsPanel, wxID_REMOVE, _("&Delete "));
+    buttonDelete_ = new wxButton(buttonsPanel, wxID_REMOVE, _t("&Delete "));
     editButtonSizer->Add(buttonDelete_, g_flagsH);
     buttonDelete_->Enable(false);
-    mmToolTip(buttonDelete_, _("Delete an existing tag. The tag is unable to be used by existing transactions."));
+    mmToolTip(buttonDelete_, _t("Delete an existing tag. The tag is unable to be used by existing transactions."));
 
     //--------------------------
     wxStdDialogButtonSizer* dlgButtonSizer = new wxStdDialogButtonSizer();
     boxSizer->Add(dlgButtonSizer, wxSizerFlags(g_flagsV).Centre());
 
-    wxButton* itemButton24 = new wxButton(this, wxID_OK, (isSelection_ ? _("Select") : _("&OK ")));
+    wxButton* itemButton24 = new wxButton(this, wxID_OK, (isSelection_ ? _t("Select") : _t("&OK ")));
     dlgButtonSizer->Add(itemButton24, g_flagsH);
 
     wxButton* itemButton25 = new wxButton(this, wxID_CANCEL, wxGetTranslation(isSelection_ ? g_CancelLabel : g_CloseLabel));
@@ -176,15 +180,15 @@
 {
     if (name == "&" || name == "|")
     {
-        wxString errMsg = _("Invalid tag name");
-        errMsg << "\n\n" << _("Tag names may not be the '&' or '|' characters because these are reserved for filter operators");
-        wxMessageBox(errMsg, _("Tag Manager: Invalid Name"), wxOK | wxICON_ERROR);
+        wxString errMsg = _t("Invalid tag name");
+        errMsg << "\n\n" << _t("Tag names may not be the '&' or '|' characters because these are reserved for filter operators");
+        wxMessageBox(errMsg, _t("Tag Manager: Invalid Name"), wxOK | wxICON_ERROR);
         return false;
     } else if (name.Find(' ') != wxNOT_FOUND)
     {
-        wxString errMsg = _("Name contains tag delimiter.");
-        errMsg << "\n\n" << _("Tag names may not contain the space (' ') character");
-        wxMessageBox(errMsg, _("Tag Manager: Invalid Name"), wxOK | wxICON_ERROR);
+        wxString errMsg = _t("Name contains tag delimiter.");
+        errMsg << "\n\n" << _t("Tag names may not contain the space (' ') character");
+        wxMessageBox(errMsg, _t("Tag Manager: Invalid Name"), wxOK | wxICON_ERROR);
         return false;
     }
     return true;
@@ -203,11 +207,11 @@
 
 void mmTagDialog::OnAdd(wxCommandEvent& WXUNUSED(event))
 {
-    wxString prompt_msg = _("Enter the name for the new tag:");
-    wxString text = wxGetTextFromUser(prompt_msg, _("Add Tag"), "");
+    wxString prompt_msg = _t("Enter the name for the new tag:");
+    wxString text = wxGetTextFromUser(prompt_msg, _t("Add Tag"), "");
 
     while (!validateName(text))
-        text = wxGetTextFromUser(prompt_msg, _("Add Tag"), text);
+        text = wxGetTextFromUser(prompt_msg, _t("Add Tag"), text);
 
     if (text.IsEmpty())
         return;
@@ -215,7 +219,7 @@
     const auto& tags = Model_Tag::instance().find(Model_Tag::TAGNAME(text));
     if (!tags.empty())
     {
-        wxMessageBox(_("A tag with this name already exists"), _("Tag Manager: Adding Error"), wxOK | wxICON_ERROR);
+        wxMessageBox(_t("A tag with this name already exists"), _t("Tag Manager: Adding Error"), wxOK | wxICON_ERROR);
         return;
     }
 
@@ -238,11 +242,11 @@
     if (selections.IsEmpty()) return;
     old_name = tagListBox_->GetString(selections[0]); 
 
-    const wxString msg = wxString::Format(_("Enter a new name for '%s'"), old_name);
-    wxString text = wxGetTextFromUser(msg, _("Edit Tag"), old_name);
+    const wxString msg = wxString::Format(_t("Enter a new name for '%s'"), old_name);
+    wxString text = wxGetTextFromUser(msg, _t("Edit Tag"), old_name);
 
     while (!validateName(text))
-        text = wxGetTextFromUser(msg, _("Edit Tag"), text);
+        text = wxGetTextFromUser(msg, _t("Edit Tag"), text);
 
     if (text.IsEmpty() || old_name == text)
         return;
@@ -250,8 +254,8 @@
     Model_Tag::Data* tag = Model_Tag::instance().get(text);
     if (tag)
     {
-        wxString errMsg = _("A tag with this name already exists");
-        wxMessageBox(errMsg, _("Tag Manager: Editing Error"), wxOK | wxICON_ERROR);
+        wxString errMsg = _t("A tag with this name already exists");
+        wxMessageBox(errMsg, _t("Tag Manager: Editing Error"), wxOK | wxICON_ERROR);
         return;
     }
 
@@ -292,13 +296,13 @@
         int tag_used = Model_Tag::instance().is_used(tag->TAGID);
         if (tag_used == 1)
         {
-            wxMessageBox(wxString::Format(_("Tag '%s' in use"), tag->TAGNAME), _("Tag Manager: Delete Error"), wxOK | wxICON_ERROR);
+            wxMessageBox(wxString::Format(_t("Tag '%s' in use"), tag->TAGNAME), _t("Tag Manager: Delete Error"), wxOK | wxICON_ERROR);
             continue;
         }
-        wxMessageDialog msgDlg(this, wxString::Format(_("Deleted transactions exist which use tag '%s'."), tag->TAGNAME)
-                + "\n\n" + _("Deleting the tag will also automatically purge the associated deleted transactions.")
-                + "\n\n" + _("Do you wish to continue ?")
-                , _("Confirm Tag Deletion"), wxYES_NO | wxNO_DEFAULT | wxICON_WARNING);
+        wxMessageDialog msgDlg(this, wxString::Format(_t("Deleted transactions exist which use tag '%s'."), tag->TAGNAME)
+                + "\n\n" + _t("Deleting the tag will also automatically purge the associated deleted transactions.")
+                + "\n\n" + _t("Do you want to continue?")
+                , _t("Confirm Tag Deletion"), wxYES_NO | wxNO_DEFAULT | wxICON_WARNING);
         
         if (tag_used == 0 || (tag_used == -1 && msgDlg.ShowModal() == wxID_YES))
         {
@@ -306,9 +310,9 @@
             for (const auto& link : taglinks)
                 // Taglinks for deleted transactions are either TRANSACTION or TRANSACTIONSPLIT type.
                 // Remove the transactions which will delete all associated tags.
-                if (link.REFTYPE == Model_Attachment::REFTYPE_STR_TRANSACTION)
+                if (link.REFTYPE == Model_Checking::refTypeName)
                     Model_Checking::instance().remove(link.REFID);
-                else if (link.REFTYPE == Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT)
+                else if (link.REFTYPE == Model_Splittransaction::refTypeName)
                     Model_Checking::instance().remove(Model_Splittransaction::instance().get(link.REFID)->TRANSID);
             Model_Tag::instance().remove(tag->TAGID);
             tagList_.Remove(selection);
diff -Naur a/src/tagdialog.h b/src/tagdialog.h
--- a/src/tagdialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/tagdialog.h	2025-07-09 01:46:59.680940697 +0200
@@ -21,6 +21,7 @@
 #ifndef MM_EX_TAGDIALOG_H_
 #define MM_EX_TAGDIALOG_H_
 
+#include "defs.h"
 #include "wx/dialog.h"
 #include <wx/srchctrl.h>
 #include <wx/listbox.h>
@@ -42,7 +43,7 @@
 
 private:
     bool Create(wxWindow* parent, wxWindowID id = wxID_ANY,
-        const wxString& caption = _("Tag Manager"),
+        const wxString& caption = _t("Tag Manager"),
         const wxString& name = "Organize Tags",
         const wxPoint& pos = wxDefaultPosition,
         const wxSize& size = wxDefaultSize,
diff -Naur a/src/themes.cpp b/src/themes.cpp
--- a/src/themes.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/themes.cpp	2025-07-09 01:46:59.680940697 +0200
@@ -65,7 +65,7 @@
 
 void mmThemesDialog::addThemes(const wxString& themeDir, bool isSystem)
 {
-    wxString chosenTheme = Model_Setting::instance().Theme();
+    wxString chosenTheme = Model_Setting::instance().getTheme();
     wxDir directory(themeDir);
     wxLogDebug("Scanning Theme Dir [%s]", themeDir);
     if (!directory.IsOpened()) return;
@@ -128,7 +128,7 @@
 
 mmThemesDialog::~mmThemesDialog()
 {
-    Model_Infotable::instance().Set("THEMES_DIALOG_SIZE", GetSize());
+    Model_Infotable::instance().setSize("THEMES_DIALOG_SIZE", GetSize());
 }
 
 mmThemesDialog::mmThemesDialog(wxWindow *parent, const wxString &name)
@@ -140,7 +140,7 @@
 void mmThemesDialog::Create(wxWindow* parent, const wxString &name)
 {
     long style = wxCAPTION | wxCLOSE_BOX | wxRESIZE_BORDER;
-    if (!wxDialog::Create(parent, wxID_ANY, _("Theme Manager")
+    if (!wxDialog::Create(parent, wxID_ANY, _t("Theme Manager")
         , wxDefaultPosition, wxDefaultSize, style, name))
     {
         return;
@@ -186,13 +186,13 @@
     splittermain->SplitVertically(pnl1, pnl2);
 
     wxBoxSizer* bSizer02 = new wxBoxSizer(wxHORIZONTAL);
-    m_importButton = new wxButton(this, ID_DIALOG_THEME_IMPORT, _("&Import"));
+    m_importButton = new wxButton(this, ID_DIALOG_THEME_IMPORT, _t("&Import"));
     bSizer02->Add(m_importButton, 0, wxALL, 5);
-    m_deleteButton = new wxButton(this, ID_DIALOG_THEME_DELETE, _("&Delete"));
+    m_deleteButton = new wxButton(this, ID_DIALOG_THEME_DELETE, _t("&Delete"));
     bSizer02->Add(m_deleteButton, 0, wxALL, 5);
-    m_useButton = new wxButton(this, ID_DIALOG_THEME_USE, _("&Use"));
+    m_useButton = new wxButton(this, ID_DIALOG_THEME_USE, _t("&Use"));
     bSizer02->Add(m_useButton, 0, wxALL, 5);
-    m_okButton = new wxButton(this, wxID_OK, _("&Close"));
+    m_okButton = new wxButton(this, wxID_OK, _t("&Close"));
     bSizer02->Add(m_okButton, 0, wxALL, 5);
 
     bSizer0->Add(bSizer02, g_flagsCenter);
@@ -211,7 +211,7 @@
     m_themesListBox_->Clear();
     for (const auto &theme : m_themes)
         m_themesListBox_->Append(theme.name);
-    m_themesListBox_->SetStringSelection(Model_Setting::instance().Theme());
+    m_themesListBox_->SetStringSelection(Model_Setting::instance().getTheme());
     m_themesListBox_->Refresh();
     m_themesListBox_->Update();
 }
@@ -232,11 +232,11 @@
 
     // author
     j_grab = GetValueByPointerWithDefault(j_doc, "/theme/author", "");
-    const wxString& s_author = j_grab.IsString() ? wxString::FromUTF8(j_grab.GetString()) : _("Unknown");
+    const wxString& s_author = j_grab.IsString() ? wxString::FromUTF8(j_grab.GetString()) : _t("Unknown");
 
     // description
     j_grab = GetValueByPointerWithDefault(j_doc, "/theme/description", "");
-    const wxString& s_description = j_grab.IsString() ? wxString::FromUTF8(j_grab.GetString()) : _("No description available");
+    const wxString& s_description = j_grab.IsString() ? wxString::FromUTF8(j_grab.GetString()) : _t("No description available");
 
     // url
     j_grab = GetValueByPointerWithDefault(j_doc, "/theme/url", "");
@@ -282,7 +282,7 @@
 
 void mmThemesDialog::OnImport(wxCommandEvent&)
 {
-    wxString fileName = wxFileSelector(_("Choose theme file to import")
+    wxString fileName = wxFileSelector(_t("Choose theme file to import")
         , wxEmptyString, wxEmptyString, wxEmptyString
         , "MMX Theme (*.mmextheme)|*.mmextheme"
         , wxFD_FILE_MUST_EXIST | wxFD_OPEN
@@ -302,7 +302,7 @@
 
     if (wxFileExists(destFile.GetFullPath()))
     {
-        wxString existingThemeText = _("The theme already exists, do you still want to import and overwrite the existing theme?");
+        wxString existingThemeText = _t("The theme already exists. Do you want to import and overwrite the existing theme?");
         wxMessageDialog msgDlg(this, existingThemeText, destFile.GetName(),
             wxYES_NO | wxNO_DEFAULT | wxICON_EXCLAMATION);
         if (msgDlg.ShowModal() == wxID_NO)
@@ -312,8 +312,8 @@
     wxLogDebug("Theme import: Copying\n%s\nto\n%s", fileName, destFile.GetFullPath());
     if (!wxCopyFile(fileName, destFile.GetFullPath()))
     {
-        wxString copyFailedText = _("Something went wrong importing the theme");
-        wxMessageBox(copyFailedText, _("Error"), wxOK | wxICON_ERROR);
+        wxString copyFailedText = _t("Something went wrong importing the theme");
+        wxMessageBox(copyFailedText, _t("Error"), wxOK | wxICON_ERROR);
     }
 
     ReadThemes();
@@ -324,15 +324,15 @@
 void mmThemesDialog::OnDelete(wxCommandEvent&)
 {
     ThemeEntry thisTheme = getThemeEntry(m_themesListBox_->GetString(m_themesListBox_->GetSelection()));
-    wxString deletingThemeText = _("Are you sure you want to delete this theme? If you want to use it again you will need to re-import it.");
+    wxString deletingThemeText = _t("Do you want to delete the theme? If you want to use it again you will need to re-import it.");
     wxMessageDialog msgDlg(this, deletingThemeText, thisTheme.name,
         wxYES_NO | wxNO_DEFAULT | wxICON_EXCLAMATION);
     if (msgDlg.ShowModal() == wxID_YES)
     {
         if (!wxRemoveFile(thisTheme.fullPath))
         {
-            wxString deleteFailedText = _("Something went wrong when attempting to delete the theme");
-            wxMessageBox(deleteFailedText, _("Error"), wxOK | wxICON_ERROR);
+            wxString deleteFailedText = _t("Something went wrong when attempting to delete the theme");
+            wxMessageBox(deleteFailedText, _t("Error"), wxOK | wxICON_ERROR);
         }
     }
     ReadThemes();
@@ -343,12 +343,12 @@
 void mmThemesDialog::OnUse(wxCommandEvent&)
 {
     ThemeEntry thisTheme = getThemeEntry(m_themesListBox_->GetString(m_themesListBox_->GetSelection()));
-    wxString changingThemeText = _("Are you sure you want to use this theme? Please note that this will only take effect when MMEX is re-started.");
+    wxString changingThemeText = _t("Do you want to use the theme? Please note that this will only take effect when MMEX is re-started.");
     wxMessageDialog msgDlg(this, changingThemeText, thisTheme.name,
         wxYES_NO | wxNO_DEFAULT | wxICON_EXCLAMATION);
     if (msgDlg.ShowModal() == wxID_YES)
     {
-        Model_Setting::instance().SetTheme(thisTheme.name);
+        Model_Setting::instance().setTheme(thisTheme.name);
         for (auto it = begin(m_themes); it != end(m_themes); ++it)
             it->isChosen = (it->name == thisTheme.name);
     }
diff -Naur a/src/transactionsupdatedialog.cpp b/src/transactionsupdatedialog.cpp
--- a/src/transactionsupdatedialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/transactionsupdatedialog.cpp	2025-07-09 01:46:59.680940697 +0200
@@ -17,6 +17,7 @@
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  ********************************************************/
 
+#include <wx/statline.h>
 #include "categdialog.h"
 #include "constants.h"
 #include "images_list.h"
@@ -26,10 +27,11 @@
 #include "payeedialog.h"
 #include "transactionsupdatedialog.h"
 #include "validators.h"
-#include "Model_Account.h"
-#include "Model_Checking.h"
-#include "Model_Payee.h"
-#include <wx/statline.h>
+#include "model/Model_Account.h"
+#include "model/Model_Currency.h"
+#include "model/Model_CurrencyHistory.h"
+#include "model/Model_Payee.h"
+#include "model/Model_Checking.h"
 
 wxIMPLEMENT_DYNAMIC_CLASS(transactionsUpdateDialog, wxDialog);
 
@@ -119,7 +121,7 @@
     box_sizer1->Add(box_sizer2, g_flagsExpand);
     box_sizer1->Add(custom_fields_box_sizer, g_flagsExpand);
 
-    wxStaticBox* static_box = new wxStaticBox(this, wxID_ANY, _("Specify"));
+    wxStaticBox* static_box = new wxStaticBox(this, wxID_ANY, _t("Specify"));
     wxStaticBoxSizer* box_sizer_left = new wxStaticBoxSizer(static_box, wxVERTICAL);
     wxFlexGridSizer* grid_sizer = new wxFlexGridSizer(0, 2, 0, 0);
     grid_sizer->AddGrowableCol(1, 1);
@@ -127,7 +129,7 @@
     box_sizer2->Add(box_sizer_left, g_flagsExpand);
 
     // Date --------------------------------------------
-    m_date_checkbox = new wxCheckBox(this, wxID_ANY, _("Date")
+    m_date_checkbox = new wxCheckBox(this, wxID_ANY, _t("Date")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     m_dpc = new mmDatePickerCtrl(this, wxID_ANY);
     grid_sizer->Add(m_date_checkbox, g_flagsH);
@@ -137,7 +139,7 @@
     if (Option::instance().UseTransDateTime())
     {
         // Time --------------------------------------------
-        m_time_checkbox = new wxCheckBox(this, wxID_ANY, _("Time"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
+        m_time_checkbox = new wxCheckBox(this, wxID_ANY, _t("Time"), wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
         m_time_ctrl = new wxTimePickerCtrl(this, wxID_ANY);
         grid_sizer->Add(m_time_checkbox, g_flagsH);
         grid_sizer->Add(m_time_ctrl, g_flagsH);
@@ -145,13 +147,15 @@
     }
 
     // Status --------------------------------------------
-    m_status_checkbox = new wxCheckBox(this, wxID_ANY, _("Status")
+    m_status_checkbox = new wxCheckBox(this, wxID_ANY, _t("Status")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
 
     m_status_choice = new wxChoice(this, wxID_ANY
         , wxDefaultPosition, wxDefaultSize);
-    for (const auto& i : Model_Checking::STATUS_STR)
-        m_status_choice->Append(wxGetTranslation(i), new wxStringClientData(i));
+    for (int i = 0; i < Model_Checking::STATUS_ID_size; ++i) {
+        wxString status = Model_Checking::status_name(i);
+        m_status_choice->Append(wxGetTranslation(status), new wxStringClientData(status));
+    }
 
     m_status_choice->Enable(false);
     m_status_choice->Select(0);
@@ -160,15 +164,16 @@
     grid_sizer->Add(m_status_choice, g_flagsH);
 
     // Type --------------------------------------------
-    m_type_checkbox = new wxCheckBox(this, wxID_ANY, _("Type")
+    m_type_checkbox = new wxCheckBox(this, wxID_ANY, _t("Type")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
 
     m_type_choice = new wxChoice(this, ID_TRANS_TYPE
         , wxDefaultPosition, wxDefaultSize);
-    for (const auto& i : Model_Checking::TYPE_STR)
-    {
-        if (!(m_hasSplits && (Model_Checking::TYPE_STR_TRANSFER == i)))
-            m_type_choice->Append(wxGetTranslation(i), new wxStringClientData(i));
+    for (int i = 0; i < Model_Checking::TYPE_ID_size; ++i) {
+        if (!(m_hasSplits && i == Model_Checking::TYPE_ID_TRANSFER)) {
+            wxString type = Model_Checking::type_name(i);
+            m_type_choice->Append(wxGetTranslation(type), new wxStringClientData(type));
+        }
     }
     m_type_choice->Enable(false);
     m_type_choice->Select(0);
@@ -178,7 +183,7 @@
     grid_sizer->Add(m_type_choice, g_flagsH);
 
     // Amount Field --------------------------------------------
-    m_amount_checkbox = new wxCheckBox(this, wxID_ANY, _("Amount")
+    m_amount_checkbox = new wxCheckBox(this, wxID_ANY, _t("Amount")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     m_amount_checkbox->Enable(!m_hasSplits);
 
@@ -191,7 +196,7 @@
     grid_sizer->Add(m_amount_ctrl, g_flagsExpand);
 
     // Payee --------------------------------------------
-    m_payee_checkbox = new wxCheckBox(this, wxID_ANY, _("Payee")
+    m_payee_checkbox = new wxCheckBox(this, wxID_ANY, _t("Payee")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     m_payee_checkbox->Enable(!m_hasTransfers);
 
@@ -203,7 +208,7 @@
     grid_sizer->Add(cbPayee_, g_flagsExpand);
 
     // Transfer to account --------------------------------------------
-    m_transferAcc_checkbox = new wxCheckBox(this, wxID_ANY, _("Transfer To")
+    m_transferAcc_checkbox = new wxCheckBox(this, wxID_ANY, _t("Transfer To")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     m_transferAcc_checkbox->Enable(!m_hasNonTransfers);
 
@@ -215,7 +220,7 @@
     grid_sizer->Add(cbAccount_, g_flagsExpand);
 
     // Category -------------------------------------------------
-    m_categ_checkbox = new wxCheckBox(this, wxID_VIEW_DETAILS, _("Category")
+    m_categ_checkbox = new wxCheckBox(this, wxID_VIEW_DETAILS, _t("Category")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     m_categ_checkbox->Enable(!m_hasSplits);
 
@@ -226,8 +231,8 @@
     grid_sizer->Add(cbCategory_, g_flagsExpand);
 
     // Tags ------------------------------------------------------
-    tag_checkbox_ = new wxCheckBox(this, wxID_ANY, _("Tags"));
-    tag_append_checkbox_ = new wxCheckBox(this, wxID_ANY, _("Append"));
+    tag_checkbox_ = new wxCheckBox(this, wxID_ANY, _t("Tags"));
+    tag_append_checkbox_ = new wxCheckBox(this, wxID_ANY, _t("Append"));
     tag_append_checkbox_->SetValue(true);
     tag_append_checkbox_->Enable(false);
 
@@ -239,18 +244,18 @@
     grid_sizer->Add(tagTextCtrl_, g_flagsExpand);
 
     // Colours --------------------------------------------
-    m_color_checkbox = new wxCheckBox(this, wxID_VIEW_DETAILS, _("Color")
+    m_color_checkbox = new wxCheckBox(this, wxID_VIEW_DETAILS, _t("Color")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     bColours_ = new mmColorButton(this, wxID_HIGHEST, cbCategory_->GetSize());
-    mmToolTip(bColours_, _("User Colors"));
+    mmToolTip(bColours_, _t("User Colors"));
     grid_sizer->Add(m_color_checkbox, g_flagsH);
     grid_sizer->Add(bColours_, g_flagsExpand);
     bColours_->Enable(false);
 
     // Notes --------------------------------------------
-    m_notes_checkbox = new wxCheckBox(this, wxID_ANY, _("Notes")
+    m_notes_checkbox = new wxCheckBox(this, wxID_ANY, _t("Notes")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    m_append_checkbox = new wxCheckBox(this, wxID_ANY, _("Append")
+    m_append_checkbox = new wxCheckBox(this, wxID_ANY, _t("Append")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     m_append_checkbox->SetValue(true);
 
@@ -273,14 +278,14 @@
     wxStdDialogButtonSizer* button_sizer = new wxStdDialogButtonSizer;
     button_panel->SetSizer(button_sizer);
 
-    wxButton* button_ok = new wxButton(button_panel, wxID_OK, _("&OK "));
+    wxButton* button_ok = new wxButton(button_panel, wxID_OK, _t("&OK "));
     wxButton* button_cancel = new wxButton(button_panel
         , wxID_CANCEL, wxGetTranslation(g_CancelLabel));
     button_cancel->SetFocus();
 
     wxBitmapButton* button_hide = new wxBitmapButton(button_panel
         , ID_BTN_CUSTOMFIELDS, mmBitmapBundle(png::RIGHTARROW, mmBitmapButtonSize));
-    mmToolTip(button_hide, _("Show/Hide custom fields window"));
+    mmToolTip(button_hide, _t("Show/Hide custom fields window"));
     if (m_custom_fields->GetCustomFieldsCount() == 0) {
         button_hide->Hide();
     }
@@ -323,7 +328,7 @@
     {
         wxStringClientData* type_obj = static_cast<wxStringClientData*>(m_type_choice->GetClientObject(m_type_choice->GetSelection()));
         type = type_obj->GetData();
-        if (Model_Checking::TYPE_STR_TRANSFER == type)
+        if (Model_Checking::TYPE_NAME_TRANSFER == type)
         {
             if  (m_hasNonTransfers && !m_transferAcc_checkbox->IsChecked())
                 return mmErrorDialogs::InvalidAccount(m_transferAcc_checkbox, true);
@@ -342,8 +347,8 @@
 
         if (!cbPayee_->mmIsValid()) {
             wxMessageDialog msgDlg(this
-                , wxString::Format(_("You have not used this payee name before. Is the name correct?\n%s"), cbPayee_->GetValue())
-                , _("Confirm payee name")
+                , wxString::Format(_t("Payee name has not been used before. Is the name correct?\n%s"), cbPayee_->GetValue())
+                , _t("Confirm payee name")
                 , wxYES_NO | wxYES_DEFAULT | wxICON_WARNING);
             if (msgDlg.ShowModal() == wxID_YES)
             {
@@ -362,7 +367,7 @@
     }
 
     if (tag_checkbox_->IsChecked() && !tagTextCtrl_->IsValid())
-        return  mmErrorDialogs::ToolTip4Object(tagTextCtrl_, _("Invalid value"), _("Tags"), wxICON_ERROR);
+        return  mmErrorDialogs::ToolTip4Object(tagTextCtrl_, _t("Invalid value"), _t("Tags"), wxICON_ERROR);
 
     if (m_transferAcc_checkbox->IsChecked())
     {
@@ -436,7 +441,7 @@
         if (m_color_checkbox->IsChecked()) {
             int color_id = bColours_->GetColorId();
             if (color_id < 0 || color_id > 7) {
-                return mmErrorDialogs::ToolTip4Object(bColours_, _("Color"), _("Invalid value"), wxICON_ERROR);
+                return mmErrorDialogs::ToolTip4Object(bColours_, _t("Color"), _t("Invalid value"), wxICON_ERROR);
             }
             trx->COLOR = color_id == 0 ? -1 : color_id ; 
         }
@@ -455,7 +460,7 @@
         // Update tags
         if (tag_checkbox_->IsChecked()) {
             Model_Taglink::Data_Set taglinks;
-            const wxString& refType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+            const wxString& refType = Model_Checking::refTypeName;
             wxArrayInt64 tagIds = tagTextCtrl_->GetTagIDs();
 
             if (tag_append_checkbox_->IsChecked()) {
@@ -532,12 +537,12 @@
     if (!skip_trx.empty())
     {
         const wxString detail = wxString::Format("%s\n%s: %zu\n%s: %zu"
-                        , _("This is due to some elements of the transaction or account detail not allowing the update")
-                        , _("Updated"), m_transaction_id.size() - skip_trx.size()
-                        , _("Not updated"), skip_trx.size());
+                        , _t("This is due to some elements of the transaction or account detail not allowing the update")
+                        , _t("Updated"), m_transaction_id.size() - skip_trx.size()
+                        , _t("Not updated"), skip_trx.size());
         mmErrorDialogs::MessageWarning(this
             , detail
-            , _("Unable to update some transactions."));
+            , _t("Unable to update some transactions."));
     }
     //TODO: enable report to detail transactions that are unable to be updated
 
@@ -547,7 +552,7 @@
 void transactionsUpdateDialog::SetPayeeTransferControls()
 {
     wxStringClientData* trans_obj = static_cast<wxStringClientData*>(m_type_choice->GetClientObject(m_type_choice->GetSelection()));
-    bool transfer = (Model_Checking::TYPE_STR_TRANSFER == trans_obj->GetData());
+    bool transfer = (Model_Checking::TYPE_NAME_TRANSFER == trans_obj->GetData());
 
     m_payee_checkbox->Enable(!transfer);
     m_transferAcc_checkbox->Enable(transfer);
diff -Naur a/src/transactionsupdatedialog.h b/src/transactionsupdatedialog.h
--- a/src/transactionsupdatedialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/transactionsupdatedialog.h	2025-07-09 01:46:59.680940697 +0200
@@ -39,7 +39,7 @@
 private:
     bool Create(wxWindow* parent
         , wxWindowID id = wxID_ANY
-        , const wxString& caption = wxTRANSLATE("Multi Transactions Update")
+        , const wxString& caption = _n("Multi Transactions Update")
         , const wxPoint& pos = wxDefaultPosition
         , const wxSize& size = wxSize(500, 300)
         , long style = wxCAPTION | wxSYSTEM_MENU | wxCLOSE_BOX);
diff -Naur a/src/transdialog.cpp b/src/transdialog.cpp
--- a/src/transdialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/transdialog.cpp	2025-07-09 01:46:59.680940697 +0200
@@ -19,6 +19,11 @@
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  ********************************************************/
 
+#include <wx/numformatter.h>
+#include <wx/timectrl.h>
+#include <wx/collpane.h>
+#include <wx/display.h>
+
 #include "transdialog.h"
 #include "mmcustomdata.h"
 #include "attachmentdialog.h"
@@ -34,20 +39,15 @@
 #include "util.h"
 #include "validators.h"
 #include "webapp.h"
-
 #include "option.h"
+
+#include "model/Model_Setting.h"
 #include "model/Model_Account.h"
-#include "model/Model_Attachment.h"
 #include "model/Model_Category.h"
 #include "model/Model_CurrencyHistory.h"
 #include "model/Model_CustomFieldData.h"
-#include "model/Model_Setting.h"
-
-#include <wx/numformatter.h>
-#include <wx/timectrl.h>
-#include <wx/collpane.h>
-#include <wx/display.h>
-
+#include "model/Model_Attachment.h"
+#include "model/Model_Tag.h"
 
 wxIMPLEMENT_DYNAMIC_CLASS(mmTransDialog, wxDialog);
 
@@ -71,7 +71,7 @@
     wxSize size = GetSize();
     if (m_custom_fields->IsCustomPanelShown())
         size = wxSize(GetSize().GetWidth() - m_custom_fields->GetMinWidth(), GetSize().GetHeight());
-    Model_Infotable::instance().Set("TRANSACTION_DIALOG_SIZE", size);
+    Model_Infotable::instance().setSize("TRANSACTION_DIALOG_SIZE", size);
 }
 
 void mmTransDialog::SetEventHandlers()
@@ -105,8 +105,8 @@
         // a bill can only be duplicated
         m_mode = (duplicate || fused_id.second) ? MODE_DUP : MODE_EDIT;
         const wxString& splitRefType = (m_fused_data.m_repeat_num == 0) ?
-            Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT :
-            Model_Attachment::REFTYPE_STR_BILLSDEPOSITSPLIT;
+            Model_Splittransaction::refTypeName :
+            Model_Budgetsplittransaction::refTypeName;
         for (const auto& split : Fused_Transaction::split(m_fused_data)) {
             wxArrayInt64 tags;
             for (const auto& tag : Model_Taglink::instance().find(
@@ -117,7 +117,7 @@
             m_local_splits.push_back({split.CATEGID, split.SPLITTRANSAMOUNT, tags, split.NOTES});
         }
 
-        if (m_mode == MODE_DUP && !Model_Setting::instance().GetBoolSetting(INIDB_USE_ORG_DATE_DUPLICATE, false))
+        if (m_mode == MODE_DUP && !Model_Setting::instance().getBool(INIDB_USE_ORG_DATE_DUPLICATE, false))
         {
             // Use the empty transaction logic to generate the new date to be used
             Model_Checking::Data emptyTrx;
@@ -128,7 +128,7 @@
     else {
         m_mode = MODE_NEW;
         Model_Checking::getEmptyData(m_fused_data, account_id);
-        m_fused_data.TRANSCODE = Model_Checking::TYPE_STR[type];
+        m_fused_data.TRANSCODE = Model_Checking::type_name(type);
     }
 
     m_transfer = Model_Checking::type_id(m_fused_data.TRANSCODE) == Model_Checking::TYPE_ID_TRANSFER;
@@ -139,9 +139,9 @@
     m_custom_fields = new mmCustomDataTransaction(this, ref_id, ID_CUSTOMFIELD);
 
     // If duplicate then we may need to copy the attachments
-    if (m_mode == MODE_DUP && Model_Infotable::instance().GetBoolInfo("ATTACHMENTSDUPLICATE", false))
+    if (m_mode == MODE_DUP && Model_Infotable::instance().getBool("ATTACHMENTSDUPLICATE", false))
     {
-        const wxString& refType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+        const wxString& refType = Model_Checking::refTypeName;
         mmAttachmentManage::CloneAllAttachments(refType, fused_id.first, -1);
     }
 
@@ -177,10 +177,10 @@
     SetEvtHandlerEnabled(false);
     CreateControls();
 
-    wxString header = (m_mode == MODE_NEW) ? _("New Transaction") :
-        (m_mode == MODE_DUP) ? _("Duplicate Transaction") :
-        m_fused_data.DELETEDTIME.IsEmpty() ? _("Edit Transaction") :
-        "";  //_("View Deleted Transaction");
+    wxString header = (m_mode == MODE_NEW) ? _t("New Transaction") :
+        (m_mode == MODE_DUP) ? _t("Duplicate Transaction") :
+        m_fused_data.DELETEDTIME.IsEmpty() ? _t("Edit Transaction") :
+        "";  //_t("View Deleted Transaction");
     SetDialogTitle(header);
 
     SetIcon(mmex::getProgramIcon());
@@ -238,16 +238,16 @@
     }
 
     if (m_transfer) {
-        account_label_->SetLabelText(_("From"));
-        payee_label_->SetLabelText(_("To"));
+        account_label_->SetLabelText(_t("From"));
+        payee_label_->SetLabelText(_t("To"));
     }
     else if (!Model_Checking::is_deposit(m_fused_data.TRANSCODE)) {
-        account_label_->SetLabelText(_("Account"));
-        payee_label_->SetLabelText(_("Payee"));
+        account_label_->SetLabelText(_t("Account"));
+        payee_label_->SetLabelText(_t("Payee"));
     }
     else {
-        account_label_->SetLabelText(_("Account"));
-        payee_label_->SetLabelText(_("From"));
+        account_label_->SetLabelText(_t("Account"));
+        payee_label_->SetLabelText(_t("From"));
     }
 
     //Advanced
@@ -281,7 +281,7 @@
             }
 
             int64 accountID = cbAccount_->mmGetId();
-            if (m_mode == MODE_NEW && Option::instance().TransPayeeSelection() == Option::LASTUSED
+            if (m_mode == MODE_NEW && Option::instance().getTransPayeeNone() == Option::LASTUSED
                 && (-1 != accountID))
             {
                 Model_Checking::Data_Set transactions = Model_Checking::instance().find(
@@ -293,19 +293,19 @@
                     cbPayee_->ChangeValue(payee->PAYEENAME);
                 }
             }
-            else if (m_mode == MODE_NEW && Option::instance().TransPayeeSelection() == Option::UNUSED)
+            else if (m_mode == MODE_NEW && Option::instance().getTransPayeeNone() == Option::UNUSED)
             {
-                Model_Payee::Data *payee = Model_Payee::instance().get(_("Unknown"));
+                Model_Payee::Data *payee = Model_Payee::instance().get(_t("Unknown"));
                 if (!payee)
                 {
                     payee = Model_Payee::instance().create();
-                    payee->PAYEENAME = _("Unknown");
+                    payee->PAYEENAME = _t("Unknown");
                     payee->ACTIVE = 1;
                     Model_Payee::instance().save(payee);
                     cbPayee_->mmDoReInitialize();
                 }
 
-                cbPayee_->ChangeValue(_("Unknown"));
+                cbPayee_->ChangeValue(_t("Unknown"));
             }
             else
             {
@@ -332,13 +332,13 @@
         bSplit_->UnsetToolTip();
         if (has_split)
         {
-            cbCategory_->ChangeValue(_("Split Transaction"));
+            cbCategory_->ChangeValue(_t("Split Transaction"));
             cbCategory_->Disable();
             m_textAmount->SetValue(Model_Splittransaction::get_total(m_local_splits));
             m_fused_data.CATEGID = -1;
         }
         else if (m_mode == MODE_NEW && m_transfer
-            && Option::instance().TransCategorySelectionTransfer() == Option::LASTUSED)
+            && Option::instance().getTransCategoryTransferNone() == Option::LASTUSED)
         {
             Model_Checking::Data_Set transactions = Model_Checking::instance().find(
                 Model_Checking::TRANSCODE(Model_Checking::TYPE_ID_TRANSFER, EQUAL));
@@ -368,8 +368,8 @@
         wxArrayInt64 tagIds;
         for (const auto& tag : Model_Taglink::instance().find(
             Model_Taglink::REFTYPE((m_fused_data.m_repeat_num == 0) ?
-                Model_Attachment::REFTYPE_STR_TRANSACTION :
-                Model_Attachment::REFTYPE_STR_BILLSDEPOSIT),
+                Model_Checking::refTypeName :
+                Model_Billsdeposits::refTypeName),
             Model_Taglink::REFID((m_fused_data.m_repeat_num == 0) ?
                 m_fused_data.TRANSID :
                 m_fused_data.m_bdid))
@@ -422,7 +422,7 @@
     box_sizer1->Add(box_sizer2, wxSizerFlags(g_flagsExpand).Border(0));
     box_sizer1->Add(box_sizer3, wxSizerFlags(g_flagsV).Expand().Border(0));
 
-    wxStaticBox* static_box = new wxStaticBox(this, wxID_ANY, _("Transaction Details"));
+    wxStaticBox* static_box = new wxStaticBox(this, wxID_ANY, _t("Transaction Details"));
     wxStaticBoxSizer* box_sizer_left = new wxStaticBoxSizer(static_box, wxVERTICAL);
     wxFlexGridSizer* flex_sizer = new wxFlexGridSizer(0, 3, 0, 0);
     flex_sizer->AddGrowableCol(1, 0);
@@ -430,7 +430,7 @@
     box_sizer2->Add(box_sizer_left, g_flagsExpand);
 
     // Date -------------------------------------------
-    wxStaticText* name_label = new wxStaticText(this, wxID_STATIC, _("Date"));
+    wxStaticText* name_label = new wxStaticText(this, wxID_STATIC, _t("Date"));
     flex_sizer->Add(name_label, g_flagsH);
     name_label->SetFont(this->GetFont().Bold());
 
@@ -442,32 +442,34 @@
     // Status --------------------------------------------
     choiceStatus_ = new wxChoice(this, ID_DIALOG_TRANS_STATUS);
 
-    for (const auto& i : Model_Checking::STATUS_STR) {
-        choiceStatus_->Append(wxGetTranslation(i), new wxStringClientData(i));
+    for (int i = 0; i < Model_Checking::STATUS_ID_size; ++i) {
+        wxString status = Model_Checking::status_name(i);
+        choiceStatus_->Append(wxGetTranslation(status), new wxStringClientData(status));
     }
 
-    flex_sizer->Add(new wxStaticText(this, wxID_STATIC, _("Status")), g_flagsH);
+    flex_sizer->Add(new wxStaticText(this, wxID_STATIC, _t("Status")), g_flagsH);
     flex_sizer->Add(choiceStatus_, g_flagsH);
     flex_sizer->AddSpacer(1);
 
     // Type --------------------------------------------
     transaction_type_ = new wxChoice(this, ID_DIALOG_TRANS_TYPE);
 
-    for (const auto& i : Model_Checking::TYPE_STR)
-    {
-        if (i != Model_Checking::TYPE_STR_TRANSFER || Model_Account::instance().all().size() > 1)
-        {
-            transaction_type_->Append(wxGetTranslation(i), new wxStringClientData(i));
+    for (int i = 0; i < Model_Checking::TYPE_ID_size; ++i) {
+        if (i != Model_Checking::TYPE_ID_TRANSFER ||
+            Model_Account::instance().all().size() > 1
+        ) {
+            wxString type = Model_Checking::type_name(i);
+            transaction_type_->Append(wxGetTranslation(type), new wxStringClientData(type));
         }
     }
 
     cAdvanced_ = new wxCheckBox(this
-        , ID_DIALOG_TRANS_ADVANCED_CHECKBOX, _("&Advanced")
+        , ID_DIALOG_TRANS_ADVANCED_CHECKBOX, _t("&Advanced")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE );
 
     wxBoxSizer* typeSizer = new wxBoxSizer(wxHORIZONTAL);
 
-    flex_sizer->Add(new wxStaticText(this, wxID_STATIC, _("Type")), g_flagsH);
+    flex_sizer->Add(new wxStaticText(this, wxID_STATIC, _t("Type")), g_flagsH);
     flex_sizer->Add(typeSizer);
     typeSizer->Add(transaction_type_, g_flagsH);
     typeSizer->Add(cAdvanced_, g_flagsH);
@@ -484,20 +486,20 @@
     amountSizer->Add(m_textAmount, g_flagsExpand);
     amountSizer->Add(toTextAmount_, g_flagsExpand);
 
-    wxStaticText* amount_label = new wxStaticText(this, wxID_STATIC, _("Amount"));
+    wxStaticText* amount_label = new wxStaticText(this, wxID_STATIC, _t("Amount"));
     amount_label->SetFont(this->GetFont().Bold());
     flex_sizer->Add(amount_label, g_flagsH);
     flex_sizer->Add(amountSizer, wxSizerFlags(g_flagsExpand).Border(0));
 
     bCalc_ = new wxBitmapButton(this, wxID_ANY, mmBitmapBundle(png::CALCULATOR, mmBitmapButtonSize));
     bCalc_->Connect(wxID_ANY, wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(mmTransDialog::OnCalculator), nullptr, this);
-    mmToolTip(bCalc_, _("Open Calculator"));
+    mmToolTip(bCalc_, _t("Open Calculator"));
     flex_sizer->Add(bCalc_, g_flagsH);
     calcTarget_ = m_textAmount;
     calcPopup_ = new mmCalculatorPopup(bCalc_, calcTarget_);
 
     // Account ---------------------------------------------
-    account_label_ = new wxStaticText(this, wxID_STATIC, _("Account"));
+    account_label_ = new wxStaticText(this, wxID_STATIC, _t("Account"));
     account_label_->SetFont(this->GetFont().Bold());
 
     cbAccount_ = new mmComboBoxAccount(this, mmID_ACCOUNTNAME, wxDefaultSize, m_fused_data.ACCOUNTID);
@@ -507,7 +509,7 @@
     flex_sizer->AddSpacer(1);
 
     // To Account ------------------------------------------------
-    to_acc_label_ = new wxStaticText(this, mmID_TOACCOUNT_LABEL, _("To"));
+    to_acc_label_ = new wxStaticText(this, mmID_TOACCOUNT_LABEL, _t("To"));
     to_acc_label_->SetFont(this->GetFont().Bold());
     flex_sizer->Add(to_acc_label_, g_flagsH);
     cbToAccount_ = new mmComboBoxAccount(this, mmID_TOACCOUNTNAME, wxDefaultSize, m_fused_data.TOACCOUNTID);
@@ -516,7 +518,7 @@
     flex_sizer->AddSpacer(1);
 
     // Payee ---------------------------------------------
-    payee_label_ = new wxStaticText(this, mmID_PAYEE_LABEL, _("Payee"));
+    payee_label_ = new wxStaticText(this, mmID_PAYEE_LABEL, _t("Payee"));
     payee_label_->SetFont(this->GetFont().Bold());
 
     cbPayee_ = new mmComboBoxPayee(this, mmID_PAYEE, wxDefaultSize, m_fused_data.PAYEEID, true);
@@ -528,13 +530,13 @@
 
     // Category -------------------------------------------------
 
-    categ_label_ = new wxStaticText(this, ID_DIALOG_TRANS_CATEGLABEL2, _("Category"));
+    categ_label_ = new wxStaticText(this, ID_DIALOG_TRANS_CATEGLABEL2, _t("Category"));
     categ_label_->SetFont(this->GetFont().Bold());
     cbCategory_ = new mmComboBoxCategory(this, mmID_CATEGORY, wxDefaultSize
         , m_fused_data.CATEGID, true);
     cbCategory_->SetMinSize(cbCategory_->GetSize());
     bSplit_ = new wxBitmapButton(this, mmID_CATEGORY_SPLIT, mmBitmapBundle(png::NEW_TRX, mmBitmapButtonSize));
-    mmToolTip(bSplit_, _("Use split Categories"));
+    mmToolTip(bSplit_, _t("Use split Categories"));
 
     flex_sizer->Add(categ_label_, g_flagsH);
     flex_sizer->Add(cbCategory_, g_flagsExpand);
@@ -542,7 +544,7 @@
 
     // Tags  ---------------------------------------------
     tagTextCtrl_ = new mmTagTextCtrl(this, ID_DIALOG_TRANS_TAGS);
-    wxStaticText* tagLabel = new wxStaticText(this, wxID_STATIC, _("Tags"));
+    wxStaticText* tagLabel = new wxStaticText(this, wxID_STATIC, _t("Tags"));
     flex_sizer->Add(tagLabel, g_flagsH);
     flex_sizer->Add(tagTextCtrl_, g_flagsExpand);
     flex_sizer->AddSpacer(1);
@@ -553,45 +555,45 @@
 
     bAuto = new wxBitmapButton(this, ID_DIALOG_TRANS_BUTTONTRANSNUM, mmBitmapBundle(png::TRXNUM, mmBitmapButtonSize));
     bAuto->Connect(ID_DIALOG_TRANS_BUTTONTRANSNUM, wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(mmTransDialog::OnAutoTransNum), nullptr, this);
-    mmToolTip(bAuto, _("Populate Transaction #"));
+    mmToolTip(bAuto, _t("Populate Transaction #"));
 
-    flex_sizer->Add(new wxStaticText(this, wxID_STATIC, _("Number")), g_flagsH);
+    flex_sizer->Add(new wxStaticText(this, wxID_STATIC, _t("Number")), g_flagsH);
     flex_sizer->Add(textNumber_, g_flagsExpand);
     flex_sizer->Add(bAuto, g_flagsH);
 
     // Frequently Used Notes
     wxButton* bFrequentUsedNotes = new wxButton(this, ID_DIALOG_TRANS_BUTTON_FREQENTNOTES
         , "...", wxDefaultPosition, bAuto->GetSize(), 0);
-    mmToolTip(bFrequentUsedNotes, _("Select one of the frequently used notes"));
+    mmToolTip(bFrequentUsedNotes, _t("Select one of the frequently used notes"));
     bFrequentUsedNotes->Connect(ID_DIALOG_TRANS_BUTTON_FREQENTNOTES
         , wxEVT_COMMAND_BUTTON_CLICKED
         , wxCommandEventHandler(mmTransDialog::OnFrequentUsedNotes), nullptr, this);
     
     // Colours
     bColours_ = new mmColorButton(this, wxID_LOWEST, bAuto->GetSize());
-    mmToolTip(bColours_, _("User Colors"));
+    mmToolTip(bColours_, _t("User Colors"));
     bColours_->SetBackgroundColor(m_fused_data.COLOR.GetValue());
 
     // Attachments
     bAttachments_ = new wxBitmapButton(this, wxID_FILE, mmBitmapBundle(png::CLIP, mmBitmapButtonSize));
-    mmToolTip(bAttachments_, _("Manage transaction attachments"));
+    mmToolTip(bAttachments_, _t("Manage transaction attachments"));
 
     // Now display the Frequently Used Notes, Colour, Attachment buttons
     wxBoxSizer* notes_sizer = new wxBoxSizer(wxHORIZONTAL);
     flex_sizer->Add(notes_sizer);
-    notes_sizer->Add(new wxStaticText(this, wxID_STATIC, _("Notes")), g_flagsH);
+    notes_sizer->Add(new wxStaticText(this, wxID_STATIC, _t("Notes")), g_flagsH);
     notes_sizer->Add(bFrequentUsedNotes, g_flagsH);
 
     wxBoxSizer* RightAlign_sizer = new wxBoxSizer(wxHORIZONTAL);
     flex_sizer->Add(RightAlign_sizer, wxSizerFlags(g_flagsH).Align(wxALIGN_RIGHT));
-    RightAlign_sizer->Add(new wxStaticText(this, wxID_STATIC, _("Color")), g_flagsH);
+    RightAlign_sizer->Add(new wxStaticText(this, wxID_STATIC, _t("Color")), g_flagsH);
     RightAlign_sizer->Add(bColours_, wxSizerFlags());
     flex_sizer->Add(bAttachments_, g_flagsH);
 
     // Notes
     textNotes_ = new wxTextCtrl(this, ID_DIALOG_TRANS_TEXTNOTES, ""
         , wxDefaultPosition, wxSize(-1, dpc_->GetSize().GetHeight() * 5), wxTE_MULTILINE);
-    mmToolTip(textNotes_, _("Specify any text notes you want to add to this transaction."));
+    mmToolTip(textNotes_, _t("Specify any text notes you want to add to this transaction."));
     box_sizer_left->Add(textNotes_, wxSizerFlags(g_flagsExpand).Border(wxLEFT | wxRIGHT | wxBOTTOM, 10));
 
     /**********************************************************************************************
@@ -603,11 +605,11 @@
     wxStdDialogButtonSizer*  buttons_sizer = new wxStdDialogButtonSizer;
     buttons_panel->SetSizer(buttons_sizer);
 
-    wxButton* button_ok = new wxButton(buttons_panel, wxID_OK, _("&OK "));
+    wxButton* button_ok = new wxButton(buttons_panel, wxID_OK, _t("&OK "));
     m_button_cancel = new wxButton(buttons_panel, wxID_CANCEL, wxGetTranslation(g_CancelLabel));
 
     wxBitmapButton* button_hide = new wxBitmapButton(buttons_panel, ID_DIALOG_TRANS_CUSTOMFIELDS, mmBitmapBundle(png::RIGHTARROW, mmBitmapButtonSize));
-    mmToolTip(button_hide, _("Show/Hide custom fields window"));
+    mmToolTip(button_hide, _t("Show/Hide custom fields window"));
     if (m_custom_fields->GetCustomFieldsCount() == 0) {
         button_hide->Hide();
     }
@@ -641,11 +643,11 @@
     if (!m_textAmount->checkValue(m_fused_data.TRANSAMOUNT))
         return false;
     if (!tagTextCtrl_->IsValid()) {
-        mmErrorDialogs::ToolTip4Object(tagTextCtrl_, _("Invalid value"), _("Tags"), wxICON_ERROR);
+        mmErrorDialogs::ToolTip4Object(tagTextCtrl_, _t("Invalid value"), _t("Tags"), wxICON_ERROR);
         return false;
     }
     if (!cbAccount_->mmIsValid()) {
-        mmErrorDialogs::ToolTip4Object(cbAccount_, _("Invalid value"), _("Account"), wxICON_ERROR);
+        mmErrorDialogs::ToolTip4Object(cbAccount_, _t("Invalid value"), _t("Account"), wxICON_ERROR);
         return false;
     }
     m_fused_data.ACCOUNTID = cbAccount_->mmGetId();
@@ -653,14 +655,14 @@
 
     if (m_fused_data.TRANSDATE < account->INITIALDATE)
     {
-        mmErrorDialogs::ToolTip4Object(cbAccount_, _("The opening date for the account is later than the date of this transaction"), _("Invalid Date"));
+        mmErrorDialogs::ToolTip4Object(cbAccount_, _t("The opening date for the account is later than the date of this transaction"), _t("Invalid Date"));
         return false;
     }
 
     if (m_local_splits.empty())
     {
         if (!cbCategory_->mmIsValid()) {
-            mmErrorDialogs::ToolTip4Object(cbCategory_, _("Invalid value"), _("Category"), wxICON_ERROR);
+            mmErrorDialogs::ToolTip4Object(cbCategory_, _t("Invalid value"), _t("Category"), wxICON_ERROR);
             return false;
         }
         m_fused_data.CATEGID = cbCategory_->mmGetCategoryId();
@@ -684,8 +686,8 @@
         if (!payee)
         {
             wxMessageDialog msgDlg( this
-                , wxString::Format(_("You have not used this payee name before. Is the name correct?\n%s"), payee_name)
-                , _("Confirm payee name")
+                , wxString::Format(_t("Payee name has not been used before. Is the name correct?\n%s"), payee_name)
+                , _t("Confirm payee name")
                 , wxYES_NO | wxYES_DEFAULT | wxICON_WARNING);
             if (msgDlg.ShowModal() == wxID_YES)
             {
@@ -705,7 +707,7 @@
             m_fused_data.TOACCOUNTID = -1;
         }
 
-        if ((Option::instance().TransCategorySelectionNonTransfer() == Option::LASTUSED)
+        if ((Option::instance().getTransCategoryNone() == Option::LASTUSED)
             && (!Model_Category::is_hidden(m_fused_data.CATEGID)))
         {
             payee->CATEGID = m_fused_data.CATEGID;
@@ -717,8 +719,7 @@
     {
         const Model_Account::Data *to_account = Model_Account::instance().get(cbToAccount_->GetValue());
 
-        if (!to_account || to_account->ACCOUNTID == m_fused_data.ACCOUNTID
-            || Model_Account::type_id(to_account) == Model_Account::TYPE_ID_INVESTMENT)
+        if (!to_account || to_account->ACCOUNTID == m_fused_data.ACCOUNTID)
         {
             mmErrorDialogs::InvalidAccount(cbToAccount_, true);
             return false;
@@ -727,7 +728,7 @@
 
         if (m_fused_data.TRANSDATE < to_account->INITIALDATE)
         {
-            mmErrorDialogs::ToolTip4Object(cbToAccount_, _("The opening date for the account is later than the date of this transaction"), _("Invalid Date"));
+            mmErrorDialogs::ToolTip4Object(cbToAccount_, _t("The opening date for the account is later than the date of this transaction"), _t("Invalid Date"));
             return false;
         }
 
@@ -744,11 +745,10 @@
     {
         if (dpc_->GetValue() <= Model_Account::DateOf(account->STATEMENTDATE))
         {
-            if (wxMessageBox(_(wxString::Format(
-                "Locked transaction to date: %s\n\n"
-                "Do you wish to continue ? "
-                , mmGetDateTimeForDisplay(account->STATEMENTDATE)))
-                , _("MMEX Transaction Check"), wxYES_NO | wxICON_WARNING) == wxNO)
+            if (wxMessageBox(wxString::Format(
+                _t("Lock transaction to date: %s") + "\n\n" + _t("Do you want to continue?")
+                , mmGetDateTimeForDisplay(account->STATEMENTDATE))
+                , _t("MMEX Transaction Check"), wxYES_NO | wxICON_WARNING) == wxNO)
             {
                 return false;
             }
@@ -759,8 +759,8 @@
     if (m_mode != MODE_EDIT)
     {
         if (m_fused_data.STATUS != Model_Checking::STATUS_KEY_VOID &&
-            (m_fused_data.TRANSCODE == Model_Checking::TYPE_STR_WITHDRAWAL ||
-             m_fused_data.TRANSCODE == Model_Checking::TYPE_STR_TRANSFER) &&
+            (m_fused_data.TRANSCODE == Model_Checking::TYPE_NAME_WITHDRAWAL ||
+             m_fused_data.TRANSCODE == Model_Checking::TYPE_NAME_TRANSFER) &&
             (account->MINIMUMBALANCE != 0 || account->CREDITLIMIT != 0))
         {
             const double fromAccountBalance = Model_Account::balance(account);
@@ -770,10 +770,9 @@
                 (account->MINIMUMBALANCE != 0 && new_value < account->MINIMUMBALANCE) ||
                 (account->CREDITLIMIT != 0 && new_value < -(account->CREDITLIMIT));
 
-            if (abort_transaction && wxMessageBox(_(
-                "This transaction will exceed your account limit.\n\n"
-                "Do you wish to continue?")
-                , _("MMEX Transaction Check"), wxYES_NO | wxICON_WARNING) == wxNO)
+            if (abort_transaction && wxMessageBox(
+                _t("The transaction will exceed the account limit.") + "\n\n" + _t("Do you want to continue?")
+                , _t("MMEX Transaction Check"), wxYES_NO | wxICON_WARNING) == wxNO)
             {
                 return false;
             }
@@ -981,21 +980,21 @@
 {
     // Only for new transactions: if user does not want to use categories.
     // If this is a Split Transaction, ignore displaying last category for payee
-    if (m_mode == MODE_NEW && Option::instance().TransCategorySelectionNonTransfer() == Option::UNUSED
+    if (m_mode == MODE_NEW && Option::instance().getTransCategoryNone() == Option::UNUSED
         && m_local_splits.empty())
     {
-        Model_Category::Data *category = Model_Category::instance().get(_("Unknown"), int64(-1));
+        Model_Category::Data *category = Model_Category::instance().get(_t("Unknown"), int64(-1));
         if (!category)
         {
             category = Model_Category::instance().create();
-            category->CATEGNAME = _("Unknown");
+            category->CATEGNAME = _t("Unknown");
             category->ACTIVE = 1;
             Model_Category::instance().save(category);
             cbCategory_->mmDoReInitialize();
         }
 
         m_fused_data.CATEGID = category->CATEGID;
-        cbCategory_->ChangeValue(_("Unknown"));
+        cbCategory_->ChangeValue(_t("Unknown"));
         return;
     }
 
@@ -1008,8 +1007,8 @@
 
     // Only for new transactions: if user want to autofill last category used for payee.
     // If this is a Split Transaction, ignore displaying last category for payee
-    if ((Option::instance().TransCategorySelectionNonTransfer() == Option::LASTUSED ||
-        Option::instance().TransCategorySelectionNonTransfer() == Option::DEFAULT)
+    if ((Option::instance().getTransCategoryNone() == Option::LASTUSED ||
+        Option::instance().getTransCategoryNone() == Option::DEFAULT)
         && m_mode == MODE_NEW && m_local_splits.empty()
         && (!Model_Category::is_hidden(payee->CATEGID)))
     {
@@ -1072,17 +1071,13 @@
         Split s;
         s.SPLITTRANSAMOUNT = m_fused_data.TRANSAMOUNT;
         s.CATEGID = cbCategory_->mmGetCategoryId();
-        tagTextCtrl_->Validate();
+        tagTextCtrl_->ValidateTagText();
         s.TAGS = tagTextCtrl_->GetTagIDs();
         s.NOTES = textNotes_->GetValue();
         m_local_splits.push_back(s);
     }
 
-    bool isDeposit = Model_Checking::is_deposit(m_fused_data.TRANSCODE);
-    mmSplitTransactionDialog dlg(this, m_local_splits
-        , m_fused_data.ACCOUNTID
-        , isDeposit ? Model_Checking::TYPE_ID_DEPOSIT : Model_Checking::TYPE_ID_WITHDRAWAL
-        , m_fused_data.TRANSAMOUNT);
+    mmSplitTransactionDialog dlg(this, m_local_splits, m_fused_data.ACCOUNTID);
 
     if (dlg.ShowModal() == wxID_OK)
     {
@@ -1116,8 +1111,8 @@
 void mmTransDialog::OnAttachments(wxCommandEvent& WXUNUSED(event))
 {
     const wxString& refType = (m_fused_data.m_repeat_num == 0) ?
-        Model_Attachment::REFTYPE_STR_TRANSACTION :
-        Model_Attachment::REFTYPE_STR_BILLSDEPOSIT;
+        Model_Checking::refTypeName :
+        Model_Billsdeposits::refTypeName;
     int64 transID = (m_mode == MODE_DUP) ? -1 : m_fused_data.TRANSID;
     mmAttachmentDialog dlg(this, refType, transID);
     dlg.ShowModal();
@@ -1196,8 +1191,8 @@
         != Model_Account::currency(Model_Account::instance().get(m_fused_data.TOACCOUNTID))))
     {
         wxMessageDialog msgDlg( this
-            , _("The two accounts have different currencies but you have not defined an advanced transaction. Is this correct?")
-            , _("Currencies are different")
+            , _t("The two accounts have different currencies, but no advanced transaction is defined. Is this correct?")
+            , _t("Currencies are different")
             , wxYES_NO | wxNO_DEFAULT | wxICON_WARNING);
         if (msgDlg.ShowModal() == wxID_NO)
             return;
@@ -1224,7 +1219,7 @@
     Model_Splittransaction::instance().update(splt, m_fused_data.TRANSID);
 
     // Save split tags
-    const wxString& splitRefType = Model_Attachment::REFTYPE_STR_TRANSACTIONSPLIT;
+    const wxString& splitRefType = Model_Splittransaction::refTypeName;
 
     for (unsigned int i = 0; i < m_local_splits.size(); i++)
     {
@@ -1239,7 +1234,7 @@
         }
         Model_Taglink::instance().update(splitTaglinks, splitRefType, splt.at(i).SPLITTRANSID);
     }
-    const wxString& RefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+    const wxString& RefType = Model_Checking::refTypeName;
     if (m_mode != MODE_EDIT) {
         mmAttachmentManage::RelocateAllAttachments(RefType, -1, RefType, m_fused_data.TRANSID);
     }
@@ -1262,7 +1257,7 @@
     Model_Checking::Full_Data trx(tran);
     wxLogDebug("%s", trx.to_json());
 
-    bool loop = Option::instance().get_bulk_transactions();
+    bool loop = Option::instance().getBulkTransactions();
     bool s = (wxGetKeyState(WXK_SHIFT) && !loop) || (!wxGetKeyState(WXK_SHIFT) && loop);
     if (m_mode == MODE_NEW && s)
         return EndModal(wxID_NEW);
@@ -1282,7 +1277,7 @@
 #endif
 
     if (m_mode != MODE_EDIT) {
-        const wxString& RefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+        const wxString& RefType = Model_Checking::refTypeName;
         mmAttachmentManage::DeleteAllAttachments(RefType, -1);
         Model_CustomFieldData::instance().DeleteAllData(RefType, -1);
     }
@@ -1294,7 +1289,7 @@
     bSplit_->UnsetToolTip();
     skip_tooltips_init_ = true;
     if (this->m_local_splits.empty())
-        mmToolTip(bSplit_, _("Use split Categories"));
+        mmToolTip(bSplit_, _t("Use split Categories"));
     else {
         const Model_Currency::Data* currency = Model_Currency::GetBaseCurrency();
         const Model_Account::Data* account = Model_Account::instance().get(m_fused_data.ACCOUNTID);
@@ -1312,35 +1307,35 @@
 
     if (m_transfer)
     {
-        mmToolTip(cbAccount_, _("Specify account the money is taken from"));
-        mmToolTip(cbPayee_, _("Specify account the money is moved to"));
-        mmToolTip(m_textAmount, _("Specify the transfer amount in the From Account."));
+        mmToolTip(cbAccount_, _t("Specify account the money is taken from"));
+        mmToolTip(cbPayee_, _t("Specify account the money is moved to"));
+        mmToolTip(m_textAmount, _t("Specify the transfer amount in the From Account."));
 
         if (m_advanced)
-            mmToolTip(toTextAmount_, _("Specify the transfer amount in the To Account"));
+            mmToolTip(toTextAmount_, _t("Specify the transfer amount in the To Account"));
     }
     else
     {
-        mmToolTip(m_textAmount, _("Specify the amount for this transaction"));
-        mmToolTip(cbAccount_, _("Specify account for the transaction"));
+        mmToolTip(m_textAmount, _t("Specify the amount for this transaction"));
+        mmToolTip(cbAccount_, _t("Specify account for the transaction"));
         if (!Model_Checking::is_deposit(m_fused_data.TRANSCODE))
-            mmToolTip(cbPayee_, _("Specify to whom the transaction is going to"));
+            mmToolTip(cbPayee_, _t("Specify to whom the transaction is going to"));
         else
-            mmToolTip(cbPayee_, _("Specify where the transaction is coming from"));
+            mmToolTip(cbPayee_, _t("Specify where the transaction is coming from"));
     }
 
     // Not dynamically changed tooltips
-    mmToolTip(dpc_, _("Specify the date of the transaction"));
-    mmToolTip(choiceStatus_, _("Specify the status for the transaction"));
-    mmToolTip(transaction_type_, _("Specify the type of transactions to be created."));
-    mmToolTip(textNumber_, _("Specify any associated check number or transaction number"));
-    mmToolTip(textNotes_, _("Specify any text notes you want to add to this transaction."));
-    mmToolTip(cAdvanced_, _("Allows the setting of different amounts in the FROM and TO accounts."));
+    mmToolTip(dpc_, _t("Specify the date of the transaction"));
+    mmToolTip(choiceStatus_, _t("Specify the status for the transaction"));
+    mmToolTip(transaction_type_, _t("Specify the type of transactions to be created."));
+    mmToolTip(textNumber_, _t("Specify any associated check number or transaction number"));
+    mmToolTip(textNotes_, _t("Specify any text notes you want to add to this transaction."));
+    mmToolTip(cAdvanced_, _t("Allows the setting of different amounts in the FROM and TO accounts."));
 }
 
 void mmTransDialog::OnQuit(wxCloseEvent& WXUNUSED(event))
 {
-    const wxString& RefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+    const wxString& RefType = Model_Checking::refTypeName;
     if (m_mode != MODE_EDIT) {
         mmAttachmentManage::DeleteAllAttachments(RefType, -1);
         Model_CustomFieldData::instance().DeleteAllData(RefType, -1);
diff -Naur a/src/transdialog.h b/src/transdialog.h
--- a/src/transdialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/transdialog.h	2025-07-09 01:46:59.680940697 +0200
@@ -53,7 +53,7 @@
 
     bool Create(wxWindow* parent
         , wxWindowID id = wxID_ANY
-        , const wxString& caption = _("Transactions Dialog")
+        , const wxString& caption = _t("Transactions Dialog")
         , const wxPoint& pos = wxDefaultPosition
         , const wxSize& size = wxDefaultSize
         , long style = wxCAPTION | wxSYSTEM_MENU | wxCLOSE_BOX
diff -Naur a/src/usertransactionpanel.cpp b/src/usertransactionpanel.cpp
--- a/src/usertransactionpanel.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/usertransactionpanel.cpp	2025-07-09 01:46:59.680940697 +0200
@@ -24,11 +24,11 @@
 #include "images_list.h"
 #include "util.h"
 
-#include "maincurrencydialog.h"
 #include "mmSimpleDialogs.h"
 #include "payeedialog.h"
 #include "categdialog.h"
 #include "attachmentdialog.h"
+#include "splittransactionsdialog.h"
 
 #include "model/allmodel.h"
 
@@ -36,8 +36,8 @@
 wxBEGIN_EVENT_TABLE(UserTransactionPanel, wxPanel)
 EVT_BUTTON(ID_TRANS_ACCOUNT_BUTTON, UserTransactionPanel::OnTransAccountButton)
 EVT_BUTTON(ID_TRANS_PAYEE_BUTTON, UserTransactionPanel::OnTransPayeeButton)
-EVT_BUTTON(ID_TRANS_CATEGORY_BUTTON, UserTransactionPanel::OnTransCategoryButton)
-EVT_MENU(wxID_ANY, UserTransactionPanel::onSelectedNote)
+EVT_BUTTON(mmID_CATEGORY_SPLIT, UserTransactionPanel::OnCategs)
+EVT_COMBOBOX(ID_TRANS_CATEGORY_COMBOBOX, UserTransactionPanel::OnTransCategoryCombobox)
 EVT_BUTTON(wxID_FILE, UserTransactionPanel::OnAttachments)
 wxEND_EVENT_TABLE()
 /*******************************************************/
@@ -48,15 +48,28 @@
 
 UserTransactionPanel::UserTransactionPanel(wxWindow *parent
     , Model_Checking::Data* checking_entry
+    , bool enable_revalue
     , wxWindowID win_id
     , const wxPoint &pos
     , const wxSize &size
     , long style, const wxString &name)
     : m_checking_entry(checking_entry)
+    , m_enable_revalue(enable_revalue)
 {
-    wxPanel::Create(parent, win_id, pos, size, style, name);
-    Create();
+    if (m_checking_entry)
+    {
+        for (const auto& split: Model_Splittransaction::instance().find(Model_Splittransaction::TRANSID(m_checking_entry->TRANSID)))
+        {
+            wxArrayInt64 tags;
+            for (const auto& tag : Model_Taglink::instance().find(Model_Taglink::REFTYPE(Model_Splittransaction::refTypeName), Model_Taglink::REFID(split.SPLITTRANSID)))
+                tags.push_back(tag.TAGID);
+            m_local_splits.push_back({split.CATEGID, split.SPLITTRANSAMOUNT, tags, split.NOTES});
+        }
+    }
+
+    Create(parent, win_id, pos, size, style, name);
     DataToControls();
+    BindEventsAndTrigger();
     Model_Usage::instance().pageview(this);
 }
 
@@ -64,8 +77,15 @@
 {
 }
 
-void UserTransactionPanel::Create()
+bool UserTransactionPanel::Create(wxWindow* parent
+    , wxWindowID win_id
+    , const wxPoint &pos
+    , const wxSize &size
+    , long style
+    , const wxString &name)
 {
+    wxPanel::Create(parent, win_id, pos, size, style, name);
+
     const wxSize std_size(230, -1);
     const wxSize std_half_size(110, -1);
 
@@ -77,50 +97,54 @@
 
     // Trans Date --------------------------------------------
     m_date_selector = new mmDatePickerCtrl(this, ID_TRANS_DATE_SELECTOR);
-    mmToolTip(m_date_selector, _("Specify the date of the transaction"));
+    mmToolTip(m_date_selector, _t("Specify the date of the transaction"));
 
     wxBoxSizer* date_sizer = new wxBoxSizer(wxHORIZONTAL);
     date_sizer->Add(m_date_selector->mmGetLayout());
 
-    transPanelSizer->Add(new wxStaticText(this, wxID_STATIC, _("Date")), g_flagsH);
+    transPanelSizer->Add(new wxStaticText(this, wxID_STATIC, _t("Date")), g_flagsH);
     transPanelSizer->Add(date_sizer);
 
     // Account ------------------------------------------------
-    transPanelSizer->Add(new wxStaticText(this, ID_TRANS_ACCOUNT_BUTTON_TEXT, _("Account")), g_flagsH);
-    m_account = new wxButton(this, ID_TRANS_ACCOUNT_BUTTON, _("Select Account")
+    transPanelSizer->Add(new wxStaticText(this, ID_TRANS_ACCOUNT_BUTTON_TEXT, _t("Account")), g_flagsH);
+    m_account = new wxButton(this, ID_TRANS_ACCOUNT_BUTTON, _t("Select Account")
         , wxDefaultPosition, std_size);
-    mmToolTip(m_account, _("Specify the associated Account that will contain this transaction"));
+    mmToolTip(m_account, _t("Specify the associated Account that will contain this transaction"));
     transPanelSizer->Add(m_account, g_flagsH);
 
     // Type --------------------------------------------
-    m_type_selector = new wxChoice(this, wxID_VIEW_DETAILS, wxDefaultPosition, std_half_size);
-    for (const auto& i : Model_Checking::TYPE_STR)
+    m_type_selector = new wxChoice(this, ID_TRANS_TYPE, wxDefaultPosition, std_half_size);
+    for (int i = 0; i < Model_Checking::TYPE_ID_size; ++i)
     {
-        if (i != Model_Checking::TYPE_STR_TRANSFER)
-            m_type_selector->Append(wxGetTranslation(i), new wxStringClientData(i));
+        if (i != Model_Checking::TYPE_ID_TRANSFER || this->m_enable_revalue)
+        {
+            wxString type = Model_Checking::trade_type_name(i);
+            m_type_selector->Append(wxGetTranslation(type), new wxStringClientData(type));
+        }
     }
 
     m_type_selector->SetSelection(Model_Checking::TYPE_ID_WITHDRAWAL);
-    mmToolTip(m_type_selector, _("Withdraw funds from or deposit funds to this Account."));
+    mmToolTip(m_type_selector, _t("Withdraw funds from or deposit funds to this Account."));
 
-    m_transfer = new wxCheckBox(this, ID_TRANS_TRANSFER, _("&Transfer")
+    // transfer indicator (refined)
+    m_transfer = new wxCheckBox(this, ID_TRANS_TRANSFER, _t("&Transfer")
         , wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
-    CheckingType(Model_Translink::AS_TRANSFER);
-    mmToolTip(m_transfer, _("Funds transfer from/to this account. Uncheck to set as Expense/Income."));
+    CheckingType(Model_Translink::AS_INCOME_EXPENSE);
+    mmToolTip(m_transfer, _t("Funds transfer from/to this account. Uncheck to set as Expense/Income."));
 
     wxBoxSizer* type_sizer = new wxBoxSizer(wxHORIZONTAL);
     type_sizer->Add(m_type_selector, g_flagsH);
     type_sizer->Add(m_transfer, g_flagsH);
 
-    transPanelSizer->Add(new wxStaticText(this, wxID_STATIC, _("Type")), g_flagsH);
+    transPanelSizer->Add(new wxStaticText(this, wxID_STATIC, _t("Type")), g_flagsH);
     transPanelSizer->Add(type_sizer);
 
     // Amount ------------------------------------------------
-    wxStaticText* entered_amount_text = new wxStaticText(this, wxID_STATIC, _("Amount"));
+    wxStaticText* entered_amount_text = new wxStaticText(this, wxID_STATIC, _t("Amount"));
     m_entered_amount = new mmTextCtrl(this, ID_TRANS_ENTERED_AMOUNT, ""
         , wxDefaultPosition, std_half_size, wxALIGN_RIGHT | wxTE_PROCESS_ENTER
         , mmCalcValidator());
-    mmToolTip(m_entered_amount, _("Specify the amount for this transaction"));
+    mmToolTip(m_entered_amount, _t("Specify the amount for this transaction"));
 
     Model_Currency::Data* currency = Model_Currency::GetBaseCurrency();
     if (m_account_id > 0)
@@ -129,7 +153,7 @@
     }
     m_trans_currency = new wxButton(this, ID_TRANS_CURRENCY_BUTTON, currency->CURRENCY_SYMBOL
         , wxDefaultPosition, std_half_size);
-    mmToolTip(m_trans_currency, _("Currency used for this transaction."));
+    mmToolTip(m_trans_currency, _t("Currency used for this transaction."));
 
     wxBoxSizer* entered_amount_sizer = new wxBoxSizer(wxHORIZONTAL);
     entered_amount_sizer->Add(m_entered_amount, g_flagsH);
@@ -142,66 +166,73 @@
     m_status_selector = new wxChoice(this, ID_TRANS_STATUS_SELECTOR
         , wxDefaultPosition, std_half_size);
 
-    for (const auto& i : Model_Checking::STATUS_STR)
+    for (int i = 0; i < Model_Checking::STATUS_ID_size; ++i)
     {
-        m_status_selector->Append(wxGetTranslation(i), new wxStringClientData(i));
+        wxString status = Model_Checking::status_name(i);
+        m_status_selector->Append(wxGetTranslation(status), new wxStringClientData(status));
     }
 
-    m_status_selector->SetSelection(Option::instance().TransStatusReconciled());
-    mmToolTip(m_status_selector, _("Specify the status for this transaction"));
+    m_status_selector->SetSelection(Model_Checking::STATUS_ID_RECONCILED);
+    mmToolTip(m_status_selector, _t("Specify the status for this transaction"));
 
-    transPanelSizer->Add(new wxStaticText(this, wxID_STATIC, _("Status")), g_flagsH);
+    transPanelSizer->Add(new wxStaticText(this, wxID_STATIC, _t("Status")), g_flagsH);
     transPanelSizer->Add(m_status_selector, g_flagsH);
 
     // Payee ------------------------------------------------
-    wxStaticText* payee_button_text = new wxStaticText(this, ID_TRANS_PAYEE_BUTTON_TEXT, _("Payee"));
-    m_payee = new wxButton(this, ID_TRANS_PAYEE_BUTTON, _("Select Payee"), wxDefaultPosition, std_size, 0);
-    mmToolTip(m_payee, _("Specify a person, Company or Organisation for this transaction."));
-    transPanelSizer->Add(payee_button_text, g_flagsH);
+    m_payee_text = new wxStaticText(this, ID_TRANS_PAYEE_BUTTON_TEXT, _t("Payee"));
+    m_payee = new wxButton(this, ID_TRANS_PAYEE_BUTTON, _t("Select Payee"), wxDefaultPosition, std_size, 0);
+    mmToolTip(m_payee, _t("Specify a person, Company or Organisation for this transaction."));
+    transPanelSizer->Add(m_payee_text, g_flagsH);
     transPanelSizer->Add(m_payee, g_flagsH);
 
     // Category ---------------------------------------------
-    wxStaticText* category_button_text = new wxStaticText(this, wxID_STATIC, _("Category"));
-    m_category = new wxButton(this, ID_TRANS_CATEGORY_BUTTON, _("Select Category")
-        , wxDefaultPosition, std_size, 0);
-    mmToolTip(m_category, _("Specify the category for this transaction"));
-
+    wxStaticText* category_button_text = new wxStaticText(this, wxID_STATIC, _t("Category"));
     transPanelSizer->Add(category_button_text, g_flagsH);
-    transPanelSizer->Add(m_category, g_flagsH);
+
+    m_category = new mmComboBoxCategory(this, ID_TRANS_CATEGORY_COMBOBOX, std_size, m_category_id, true);
+    mmToolTip(m_category, _t("Specify the category for this transaction"));
+
+    wxBitmapButton* bSplit_ = new wxBitmapButton(this, mmID_CATEGORY_SPLIT, mmBitmapBundle(png::NEW_TRX, mmBitmapButtonSize));
+    bSplit_->Hide(); // TODO
+    wxBoxSizer* split_sizer = new wxBoxSizer(wxHORIZONTAL);
+    split_sizer->Add(m_category, g_flagsH);
+    split_sizer->Add(bSplit_, g_flagsH);
+
+    transPanelSizer->Add(split_sizer, wxSizerFlags(g_flagsExpand).Border(0));
 
     // Number ---------------------------------------------
     m_entered_number = new wxTextCtrl(this, ID_TRANS_ENTERED_NUMBER, ""
         , wxDefaultPosition, std_size);
-    mmToolTip(m_entered_number, _("Specify a transaction code or associated check details"));
+    mmToolTip(m_entered_number, _t("Specify a transaction code or associated check details"));
 
-    transPanelSizer->Add(new wxStaticText(this, wxID_STATIC, _("Number")), g_flagsH);
+    transPanelSizer->Add(new wxStaticText(this, wxID_STATIC, _t("Number")), g_flagsH);
     transPanelSizer->Add(m_entered_number, g_flagsH);
 
     // Notes ---------------------------------------------
-    transPanelSizer->Add(new wxStaticText(this, wxID_STATIC, _("Notes")), g_flagsH);
+    transPanelSizer->Add(new wxStaticText(this, wxID_STATIC, _t("Notes")), g_flagsH);
 
     // Attachment ---------------------------------------------
     m_attachment = new wxBitmapButton(this, wxID_FILE, mmBitmapBundle(png::CLIP, mmBitmapButtonSize));
-    mmToolTip(m_attachment, _("Manage transaction attachments"));
+    mmToolTip(m_attachment, _t("Manage transaction attachments"));
     //TODO: m_attachment Enable/disable
     //m_attachment->Enable(false);
 
     // Frequent Notes ---------------------------------------------
-    frequent_notes = new wxButton(this, ID_TRANS_FREQUENT_NOTES, "..."
+    m_frequent_notes = new wxButton(this, ID_TRANS_FREQUENT_NOTES, "..."
         , wxDefaultPosition, wxSize(m_attachment->GetSize().GetX(), -1));
-    mmToolTip(frequent_notes, _("Select one of the frequently used notes"));
-    frequent_notes->Connect(ID_TRANS_FREQUENT_NOTES
-        , wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(UserTransactionPanel::OnFrequentNotes), nullptr, this);
+    mmToolTip(m_frequent_notes, _t("Select one of the frequently used notes"));
 
     wxBoxSizer* right_align_sizer = new wxBoxSizer(wxHORIZONTAL);
     right_align_sizer->Add(m_attachment, g_flagsH);
-    right_align_sizer->Add(frequent_notes, g_flagsH);
+    right_align_sizer->Add(m_frequent_notes, g_flagsH);
 
     m_entered_notes = new wxTextCtrl(this, ID_TRANS_ENTERED_NOTES, "", wxDefaultPosition, wxSize(220, 96), wxTE_MULTILINE);
-    mmToolTip(m_entered_notes, _("Specify any text notes you want to add to this transaction."));
+    mmToolTip(m_entered_notes, _t("Specify any text notes you want to add to this transaction."));
 
     transPanelSizer->Add(right_align_sizer, wxSizerFlags(g_flagsH).Align(wxALIGN_RIGHT).Border(wxALL, 0));
     main_panel_sizer->Add(m_entered_notes, wxSizerFlags(g_flagsExpand).Border(wxTOP, 5));
+
+    return true;
 }
 
 void UserTransactionPanel::DataToControls()
@@ -236,6 +267,15 @@
     m_entered_number->SetValue(m_checking_entry->TRANSACTIONNUMBER);
     m_entered_notes->SetValue(m_checking_entry->NOTES);
 
+    bool has_split = !(m_local_splits.size() <= 1);
+    if (has_split)
+    {
+        m_category->Enable(!has_split);
+        m_category->SetLabelText(_t("Split Transaction"));
+
+        SetTransactionValue(Model_Splittransaction::get_total(m_local_splits));
+    }
+
     if (!m_checking_entry->DELETEDTIME.IsEmpty())
     {
         m_date_selector->Enable(false);
@@ -250,13 +290,29 @@
         m_entered_number->Enable(false);
         m_attachment->Enable(false);
         m_entered_notes->Enable(false);
-        frequent_notes->Enable(false);
+        m_frequent_notes->Enable(false);
     }
 }
 
+void UserTransactionPanel::BindEventsAndTrigger()
+{
+    m_type_selector->Bind(wxEVT_CHOICE, [this](wxCommandEvent&)
+    {
+        int selection = m_type_selector->GetSelection();
+        m_payee_text->Show(selection != Model_Checking::TYPE_ID_TRANSFER);
+        m_payee->Show(selection != Model_Checking::TYPE_ID_TRANSFER);
+
+        this->Layout();
+    });
+    wxCommandEvent evt(wxEVT_CHOICE, ID_TRANS_TYPE);
+    wxPostEvent(m_type_selector, evt);
+
+    m_frequent_notes->Bind(wxEVT_BUTTON, &UserTransactionPanel::OnFrequentNotes, this);
+}
+
 void UserTransactionPanel::SetLastPayeeAndCategory(const int64 account_id)
 {
-    if (Option::instance().TransPayeeSelection() == Option::LASTUSED)
+    if (Option::instance().getTransPayeeNone() == Option::LASTUSED)
     {
         Model_Checking::Data_Set trans_list = Model_Checking::instance().find(Model_Checking::ACCOUNTID(account_id), Model_Checking::TRANSCODE(Model_Checking::TYPE_ID_TRANSFER, NOT_EQUAL));
         if (!trans_list.empty())
@@ -264,10 +320,11 @@
             int last_trans_pos = trans_list.size() - 1;
 
             Model_Payee::Data* last_payee = Model_Payee::instance().get(trans_list.at(last_trans_pos).PAYEEID);
-            if (last_payee) {
+            if (last_payee)
+            {
                 m_payee->SetLabelText(last_payee->PAYEENAME);
                 m_payee_id = last_payee->PAYEEID;
-                if ((Option::instance().TransCategorySelectionNonTransfer() == Option::LASTUSED)
+                if ((Option::instance().getTransCategoryNone() == Option::LASTUSED)
                     && (!Model_Category::is_hidden(last_payee->CATEGID)))
                 {
                     m_category_id = last_payee->CATEGID;
@@ -282,8 +339,8 @@
 {
     const auto& accounts = Model_Account::instance().all_checking_account_names();
     mmSingleChoiceDialog scd(this
-        , _("Select the required account")
-        , _("Account Selection")
+        , _t("Select the required account")
+        , _t("Account Selection")
         , accounts);
 
     if (scd.ShowModal() == wxID_OK)
@@ -304,7 +361,7 @@
             m_payee->SetLabelText(payee->PAYEENAME);
 
             // Only for new transactions: if user want to autofill last category used for payee and category has not been set.
-            if ((Option::instance().TransCategorySelectionNonTransfer() == Option::LASTUSED) && (m_category_id < 0) && (m_subcategory_id < 0)
+            if ((Option::instance().getTransCategoryNone() == Option::LASTUSED) && (m_category_id < 0) && (m_subcategory_id < 0)
                         && (!Model_Category::is_hidden(payee->CATEGID)))
             {
                 if (payee->CATEGID > 0)
@@ -317,8 +374,13 @@
     }
 }
 
-void UserTransactionPanel::OnTransCategoryButton(wxCommandEvent& WXUNUSED(event))
+void UserTransactionPanel::OnTransCategoryCombobox(wxCommandEvent& WXUNUSED(event))
 {
+    if (!m_category->GetValue().empty())
+    {
+        m_category_id = m_category->mmGetCategoryId();
+        return;
+    }
     mmCategDialog dlg(this, true, m_category_id);
     if (dlg.ShowModal() == wxID_OK)
     {
@@ -329,29 +391,29 @@
 
 void UserTransactionPanel::OnFrequentNotes(wxCommandEvent& WXUNUSED(event))
 {
-    Model_Checking::getFrequentUsedNotes(m_frequent_notes);
+    std::vector<wxString> frequent_notes;
+    Model_Checking::getFrequentUsedNotes(frequent_notes);
     wxMenu menu;
     int id = wxID_HIGHEST;
-    for (const auto& entry : m_frequent_notes)
+    for (const auto& entry : frequent_notes)
     {
         const wxString& label = entry.Mid(0, 30) + (entry.size() > 30 ? "..." : "");
-        menu.Append(++id, label);
+        int menu_id = ++id;
+        menu.Append(menu_id, label);
+        Bind(wxEVT_MENU, [this, notes = frequent_notes, i = menu_id - wxID_HIGHEST](wxCommandEvent&)
+        {
+            if (i > 0 && i <= static_cast<int>(notes.size()))
+            m_entered_notes->ChangeValue(notes[i - 1]);
+        }, menu_id);
     }
 
-    if (!m_frequent_notes.empty())
+    if (!frequent_notes.empty())
         PopupMenu(&menu);
 }
 
-void UserTransactionPanel::onSelectedNote(wxCommandEvent& event)
-{
-    int i = event.GetId() - wxID_HIGHEST;
-    if (i > 0 && i <= static_cast<int>(m_frequent_notes.size()))
-        m_entered_notes->ChangeValue(m_frequent_notes[i - 1]);
-}
-
 void UserTransactionPanel::OnAttachments(wxCommandEvent& WXUNUSED(event))
 {
-    const wxString& RefType = Model_Attachment::REFTYPE_STR_TRANSACTION;
+    const wxString& RefType = Model_Checking::refTypeName;
     int64 RefId = m_transaction_id;
 
     if (RefId < 0)
@@ -363,7 +425,7 @@
 
 bool UserTransactionPanel::ValidCheckingAccountEntry()
 {
-    return (m_account_id != -1) && (m_payee_id != -1) && (m_category_id != -1) && (!m_entered_amount->GetValue().IsEmpty());
+    return (m_account_id != -1) && (m_payee_id != -1 || TransactionType() == Model_Checking::TYPE_ID_TRANSFER) && (m_category_id != -1) && (!m_entered_amount->GetValue().IsEmpty());
 }
 
 wxDateTime UserTransactionPanel::TransactionDate()
@@ -432,23 +494,22 @@
 
 void UserTransactionPanel::CheckingType(Model_Translink::CHECKING_TYPE ct)
 {
-    m_transfer->SetValue(true);
-    if (ct == Model_Translink::AS_INCOME_EXPENSE) {
-        m_transfer->SetValue(false);
+    m_transfer->SetValue(false);
+    if (ct == Model_Translink::AS_TRANSFER) {
+        m_transfer->SetValue(true);
     }
 }
 
 int64 UserTransactionPanel::SaveChecking()
 {
     double initial_amount = 0;
-    wxDateTime trxDate = m_date_selector->GetValue();
-
     m_entered_amount->checkValue(initial_amount);
     
     const Model_Account::Data* account = Model_Account::instance().get(m_account_id);
+    wxDateTime trxDate = m_date_selector->GetValue();
     if (trxDate.FormatISODate() < account->INITIALDATE)
     {
-        mmErrorDialogs::ToolTip4Object(m_account, _("The opening date for the account is later than the date of this transaction"), _("Invalid Date"));
+        mmErrorDialogs::ToolTip4Object(m_account, _t("The opening date for the account is later than the date of this transaction"), _t("Invalid Date"));
         return -1;
     }  
 
@@ -457,10 +518,10 @@
     }
 
     m_checking_entry->ACCOUNTID = m_account_id;
-    m_checking_entry->TOACCOUNTID = CheckingType();
+    m_checking_entry->TOACCOUNTID = (TransactionType() == Model_Checking::TYPE_ID_TRANSFER || CheckingType() == Model_Translink::AS_TRANSFER)? m_account_id : -1; // Self Transfer as Revaluation
 
     m_checking_entry->PAYEEID = m_payee_id;
-    m_checking_entry->TRANSCODE = Model_Checking::TYPE_STR[TransactionType()];
+    m_checking_entry->TRANSCODE = Model_Checking::type_name(TransactionType());
     m_checking_entry->TRANSAMOUNT = initial_amount;
     m_checking_entry->STATUS = m_status_selector->GetStringSelection().Mid(0, 1);
     m_checking_entry->TRANSACTIONNUMBER = m_entered_number->GetValue();
@@ -478,3 +539,47 @@
 {
     return m_type_selector->GetSelection();
 }
+
+
+void UserTransactionPanel::OnCategs(wxCommandEvent& WXUNUSED(event))
+{
+    if (m_local_splits.empty() && m_category->mmIsValid())
+    {
+        Split s;
+
+        m_entered_amount->GetDouble(s.SPLITTRANSAMOUNT);
+
+        s.CATEGID = m_category->mmGetCategoryId();
+        s.NOTES = m_entered_notes->GetValue();
+        m_local_splits.push_back(s);
+    }
+
+    mmSplitTransactionDialog dlg(this, m_local_splits, m_account_id);
+
+    if (dlg.ShowModal() == wxID_OK)
+    {
+        m_local_splits = dlg.mmGetResult();
+
+        if (m_local_splits.size() == 1)
+        {
+            m_category->SetLabelText(Model_Category::full_name(m_local_splits[0].CATEGID));
+            m_entered_amount->SetValue(m_local_splits[0].SPLITTRANSAMOUNT);
+            m_entered_notes->SetValue(m_local_splits[0].NOTES);
+
+            m_local_splits.clear();
+        }
+
+        if (m_local_splits.empty())
+        {
+            m_category->Enable(true);
+        }
+        else
+        {
+            m_entered_amount->SetValue(Model_Splittransaction::get_total(m_local_splits));
+
+            m_category->Enable(false);
+            m_category->SetLabelText(_t("Split Transaction"));
+        }
+    }
+}
+
diff -Naur a/src/usertransactionpanel.h b/src/usertransactionpanel.h
--- a/src/usertransactionpanel.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/usertransactionpanel.h	2025-07-09 01:46:59.680940697 +0200
@@ -37,11 +37,12 @@
 
     UserTransactionPanel(wxWindow *parent
         , Model_Checking::Data* checking_entry
+        , bool enable_revalue = false
         , wxWindowID win_id = wxID_ANY
         , const wxPoint &pos = wxDefaultPosition
         , const wxSize &size = wxDefaultSize
         , long style = wxTAB_TRAVERSAL
-        , const wxString &name = "UserTransactionPanel");
+        , const wxString &name = _t("UserTransactionPanel"));
 
     ~UserTransactionPanel();
 
@@ -63,6 +64,7 @@
 
 private:
     Model_Checking::Data* m_checking_entry = nullptr;
+    bool m_enable_revalue = false;
     int64 m_transaction_id = -1;
 
     int64 m_account_id = -1;
@@ -71,16 +73,23 @@
     int64 m_subcategory_id = -1;
 
 private:
-    void Create();
+    bool Create(wxWindow* parent
+    , wxWindowID id = wxID_ANY
+    , const wxPoint &pos = wxDefaultPosition
+    , const wxSize &size = wxDefaultSize
+    , long style = wxTAB_TRAVERSAL
+    , const wxString &name = _t("UserTransactionPanel"));
+
     void DataToControls();
+    void BindEventsAndTrigger();
     void SetLastPayeeAndCategory(const int64 account_id);
 
     void OnTransAccountButton(wxCommandEvent& WXUNUSED(event));
     void OnTransPayeeButton(wxCommandEvent& WXUNUSED(event));
-    void OnTransCategoryButton(wxCommandEvent& WXUNUSED(event));
+    void OnTransCategoryCombobox(wxCommandEvent& WXUNUSED(event));
+    void OnCategs(wxCommandEvent& event);
 
     void OnFrequentNotes(wxCommandEvent& event);
-    void onSelectedNote(wxCommandEvent& event);
     void OnAttachments(wxCommandEvent& WXUNUSED(event));
 
 private:
@@ -92,14 +101,16 @@
     mmTextCtrl* m_entered_amount = nullptr;
     wxCheckBox* m_transfer = nullptr;
     wxButton* m_trans_currency = nullptr;
+    wxStaticText* m_payee_text = nullptr;
     wxButton* m_payee = nullptr;
-    wxButton* m_category = nullptr;
+    mmComboBoxCategory* m_category = nullptr;
     wxTextCtrl* m_entered_number = nullptr;
     wxTextCtrl* m_entered_notes = nullptr;
-    std::vector<wxString> m_frequent_notes;
     wxBitmapButton* m_attachment = nullptr;
-    wxButton* frequent_notes = nullptr;
- 
+    wxButton* m_frequent_notes = nullptr;
+
+    std::vector<Split> m_local_splits;
+
     enum
     {
         ID_TRANS_DATE_SELECTOR = wxID_HIGHEST + 10,
@@ -109,12 +120,14 @@
         ID_TRANS_ACCOUNT_BUTTON,
         ID_TRANS_PAYEE_BUTTON_TEXT,
         ID_TRANS_PAYEE_BUTTON,
-        ID_TRANS_CATEGORY_BUTTON,
+        ID_TRANS_CATEGORY_COMBOBOX,
         ID_TRANS_ENTERED_NUMBER,
         ID_TRANS_ENTERED_AMOUNT,
         ID_TRANS_ENTERED_NOTES,
         ID_TRANS_FREQUENT_NOTES,
         ID_TRANS_TRANSFER,
         ID_TRANS_CURRENCY_BUTTON,
+        ID_TRANS_TYPE,
+        mmID_CATEGORY_SPLIT,
     };
 };
diff -Naur a/src/util.cpp b/src/util.cpp
--- a/src/util.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/util.cpp	2025-07-09 01:46:59.684940720 +0200
@@ -24,6 +24,16 @@
 #pragma comment(lib,"wldap32.lib")
 #endif
 
+#include <map>
+#include <cwchar>
+#include <locale>
+#include <lua.hpp>
+#include <fmt/core.h>
+#include <wx/display.h>
+#include <wx/sstream.h>
+#include <wx/xml/xml.h>
+#include <wx/fs_mem.h>
+
 #include "build.h"
 #include "util.h"
 #include "constants.h"
@@ -31,91 +41,77 @@
 #include "platfdep.h"
 #include "paths.h"
 #include "validators.h"
-#include "model/Model_Currency.h"
-#include "model/Model_Infotable.h"
 #include "model/Model_Setting.h"
+#include "model/Model_Infotable.h"
+#include "model/Model_Currency.h"
 #include "model/Model_CurrencyHistory.h"
-#include <wx/display.h>
-#include <wx/sstream.h>
-#include <wx/xml/xml.h>
-#include <map>
-#include <lua.hpp>
-#include <wx/fs_mem.h>
-#include <fmt/core.h>
-#include <cwchar>
-#include <locale>
 
 using namespace rapidjson;
 
+// Return a JSON formatted string in readable form
 wxString JSON_PrettyFormated(rapidjson::Document& j_doc)
 {
     StringBuffer j_buffer;
     PrettyWriter<StringBuffer> j_writer(j_buffer);
     j_doc.Accept(j_writer);
-
     return wxString::FromUTF8(j_buffer.GetString());
 }
 
+// Returns a JSON formatted string from RapidJson DOM
 wxString JSON_Formated(rapidjson::Document& j_doc)
 {
     StringBuffer j_buffer;
     Writer<StringBuffer> j_writer(j_buffer);
     j_doc.Accept(j_writer);
-
     return wxString::FromUTF8(j_buffer.GetString());
 }
 
-//----------------------------------------------------------------------------
-
-mmTreeItemData::mmTreeItemData(int type, int64 id)
-    : type_(type)
-    , id_(id)
-    , report_(nullptr)
-{
-    stringData_ = wxString::Format("%lld", id);
-}
-
-mmTreeItemData::mmTreeItemData(int type, const wxString& data)
-    : type_(type)
-    , stringData_(data)
-    , report_(nullptr)
-{}
-
-mmTreeItemData::mmTreeItemData(int type, int64 id, const wxString& data)
-    : type_(type)
-    , id_(id)
-    , stringData_(data)
-    , report_(nullptr)
-{}
-
-mmTreeItemData::mmTreeItemData(const wxString& data, mmPrintableBase* report)
-    : type_(mmTreeItemData::REPORT)
-    , stringData_(data)
-    , report_(report)
-{
-    const wxString& n = wxString::Format("REPORT_%d", report_->getReportId());
-    const wxString& settings = Model_Infotable::instance().GetStringInfo(n, "");
-    report_->initReportSettings(settings);
-}
-
-mmTreeItemData::mmTreeItemData(mmPrintableBase* report, const wxString& data)
-    : type_(mmTreeItemData::GRM)
-    , stringData_(data)
-    , report_(report)
-{}
+// Get a value from RapidJson DOM
+Value* JSON_GetValue(Document& j_doc, const MemoryStream::Ch* name)
+{
+    if (!j_doc.HasMember(name))
+        return nullptr;
+    return &j_doc[name];
+}
 
-//----------------------------------------------------------------------------
+// Get a bool value from RapidJson DOM
+bool JSON_GetBoolValue(Document& j_doc, const MemoryStream::Ch* name, bool& value)
+{
+    if (!j_doc.HasMember(name))
+        return false;
+    Value& j_value = j_doc[name];
+    if (!j_value.IsBool())
+        return false;
+    value = j_value.GetBool();
+    return true;
+}
 
-int CaseInsensitiveCmp(const wxString &s1, const wxString &s2)
+// Get an int value from RapidJson DOM
+bool JSON_GetIntValue(Document& j_doc, const MemoryStream::Ch* name, int& value)
 {
-    return s1.CmpNoCase(s2);
+    if (!j_doc.HasMember(name))
+        return false;
+    Value& j_value = j_doc[name];
+    if (!j_value.IsInt())
+        return false;
+    value = j_value.GetInt();
+    return true;
 }
 
-int CaseInsensitiveLocaleCmp(const wxString &s1, const wxString &s2)
+// Get a string value from RapidJson DOM
+bool JSON_GetStringValue(Document& j_doc, const MemoryStream::Ch* name, wxString& value)
 {
-    return std::wcscoll(s1.Lower().wc_str(),s2.Lower().wc_str());
+    if (!j_doc.HasMember(name))
+        return false;
+    Value& j_value = j_doc[name];
+    if (!j_value.IsString())
+        return false;
+    value = wxString::FromUTF8(j_value.GetString());
+    return true;
 }
 
+//----------------------------------------------------------------------------
+
 void correctEmptyFileExt(const wxString& ext, wxString & fileName)
 {
     wxFileName tempFileName(fileName);
@@ -139,13 +135,13 @@
 
 void mmLoadColorsFromDatabase(const bool def)
     {
-    mmColors::userDefColor1 = def ? wxColour(246, 144, 144) : Model_Infotable::instance().GetColourSetting("USER_COLOR1", wxColour(246, 144, 144));
-    mmColors::userDefColor2 = def ? wxColour(229, 196, 146) : Model_Infotable::instance().GetColourSetting("USER_COLOR2", wxColour(229, 196, 146));
-    mmColors::userDefColor3 = def ? wxColour(245, 237, 149) : Model_Infotable::instance().GetColourSetting("USER_COLOR3", wxColour(245, 237, 149));
-    mmColors::userDefColor4 = def ? wxColour(186, 226, 185) : Model_Infotable::instance().GetColourSetting("USER_COLOR4", wxColour(186, 226, 185));
-    mmColors::userDefColor5 = def ? wxColour(135, 190, 219) : Model_Infotable::instance().GetColourSetting("USER_COLOR5", wxColour(135, 190, 219));
-    mmColors::userDefColor6 = def ? wxColour(172, 167, 239) : Model_Infotable::instance().GetColourSetting("USER_COLOR6", wxColour(172, 167, 239));
-    mmColors::userDefColor7 = def ? wxColour(212, 138, 215) : Model_Infotable::instance().GetColourSetting("USER_COLOR7", wxColour(212, 138, 215));
+    mmColors::userDefColor1 = def ? wxColour(246, 144, 144) : Model_Infotable::instance().getColour("USER_COLOR1", wxColour(246, 144, 144));
+    mmColors::userDefColor2 = def ? wxColour(229, 196, 146) : Model_Infotable::instance().getColour("USER_COLOR2", wxColour(229, 196, 146));
+    mmColors::userDefColor3 = def ? wxColour(245, 237, 149) : Model_Infotable::instance().getColour("USER_COLOR3", wxColour(245, 237, 149));
+    mmColors::userDefColor4 = def ? wxColour(186, 226, 185) : Model_Infotable::instance().getColour("USER_COLOR4", wxColour(186, 226, 185));
+    mmColors::userDefColor5 = def ? wxColour(135, 190, 219) : Model_Infotable::instance().getColour("USER_COLOR5", wxColour(135, 190, 219));
+    mmColors::userDefColor6 = def ? wxColour(172, 167, 239) : Model_Infotable::instance().getColour("USER_COLOR6", wxColour(172, 167, 239));
+    mmColors::userDefColor7 = def ? wxColour(212, 138, 215) : Model_Infotable::instance().getColour("USER_COLOR7", wxColour(212, 138, 215));
 }
 
 wxColour mmColors::userDefColor1;
@@ -156,21 +152,6 @@
 wxColour mmColors::userDefColor6;
 wxColour mmColors::userDefColor7;
 
-wxColour getUDColour(const int c)
-{
-    switch (c)
-    {
-    case 1: return  mmColors::userDefColor1;
-    case 2: return  mmColors::userDefColor2;
-    case 3: return  mmColors::userDefColor3;
-    case 4: return  mmColors::userDefColor4;
-    case 5: return  mmColors::userDefColor5;
-    case 6: return  mmColors::userDefColor6;
-    case 7: return  mmColors::userDefColor7;
-    }
-    return wxNullColour;
-}
-
 //*-------------------------------------------------------------------------*//
 
 //Get unread news or all news for last year
@@ -192,7 +173,9 @@
     if (RssDocument.GetRoot()->GetName() != "rss")
         return false;
 
-    const wxString news_last_read_date_str = Model_Setting::instance().GetStringSetting(INIDB_NEWS_LAST_READ_DATE, "");
+    wxLogDebug("{{{ getNewsRSS()");
+
+    const wxString news_last_read_date_str = Model_Setting::instance().getString(INIDB_NEWS_LAST_READ_DATE, "");
     wxDate news_last_read_date;
     if (!news_last_read_date.ParseISODate(news_last_read_date_str))
         news_last_read_date = wxDateTime::Today().Subtract(wxDateSpan::Year());
@@ -233,7 +216,9 @@
         RssRoot = RssRoot->GetNext();
     }
 
-    wxLogDebug("getNewsRSS: New articles = %i", static_cast<int>(WebsiteNewsList.size()));
+    wxLogDebug("New articles: %i", static_cast<int>(WebsiteNewsList.size()));
+    wxLogDebug("}}}");
+
     if (WebsiteNewsList.size() == 0)
         return false;
 
@@ -290,28 +275,6 @@
 
 //* Date Functions----------------------------------------------------------*//
 
-static const wxString MONTHS_SHORT[12] =
-{
-    wxTRANSLATE("Jan"), wxTRANSLATE("Feb"), wxTRANSLATE("Mar")
-    , wxTRANSLATE("Apr"), wxTRANSLATE("May"), wxTRANSLATE("Jun")
-    , wxTRANSLATE("Jul"), wxTRANSLATE("Aug"), wxTRANSLATE("Sep")
-    , wxTRANSLATE("Oct"), wxTRANSLATE("Nov"), wxTRANSLATE("Dec")
-};
-
-static const wxString g_days_of_week[7] =
-{
-    wxTRANSLATE("Sunday"), wxTRANSLATE("Monday"), wxTRANSLATE("Tuesday")
-    , wxTRANSLATE("Wednesday"), wxTRANSLATE("Thursday"), wxTRANSLATE("Friday")
-    , wxTRANSLATE("Saturday")
-};
-
-static const wxString g_short_days_of_week[7] =
-{
-    wxTRANSLATE("Sun"), wxTRANSLATE("Mon"), wxTRANSLATE("Tue")
-    , wxTRANSLATE("Wed"), wxTRANSLATE("Thu"), wxTRANSLATE("Fri")
-    , wxTRANSLATE("Sat")
-};
-
 const wxString mmGetDateTimeForDisplay(const wxString &datetime_iso, const wxString& format)
 {
     // ISO Date to formatted string lookup table.
@@ -337,8 +300,7 @@
     }
 
     // If datetime_iso is in cache, return the stored formatted string.
-    auto it = cache.find(datetime_iso);
-    if (it != cache.end())
+    if (auto it = cache.find(datetime_iso); it != cache.end())
         return it->second;
 
     // Format date.
@@ -397,8 +359,7 @@
     wxString date_iso = datetime_iso.Left(10);
 
     // If date_iso is in cache, return the stored formatted string.
-    auto it = cache.find(date_iso);
-    if (it != cache.end())
+    if (auto it = cache.find(date_iso); it != cache.end())
         return it->second;
 
     // Format date.
@@ -436,8 +397,7 @@
     wxString mask_str = sDateMask;
 
     static std::unordered_map<wxString, wxDate> cache;
-    const auto it = cache.find(str_date);
-    if (it != cache.end())
+    if (const auto it = cache.find(str_date); it != cache.end())
     {
         date = it->second;
         return true;
@@ -521,37 +481,17 @@
     return false;
 }
 
-bool mmParseISODate(const wxString& in, wxDateTime& out)
-{
-    if (in.IsEmpty() || !(out.ParseDateTime(in) || out.ParseDate(in))) {
-        out = wxDateTime::Today();
-        return false;
-    }
-    int year = out.GetYear();
-    if (year < 50)
-        out.Add(wxDateSpan::Years(2000));
-    else if (year < 100)
-        out.Add(wxDateSpan::Years(1900));
-    return true;
-}
-
 const wxDateTime getUserDefinedFinancialYear(const bool prevDayRequired)
 {
-    long monthNum;
-    Option::instance().FinancialYearStartMonth().ToLong(&monthNum);
-
-    if (monthNum > 0) //Test required for compatability with previous version
-        monthNum--;
-
+    int day = Option::instance().getFinancialFirstDay();
+    wxDateTime::Month month = Option::instance().getFinancialFirstMonth();
     int year = wxDate::GetCurrentYear();
-    if (wxDate::GetCurrentMonth() < monthNum) year--;
 
-    int dayNum = wxAtoi(Option::instance().FinancialYearStartDay());
+    if (wxDate::GetCurrentMonth() < month) year--;
+    if (day < 1 || day > wxDateTime::GetNumberOfDays(month, year))
+        day = 1;
 
-    if (dayNum <= 0 || dayNum > wxDateTime::GetNumberOfDays(static_cast<wxDateTime::Month>(monthNum), year))
-        dayNum = 1;
-
-    wxDateTime financialYear(dayNum, static_cast<wxDateTime::Month>(monthNum), year);
+    wxDateTime financialYear(day, month, year);
     if (prevDayRequired)
         financialYear.Subtract(wxDateSpan::Day());
     return financialYear;
@@ -676,16 +616,16 @@
 }
 
 const std::map<int, std::pair<wxConvAuto, wxString> > g_encoding = {
-    { 0, { wxConvAuto(wxFONTENCODING_SYSTEM), wxTRANSLATE("Default") } }
-    , { 1, { wxConvAuto(wxFONTENCODING_UTF8), "UTF-8" } }
-    , { 2, { wxConvAuto(wxFONTENCODING_CP1250), "1250" } }
-    , { 3, { wxConvAuto(wxFONTENCODING_CP1251), "1251" } }
-    , { 4, { wxConvAuto(wxFONTENCODING_CP1252), "1252" } }
-    , { 5, { wxConvAuto(wxFONTENCODING_CP1253), "1253" } }
-    , { 6, { wxConvAuto(wxFONTENCODING_CP1254), "1254" } }
-    , { 7, { wxConvAuto(wxFONTENCODING_CP1255), "1255" } }
-    , { 8, { wxConvAuto(wxFONTENCODING_CP1256), "1256" } }
-    , { 9, { wxConvAuto(wxFONTENCODING_CP1257), "1257" } }
+    { 0, { wxConvAuto(wxFONTENCODING_SYSTEM), _n("Default") } },
+    { 1, { wxConvAuto(wxFONTENCODING_UTF8),   "UTF-8" } },
+    { 2, { wxConvAuto(wxFONTENCODING_CP1250), "1250" } },
+    { 3, { wxConvAuto(wxFONTENCODING_CP1251), "1251" } },
+    { 4, { wxConvAuto(wxFONTENCODING_CP1252), "1252" } },
+    { 5, { wxConvAuto(wxFONTENCODING_CP1253), "1253" } },
+    { 6, { wxConvAuto(wxFONTENCODING_CP1254), "1254" } },
+    { 7, { wxConvAuto(wxFONTENCODING_CP1255), "1255" } },
+    { 8, { wxConvAuto(wxFONTENCODING_CP1256), "1256" } },
+    { 9, { wxConvAuto(wxFONTENCODING_CP1257), "1257" } }
 };
 
 wxString cleanseNumberString(const wxString& str,const bool decimal)
@@ -747,7 +687,7 @@
 
     if (!Model_Currency::GetBaseCurrencySymbol(base_currency_symbol))
     {
-        msg = _("Unable to find base currency symbol!");
+        msg = _t("Unable to find base currency symbol!");
         return false;
     }
 
@@ -771,7 +711,7 @@
 
     if (fiat.empty())
     {
-        msg = _("Nothing to update");
+        msg = _t("Nothing to update");
         return false;
     }
 
@@ -804,22 +744,22 @@
     }
 
     const auto b = Model_Currency::GetBaseCurrency();
-    msg << _("Currency rates have been updated");
+    msg << _t("Currency rates have been updated");
     msg << "\n\n";
     for (const auto & item : fiat)
     {
-        const wxString value0_str(fmt::format("{:>{}}", Model_Currency::toString(item.second, b, 4).mb_str(), 20));
-        const wxString symbol(fmt::format("{:<{}}", item.first.mb_str(), 10));
+        const wxString value0_str(fmt::format("{:>{}}", fmt::string_view(Model_Currency::toString(item.second, b, 4).mb_str()), 20));
+        const wxString symbol(fmt::format("{:<{}}", fmt::string_view(item.first.mb_str()), 10));
 
         if (currency_data.find(item.first) != currency_data.end())
         {
             auto value1 = currency_data[item.first];
-            const wxString value1_str(fmt::format("{:>{}}", Model_Currency::toString(value1, b, 4).mb_str(), 20));
+            const wxString value1_str(fmt::format("{:>{}}", fmt::string_view(Model_Currency::toString(value1, b, 4).mb_str()), 20));
             msg << wxString::Format("%s\t%s\t\t%s\n", symbol, value0_str, value1_str);
         }
         else
         {
-            msg << wxString::Format("%s\t%s\t\t%s\n", symbol, value0_str, _("Invalid value"));
+            msg << wxString::Format("%s\t%s\t\t%s\n", symbol, value0_str, _t("Invalid value"));
         }
     }
 
@@ -836,7 +776,7 @@
             double new_rate = currency_data[currency_symbol];
             if (new_rate > 0)
             {
-                if(Option::instance().getCurrencyHistoryEnabled())
+                if(Option::instance().getUseCurrencyHistory())
                     Model_CurrencyHistory::instance().addUpdate(currency.CURRENCYID, today, new_rate, Model_CurrencyHistory::ONLINE);
                 else
                 {
@@ -903,7 +843,7 @@
 
     Document json_doc;
     if (json_doc.Parse(json_data.utf8_str()).HasParseError()) {
-        output = _("JSON Parse Error");
+        output = _t("JSON Parse Error");
         return false;
     }
 
@@ -932,7 +872,7 @@
             Value e = r["result"].GetArray();
 
             if (e.Empty()) {
-                output = _("Nothing to update");
+                output = _t("Nothing to update");
                 return false;
             }
 
@@ -998,13 +938,13 @@
             }
         }
         else {
-            output = _("JSON Parse Error");
+            output = _t("JSON Parse Error");
             return false;
         }
     }
     else
     {
-        output = _("JSON Parse Error");
+        output = _t("JSON Parse Error");
         return false;
     }
 
@@ -1035,7 +975,7 @@
 
     Document json_doc;
     if (json_doc.Parse(json_data.utf8_str()).HasParseError()) {
-        output = _("JSON Parse Error");
+        output = _t("JSON Parse Error");
         return false;
     }
     
@@ -1043,7 +983,7 @@
         if (json_doc.HasMember("error") && json_doc["error"].IsString()) {
             output = wxString::Format("Error from coincap API: %s", json_doc["error"].GetString());
         } else {
-            output = _("Expected response to contain a data or error string");
+            output = _t("Expected response to contain a data or error string");
         }
         
         return false;
@@ -1074,7 +1014,7 @@
         }
     }
 
-    output = _("Unable to find asset for symbol.");
+    output = _t("Unable to find asset for symbol.");
     return false;
 }
 
@@ -1094,7 +1034,7 @@
 
     Document json_doc;
     if (json_doc.Parse(json_data.utf8_str()).HasParseError()) {
-        msg = _("JSON Parse Error");
+        msg = _t("JSON Parse Error");
         return false;
     }
 
@@ -1102,23 +1042,23 @@
         if (json_doc.HasMember("error") && json_doc["error"].IsString()) {
             msg = wxString::Format("Error from coincap API: %s", json_doc["error"].GetString());
         } else {
-            msg = _("Expected response to contain a data or error string");
+            msg = _t("Expected response to contain a data or error string");
         }
         return false;
     }
 
     wxString baseCurrencySymbol;
     if (!Model_Currency::GetBaseCurrencySymbol(baseCurrencySymbol)) {
-        msg = _("Unable to get base currency!");
+        msg = _t("Unable to get base currency!");
         return false;
     }
 
     // prices in USD are multiplied by this value to convert them to the base currency
     double multiplier = 1.0;
-    if (baseCurrencySymbol != _("USD")) {
+    if (baseCurrencySymbol != _t("USD")) {
         auto usd = Model_Currency::instance().GetCurrencyRecord("USD");
         if (usd == nullptr) {
-            msg = _("Unable to find currency 'USD', required for converting historical prices");
+            msg = _t("Unable to find currency 'USD', required for converting historical prices");
             return false;
         }
 
@@ -1139,7 +1079,7 @@
             auto priceUSD = wxString::FromUTF8(entry["priceUsd"].GetString());
 
             if (!priceUSD.ToCDouble(&price_usd)) {
-                msg = _("Unable to parse price in asset history");
+                msg = _t("Unable to parse price in asset history");
                 return false;
             }
 
@@ -1234,15 +1174,15 @@
 #endif
 
 void curl_set_common_options(CURL* curl, const wxString& useragent = wxEmptyString) {
-    wxString proxyName = Model_Setting::instance().GetStringSetting("PROXYIP", "");
+    wxString proxyName = Model_Setting::instance().getString("PROXYIP", "");
     if (!proxyName.IsEmpty())
     {
-        int proxyPort = Model_Setting::instance().GetIntSetting("PROXYPORT", 0);
+        int proxyPort = Model_Setting::instance().getInt("PROXYPORT", 0);
         const wxString& proxySettings = wxString::Format("%s:%d", proxyName, proxyPort);
         curl_easy_setopt(curl, CURLOPT_PROXY, static_cast<const char*>(proxySettings.mb_str()));
     }
 
-    int networkTimeout = Model_Setting::instance().GetIntSetting("NETWORKTIMEOUT", 10); // default 10 secs
+    int networkTimeout = Model_Setting::instance().getInt("NETWORKTIMEOUT", 10); // default 10 secs
     curl_easy_setopt(curl, CURLOPT_TIMEOUT, networkTimeout);
 
     if (useragent.IsEmpty())
@@ -1363,8 +1303,8 @@
     struct curlBuff crumb{nullptr, 0};
     struct curlBuff quote{nullptr, 0};
 
-    wxString savedCookie = Model_Setting::instance().GetStringSetting("YAHOO_FINANCE_COOKIE", "");
-    wxString savedCrumb = Model_Setting::instance().GetStringSetting("YAHOO_FINANCE_CRUMB", "");
+    wxString savedCookie = Model_Setting::instance().getString("YAHOO_FINANCE_COOKIE", "");
+    wxString savedCrumb = Model_Setting::instance().getString("YAHOO_FINANCE_CRUMB", "");
 
     // Request to get cookies and save them to the cookie buffer
     curl_set_common_options(curl);
@@ -1375,7 +1315,7 @@
 
     struct curl_slist* headers = nullptr;
     headers = curl_slist_append(headers, "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8");
-    headers = curl_slist_append(headers, "User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:109.0) Gecko/20100101 Firefox/117.0");
+    headers = curl_slist_append(headers, "user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36");
     if (!savedCookie.IsEmpty()) headers = curl_slist_append(headers, static_cast<const char*>(("Cookie: " + savedCookie).mb_str()));
     curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
 
@@ -1442,8 +1382,8 @@
                                 curl_slist_free_all(cookies);
                             }
 
-                            Model_Setting::instance().Set("YAHOO_FINANCE_COOKIE", cookieJar);
-                            Model_Setting::instance().Set("YAHOO_FINANCE_CRUMB", wxString::FromUTF8(crumb.memory));
+                            Model_Setting::instance().setString("YAHOO_FINANCE_COOKIE", cookieJar);
+                            Model_Setting::instance().setString("YAHOO_FINANCE_CRUMB", wxString::FromUTF8(crumb.memory));
                         }
                         free(newQuote.memory);
                     }
@@ -1512,23 +1452,23 @@
 #endif
 
     wxString description;
-    description << bull << wxString::Format(simple ? "Version: %s" : _("Version: %s"), mmex::getTitleProgramVersion()) << eol
-        << bull << wxString::Format(simple ? "Built: %1$s %2$s" : _("Built on: %1$s %2$s"), build_date, BUILD_TIME) << eol
-        << bull << wxString::Format(simple ? "db %d" : _("Database version: %d"), mmex::version::getDbLatestVersion())
+    description << bull << wxString::Format(simple ? "Version: %s" : _t("Version: %s"), mmex::getTitleProgramVersion()) << eol
+        << bull << wxString::Format(simple ? "Built: %1$s %2$s" : _t("Built on: %1$s %2$s"), build_date, BUILD_TIME) << eol
+        << bull << wxString::Format(simple ? "db %d" : _t("Database version: %d"), mmex::version::getDbLatestVersion())
 #if WXSQLITE3_HAVE_CODEC
         << " (aes256cbc-hmac-sha512)"
 #endif
         << eol
 
 #ifdef GIT_COMMIT_HASH
-        << bull << wxString::Format(simple ? "git %1$s (%2$s)" : _("Git commit: %1$s (%2$s)"), GIT_COMMIT_HASH, GIT_COMMIT_DATE) << eol
+        << bull << wxString::Format(simple ? "git %1$s (%2$s)" : _t("Git commit: %1$s (%2$s)"), GIT_COMMIT_HASH, GIT_COMMIT_DATE) << eol
 #endif
 #ifdef GIT_BRANCH
-        << bull << wxString::Format(simple ? "%s" : _("Git branch: %s"), GIT_BRANCH) << eol
+        << bull << wxString::Format(simple ? "%s" : _t("Git branch: %s"), GIT_BRANCH) << eol
 #endif
         << eol
 
-        << (simple ? "Libs:" : _("MMEX is using the following support products:")) << eol
+        << (simple ? "Libs:" : _t("MMEX is using the following support products:")) << eol
         << bull + wxVERSION_STRING
         << wxString::Format(" (%s %d.%d)",
             wxPlatformInfo::Get().GetPortIdName(),
@@ -1545,7 +1485,7 @@
         << bull + "apexcharts.js" << eol
         << eol
 
-        << (simple ? "Built with:" : _("Built with:")) << eol
+        << (simple ? "Built with:" : _t("Built with:")) << eol
         << bull + CMAKE_VERSION << eol
         << bull + MAKE_VERSION << eol
 
@@ -1564,7 +1504,7 @@
         << bull + CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION << eol
 #endif
         << eol
-        << (simple ? "OS:" : _("Running on:")) << eol
+        << (simple ? "OS:" : _t("Running on:")) << eol
 
 #ifdef LINUX_DISTRO_STRING
         << bull + LINUX_DISTRO_STRING << eol
@@ -1578,8 +1518,8 @@
 #ifdef __LINUX__
         << bull + desktop_environment << " (" << session_type << ")" << eol
 #endif
-        << bull << wxString::Format(simple ? "System Locale: %s" : _("System Locale: %s"), std::locale("").name()) << eol
-        << bull << wxString::Format(simple ? "User Interface Language: %s" : _("User Interface Language: %s"), wxTranslations::Get()->GetBestTranslation("mmex") + "." + wxLocale::GetSystemEncodingName()) << eol;
+        << bull << wxString::Format(simple ? "System Locale: %s" : _t("System Locale: %s"), std::locale("").name()) << eol
+        << bull << wxString::Format(simple ? "User Interface Language: %s" : _t("User Interface Language: %s"), wxTranslations::Get()->GetBestTranslation("mmex") + "." + wxLocale::GetSystemEncodingName()) << eol;
 
     for (unsigned int i = 0; i < wxDisplay::GetCount(); i++)
     {
@@ -1622,22 +1562,6 @@
 }
 
 // ----------------------------------------
-
-const wxString mmTrimAmount(const wxString& value, const wxString& decimal, const wxString& replace_decimal)
-{
-    wxString str;
-    wxString valid_strings = "-0123456789" + decimal;
-    for (const auto& c : value) {
-        if (valid_strings.Contains(c)) {
-            str += c;
-        }
-    }
-    if (!replace_decimal.empty()) {
-        str.Replace(decimal, replace_decimal);
-    }
-    return str;
-}
-
 mmDates::~mmDates()
 {
 }
@@ -1722,7 +1646,7 @@
 
 mmSeparator::mmSeparator()
 {
-    const auto& def_delim = Model_Infotable::instance().GetStringInfo("DELIMITER", mmex::DEFDELIMTER);
+    const auto& def_delim = Model_Infotable::instance().getString("DELIMITER", mmex::DEFDELIMTER);
     m_separators[";"] = 0;
     m_separators[","] = 0;
     m_separators["\t"] = 0;
@@ -1818,7 +1742,7 @@
 
     wxRegEx re(R"(https:\/\/github\.com\/moneymanagerex\/moneymanagerex\/milestone\/(\d+)\?closed=1)", wxRE_EXTENDED);
     re.Replace(&body, R"(<a href="https://github.com/moneymanagerex/moneymanagerex/milestone/\1?closed=1" target="_blank">The complete list of closed issues is available at this link</a>)");
-    body.Replace("The complete list of closed issues is available at this link", _("The complete list of closed issues is available at this link"));
+    body.Replace("The complete list of closed issues is available at this link", _t("The complete list of closed issues is available at this link"));
 
     // img with link
     // skip images hosted via unsupported https
@@ -1854,21 +1778,6 @@
 
 }
 
-const wxColor* bestFontColour(const wxColour& background)
-{
-    // http://stackoverflow.com/a/3943023/112731
-
-    int r = static_cast<int>(background.Red());
-    int g = static_cast<int>(background.Green());
-    int b = static_cast<int>(background.Blue());
-    int k = (r * 299 + g * 587 + b * 114);
-
-    wxLogDebug("best FontColour: [%s] -> r=%d, g=%d, b=%d | k: %d"
-        , background.GetAsString(wxC2S_HTML_SYNTAX), r, g, b, k);
-
-    return (k > 149000) ? wxBLACK : wxWHITE;
-}
-
 // Ideally we would use wxToolTip::Enable() to enable or disable tooltips globally.
 // but this only works on some platforms! 
 void mmToolTip(wxWindow* widget, const wxString& tip)
@@ -1876,24 +1785,6 @@
     if (Option::instance().getShowToolTips()) widget->SetToolTip(tip);
 }
 
-int pow10(const int y)
-{
-    switch (y)
-    {
-    case 0: return 1;
-    case 1: return 10;
-    case 2: return 100;
-    case 3: return 1000;
-    case 4: return 10000;
-    case 5: return 100000;
-    case 6: return 1000000;
-    case 7: return 10000000;
-    case 8: return 100000000;
-    case 9: return 1000000000;
-    default: return 10;
-    }
-}
-
 wxString HTMLEncode(const wxString& input)
 {
     wxString output;
@@ -1922,53 +1813,53 @@
     wxSize my_size;
 
     if (name == "Split Transaction Dialog") {
-        my_size = Model_Infotable::instance().GetSizeSetting("SPLITTRANSACTION_DIALOG_SIZE");
+        my_size = Model_Infotable::instance().getSize("SPLITTRANSACTION_DIALOG_SIZE");
         my_size.SetHeight(w->GetSize().GetHeight());  // Do not touch the height
     }
     else if (name == "Organize Categories") {
-        my_size = Model_Infotable::instance().GetSizeSetting("CATEGORIES_DIALOG_SIZE");
+        my_size = Model_Infotable::instance().getSize("CATEGORIES_DIALOG_SIZE");
     }
     else if (name == "mmPayeeDialog") {
-        my_size = Model_Infotable::instance().GetSizeSetting("PAYEES_DIALOG_SIZE");
+        my_size = Model_Infotable::instance().getSize("PAYEES_DIALOG_SIZE");
     }
     else if (name == "Organize Currencies") {
-        my_size = Model_Infotable::instance().GetSizeSetting("CURRENCY_DIALOG_SIZE");
+        my_size = Model_Infotable::instance().getSize("CURRENCY_DIALOG_SIZE");
     }
     else if (name == "Column Order Dialog") {
-        my_size = Model_Infotable::instance().GetSizeSetting("COLUMNORDER_DIALOG_SIZE");
+        my_size = Model_Infotable::instance().getSize("COLUMNORDER_DIALOG_SIZE");
     }
     else if (name == "Themes Dialog") {
-        my_size = Model_Infotable::instance().GetSizeSetting("THEMES_DIALOG_SIZE");
+        my_size = Model_Infotable::instance().getSize("THEMES_DIALOG_SIZE");
     }
     else if (name == "General Reports Manager") {
-        my_size = Model_Infotable::instance().GetSizeSetting("GRM_DIALOG_SIZE");
+        my_size = Model_Infotable::instance().getSize("GRM_DIALOG_SIZE");
     } 
     else if (name == "mmEditPayeeDialog") {
-        my_size = Model_Infotable::instance().GetSizeSetting("EDITPAYEE_DIALOG_SIZE"); 
+        my_size = Model_Infotable::instance().getSize("EDITPAYEE_DIALOG_SIZE"); 
     }
     else if (name == "mmEditSplitOther") {
-        my_size = Model_Infotable::instance().GetSizeSetting("EDITSPLITOTHER_DIALOG_SIZE"); 
+        my_size = Model_Infotable::instance().getSize("EDITSPLITOTHER_DIALOG_SIZE"); 
     }
     else if (name == "Transactions Dialog") {
-        my_size = Model_Infotable::instance().GetSizeSetting("TRANSACTION_DIALOG_SIZE");
+        my_size = Model_Infotable::instance().getSize("TRANSACTION_DIALOG_SIZE");
     }
     else if (name == "Merge categories") {
-        my_size = Model_Infotable::instance().GetSizeSetting("RELOCATECATEG_DIALOG_SIZE");
+        my_size = Model_Infotable::instance().getSize("RELOCATECATEG_DIALOG_SIZE");
     }
     else if (name == "Merge payees") {
-        my_size = Model_Infotable::instance().GetSizeSetting("RELOCATEPAYEE_DIALOG_SIZE");
+        my_size = Model_Infotable::instance().getSize("RELOCATEPAYEE_DIALOG_SIZE");
     }
     else if (name == "Scheduled Transaction Dialog") {
-        my_size = Model_Infotable::instance().GetSizeSetting("RECURRINGTRANS_DIALOG_SIZE");
+        my_size = Model_Infotable::instance().getSize("RECURRINGTRANS_DIALOG_SIZE");
     }
     else if (name == "Transaction Filter") {
-        my_size = Model_Infotable::instance().GetSizeSetting("TRANSACTION_FILTER_SIZE");
+        my_size = Model_Infotable::instance().getSize("TRANSACTION_FILTER_SIZE");
     }
     else if (name == "Organize Tags") {
-        my_size = Model_Infotable::instance().GetSizeSetting("TAG_DIALOG_SIZE");
+        my_size = Model_Infotable::instance().getSize("TAG_DIALOG_SIZE");
     }
     else if (name == "Merge tags") {
-        my_size = Model_Infotable::instance().GetSizeSetting("RELOCATETAG_DIALOG_SIZE");
+        my_size = Model_Infotable::instance().getSize("RELOCATETAG_DIALOG_SIZE");
     }
 
     wxSharedPtr<wxDisplay> display(new wxDisplay(w->GetParent()));
@@ -1993,16 +1884,6 @@
     }
 }
 
-bool isValidURI(const wxString& validate)
-{
-    wxString uri = validate.Lower().Trim();
-    wxRegEx pattern(R"(^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$)");
-    if (pattern.Matches(uri))
-        return true;
-
-    return false;
-}
-
 //
 // mmHtmlWindow just adds a right click menu to save text to the system clipboard
 //
@@ -2015,10 +1896,10 @@
     this->Bind(wxEVT_MENU, &mmHtmlWindow::OnMenuSelected, this);
 }
 
-void mmHtmlWindow::OnMouseRightClick(wxMouseEvent& event)
+void mmHtmlWindow::OnMouseRightClick(wxMouseEvent& /*event*/)
 {
     wxMenu menu;
-    menu.Append(wxID_HIGHEST + 1, _("Copy all text to clipboard"));
+    menu.Append(wxID_HIGHEST + 1, _t("Copy all text to clipboard"));
     PopupMenu(&menu);
 
 }
diff -Naur a/src/util.h b/src/util.h
--- a/src/util.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/util.h	2025-07-09 01:46:59.684940720 +0200
@@ -21,19 +21,24 @@
 #pragma once
 
 #include "defs.h"
-#include "reports/reportbase.h"
-#include <wx/clipbrd.h>
-#include <wx/valnum.h>
+#include "primitive.h"
+#include "option.h"
+
+#include <algorithm>
 #include <map>
 #include <curl/curl.h>
+#include <wx/clipbrd.h>
+#include <wx/valnum.h>
 #include <rapidjson/document.h>
 
 class mmGUIApp;
 
-//Returns a JSON formatted string in readable form
 wxString JSON_PrettyFormated(rapidjson::Document& j_doc);
-//Returns a JSON formatted string from RapidJson DOM
 wxString JSON_Formated(rapidjson::Document& j_doc);
+rapidjson::Value* JSON_GetValue(rapidjson::Document& j_doc, const rapidjson::MemoryStream::Ch* name);
+bool JSON_GetBoolValue(rapidjson::Document& j_doc, const rapidjson::MemoryStream::Ch* name, bool& value);
+bool JSON_GetIntValue(rapidjson::Document& j_doc, const rapidjson::MemoryStream::Ch* name, int& value);
+bool JSON_GetStringValue(rapidjson::Document& j_doc, const rapidjson::MemoryStream::Ch* name, wxString& value);
 
 struct ValuePair
 {
@@ -76,103 +81,29 @@
 
 //----------------------------------------------------------------------------
 
-class mmTreeItemData : public wxTreeItemData
-{
-public:
-    enum {
-        HOME_PAGE,
-        HELP_PAGE_MAIN,
-        HELP_PAGE_STOCKS,
-        HELP_PAGE_GRM,
-        HELP_BUDGET,
-        HELP_REPORT,
-        CHECKING,
-        BUDGET,
-        STOCK,
-        REPORT,
-        GRM,
-        ASSETS,
-        BILLS,
-        FILTER,
-        FILTER_REPORT,
-        MENU_REPORT,
-        DO_NOTHING
-    };
-
-private:
-    int type_;
-    int64 id_ = -1;
-    wxString stringData_;
-    wxSharedPtr<mmPrintableBase> report_;
-
-public:
-    mmTreeItemData(int type, int64 id);
-    mmTreeItemData(int type, const wxString& data);
-    mmTreeItemData(int type, int64 id, const wxString& data);
-    mmTreeItemData(const wxString& data, mmPrintableBase* report);
-    mmTreeItemData(mmPrintableBase* report, const wxString& data);
-    
-    ~mmTreeItemData() {}
-
-    int getType() const;
-    int64 getId() const;
-    const wxString getString() const;
-    mmPrintableBase* getReport() const;
-    bool isReadOnly() const;
-};
-
-inline int mmTreeItemData::getType() const { return type_; }
-inline int64 mmTreeItemData::getId() const { return id_; }
-inline const wxString mmTreeItemData::getString() const { return stringData_; }
-inline mmPrintableBase* mmTreeItemData::getReport() const { return report_.get(); }
-
-inline bool operator==(const mmTreeItemData& lhs, const mmTreeItemData& rhs)
-{
-    return (
-        lhs.getType()   == rhs.getType() &&
-        lhs.getId()     == rhs.getId() &&
-        lhs.getString() == rhs.getString()
-    );
-};
-//----------------------------------------------------------------------------
-
-int CaseInsensitiveCmp(const wxString &s1, const wxString &s2);
-struct caseInsensitiveComparator {
-    bool operator()(const wxString& lhs, const wxString& rhs) const {
-        return lhs.CmpNoCase(rhs) < 0;
-    }
-};
-int CaseInsensitiveLocaleCmp(const wxString &s1, const wxString &s2);
 const wxString inQuotes(const wxString& label, const wxString& delimiter);
 void csv2tab_separated_values(wxString& line, const wxString& delimit);
 void correctEmptyFileExt(const wxString& ext, wxString & fileName );
 
 void mmLoadColorsFromDatabase(const bool def = false);
-wxColour getUDColour(const int c);
 
-class mmColors
-{
-public:
-    static wxColour userDefColor1;
-    static wxColour userDefColor2;
-    static wxColour userDefColor3;
-    static wxColour userDefColor4;
-    static wxColour userDefColor5;
-    static wxColour userDefColor6;
-    static wxColour userDefColor7;
-};
 //----------------------------------------------------------------------------
 
 bool getNewsRSS(std::vector<WebsiteNews>& WebsiteNewsList);
 enum yahoo_price_type { FIAT = 0, SHARES };
 bool getOnlineCurrencyRates(wxString& msg, const int64 curr_id = -1, const bool used_only = true);
-bool get_yahoo_prices(std::map<wxString, double>& symbols
-    , std::map<wxString, double>& out
-    , const wxString& base_currency_symbol
-    , wxString& output
-    , int type);
+bool get_yahoo_prices(
+    std::map<wxString, double>& symbols,
+    std::map<wxString, double>& out,
+    const wxString& base_currency_symbol,
+    wxString& output,
+    int type
+);
 bool getCoincapInfoFromSymbol(const wxString& symbol, wxString& out_id, double& price_usd, wxString& output);
-bool getCoincapAssetHistory(const wxString& asset_id, wxDateTime begin_date, std::map<wxDateTime, double> &historical_rates, wxString &msg);
+bool getCoincapAssetHistory(
+    const wxString& asset_id, wxDateTime begin_date,
+    std::map<wxDateTime, double> &historical_rates, wxString &msg
+);
 
 wxString cleanseNumberString(const wxString& str, const bool decimal);
 double cleanseNumberStringToDouble(const wxString& str, const bool decimal);
@@ -187,27 +118,16 @@
 const wxRect GetDefaultMonitorRect();
 
 //* Date Functions----------------------------------------------------------*//
-static const wxString MONTHS[12] =
-{
-    wxTRANSLATE("January"), wxTRANSLATE("February"), wxTRANSLATE("March")
-    , wxTRANSLATE("April"), wxTRANSLATE("May"), wxTRANSLATE("June")
-    , wxTRANSLATE("July"), wxTRANSLATE("August"), wxTRANSLATE("September")
-    , wxTRANSLATE("October"), wxTRANSLATE("November"), wxTRANSLATE("December")
-};
 
 const wxDateTime getUserDefinedFinancialYear(bool prevDayRequired = false);
 const std::map<wxString, wxString> &date_formats_regex();
-bool mmParseISODate(const wxString& in_str, wxDateTime& out_date);
 const wxString mmGetDateTimeForDisplay(const wxString &datetime_iso, const wxString& format = Option::instance().getDateFormat());
 const wxString mmGetDateForDisplay(const wxString &datetime_iso, const wxString& format = Option::instance().getDateFormat());
 const wxString mmGetTimeForDisplay(const wxString& datetime_iso);
 bool mmParseDisplayStringToDate(wxDateTime& date, const wxString& sDate, const wxString& sDateMask);
-extern const std::vector<std::pair<wxString, wxString>> g_date_formats_map();
+extern const std::vector<std::pair<wxString, wxString> > g_date_formats_map();
 extern const std::map<int, std::pair<wxConvAuto, wxString> > g_encoding;
 
-inline const wxString mmGetMonthName(const wxDateTime::Month& month) {
-    return MONTHS[static_cast<int>(month)];
-}
 //----------------------------------------------------------------------------
 
 CURLcode http_get_data(const wxString& site, wxString& output, const wxString& useragent = wxEmptyString);
@@ -217,8 +137,6 @@
 
 //----------------------------------------------------------------------------
 
-const wxString mmTrimAmount(const wxString& value, const wxString& decimal, const wxString& replace_decimal ="");
-
 class mmDates
 {
 public:
@@ -273,37 +191,31 @@
     const wxString getSeparator() const;
 private:
     std::map<wxString, int> m_separators;
-
 };
 
-const wxColor* bestFontColour(const wxColour& background);
-
 // used where differences occur between platforms
 wxImageList* createImageList(const int size = 0);
 
 void mmToolTip(wxWindow* widget,const wxString& tip);
 
-//fast alternative for pow(10, y)
-int pow10(const int y);
-
 // escape HTML characters
 wxString HTMLEncode(const wxString& input);
 
 void mmSetSize(wxWindow* w);
 void mmFontSize(wxWindow* widget);
 
-bool isValidURI(const wxString& validate);
-
 class mmHtmlWindow : public wxHtmlWindow
 {
 public:
-    mmHtmlWindow (wxWindow *parent
-                    , wxWindowID id=wxID_ANY
-                    , const wxPoint &pos=wxDefaultPosition
-                    , const wxSize &size=wxDefaultSize
-                    , long style=wxHW_DEFAULT_STYLE
-                    , const wxString &name="htmlWindow");
+    mmHtmlWindow(
+        wxWindow *parent,
+        wxWindowID id=wxID_ANY,
+        const wxPoint &pos=wxDefaultPosition,
+        const wxSize &size=wxDefaultSize,
+        long style=wxHW_DEFAULT_STYLE,
+        const wxString &name="htmlWindow"
+    );
 private:
-    void OnMouseRightClick(wxMouseEvent& event);
+    void OnMouseRightClick(wxMouseEvent&);
     void OnMenuSelected(wxCommandEvent& event);
 };
diff -Naur a/src/webapp.cpp b/src/webapp.cpp
--- a/src/webapp.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/webapp.cpp	2025-07-09 01:46:59.684940720 +0200
@@ -34,13 +34,13 @@
 //Internal constants
 const wxString mmWebApp::getUrl()
 {
-    wxString Url = Model_Infotable::instance().GetStringInfo("WEBAPPURL", "");
+    wxString Url = Model_Infotable::instance().getString("WEBAPPURL", "");
     return Url;
 }
 
 const wxString mmWebApp::getGuid()
 {
-    return Model_Infotable::instance().GetStringInfo("WEBAPPGUID", "");
+    return Model_Infotable::instance().getString("WEBAPPGUID", "");
 }
 
 //Parameters used in services.php
@@ -91,8 +91,8 @@
 //Check if WebApp is enabled
 bool mmWebApp::WebApp_CheckEnabled()
 {
-    if (Model_Infotable::instance().GetStringInfo("WEBAPPURL", "") != wxEmptyString
-        && Model_Infotable::instance().GetStringInfo("WEBAPPGUID", "") != wxEmptyString)
+    if (Model_Infotable::instance().getString("WEBAPPURL", "") != wxEmptyString
+        && Model_Infotable::instance().getString("WEBAPPGUID", "") != wxEmptyString)
         return true;
     else
         return false;
@@ -108,17 +108,17 @@
         return true;
     else if (outputMessage == WebAppParam::MessageWrongGuid)
     {
-        wxString msgStr = wxString() << _("Wrong WebApp GUID:") << "\n"
-            << _("please check it in network options.") << "\n";
-        wxMessageBox(msgStr, _("Wrong WebApp settings"), wxICON_ERROR);
+        wxString msgStr = wxString() << _t("Wrong WebApp GUID:") << "\n"
+            << _t("please check it in network options.") << "\n";
+        wxMessageBox(msgStr, _t("Wrong WebApp settings"), wxICON_ERROR);
         return false;
     }
     else
     {
-        wxString msgStr = wxString() << _("Unable to connect to WebApp:") << "\n"
-            << _("please check settings and / or internet connection.") << "\n\n"
-            << wxString::Format(_("Error: %s"), "\n" + outputMessage + "\n");
-        wxMessageBox(msgStr, _("WebApp connection error"), wxICON_ERROR);
+        wxString msgStr = wxString() << _t("Unable to connect to WebApp:") << "\n"
+            << _t("Please check settings and/or Internet connection.") << "\n\n"
+            << wxString::Format(_t("Error: %s"), "\n" + outputMessage + "\n");
+        wxMessageBox(msgStr, _t("WebApp connection error"), wxICON_ERROR);
         return false;
     }
 }
@@ -128,10 +128,10 @@
 {
     if (mmWebApp::WebApp_getApiVersion() != WebAppParam::ApiExpectedVersion)
     {
-        wxString msgStr = _("Wrong WebApp API version:") + "\n"
-            + wxString::Format(_("WebApp   API version: %s"), mmWebApp::WebApp_getApiVersion()) + "\n"
-            + wxString::Format(_("Expected API version: %s"), WebAppParam::ApiExpectedVersion) + "\n";
-        wxMessageBox(msgStr, _("Wrong WebApp API version"), wxICON_ERROR);
+        wxString msgStr = _t("Wrong WebApp API version:") + "\n"
+            + wxString::Format(_t("WebApp   API version: %s"), mmWebApp::WebApp_getApiVersion()) + "\n"
+            + wxString::Format(_t("Expected API version: %s"), WebAppParam::ApiExpectedVersion) + "\n";
+        wxMessageBox(msgStr, _t("Wrong WebApp API version"), wxICON_ERROR);
         return false;
     }
     else
@@ -378,7 +378,7 @@
             Value trx = m.value.GetObject();
 
             if (trx.HasMember("ID") && trx["ID"].IsString()) {
-                WebTran.ID = wxAtoi(trx["ID"].GetString());
+                WebTran.ID = std::stoll(trx["ID"].GetString());
             }
 
             if (trx.HasMember("Date") && trx["Date"].IsString()) {
@@ -414,7 +414,7 @@
             if (trx.HasMember("Payee") && trx["Payee"].IsString()) {
                 wxString Payee = wxString::FromUTF8(trx["Payee"].GetString());
                 if (Payee == "None" || Payee.IsEmpty()) {
-                    Payee = _("Unknown");
+                    Payee = _t("Unknown");
                 }
                 WebTran.Payee = Payee;
             }
@@ -423,7 +423,7 @@
                 wxString Category = wxString::FromUTF8(trx["Category"].GetString());
                 Category.Replace(":", "|");
                 if (Category == "None" || Category.IsEmpty()) {
-                    Category = _("Unknown");
+                    Category = _t("Unknown");
                 }
                 WebTran.Category = Category;
             }
@@ -477,7 +477,6 @@
     else
     {
         TrStatus = Model_Checking::STATUS_KEY_FOLLOWUP;
-        wxString FistAccountName;
 
         //Search first bank account
         for (const auto &FirstAccount : Model_Account::instance().all(Model_Account::COL_ACCOUNTNAME))
@@ -491,12 +490,12 @@
             }
         }
 
-        wxString msgStr = wxString::Format(_("Account '%s' not found!"), WebAppTrans.Account)
+        wxString msgStr = wxString::Format(_t("Account %s not found."), WebAppTrans.Account)
             << "\n\n"
-            << wxString::Format(_("Transaction will be inserted with the first bank account:\n"
+            << wxString::Format(_t("Transaction will be inserted with the first bank account:\n"
             "'%s' and marked as  'Follow Up'")
             , accountName) << "\n";
-        wxMessageBox(msgStr, _("Wrong WebApp account"), wxICON_ERROR);
+        wxMessageBox(msgStr, _t("Wrong WebApp account"), wxICON_ERROR);
     }
 
     //Search ToAccount
@@ -561,11 +560,11 @@
             (ToAccount && trxDate < ToAccount->INITIALDATE))
     {
         wxString msgStr = wxString::Format("%s: %s / %s: %s\n\n%s\n%s"
-                            , _("Account"), accountName
-                            , _("Date"), trxDate
-                            , _("The opening date for the account is later than the date of this transaction")
-                            , _("Today will be used as the transaction date"));
-        wxMessageBox(msgStr, _("Invalid Date"), wxICON_ERROR);
+                            , _t("Account"), accountName
+                            , _t("Date"), trxDate
+                            , _t("The opening date for the account is later than the date of this transaction")
+                            , _t("Today will be used as the transaction date"));
+        wxMessageBox(msgStr, _t("Invalid Date"), wxICON_ERROR);
         trxDate = wxDate::Today().FormatISOCombined();
     }
     desktopNewTransaction->TRANSDATE = trxDate;
@@ -593,11 +592,11 @@
                 Model_Checking::instance().remove(DeskNewTrID);
                 DeskNewTrID = -1;
 
-                wxString msgStr = wxString() << _("Unable to download attachments from the WebApp.") << "\n"
-                    << _("Attachments folder not set or unavailable") << "\n" << "\n"
-                    << _("Transaction not downloaded:") << "\n"
-                    << _("Please fix attachments folder or delete attachments from the WebApp") << "\n";
-                wxMessageBox(msgStr, _("Attachment folder error"), wxICON_ERROR);
+                wxString msgStr = wxString() << _t("Unable to download attachments from the WebApp.") << "\n"
+                    << _t("Attachments folder not set or unavailable.") << "\n" << "\n"
+                    << _t("Transaction not downloaded:") << "\n"
+                    << _t("Please fix the attachments folder or delete the attachments from the WebApp.") << "\n";
+                wxMessageBox(msgStr, _t("Attachment folder error"), wxICON_ERROR);
             }
             else
             {
@@ -616,9 +615,9 @@
                     if (DesktopAttachmentName != wxEmptyString)
                     {
                         Model_Attachment::Data* NewAttachment = Model_Attachment::instance().create();
-                        NewAttachment->REFTYPE = Model_Attachment::REFTYPE_STR_TRANSACTION;
+                        NewAttachment->REFTYPE = Model_Checking::refTypeName;
                         NewAttachment->REFID = DeskNewTrID;
-                        NewAttachment->DESCRIPTION = _("Attachment") + "_" << AttachmentNr;
+                        NewAttachment->DESCRIPTION = _t("Attachment") + "_" << AttachmentNr;
                         NewAttachment->FILENAME = DesktopAttachmentName;
                         Model_Attachment::instance().save(NewAttachment);
                     }
@@ -627,10 +626,10 @@
                         Model_Checking::instance().remove(DeskNewTrID);
                         DeskNewTrID = -1;
 
-                        wxString msgStr = wxString() << _("Unable to download attachments from the WebApp.") << "\n"
+                        wxString msgStr = wxString() << _t("Unable to download attachments from the WebApp.") << "\n"
                             << CurlError << "\n" << "\n"
-                            << _("Transaction not downloaded: please retry to download transactions") << "\n";
-                        wxMessageBox(msgStr, _("Attachment download error"), wxICON_ERROR);
+                            << _t("Transaction not downloaded: please retry to download transactions") << "\n";
+                        wxMessageBox(msgStr, _t("Attachment download error"), wxICON_ERROR);
                         break;
                     }
 
@@ -666,10 +665,10 @@
 wxString mmWebApp::WebApp_DownloadOneAttachment(const wxString& AttachmentName, int64 DesktopTransactionID, int AttachmentNr, wxString& Error)
 {
     wxString FileExtension = wxFileName(AttachmentName).GetExt().MakeLower();
-    wxString FileName = Model_Attachment::REFTYPE_STR_TRANSACTION + "_" + wxString::Format("%lld", DesktopTransactionID)
+    wxString FileName = Model_Checking::refTypeName + "_" + wxString::Format("%lld", DesktopTransactionID)
         + "_Attach" + wxString::Format("%i", AttachmentNr) + "." + FileExtension;
     const wxString FilePath = mmex::getPathAttachment(mmAttachmentManage::InfotablePathSetting())
-        + Model_Attachment::REFTYPE_STR_TRANSACTION + wxFileName::GetPathSeparator() + FileName;
+        + Model_Checking::refTypeName + wxFileName::GetPathSeparator() + FileName;
     wxString URL = mmWebApp::getServicesPageURL() + "&" + WebAppParam::DownloadAttachments + "=" + AttachmentName;
     CURLcode CurlStatus = http_download_file(URL, FilePath);
     if (CurlStatus == CURLE_OK)
diff -Naur a/src/webappdialog.cpp b/src/webappdialog.cpp
--- a/src/webappdialog.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/webappdialog.cpp	2025-07-09 01:46:59.684940720 +0200
@@ -65,7 +65,7 @@
 {
     SetExtraStyle(GetExtraStyle() | wxWS_EX_BLOCK_EVENTS);
     long style = wxCAPTION | wxCLOSE_BOX | wxRESIZE_BORDER;
-    if (!wxDialog::Create(parent, wxID_ANY, _("Import WebApp transactions")
+    if (!wxDialog::Create(parent, wxID_ANY, _t("Import WebApp transactions")
         , wxDefaultPosition, wxDefaultSize, style, name))
     {
         return;
@@ -88,17 +88,17 @@
     wxFlexGridSizer* flex_sizer = new wxFlexGridSizer(0, 6, 0, 0);
 
     net_button_ = new wxBitmapButton(this, wxID_EXECUTE, mmBitmapBundle(png::LED_OFF, mmBitmapButtonSize));
-    mmToolTip(net_button_, _("Network status (click to refresh)"));
+    mmToolTip(net_button_, _t("Network status (click to refresh)"));
     flex_sizer->Add(net_button_, g_flagsCenter);
 
-    wxStaticText* url_label = new wxStaticText(this, wxID_STATIC, _("URL"));
+    wxStaticText* url_label = new wxStaticText(this, wxID_STATIC, _t("URL"));
     url_text_ = new wxTextCtrl(this, wxID_FILE, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
     url_text_->SetMinSize(wxSize(300, -1));
     url_text_->Enable(false);
     url_text_->SetValue(mmWebApp::getUrl());
     mmToolTip(url_text_, mmWebApp::getUrl());
 
-    wxStaticText* guid_label = new wxStaticText(this, wxID_STATIC, _("GUID"));
+    wxStaticText* guid_label = new wxStaticText(this, wxID_STATIC, _t("GUID"));
     guid_text_ = new wxTextCtrl(this, wxID_FILE, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
     guid_text_->SetMinSize(wxSize(300, -1));
     guid_text_->Enable(false);
@@ -120,7 +120,7 @@
     //Loading --------------------------------------------
     loadingSizer_ = new wxFlexGridSizer(0, 2, 0, 0);
 
-    wxStaticText* gauge_label = new wxStaticText(this, wxID_STATIC, _("Checking for new transactions"));
+    wxStaticText* gauge_label = new wxStaticText(this, wxID_STATIC, _t("Checking for new transactions"));
     gauge_ = new wxGauge(this, wxID_STATIC, 100, wxDefaultPosition, wxDefaultSize, wxGA_HORIZONTAL, wxDefaultValidator);
     gauge_->SetMinSize(wxSize(300, -1));
 
@@ -135,15 +135,15 @@
     webtranListBox_ = new wxDataViewListCtrl(this, wxID_ANY, wxDefaultPosition, wxSize(800, 500), wxDV_MULTIPLE | wxDV_ROW_LINES);
 
     webtranListBox_->AppendTextColumn("#", wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_ID
-    webtranListBox_->AppendTextColumn(_("Date"), wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_DATE
-    webtranListBox_->AppendTextColumn(_("Account"), wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_ACCOUNT
-    webtranListBox_->AppendTextColumn(_("Status"), wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_STATUS
-    webtranListBox_->AppendTextColumn(_("Type"), wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_TYPE
-    webtranListBox_->AppendTextColumn(_("Payee"), wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_PAYEE, 
-    webtranListBox_->AppendTextColumn(_("Category"), wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_CATEGORY, 
-    webtranListBox_->AppendTextColumn(_("Amount"), wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_AMOUNT, 
-    webtranListBox_->AppendTextColumn(_("Notes"), wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_NOTES, 
-    webtranListBox_->AppendTextColumn(_("Attachments"), wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_ATTACHMENTS, 
+    webtranListBox_->AppendTextColumn(_t("Date"), wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_DATE
+    webtranListBox_->AppendTextColumn(_t("Account"), wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_ACCOUNT
+    webtranListBox_->AppendTextColumn(_t("Status"), wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_STATUS
+    webtranListBox_->AppendTextColumn(_t("Type"), wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_TYPE
+    webtranListBox_->AppendTextColumn(_t("Payee"), wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_PAYEE, 
+    webtranListBox_->AppendTextColumn(_t("Category"), wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_CATEGORY, 
+    webtranListBox_->AppendTextColumn(_t("Amount"), wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_AMOUNT, 
+    webtranListBox_->AppendTextColumn(_t("Notes"), wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_NOTES, 
+    webtranListBox_->AppendTextColumn(_t("Attachments"), wxDATAVIEW_CELL_INERT, wxLIST_AUTOSIZE_USEHEADER); //WEBTRAN_ATTACHMENTS, 
     mainBoxSizer_->Add(webtranListBox_, g_flagsExpand);
 
     wxPanel* buttons_panel = new wxPanel(this, wxID_ANY);
@@ -153,9 +153,9 @@
 
     wxStdDialogButtonSizer*  buttons_sizer = new wxStdDialogButtonSizer;
     tools_sizer->Add(buttons_sizer, wxSizerFlags(g_flagsV).Center());
-    wxButton* buttonOK = new wxButton(buttons_panel, wxID_OK, _("&Import all "));
+    wxButton* buttonOK = new wxButton(buttons_panel, wxID_OK, _t("&Import all "));
     buttonOK->Enable(false);
-    wxButton* buttonApply = new wxButton(buttons_panel, wxID_APPLY, _("Import and open all "));
+    wxButton* buttonApply = new wxButton(buttons_panel, wxID_APPLY, _t("Import and open all "));
     buttonApply->Enable(false);
     wxButton* btnCancel = new wxButton(buttons_panel, wxID_CANCEL, wxGetTranslation(g_CancelLabel));
 
@@ -182,12 +182,12 @@
     if (mmWebApp::getUrl().empty())
     {
         mainBoxSizer_->Hide(loadingSizer_, true);
-        return mmErrorDialogs::ToolTip4Object(url_text_, _("Empty value"), _("Error"));
+        return mmErrorDialogs::ToolTip4Object(url_text_, _t("Empty value"), _t("Error"));
     }
     if (mmWebApp::getGuid().empty())
     {
         mainBoxSizer_->Hide(loadingSizer_, true);
-        return mmErrorDialogs::ToolTip4Object(guid_text_, _("Empty value"), _("Error"));
+        return mmErrorDialogs::ToolTip4Object(guid_text_, _t("Empty value"), _t("Error"));
     }
 
     if (!mmWebApp::WebApp_CheckGuid() || !mmWebApp::WebApp_CheckApiVersion())
@@ -202,8 +202,8 @@
         mainBoxSizer_->Hide(loadingSizer_, true);
         if (!isStartup_)
         {
-            wxString msgStr = wxString() << _("Unable to download transactions from the WebApp.") << "\n" << CurlError;
-            wxMessageBox(msgStr, _("Transactions download error"), wxICON_ERROR);
+            wxString msgStr = wxString() << _t("Unable to download transactions from the WebApp.") << "\n" << CurlError;
+            wxMessageBox(msgStr, _t("Transactions download error"), wxICON_ERROR);
         }
 
         return net_button_->SetBitmap(mmBitmapBundle(png::LED_RED, mmBitmapButtonSize));
@@ -214,25 +214,25 @@
     for (const auto& WebTran : WebAppTransactions_)
     {
         wxVector<wxVariant> data;
-        data.push_back(wxVariant(wxString::Format(wxT("%lld"), WebTran.ID))); //WEBTRAN_ID
-        data.push_back(wxVariant(mmGetDateTimeForDisplay(WebTran.Date.FormatISODate()))); //WEBTRAN_DATE
-        data.push_back(wxVariant(WebTran.Account)); //WEBTRAN_ACCOUNT
-        data.push_back(wxVariant(WebTran.Status)); //WEBTRAN_STATUS
-        data.push_back(wxVariant(wxGetTranslation(WebTran.Type))); //WEBTRAN_TYPE
+        data.emplace_back(wxString::Format(wxT("%lld"), WebTran.ID)); //WEBTRAN_ID
+        data.emplace_back(mmGetDateTimeForDisplay(WebTran.Date.FormatISODate())); //WEBTRAN_DATE
+        data.emplace_back(WebTran.Account); //WEBTRAN_ACCOUNT
+        data.emplace_back(WebTran.Status); //WEBTRAN_STATUS
+        data.emplace_back(wxGetTranslation(WebTran.Type)); //WEBTRAN_TYPE
 
         wxString Payee = WebTran.Type != "Transfer" ? WebTran.Payee : "> " + WebTran.ToAccount;
-        data.push_back(wxVariant(Payee)); //WEBTRAN_PAYEE
+        data.emplace_back(Payee); //WEBTRAN_PAYEE
 
         wxString Category = WebTran.Category;
         if (WebTran.SubCategory != wxEmptyString) Category += ":" + WebTran.SubCategory;
-        data.push_back(wxVariant(Category)); //WEBTRAN_CATEGORY
+        data.emplace_back(Category); //WEBTRAN_CATEGORY
 
         Model_Currency::Data *currency = Model_Currency::GetBaseCurrency();
         wxString Amount = Model_Currency::toStringNoFormatting(WebTran.Amount, currency, Model_Currency::precision(currency));
-        data.push_back(wxVariant(Amount)); //WEBTRAN_AMOUNT
+        data.emplace_back(Amount); //WEBTRAN_AMOUNT
 
-        data.push_back(wxVariant(WebTran.Notes)); //WEBTRAN_NOTES
-        data.push_back(wxVariant(WebTran.Attachments)); //WEBTRAN_ATTACHMENTS
+        data.emplace_back(WebTran.Notes); //WEBTRAN_NOTES
+        data.emplace_back(WebTran.Attachments); //WEBTRAN_ATTACHMENTS
         webtranListBox_->AppendItem(data, static_cast<wxUIntPtr>(WebTran.ID.GetValue()));
     }
 
@@ -308,8 +308,8 @@
     }
     if (!bFound)
     {
-        wxString msgStr = wxString() << _("Unable to insert transaction in MMEX database") << "\n";
-        wxMessageBox(msgStr, _("WebApp communication error"), wxICON_ERROR);
+        wxString msgStr = wxString() << _t("Unable to insert transaction in MMEX database") << "\n";
+        wxMessageBox(msgStr, _t("WebApp communication error"), wxICON_ERROR);
     }
 
     return bFound;
@@ -335,8 +335,8 @@
             }
             else
             {
-                wxString msgStr = wxString() << _("Unable to download attachments from the WebApp.") << "\n" << CurlError;
-                wxMessageBox(msgStr, _("Attachment download error"), wxICON_ERROR);
+                wxString msgStr = wxString() << _t("Unable to download attachments from the WebApp.") << "\n" << CurlError;
+                wxMessageBox(msgStr, _t("Attachment download error"), wxICON_ERROR);
             }
         }
     }
@@ -404,10 +404,10 @@
     evt.SetEventObject(this);
 
     wxSharedPtr<wxMenu> mainMenu(new wxMenu);
-    mainMenu->Append(new wxMenuItem(mainMenu.get(), MENU_OPEN_ATTACHMENT, _("Open Attachment")));
-    mainMenu->Append(new wxMenuItem(mainMenu.get(), MENU_IMPORT_WEBTRAN, _("Import")));
-    mainMenu->Append(new wxMenuItem(mainMenu.get(), MENU_IMPORTOPEN_WEBTRAN, _("Import and open")));
-    mainMenu->Append(new wxMenuItem(mainMenu.get(), MENU_DELETE_WEBTRAN, _("Delete")));
+    mainMenu->Append(new wxMenuItem(mainMenu.get(), MENU_OPEN_ATTACHMENT, _t("Open Attachment")));
+    mainMenu->Append(new wxMenuItem(mainMenu.get(), MENU_IMPORT_WEBTRAN, _t("Import")));
+    mainMenu->Append(new wxMenuItem(mainMenu.get(), MENU_IMPORTOPEN_WEBTRAN, _t("Import and open")));
+    mainMenu->Append(new wxMenuItem(mainMenu.get(), MENU_DELETE_WEBTRAN, _t("Delete")));
     if (Selected.size() != 1) mainMenu->Enable(MENU_OPEN_ATTACHMENT, false);
 
     PopupMenu(mainMenu.get());
@@ -419,7 +419,8 @@
 {
     for (int i = 0; i < webtranListBox_->GetItemCount(); i++)
     {
-        int64 WebTrID = wxAtoi(webtranListBox_->GetTextValue(i, WEBTRAN_ID));
+        long long WebTrID;
+        webtranListBox_->GetTextValue(i, WEBTRAN_ID).ToLongLong(&WebTrID);
         mmWebAppDialog::ImportWebTr(WebTrID, open);
     }
 }
diff -Naur a/src/webappdialog.h b/src/webappdialog.h
--- a/src/webappdialog.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/webappdialog.h	2025-07-09 01:46:59.684940720 +0200
@@ -62,7 +62,7 @@
     wxBoxSizer* mainBoxSizer_ = nullptr;
     wxFlexGridSizer* loadingSizer_ = nullptr;
     wxDataViewListCtrl* webtranListBox_ = nullptr;
-    wxSearchCtrl* m_maskTextCtrl = nullptr;
+    //wxSearchCtrl* m_maskTextCtrl = nullptr;
     wxTextCtrl* url_text_ = nullptr;
     wxTextCtrl* guid_text_ = nullptr;
     wxBitmapButton* net_button_ = nullptr;
diff -Naur a/src/wizard_newaccount.cpp b/src/wizard_newaccount.cpp
--- a/src/wizard_newaccount.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/wizard_newaccount.cpp	2025-07-09 01:46:59.688940744 +0200
@@ -28,7 +28,7 @@
 //----------------------------------------------------------------------------
 
 mmAddAccountWizard::mmAddAccountWizard(wxFrame *frame)
-    : wxWizard(frame,wxID_ANY,_("Add Account Wizard")
+    : wxWizard(frame,wxID_ANY,_t("Add Account Wizard")
     , wxBitmap(addacctwiz_xpm), wxDefaultPosition
     , wxDEFAULT_DIALOG_STYLE)
 {
@@ -36,10 +36,10 @@
     page1 = new wxWizardPageSimple(this);
 
     wxString noteString = wxString::Format(
-        _("%s models all transactions as belonging to accounts."), mmex::getProgramName()) + "\n\n"
-        + _("The next pages will help you create a new account.\n"
-            "To help you get started, begin by making a list of all\n"
-            "financial institutions where you hold an account.");
+        _t("%s models all transactions as belonging to accounts."), mmex::getProgramName()) + "\n\n"
+        + _t("The next pages will help create a new account. "
+            "To help get started, begin by making a list of all the "
+            "financial institutions where the accounts are held.");
 
     new wxStaticText(page1, wxID_ANY, noteString);
 
@@ -63,8 +63,8 @@
         Model_Account::Data* account = Model_Account::instance().create();
 
         account->FAVORITEACCT = "TRUE";
-        account->STATUS = Model_Account::STATUS_STR_OPEN;
-        account->ACCOUNTTYPE = Model_Account::TYPE_STR[accountType_];
+        account->STATUS = Model_Account::STATUS_NAME_OPEN;
+        account->ACCOUNTTYPE = Model_Account::type_name(accountType_);
         account->ACCOUNTNAME = accountName_;
         account->INITIALBAL = 0;
         account->INITIALDATE = wxDate::Today().FormatISODate();
@@ -84,14 +84,14 @@
     {
         if ( account_name.IsEmpty())
         {
-            wxMessageBox(_("Account Name Invalid"), _("New Account"), wxOK|wxICON_ERROR, this);
+            wxMessageBox(_t("Account Name Invalid"), _t("New Account"), wxOK|wxICON_ERROR, this);
             event.Veto();
         }
         else
         {
             if (Model_Account::instance().get(account_name))
             {
-                wxMessageBox(_("An account with this name already exists"), _("New Account"), wxOK|wxICON_ERROR, this);
+                wxMessageBox(_t("An account with this name already exists"), _t("New Account"), wxOK|wxICON_ERROR, this);
                 event.Veto();
             }
         }
@@ -105,12 +105,12 @@
     textAccountName_->SetMinSize(wxSize(200,-1));
 
     wxBoxSizer *mainSizer = new wxBoxSizer(wxVERTICAL);
-    mainSizer->Add(new wxStaticText(this, wxID_ANY, _("Name of the Account")), 0, wxALL, 5 );
+    mainSizer->Add(new wxStaticText(this, wxID_ANY, _t("Name of the Account")), 0, wxALL, 5 );
     mainSizer->Add( textAccountName_, 0 /* No stretching */, wxALL, 5 /* Border Size */);
 
     wxString helpMsg;
-    helpMsg  << "\n" << _("Specify a descriptive name for the account.") << "\n"
-            << _("This is generally the name of a financial institution\n"
+    helpMsg  << "\n" << _t("Specify a descriptive name for the account.") << "\n"
+            << _t("This is generally the name of a financial institution\n"
             "where the account is held. For example: 'ABC Bank'.");
     mainSizer->Add(new wxStaticText(this, wxID_ANY, helpMsg ), 0, wxALL, 5);
 
@@ -123,31 +123,33 @@
     , parent_(parent)
 {
     itemChoiceType_ = new wxChoice(this, wxID_ANY);
-    for (const auto& type: Model_Account::TYPE_STR)
+    for (int i = 0; i < Model_Account::TYPE_ID_size; ++i) {
+        wxString type = Model_Account::type_name(i);
         itemChoiceType_->Append(wxGetTranslation(type), new wxStringClientData(type));
-    mmToolTip(itemChoiceType_, _("Specify the type of account to be created."));
+    }
+    mmToolTip(itemChoiceType_, _t("Specify the type of account to be created."));
     itemChoiceType_->SetSelection(Model_Account::TYPE_ID_CHECKING);
 
     wxBoxSizer *mainSizer = new wxBoxSizer(wxVERTICAL);
 
-    mainSizer->Add( new wxStaticText(this, wxID_ANY, _("Type of Account")), 0, wxALL, 5 );
+    mainSizer->Add( new wxStaticText(this, wxID_ANY, _t("Type of Account")), 0, wxALL, 5 );
     mainSizer->Add( itemChoiceType_, 0 /* No stretching*/, wxALL, 5 /* Border Size */);
 
     wxString textMsg = "\n";
-    textMsg << _("Select the type of account you want to create:") << "\n\n"
-            << _("General bank accounts cover a wide variety of account\n"
+    textMsg << _t("Select the type of account to create:") << "\n\n"
+            << _t("General bank accounts cover a wide variety of account\n"
             "types like Cash, Checking, Loans, and Credit cards.");
     mainSizer->Add(new wxStaticText(this, wxID_ANY, textMsg), 0, wxALL, 5);
 
     textMsg = "\n";
-    textMsg << _("Investment and Share accounts are specialized accounts that\n"
+    textMsg << _t("Investment and Share accounts are specialized accounts that\n"
         "have stock/mutual fund investments associated with them.");
     mainSizer->Add( new wxStaticText(this, wxID_ANY,textMsg), 0, wxALL, 5);
 
     textMsg = "\n";
-    textMsg << _("Term and Asset accounts are specialized bank accounts.\n"
-        "They are intended for monitoring Assets or Term Deposits and Bonds\n"
-        "where typically you have regular money coming in and out, outside\n"
+    textMsg << _t("Term and asset accounts are specialized bank accounts. "
+        "They are intended for monitoring assets or term deposits and bonds "
+        "where typically regular money goes in and comes out, outside "
         "the general income stream.");
     mainSizer->Add( new wxStaticText(this, wxID_ANY,textMsg), 0, wxALL, 5);
 
@@ -161,9 +163,9 @@
     if (currencyID == -1)
     {
         wxString errorMsg;
-        errorMsg << _("Base Account Currency Not set.") << "\n"
-                 << _u("Set that first using Tools → Settings… menu and then add a new account.");
-        wxMessageBox( errorMsg, _("New Account"), wxOK|wxICON_WARNING, this);
+        errorMsg << _t("Base Account Currency Not set.") << "\n"
+                 << _tu("Set that first using Tools → Settings… menu and then add a new account.");
+        wxMessageBox( errorMsg, _t("New Account"), wxOK|wxICON_WARNING, this);
         return false;
     }
 
diff -Naur a/src/wizard_newdb.cpp b/src/wizard_newdb.cpp
--- a/src/wizard_newdb.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/wizard_newdb.cpp	2025-07-09 01:46:59.688940744 +0200
@@ -27,21 +27,21 @@
 END_EVENT_TABLE()
 
 mmNewDatabaseWizard::mmNewDatabaseWizard(wxFrame *frame)
-    : wxWizard(frame, wxID_ANY, _("New Database Wizard")
+    : wxWizard(frame, wxID_ANY, _t("New Database Wizard")
         , wxBitmap(addacctwiz_xpm), wxDefaultPosition, wxDEFAULT_DIALOG_STYLE)
 {
     page1 = new wxWizardPageSimple(this);
     wxString displayMsg;
-    displayMsg << wxGetTranslation(wxString::FromUTF8(wxTRANSLATE(
-        "The next pages will help you create a new database.\n\n"
-        "Your database file is stored with an extension of .mmb. "
-        "As this file contains important financial information, "
-        "we recommended creating daily backups with the Options "
-        "setting: “Backup database on startup”, and store your backups "
+    displayMsg << _tu(
+        "The next pages will help create a new database.\n\n"
+        "The database file is stored with an extension of .mmb. "
+        "As this file contains important financial data, "
+        "it is recommended to create daily backups with the setting "
+        "“Backup database on startup” and store the backups "
         "in a separate location.\n\n"
-        "The database can later be encrypted if required, by "
-        "using the option: “Save Database As…” and changing the "
-        "file type before saving.")));
+        "The database can later be encrypted if required by "
+        "using the setting: “Save Database As…” and changing the "
+        "filetype before saving.");
     new wxStaticText(page1, wxID_ANY, displayMsg);
 
     mmNewDatabaseWizardPage* page2 = new mmNewDatabaseWizardPage(this);
@@ -86,25 +86,24 @@
 
 mmNewDatabaseWizardPage::mmNewDatabaseWizardPage(mmNewDatabaseWizard* parent)
     : wxWizardPageSimple(parent)
-    , parent_(parent)
 {
-    wxString currName = _("Set Currency");
+    wxString currName = _t("Set Currency");
     const auto base_currency = Model_Currency::instance().GetBaseCurrency();
     if (base_currency)
     {
         currencyID_ = base_currency->CURRENCYID;
         currName = base_currency->CURRENCYNAME;
-        Option::instance().setBaseCurrency(currencyID_);
+        Option::instance().setBaseCurrencyID(currencyID_);
     }
 
     itemButtonCurrency_ = new wxButton(this, wxID_ANY, currName, wxDefaultPosition, wxSize(220, -1), 0);
 
     wxBoxSizer *mainSizer = new wxBoxSizer(wxVERTICAL);
 
-    mainSizer->Add(new wxStaticText(this, wxID_ANY, _("Base Currency for account")), 0, wxALL, 5);
+    mainSizer->Add(new wxStaticText(this, wxID_ANY, _t("Base Currency for account")), 0, wxALL, 5);
     mainSizer->Add(itemButtonCurrency_, 0 /* No stretching */, wxALL, 5 /* Border size */);
 
-    wxString helpMsg = _("Specify the base (or default) currency to be used for the\n"
+    wxString helpMsg = _t("Specify the base (or default) currency to be used for the\n"
         "database. The base currency can later be changed in\n"
         "Options. New accounts, will use this currency by\n"
         "default, and can be changed when editing account details.");
@@ -115,15 +114,15 @@
     wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxHORIZONTAL);
     mainSizer->Add(itemBoxSizer5, 0, wxALIGN_LEFT | wxALL, 5);
 
-    wxStaticText* itemStaticText6 = new wxStaticText(this, wxID_STATIC, _("User Name"));
+    wxStaticText* itemStaticText6 = new wxStaticText(this, wxID_STATIC, _t("User Name"));
     itemBoxSizer5->Add(itemStaticText6, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);
 
     itemUserName_ = new wxTextCtrl(this, wxID_ANY);
     itemUserName_->SetMinSize(wxSize(200,-1));
     itemBoxSizer5->Add(itemUserName_, g_flagsExpand);
 
-    helpMsg = _("(Optional) Specify a title or your name.") + "\n";
-    helpMsg += _("Used as a database title for displayed and printed reports.");
+    helpMsg = _t("(Optional) Specify a title or name.") + "\n";
+    helpMsg += _t("Used as a database title for displayed and printed reports.");
     mainSizer->Add(new wxStaticText(this, wxID_ANY, helpMsg), 0, wxALL, 5);
 
     SetSizer(mainSizer);
@@ -134,11 +133,11 @@
 {
     if (currencyID_ == -1)
     {
-        wxMessageBox(_("Base Currency Not Set"), _("New Database"), wxOK | wxICON_WARNING, this);
+        wxMessageBox(_t("Base Currency Not Set"), _t("New Database"), wxOK | wxICON_WARNING, this);
         return false;
     }
     wxString userName = itemUserName_->GetValue().Trim();
-    Option::instance().UserName(userName);
+    Option::instance().setUserName(userName);
 
     return true;
 }
@@ -154,7 +153,7 @@
         {
             itemButtonCurrency_->SetLabelText(wxGetTranslation(currency->CURRENCYNAME));
             currencyID_ = currency->CURRENCYID;
-            Option::instance().setBaseCurrency(currencyID_);
+            Option::instance().setBaseCurrencyID(currencyID_);
             break;
         }
     }
diff -Naur a/src/wizard_newdb.h b/src/wizard_newdb.h
--- a/src/wizard_newdb.h	2025-02-07 16:12:06.000000000 +0100
+++ b/src/wizard_newdb.h	2025-07-09 01:46:59.688940744 +0200
@@ -48,7 +48,6 @@
     virtual bool TransferDataFromWindow();
 
 private:
-    mmNewDatabaseWizard* parent_ = nullptr;
     wxButton* itemButtonCurrency_ = nullptr;
     wxTextCtrl* itemUserName_ = nullptr;
     int64 currencyID_ = -1;
diff -Naur a/src/wizard_update.cpp b/src/wizard_update.cpp
--- a/src/wizard_update.cpp	2025-02-07 16:12:06.000000000 +0100
+++ b/src/wizard_update.cpp	2025-07-09 01:46:59.688940744 +0200
@@ -60,12 +60,10 @@
 {
     clearVFprintedFiles("rep");
     bool isActive = showUpdateCheckBox_->GetValue();
-    if (!isActive) {
-        Model_Setting::instance().Set("UPDATE_LAST_CHECKED_VERSION", top_version_);
-    }
-    else {
-        Model_Setting::instance().Set("UPDATE_LAST_CHECKED_VERSION", ("v" + mmex::version::string).Lower());
-    }
+    Model_Setting::instance().setString(
+        "UPDATE_LAST_CHECKED_VERSION",
+        (!isActive) ? top_version_ : ("v" + mmex::version::string).Lower()
+    );
 }
 
 mmUpdateWizard::mmUpdateWizard(wxWindow* parent, const Document& json_releases, wxArrayInt new_releases, const wxString& top_version)
@@ -74,7 +72,7 @@
 
     SetExtraStyle(GetExtraStyle() | wxWS_EX_BLOCK_EVENTS);
 
-    bool isDialogCreated = wxDialog::Create(parent, wxID_ANY, _("Update Wizard")
+    bool isDialogCreated = wxDialog::Create(parent, wxID_ANY, _t("Update Wizard")
         , wxDefaultPosition, wxDefaultSize
         , wxCAPTION | wxRESIZE_BORDER | wxCLOSE_BOX, "mmUpdateWizard");
 
@@ -94,23 +92,23 @@
 void mmUpdateWizard::CreateControls(const Document& json_releases, wxArrayInt new_releases)
 {
 
-    int i = 0;
     bool isHistory = false;
     wxString html, separator = " ", new_html_url, new_tag;
 
+    int i = 0;
     for (auto& r : json_releases.GetArray())
     {
         if (!isHistory && new_releases.Index(i) == wxNOT_FOUND) {
             isHistory = true;
-            separator = wxString::Format("<h3> %s </h3>", _("Historical releases:"));
+            separator = wxString::Format("<h3> %s </h3>", _t("Historical releases:"));
         }
 
         bool is_prerelease = (r.HasMember("prerelease") && r["prerelease"].IsBool() && r["prerelease"].GetBool());
-        bool update_stable = Model_Setting::instance().GetIntSetting("UPDATESOURCE", 0) == 0;
+        bool update_stable = Model_Setting::instance().getInt("UPDATESOURCE", 0) == 0;
         if (update_stable && is_prerelease)
             continue;
 
-        const auto prerelease = !is_prerelease ? _("Stable") : _("Unstable");
+        const auto prerelease = !is_prerelease ? _t("Stable") : _t("Unstable");
 
         const auto html_url = (r.HasMember("html_url") && r["html_url"].IsString())
             ? wxString::FromUTF8(r["html_url"].GetString()) : "";
@@ -137,7 +135,7 @@
         const wxString link = wxString::Format(R"(<a href="%s" target="_blank">%s</a>)", html_url, tag);
 
         html += wxString::Format("%s<table class='table'><thead><tr><th>%s</th><th>%s</th><th>%s</th><th>%s</th></tr></thead>\n"
-            , separator, _("Version"), _("Status"), _("Date"), _("Time"));
+            , separator, _t("Version"), _t("Status"), _t("Date"), _t("Time"));
         html += wxString::Format("<tbody><tr class='success'><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>"
             "<tr class='active'><td colspan='4'>%s</td></tr><tbody></table>\n\n"
             , link, prerelease, pd, time, body);
@@ -145,7 +143,7 @@
         i++;
     }
 
-    auto version = new_releases.empty() ? _("You already have the latest version") : _("A new version of MMEX is available!");
+    auto version = new_releases.empty() ? _t("MMEX is up to date.") : _t("A new version of MMEX is available.");
     if (!new_releases.empty()) {
 
         const auto ver_num = new_tag.Mid(1);
@@ -177,7 +175,7 @@
 #endif
     }
 
-    wxString header = wxString::Format(_("Your version is %s"), mmex::version::string);
+    wxString header = wxString::Format(_t("Version: %s"), mmex::version::string);
     html = wxString::Format(update_template, header, version, html);
 
     wxBoxSizer *page1_sizer = new wxBoxSizer(wxVERTICAL);
@@ -205,13 +203,13 @@
     const auto name = getVFname4print("rep", html);
     browser->LoadURL(name);
 
-    const wxString showAppStartString = wxString::Format(_("&Show this dialog box at startup"));
+    const wxString showAppStartString = wxString::Format(_t("&Show this dialog box at startup"));
     showUpdateCheckBox_ = new wxCheckBox(this, wxID_ANY, showAppStartString, wxDefaultPosition, wxDefaultSize, wxCHK_2STATE);
     showUpdateCheckBox_->SetValue(true);
     page1_sizer->Add(showUpdateCheckBox_, g_flagsV);
 
 
-    wxButton* buttonOk = new wxButton(this, wxID_OK, _("&OK "));
+    wxButton* buttonOk = new wxButton(this, wxID_OK, _t("&OK "));
     page1_sizer->Add(buttonOk, g_flagsCenter);
 
     buttonOk->SetDefault();
@@ -320,13 +318,11 @@
 
     wxString resp;
     CURLcode err_code = http_get_data(url, resp);
-    if (err_code != CURLE_OK)
-    {
-        if (!bSilent)
-        {
-            const wxString& msgStr = _("Unable to check for updates!")
-                + "\n\n" + _("Error: ") + curl_easy_strerror(err_code);
-            wxMessageBox(msgStr, _("MMEX Update Check"));
+    if (err_code != CURLE_OK) {
+        if (!bSilent) {
+            const wxString& msgStr = _t("Unable to check for updates!")
+                + "\n\n" + _t("Error: ") + curl_easy_strerror(err_code);
+            wxMessageBox(msgStr, _t("MMEX Update Check"));
         }
         return;
     }
@@ -336,35 +332,31 @@
     resp = is_stable ? wxString::Format("[%s]", resp) : resp;
     Document json_releases;
     ParseResult res = json_releases.Parse(resp.utf8_str());
-    if (!res || !json_releases.IsArray())
-    {
-        if (!bSilent)
-        {
-            const wxString& msgStr = _("Unable to check for updates!")
-                + "\n\n" + _("Error: ")
+    if (!res || !json_releases.IsArray()) {
+        if (!bSilent) {
+            const wxString& msgStr = _t("Unable to check for updates!")
+                + "\n\n" + _t("Error: ")
                 + wxString::FromUTF8(!res ? GetParseError_En(res.Code()) : json_releases.GetString());
-            wxMessageBox(msgStr, _("MMEX Update Check"));
+            wxMessageBox(msgStr, _t("MMEX Update Check"));
         }
         return;
     }
 
-    wxLogDebug("======= mmUpdate::checkUpdates =======");
-
-    bool update_stable = Model_Setting::instance().GetIntSetting("UPDATESOURCE", 0) == 0;
+    wxLogDebug("{{{ mmUpdate::checkUpdates()");
+    bool update_stable = Model_Setting::instance().getInt("UPDATESOURCE", 0) == 0;
     const int _stable = is_stable ? update_stable : 0;
     const wxString current_tag = ("v" + mmex::version::string).Lower();
-    wxString last_checked = Model_Setting::instance().GetStringSetting("UPDATE_LAST_CHECKED_VERSION", current_tag);
+    wxString last_checked = Model_Setting::instance().getString("UPDATE_LAST_CHECKED_VERSION", current_tag);
 
     bool is_update_available = false;
     Version current(current_tag);
     Version top(current_tag);
     wxString top_version;
     Version last(last_checked);
-    wxLogDebug("Current vertion: = %s", current_tag);
+    wxLogDebug("Current vertion: %s", current_tag);
     wxArrayInt new_releases;
     int i = 0;
-    for (auto& r : json_releases.GetArray())
-    {
+    for (auto& r : json_releases.GetArray()) {
         const auto tag_name = wxString::FromUTF8(r["tag_name"].GetString());
         bool prerelease = r["prerelease"].GetBool();
         if (_stable && prerelease) {
@@ -389,12 +381,11 @@
         }
         i++;
     }
+    wxLogDebug("}}}");
 
-    if (!bSilent || (is_update_available && !new_releases.empty()))
-    {
+    if (!bSilent || (is_update_available && !new_releases.empty())) {
         mmUpdateWizard* wizard = new mmUpdateWizard(frame, json_releases, new_releases, top_version);
         wizard->CenterOnParent();
         wizard->ShowModal();
     }
-
 }
